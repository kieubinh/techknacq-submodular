{
  "info": {
    "authors": [
      "Yoshimasa Tsuruoka",
      "Jun'ichi Tsujii"
    ],
    "book": "International Workshop on Parsing Technology",
    "id": "acl-W05-1514",
    "title": "Chunk Parsing Revisited",
    "url": "https://aclweb.org/anthology/W05-1514",
    "year": 2005
  },
  "references": [
    "acl-A00-2018",
    "acl-E99-1016",
    "acl-H05-1059",
    "acl-J96-1002",
    "acl-N01-1025",
    "acl-N03-1028",
    "acl-P02-1034",
    "acl-P05-1024",
    "acl-P95-1037",
    "acl-W03-1018",
    "acl-W05-1511",
    "acl-W95-0107",
    "acl-W96-0213",
    "acl-W97-0301"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "Chunk parsing is conceptually appealing but its performance has not been satisfactory for practical use.",
        "In this paper we show that chunk parsing can perform significantly better than previously reported by using a simple sliding-window method and maximum entropy classifiers for phrase recognition in each level of chunking.",
        "Experimental results with the Penn Treebank corpus show that our chunk parser can give high-precision parsing outputs with very high speed (14 msec/sentence).",
        "We also present a parsing method for searching the best parse by considering the probabilities output by the maximum entropy classifiers, and show that the search method can further improve the parsing accuracy."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "Chunk parsing (Tjong Kim Sang, 2001; Brants, 1999) is a simple parsing strategy both in implementation and concept.",
        "The parser first performs chunking by identifying base phrases, and convert the identified phrases to non-terminal symbols.",
        "The parser again performs chunking on the updated sequence and convert the newly recognized phrases into non-terminal symbols.",
        "The parser repeats this procedure until there are no phrases to be chunked.",
        "After finishing these chunking processes, we can reconstruct the complete parse tree of the sentence from the chunking results.",
        "Although the conceptual simplicity of chunk parsing is appealing, satisfactory performance for practical use has not yet been achieved with this parsing strategy.",
        "Sang achieved an f-score of 80.49 on the Penn Treebank by using the IOB tagging method for each level of chunking (Tjong Kim Sang, 2001).",
        "However, there is a very large gap between their performance and that of widely-used practical parsers (Charniak, 2000; Collins, 1999).",
        "The performance of chunk parsing is heavily dependent on the performance of phrase recognition in each level of chunking.",
        "We show in this paper that the chunk parsing strategy is indeed appealing in that it can give considerably better performance than previously reported by using a different approach for phrase recognition and that it enables us to build a very fast parser that gives high-precision outputs.",
        "This advantage could open up the possibility of using full parsers for large-scale information extraction from the Web corpus and real-time information extraction where the system needs to analyze the documents provided by the users on runtime.",
        "This paper is organized as follows.",
        "Section 2 introduces the overall chunk parsing strategy employed in this work.",
        "Section 3 describes the sliding-window based method for identifying chunks.",
        "Two filtering methods to reduce the computational cost are presented in sections 4 and 5.",
        "Section 6 explains the maximum entropy classifier and the feature set.",
        "Section 7 describes methods for searching the best parse.",
        "Experimental results on the Penn Treebank corpus are given in Section 8.",
        "Section 10 offers some concluding remarks.",
        "volume was ounces ."
      ]
    },
    {
      "heading": "2 Chunk Parsing",
      "text": [
        "For the overall strategy of chunk parsing, we follow the method proposed by Sang (Tjong Kim Sang, 2001).",
        "Figures 1 to 4 show an example of chunk parsing.",
        "In the first iteration, the chunker identifies two base phrases, (NP Estimated volume) and (QP 2.4 million), and replaces each phrase with its non-terminal symbol and head.",
        "The head word is identified by using the head-percolation table (Magerman, 1995).",
        "In the second iteration, the chunker identifies (NP a light million ounces) and converts this phrase into NP.",
        "This chunking procedure is repeated until the whole sentence is chunked at the fourth iteration, and the full parse tree is easily recovered from the chunking history.",
        "This parsing strategy converts the problem of full parsing into smaller and simpler problems, namely, chunking, where we only need to recognize flat structures (base phrases).",
        "Sang used the IOB tagging method proposed by Ramshow(Ramshaw and Marcus, 1995) and memory-based learning for each level of chunking and achieved an f-score of 80.49 on the Penn Treebank corpus."
      ]
    },
    {
      "heading": "3 Chunking with a sliding-window approach",
      "text": [
        "The performance of chunk parsing heavily depends on the performance of each level of chunking.",
        "The popular approach to this shallow parsing is to convert the problem into a tagging task and use a variety of machine learning techniques that have been developed for sequence labeling problems such as Hidden Markov Models, sequential classification with SVMs (Kudo and Matsumoto, 2001), and Conditional Random Fields (Sha and Pereira, 2003).",
        "One of our claims in this paper is that we should not convert the chunking problem into a tagging task.",
        "Instead, we use a classical sliding-window method for chunking, where we consider all sub-sequences as phrase candidates and classify them with a machine learning algorithm.",
        "Suppose, for example, we are about to perform chunking on the sequence in Figure 4.",
        "NP-volume VBD-was .-.",
        "We consider the following sub sequences as the phrase candidates in this level of chunking.",
        "1.",
        "(NP-volume) VBD-was .-.",
        "2.",
        "NP-volume (VBD-was) .-.",
        "3.",
        "NP-volume VBD-was (.-.)",
        "4.",
        "(NP-volume VBD-was) .-.",
        "5.",
        "NP-volume (VBD-was .-.)",
        "6.",
        "(NP-volume VBD-was.-.)",
        "The merit of taking the sliding window approach is that we can make use of a richer set of features on recognizing a phrase than in the sequential labeling",
        "approach.",
        "We can define arbitrary features on the target candidate (e.g. the whole sequence of non-terminal symbols of the target) and the surrounding context, which are, in general, not available in sequential labeling approaches.",
        "We should mention here that there are some other modeling methods for sequence labeling which allow us to define arbitrary features on the target phrase.",
        "Semi-markov conditional random fields (Semi-CRFs) are one of such modeling methods (Sarawagi and Cohen, 2004).",
        "Semi-CRFs could give better performance than the sliding-window approach because they can incorporate features on other phrase candidates on the same level of chunking.",
        "However, they require additional computational resources for training and parsing, and the use of Semi-CRFs is left for future work.",
        "The biggest disadvantage of the sliding window approach is the cost for training and parsing.",
        "Since there are phrase candidates when the length of the sequence is , a naive application of machine learning easily leads to prohibitive consumption of memory and time.",
        "In order to reduce the number of phrase candidates to be considered by machine learning, we introduce two filtering phases into training and parsing.",
        "One is done by a rule dictionary.",
        "The other is done by a naive Bayes classifier."
      ]
    },
    {
      "heading": "4 Filtering with the CFG Rule Dictionary",
      "text": [
        "We use an idea that is similar to the method proposed by Ratnaparkhi (Ratnaparkhi, 1996) for part-of-speech tagging.",
        "They used a Tag Dictionary, with which the tagger considers only the tag-word pairs that appear in the training sentences as the candidate tags.",
        "A similar method can be used for reducing the number of phrase candidates.",
        "We first construct a rule dictionary consisting of all the CFG rules used in the training data.",
        "In both training and parsing, we filter out all the sub-sequences that do not match any of the entry in the dictionary."
      ]
    },
    {
      "heading": "4.1 Normalization",
      "text": [
        "The rules used in the training data do not cover all the rules in unseen sentences.",
        "Therefore, if we take a naive filtering method using the rule dictionary, we",
        "substantially lose recall in parsing unseen data.",
        "To alleviate the problem of the coverage of rules, we conduct normalization of the rules.",
        "We first convert preterminal symbols into equivalent sets using the conversion table provided in Table 1.",
        "This conversion reduces the sparseness of the rules.",
        "We further normalize the Right-Hand-Side (RHS) of the rules with the following heuristics.",
        "“X CC X” is converted to “X”.",
        "“X, X” is converted to “X”.",
        "Figure 5 shows the effectiveness of this normalization method.",
        "The figure illustrates how the number of rules increases in the rule dictionary as we add training sentences.",
        "Without the normalization, the number of rules continues to grow rapidly even when the entire training set is read.",
        "The normalization methods reduce the growing rate, which considerably alleviates the sparseness problem (i.e. the problems of unknown rules)."
      ]
    },
    {
      "heading": "5 Filtering with the Naive Bayes classifier",
      "text": [
        "Although the use of the rule dictionary significantly reduced the number of phrase candidates, we still found it difficult to train the parser using the entire training set when we used a rich set of features.",
        "To further reduce the cost required for training and parsing, we propose to use a naive Bayes classifier for filtering the candidates.",
        "A naive Bayes classifier is simple and requires little storage and computational cost.",
        "We construct a binary naive Bayes classifier for each phrase type using the entire training data.",
        "We considered the following information as the features.",
        "The Right-Hand-Side (RHS) of the CFG rule The left-adjacent nonterminal symbol.",
        "The right-adjacent nonterminal symbol.",
        "By assuming the conditional independence among the features, we can compute the probability for filtering as follows: where is a binary output indicating whether the candidate is a phrase of the target type or not, is the RHS of the CFG rule, is the symbol on the left, and is the symbol on the right.",
        "We used the Laplace smoothing method for computing each probability.",
        "Note that the information about the result of the rule application, i.e., the LHS symbol, is considered in this filtering scheme because different naive Bayes classifiers are used for different LHS symbols (phrase types).",
        "Table 2 shows the filtering performance in training with sections 02-21 on the Penn Treebank.",
        "We set the threshold probability for filtering to be 0.0001 for the experiments reported in this paper.",
        "The naive Bayes classifiers effectively reduced the number of candidates with little positive samples that were wrongly filtered out."
      ]
    },
    {
      "heading": "6 Phrase Recognition with a Maximum Entropy Classifier",
      "text": [
        "For the candidates which are not filtered out in the above two phases, we perform classification with maximum entropy classifiers (Berger et al., 1996).",
        "We construct a binary classifier for each type of phrases using the entire training set.",
        "The training samples for maximum entropy consist of the phrase candidates that have not been filtered out by the CFG rule dictionary and the naive Bayes classifier.",
        "One of the merits of using a maximum entropy classifier is that we can obtain a probability from the classifier in each decision.",
        "The probability of each decision represents how likely the candidate is a correct chunk.",
        "We accept a chunk only when the probability is larger than the predefined threshold.",
        "With this thresholding scheme, we can control the trade-off between precision and recall by changing the threshold value.",
        "Regularization is important in maximum entropy modeling to avoid overfitting to the training data.",
        "For this purpose, we use the maximum entropy modeling with inequality constraints (Kazama and Tsujii, 2003).",
        "This modeling has one parameter to tune as in Gaussian prior modeling.",
        "The parameter is called the width factor.",
        "We set this parameter to be 1.0 throughout the experiments.",
        "For numerical optimization, we used the Limited-Memory Variable-Metric (LMVM) algorithm (Benson and Mor´e, 2001)."
      ]
    },
    {
      "heading": "6.1 Features",
      "text": [
        "Table 3 lists the features used in phrase recognition with the maximum entropy classifier.",
        "Information about the adjacent non-terminal symbols is important.",
        "We use unigrams, bigrams, and trigrams of the adjacent symbols.",
        "Head information is also useful.",
        "We use unigrams and bigrams of the neighboring heads.",
        "The RHS of the CFG rule is also informative.",
        "We use the features on RHSs combined with symbol features."
      ]
    },
    {
      "heading": "7 Searching the best parse",
      "text": []
    },
    {
      "heading": "7.1 Deterministic parsing",
      "text": [
        "The deterministic version of chunk parsing is straightforward.",
        "All we need to do is to repeat chunking until there are no phrases to be chunked.",
        "and the ending of the target phrase respectively.",
        "and represent the head at the beginning and the ending of the target phrase respectively.",
        "RHS represents the Right-Hand-Side of the CFG rule.",
        "If the maximum entropy classifiers give contradictory chunks in each level of chunking, we choose the chunk which has a larger probability than the other ones."
      ]
    },
    {
      "heading": "7.2 Parsing with search",
      "text": [
        "We tried to perform searching in chunk parsing in order to investigate whether or not extra effort of searching gives a gain in parsing performance.",
        "The problem is that because the modeling of our chunk parsing provides no explicit probabilistic distribution over the entire parse tree, there is no decisive way to properly evaluate the correctness of each parse.",
        "Nevertheless, we can consider the following score on each parse tree.",
        "where is the probability of a phrase given by the maximum entropy classifier.",
        "Because exploring all the possibilities of chunking requires prohibitive computational cost, we reduce the search space by focusing only on “uncertain” chunk candidates for the search.",
        "In each level of chunking, the chunker provides chunks with their probabilities.",
        "We consider only the chunks whose probabilities are within the predefined margin from .",
        "In other words, the chunks whose probabilities are larger than are considered as assured chunks, and thus are fixed when we generate alternative hypotheses of chunking.",
        "The chunks whose probabilities are smaller than are simply ignored.",
        "We generate alternative hypotheses in each level of chunking, and search the best parse in a depth-first manner."
      ]
    },
    {
      "heading": "7.3 Iterative parsing",
      "text": [
        "We also tried an iterative parsing strategy, which was successfully used in probabilistic HPSG parsing (Ninomiya et al., 2005).",
        "The parsing strategy is simple.",
        "The parser starts with a very low margin and tries to find a successful parse.",
        "If the parser cannot find a successful parse, then it increases the margin by a certain step and tries to parse with the wider margin."
      ]
    },
    {
      "heading": "8 Experiments",
      "text": [
        "We ran parsing experiments using the Penn Treebank corpus, which is widely used for evaluating parsing algorithms.",
        "The training set consists of sections 02-21.",
        "We used section 22 as the development data, with which we tuned the feature set and parameters for parsing.",
        "The test set consists of section 23 and we report the performance of the parser on the set.",
        "We used the evalb script provided by Sekine and Collins for evaluating the labeled recall/precision (LR/LP) of the parser outputs 1.",
        "All the experiments were carried out on a server having a 2.6 GHz AMD Opteron CPU and 16GB memory."
      ]
    },
    {
      "heading": "8.1 Speed and Accuracy",
      "text": [
        "First, we show the performance that achieved by deterministic parsing.",
        "Table 4 shows the results.",
        "We parsed all the sentences in section 23 using gold-standard part-of-speech (POS) tags.",
        "The trade-off between precision and recall can be controlled by changing the threshold for recognizing chunks.",
        "The fifth row gives the performance achieved with the default threshold (=0.5), where the precision is over 90% but the recall is low (75%).",
        "By lowering the threshold, we can improve the recall up to around 81% with 2% loss of precision.",
        "The best f-score is 85.06.",
        "The parsing speed is very high.",
        "The parser takes only about 34 seconds to parse the entire section.",
        "Since this section contains 2,416 sentences, the average time required for parsing one sentence is 14 msec.",
        "The parsing speed slightly dropped when we used a lower threshold (0.1).",
        "Table 5 shows the performance achieved when we used the search algorithm described in Section 7.2.",
        "We limited the maximum number of the nodes in the search space to 100 because further increase of the nodes had shown little improvement in parsing accuracy.",
        "The search algorithm significantly boosted the precisions and recalls and achieved an f-score of 86.52 when the margin was 0.3.",
        "It should be noted that we obtain no gain when we use a tight margin.",
        "We need to consider phrases having low probabilities in order for the search to work.",
        "'We used the parameter file “COLLINS.prm”",
        "One of the advantages of our chunk parser is its parsing speed.",
        "For comparison, we show the trade-off between parsing time and performance in Collins parser (Collins, 1999) and our chunk parser in Figure 6.",
        "Collins parser allows the user to change the size of the beam in parsing.",
        "We used Model-2 because it gave better performance than Model-3 when the beam size was smaller than 1000.",
        "As for the chunk parser, we controlled the trade-off by changing the maximum number of nodes in the search.",
        "The uncertainty margin for chunk recognition was 0.3.",
        "Figure 6 shows that Collins parser clearly outperforms our chunk parser when the beam size is large.",
        "However, the performance significantly drops with a smaller beam size.",
        "The break-even point is at around 200 sec (83 msec/sentence)."
      ]
    },
    {
      "heading": "8.2 Comparison with previous work",
      "text": [
        "Table 6 summarizes our parsing performance on section 23 together with the results of previous studies.",
        "In order to make the results directly comparable, we produced POS tags as the input of our parsers by using a POS tagger (Tsuruoka and Tsujii, 2005) which was trained on sections 0-18 in the WSJ corpus.",
        "The table also shows the performance achieved",
        "with the iterative parsing method presented in section 7.3.",
        "Our chunk parser achieved an f-score of 83.8 with the deterministic parsing methods using the POS-tagger tags.",
        "This f-score is better than that achieved by the previous study on chunk parsing by 3.3 points (Tjong Kim Sang, 2001).",
        "The search algorithms gave an additional 1.3 point improvement.",
        "Finally, the iterative parsing method achieved an f-score of 85.9.",
        "Although our chunk parser showed considerably better performance than the previous study on chunk parsing, the performance is still significantly lower than those achieved by state-of-the-art parsers."
      ]
    },
    {
      "heading": "9 Discussion",
      "text": [
        "There is a number of possible improvements in our chunk parser.",
        "We used a rule dictionary to reduce the cost required for training and parsing.",
        "However, the use of the rule dictionary makes the parser fail to identify a correct phrase if the phrase is not contained in the rule dictionary.",
        "Although we applied some normalization techniques in order to alleviate this problem, we have not completely solved the problem.",
        "Figure 5 indicates that still we will face unknown rules even when we have constructed the rule dictionary using the whole training data (note that the dotted line does not saturate).",
        "Additional feature sets for the maximum entropy classifiers could improve the performance.",
        "The bottom-up parsing strategy allows us to use information about sub-trees that have already been constructed.",
        "We thus do not need to restrict ourselves to use only head-information of the partial parses.",
        "Since many researchers have reported that information on partial parse trees plays an important role for achieving high performance (Bod, 1992; Collins and Duffy, 2002; Kudo et al., 2005), we expect that additional features will improve the performance of chunk parsing.",
        "Also, the methods for searching the best parse presented in sections 7.2 and 7.3 have much room for improvement.",
        "the search method does not have the device to avoid repetitive computations on the same nonterminal sequence in parsing.",
        "A chart-like structure which effectively stores the partial parse results could enable the parser to explore a broader search space and produce better parses.",
        "Our chunk parser exhibited a considerable improvement in parsing accuracy over the previous study on chunk parsing.",
        "However, the reason is not completely clear.",
        "We believe that the sliding window approach, which enabled us to exploit a richer set of features than the so-called IOB approach, was the main contributer of the better performance.",
        "However, the combination of the IOB approach and a state-of-the-art machine learning algorithm such as support vector machines could produce a similar level of performance.",
        "In our preliminary experiments, the IOB tagging method with maximum entropy markov models has not yet achieved a comparable performance to the sliding window method."
      ]
    },
    {
      "heading": "10 Conclusion",
      "text": [
        "In this paper we have shown that chunk parsing can perform significantly better than previously reported by using a simple sliding-window method and maximum entropy classifiers in each level of chunking.",
        "Experimental results on the Penn Treebank corpus show that our chunk parser can give high-precision parsing outputs with very high speed (14 msec/sentence).",
        "We also show that searching can improve the performance and the f-score reaches 85.9.",
        "Although there is still a large gap between the accuracy of our chunk parser and the state-of-the-art, our parser can produce better f-scores than a widely-used parser when the parsing speed is really needed.",
        "This could open up the possibility of using full-parsing for large-scale information extraction."
      ]
    }
  ]
}
