{
  "info": {
    "authors": [
      "Junji Tomita",
      "Stephen Soderland",
      "Oren Etzioni"
    ],
    "book": "Workshop on Adaptive Text Extraction and Mining ATEM",
    "id": "acl-W06-2208",
    "title": "Expanding the Recall of Relation Extraction by Bootstrapping",
    "url": "https://aclweb.org/anthology/W06-2208",
    "year": 2006
  },
  "references": [
    "acl-H05-1056",
    "acl-P02-1006",
    "acl-P05-1052",
    "acl-W03-0430",
    "acl-W99-0613"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "Most works on relation extraction assume considerable human effort for making an annotated corpus or for knowledge engineering.",
        "Generic patterns employed in KnowItAll achieve unsupervised, high-precision extraction, but often result in low recall.",
        "This paper compares two bootstrapping methods to expand recall that start with automatically extracted seeds by KnowItAll.",
        "The first method is string pattern learning, which learns string contexts adjacent to a seed tuple.",
        "The second method learns less restrictive patterns that include bags of words and relation-specific named entity tags.",
        "Both methods improve the recall of the generic pattern method.",
        "In particular, the less restrictive pattern learning method can achieve a 250% increase in recall at 0.87 precision, compared to the generic pattern method."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "Relation extraction is a task to extract tuples of entities that satisfy a given relation from textual documents.",
        "Examples of relations include CeoOf(Company, Ceo) and Acquisition(Organization, Organization).",
        "There has been much work on relation extraction; most of it employs knowledge engineering or supervised machine learning approaches (Feldman et al., 2002; Zhao and Grishman, 2005).",
        "Both approaches are labor intensive.",
        "We begin with a baseline information extraction system, KnowItAll (Etzioni et al., 2005), that does unsupervised information extraction at Web scale.",
        "KnowItAll uses a set of generic extraction patterns, and automatically instantiates rules by combining these patterns with user supplied relation labels.",
        "For example, KnowItAll has patterns for a generic “of” relation: NP 1 ’s <relation> , NP2 NP2, <relation> of NP1 where NP1 and NP2 are simple noun phrases that extract values of argument1 and argument2 of a relation, and <relation> is a user-supplied string associated with the relation.",
        "The rules may also constrain NP 1 and NP2 to be proper nouns.",
        "If a user supplies the relation labels “ceo” and “chief executive officer” for the relation CeoOf(Company, Ceo), KnowItAll inserts these labels into the generic patterns shown above, to create 4 extraction rules: NP 1 ’s ceo , NP2 NP1 ’s chief executive officer, NP2 NP2, ceo of NP 1 NP2, chief executive officer of NP1 The same generic patterns with different labels can also produce extraction rules for a May-orOf relation or an InventorOf relation.",
        "These rules have alternating context strings (exact string match) and extraction slots (typically an NP or head of an NP).",
        "This can produce rules with high precision, but low recall, due to the wide variety of contexts describing a relation.",
        "This paper looks at ways to enhance recall over this baseline system while maintaining high precision.",
        "To enhance recall, we employ bootstrapping techniques which start with seed tuples, i.e. the most frequently extracted tuples by the baseline system.",
        "The first method represents rules with three context strings of tokens immediately adjacent to the extracted arguments: a left context,",
        "middle context, and right context.",
        "These are induced from context strings found adjacent to seed tuples.",
        "The second method uses a less restrictive pattern representation such as bag of words, similar to that of SnowBall(Agichtein, 2005).",
        "SnowBall is a semi-supervised relation extraction system.",
        "The input of Snowball is a few hand labeled correct seed tuples for a relation (e.g. <Microsoft, Steve Ballmer> for CeoOf relation).",
        "SnowBall clusters the bag of words representations generated from the context strings adjacent to each seed tuple, and generates rules from them.",
        "It calculates the confidence of candidate tuples and the rules iteratively by using an EM-algorithm.",
        "Because it can extract any tuple whose entities co-occur within a window, the recall can be higher than the string pattern learning method.",
        "The main disadvantage of SnowBall or a method which employs less restrictive patterns is that it requires Named Entity Recognizer (NER).",
        "We introduce Relation-dependent NER (Relation NER), which trains an off-the-shelf supervised NER based on CRF(Lafferty et al., 2001) with bootstrapping.",
        "This learns relation-specific NE tags, and we present a method to use these tags for relation extraction.",
        "This paper compares the following two bootstrapping strategies.",
        "SPL: a simple string pattern learning method.",
        "It learns string patterns adjacent to a seed tuple.",
        "LRPL: a less restrictive pattern learning method.",
        "It learns a variety of bag of words patterns, after training a Relation NER.",
        "Both methods are completely self-supervised extensions to the unsupervised KnowItAll.",
        "A user supplies KnowItAll with one or more relation labels to be applied to one or more generic extraction patterns.",
        "No further tagging or manual selection of seeds is required.",
        "Each of the bootstrapping methods uses seeds that are automatically selected from the output of the baseline KnowItAll system.",
        "The results show that both bootstrapping methods improve the recall of the baseline system.",
        "The two methods have comparable results, with LRPL outperforms SPL for some relations and SPL outperforms LRPL for other relations.",
        "The rest of the paper is organized as follows.",
        "Section 2 and 3 describe SPL and LRPL respectively.",
        "Section 4 reports on our experiments, and section 5 and 6 describe related works and conclusions."
      ]
    },
    {
      "heading": "2 String Pattern Learning (SPL)",
      "text": [
        "Both SPL and LRPL start with seed tuples that were extracted by the baseline KnowItAll system, with extraction frequency at or above a threshold (set to 2 in these experiments).",
        "In these experiments, we downloaded a set of sentences from the Web that contained an occurrence of at least one relation label and used this as our reservoir of unlabeled training and test sentences.",
        "We created a set of positive training sentences from those sentences that contained both argument values of a seed tuple.",
        "SPL employs a method similar to that of (Downey et al., 2004).",
        "It generates candidate extraction rules with a prefix context, a middle context, and a right context.",
        "The prefix is zero to Lside tokens immediately to the left of extracted argument1, the middle context is all tokens between argument1 and argument2, and the right context of zero to Lside tokens immediately to the right of argument2.",
        "It discards patterns with more than Laid intervening tokens or without a relation label.",
        "SPL tabulates the occurrence of such patterns in the set of positive training sentences (all sentences from the reservoir that contain both argument values from a seed tuple in either order), and also tabulates their occurrence in negative training sentences.",
        "The negative training are sentences that have one argument value from a seed tuple and a nearest simple NP in place of the other argument value.",
        "This idea is based on that of (Ravichan-dran and Hovy, 2002) for a QA system.",
        "SPL learns a possibly large set of strict extraction rules that have alternating context strings and extraction slots, with no gaps or wildcards in the rules.",
        "SPL selects the best patterns as follows:",
        "1.",
        "Groups the context strings that have the exact same middle string.",
        "2.",
        "Selects the best pattern having the largest pattern score, PS, for each group of context strings having the same middle string.",
        "3.",
        "Selects the patterns having PS greater than Tpattern.",
        "where Spo,itive (p) is a set of sentences that match pattern p and include both argument values of a seed tuple.",
        "Snegative (p) is a set of sentences that match p and include just one argument value of a seed tuple (e.g. just a company or a person for CeoOf).",
        "a is a constant for smoothing."
      ]
    },
    {
      "heading": "3 Less Restrictive Pattern Learning (LRPL)",
      "text": [
        "LRPL uses a more flexible rule representation than SPL.",
        "As before, the rules are based on a window of tokens to the left of the first argument, a window of middle tokens, and a window of tokens to the right of the second argument.",
        "Rather than using exact string match on a simple sequence of tokens, LRPL uses a combination of bag of words and immediately adjacent token.",
        "The left context is based on a window of L,ide tokens immediately to the left of argument1.",
        "It has two sets of tokens: the token immediately to the left and a bag of words for the remaining tokens.",
        "Each of these sets may have zero or more tokens.",
        "The middle and right contexts are similarly defined.",
        "We call this representation extended bag of words.",
        "Here is an example of how LRPL represents the context of a training sentence with window size set to 4.",
        "“Yesterday , <Arg2>Steve Ballmer</Arg2>, the Chief Executive Officer of <Arg1>Microsoft</Arg1> said that he is ...”.",
        "order: arg2_arg1 values: Steve Ballmer, Microsoft L: {yesterday) {,) M: {,) {chief executive officer the) {of) R: {said) {he is that) Some of the tokens in these bags of words may be dropped in merging this with patterns from other training sentences.",
        "Each rule also has a confidence score, learned from EM-estimation.",
        "We experimented with simply using three bags of words as in SnowBall, but found that precision was increased when we distinguished the tokens immediately adjacent to argument values from the other tokens in the left, middle, and right bag of words.",
        "Less restrictive patterns require a Named Entity Recognizer (NER), because the patterns can not extract candidate entities by themselves1.",
        "LRPL trains a supervised NER in bootstrapping for extracting candidate entities.",
        "Figure 1 overviews LRPL.",
        "It consists of two bootstrapping modules: Relation NER and Relation Assessor.",
        "LRPL trains the Relational NER from seed tuples provided by the baseline KnowItAll system and unlabeled sentences in the reservoir.",
        "Then it does NE tagging on the sentences to learn the less restrictive rules and to extract candidate tuples.",
        "The learning and extraction steps at Relation Assessor are similar to that of SnowBall; it generates a set of rules and uses EM-estimation to compute a confidence in each rule.",
        "When these rules are applied, the system computes a probability for each tuple based on the rule confidence, the degree of match between a sentence and the rule, and the extraction frequency."
      ]
    },
    {
      "heading": "3.1 Relation dependent Named Entity Recognizer",
      "text": [
        "Relation NER leverages an off-the-shelf supervised NER, based on Conditional Random Fields (CRF).",
        "In Figure 1, TrainSentenceGenerator automatically generates training sentences from seeds and unlabeled sentences in the reservoir.",
        "TrainEn-tityRecognizer trains a CRF on the training sentences and then EntityRecognizer applies the trained CRF to all the unlabeled sentences, creating entity annotated sentences.",
        "It can extract entities whose type matches an argument type of a particular relation.",
        "The type is not explicitly specified by a user, but is automatically determined according to the seed tuples.",
        "For example, it can extract ‘City’ and ‘Mayor’ type entities for MayorOf(City, Mayor) relation.",
        "We describe CRF in brief, and then how to train it in bootstrapping."
      ]
    },
    {
      "heading": "3.1.1 Supervised Named Entity Recognizer",
      "text": [
        "Several state-of-the-art supervised NERs are based on a feature-rich probabilistic conditional classifier such as Conditional Random Fields (CRF) for sequential learning tasks(Lafferty et al., 2001; Rosenfeld et al., 2005).",
        "The input of CRF is a feature sequence X of features xy, and outputs a tag sequence T of tags ty.",
        "In the training phrase, a set of < Xi, Ti > is provided, and outputs a model M�� �.",
        "In the applying phase, given X, it outputs a tag sequence T by using M�� �.",
        "In the case of NE tagging, given a sequence of tokens, it automatically generates a sequence of feature sets; each set is corresponding to a token.",
        "It can incorporate any properties that can be represented as a binary feature into the model, such as words, capitalized patterns, part-of-speech tags and the existence of the word in a dictionary.",
        "It works quite well on NE tagging tasks (McCallum and Li, 2003)."
      ]
    },
    {
      "heading": "3.1.2 How to Train Supervised NER in Bootstrapping",
      "text": [
        "We use bootstrapping to train CRF for relation-specific NE tagging as follows: 1) select the sentences that include all the entity values of a seed tuple, 2) automatically mark the argument values in each sentence, and 3)train CRF on the seed marked sentences.",
        "An example of a seed marked sentence is the following:",
        "Because of redundancy, we can expect to generate a fairly large number of seed marked sentences by using a few highly frequent seed tuples.",
        "To avoid overfitting on terms from these seed tuples, we substitute the actual argument values with random characters for each training sentence, preserving capitalization patterns and number of characters in each token."
      ]
    },
    {
      "heading": "3.2 Relation Assessor",
      "text": [
        "Relation Assessor employs several SnowBall-like techniques including making rules by clustering and EM-estimation for the confidence of the rules and tuples.",
        "In Figure 1, ContextRepresentationGenerator generates extended bag of words contexts, from entity annotated sentences, and classifies the contexts into two classes: training contexts Ct�a,i,,, (if their entity values and their orders match a seed tuple) and test contexts Ct�st (otherwise).",
        "Train-ConfidenceEstimator clusters Ctra,i,,, based on the match score between contexts, and generates a rule from each cluster, that has average vectors over contexts belonging to the cluster.",
        "Given a set of generated rules R and test contexts Ct�st, Confi-denceEstimator estimates each tuple confidence in Ctest by using an EM algorithm.",
        "It also estimates the confidence of the tuples extracted by the baseline system, and outputs the merged result tuples with confidence.",
        "We describe the match score calculation method, the EM-algorithm, and the merging method in the following sub sections."
      ]
    },
    {
      "heading": "3.2.1 Match Score Calculation",
      "text": [
        "The match score (or similarity) M of two extended bag of words contexts ci, cy is calculated as the linear combination of the cosine values between the corresponding vectors.",
        "where, s is the index of left, middle, or right contexts.",
        "t is the index of left adjacent, right adjacent, or other tokens.",
        "wst is the weight corresponding to the context vector indexed by s and t. To achieve high precision, Relation Assessor uses only the entity annotated sentences that have just one entity for each argument (two entities in total) and where those entities co-occur within L,, id tokens window, and it uses at most Lsid� left and right tokens.",
        "It discards patterns without a relation label."
      ]
    },
    {
      "heading": "3.2.2 EM-estimation for tuple and rule confidence",
      "text": [
        "Several rules generated from only positive evidence result in low precision (e.g. rule “of” for MayorOf relation generated from “Rudolph Giu-liani of New York”).",
        "This problem can be improved by estimating the rule confidence by the following EM-algorithm.",
        "1.",
        "For each ciy in Ct�st, identifies the best match rule r* (ciy ), based on the match score between ciy and each rule r. ciy is the jth context that includes tuple ti.",
        "2.",
        "Initializes seed tuple confidence, T C (ts) = 1 for all ts, where ts is a seed tuple.",
        "3.",
        "Calculates tuple confidence, TC, and rule confidence, RC, by using EM-algorithm.",
        "E and M stages are iterated several times.",
        "where",
        "This algorithm assigns a high confidence to the rules that frequently co-occur with only high confident tuples.",
        "It also assigns a high confidence to the tuples that frequently co-occur with the contexts that match high confidence rules.",
        "When it merges the tuples extracted by the baseline system, the algorithm uses the following constant value for any context that matches a baseline pattern.",
        "where cib denotes the context of tuple ti that matches a baseline pattern, and rb is any baseline pattern.",
        "With this calculation, the confidence of any tuple extracted by a baseline pattern is always greater than or equal to that of any tuple that is extracted by the learned rules and has the same frequency."
      ]
    },
    {
      "heading": "4 Evaluation",
      "text": [
        "The focus of this paper is the comparison between bootstrapping strategies for extraction, i.e., string pattern learning and less restrictive pattern learning having Relation NER.",
        "Therefore, we first compare these two bootstrapping methods with the baseline system.",
        "Furthermore, we also compare Relation NER with a generic NER, which is trained on a preexisting hand annotated corpus."
      ]
    },
    {
      "heading": "4.1 Relation Extraction Task",
      "text": [
        "We compare SPL and LRPL with the baseline system on 5 relations: Acquisition, Merger, CeoOf, MayorOf, and InventorOf.",
        "We downloaded about from 100,000 to 220,000 sentences for each of these relations from the Web, which contained a relation label (e.g. “acquisition”, “acquired”, “acquiring” or “merger”, “merged”, “merging”).",
        "We used all the tuples that co-occur with baseline patterns at least twice as seeds.",
        "The numbers of seeds are between 33 (Acquisition) and 289 (CeoOf).",
        "For consistency, SPL employs the same assessment methods with LRPL.",
        "It uses the EM algorithm in Section 3.2.2 and merges the tuples extracted by the baseline system.",
        "In the EM algorithm, the match score M(p, t) between a learned pattern p and a tuple t is set to a constant �match.",
        "LRPL uses MinorThird (Cohen, 2004) implementation of CRF for Relation NER.",
        "The features used in the experiments are the lower-case word, capitalize pattern, part of speech tag of the current and +-2 tokens, and the previous state (tag) referring to (Minkov et al., 2005; Rosenfeld et al., 2005).",
        "The parameters used for SPL and LRPL are experimentally set as follows: Tpattern = 0.5, Tmatch = 0.6, Lmid = 5, Lside = 3, a = 3,",
        "Figure 2-6 show the recall-precision curves.",
        "We use the number of correct extractions to serve as a surrogate for recall, since computing actual recall would require extensive manual inspection of the large data sets.",
        "Compared to the the baseline system, both bootstrapping methods increases the number of correct extractions for almost all the relations at around 80% precision.",
        "For MayorOf relation, LRPL achieves 250% increase in recall at 0.87 precision, while SPL’s precision is less than the baseline system.",
        "This is because SPL can not distinguish correct tuples from the error tuples that",
        "co-occur with a short strict pattern, and that have a wrong entity type value.",
        "An example of the error tuples extracted by SPL is the following:",
        "The improvement of Acquisition and Merger relations is small for both methods; the rules learned for Merger and Acquisition made erroneous extractions of mergers of geopolitical entities, acquisition of data, ball players, languages or diseases.",
        "For InventorOf relation, LRPL does not work well.",
        "This is because ‘Invention’ is not a proper noun phrase, but a noun phrase.",
        "A noun phrase includes not only nouns, but a particle, a determiner, and adjectives in addition to non-capitalized nouns.",
        "Our Relation NER was unable to detect regularities in the capitalization pattern and word length of invention phrases.",
        "At around 60% precision, SPL achieves higher recall for CeoOf and MayorOf relations, in contrast, LRPL achieves higher recall for Acquisition and Merger.",
        "The reason can be that nominal style relations (CeoOf and MayorOf) have a smaller syntactic variety for describing them.",
        "Therefore, learned string patterns are enough generic to extract many candidate tuples."
      ]
    },
    {
      "heading": "4.2 Entity Recognition Task",
      "text": [
        "Generic types such as person, organization, and location cover many useful relations.",
        "One might expect that NER trained for these generic types, can be used for different relations without modifications, instead of creating a Relation NER.",
        "To show the effectiveness of Relation NER, we compare Relation NER with a generic NER trained on a preexistent hand annotated corpus for generic types; we used MUC7 train, dry-run test, and formal-test documents(Table 2) (Chin-chor, 1997).",
        "We also incorporate the following additional knowledge into the CRF’s features referring to (Minkov et al., 2005; Rosenfeld et al.,",
        "2005): first and last names, city names, corp designators, company words (such as “technology”), and small size lists of person title (such as “mr.”) and capitalized common words (such as “Monday”).",
        "The base features for both methods are the same as the ones described in Section 4.1.",
        "The ideal entity recognizer for relation extraction is recognizing only entities that have an argument type for a particular relation.",
        "Therefore, a generic test set such as MUC7 Named Entity Recognition Task can not be used for our evaluation.",
        "We randomly selected 200 test sentences from our dataset that had a pair of correct entities for CeoOf or MayorOf relations, and were not used as training for the Relation NER.",
        "We measured the accuracy as follows.",
        "where, Etrue,arg is a set of true entities that have an argument type of a target relation.",
        "Eextracted is a set of entities extracted as an argument.",
        "Because Relation NER is trained for argument types (such as ‘Mayor’), and the generic NER is trained for generic types (such as person), this calculation is in favor of Relation NER.",
        "For fair comparison, we also use the following measure.",
        "where, Etrue,generic is a set of true entities that have a generic type 2.",
        "Table 3 shows that the Relation NER consistently works better than the generic NER, even when additional knowledge much improved the recall.",
        "This suggests that training a Relation NER for each particular relation in bootstrapping is better approach than using a NER trained for generic types."
      ]
    },
    {
      "heading": "5 Related Work",
      "text": [
        "SPL is a similar approach to DIPRE (Brin, 1998) DIPRE uses a predefined simple regular expression to identify argument values.",
        "Therefore, it can also suffer from the type error problem described above.",
        "LRPL avoids this problem by using the Relation NER.",
        "LRPL is similar to SnowBall(Agichtein, 2005), which employs a generic NER, and reported that most errors come from NER errors.",
        "Because our evaluation showed that Relation NER works better than generic NER, a combination of Relation NER and SnowBall can make a better result in other settings.",
        "3 (Collins and Singer, 1999) and (Jones, 2005) describe self-training and co-training methods for Named Entity Classification.",
        "However, the problem of NEC task, where the boundary of entities are given by NP chunker or parser, is different from NE tagging task.",
        "Because the boundary of an entity is often different from a NP boundary, the technique can not be used for our purpose; “Microsoft CEO Steve Ballmer” is tagged as a single noun phrase."
      ]
    },
    {
      "heading": "6 Conclusion",
      "text": [
        "This paper describes two bootstrapping strategies, SPL, which learns simple string patterns, and LRPL, which trains Relation NER and uses it with less restrictive patterns.",
        "Evaluations showed both",
        "methods enhance the recall of the baseline system for almost all the relations.",
        "For some relations, SPL and LRPL have comparable recall and precision.",
        "For InventorOf, where the invention is not a named entity, SPL performed better, because its patterns are based on noun phrases rather than named entities.",
        "LRPL works better than SPL for MayorOf relation by avoiding several errors caused by the tuples that co-occur with a short strict context, but have a wrong type entity value.",
        "Evaluations also showed that Relation NER works better than the generic NER trained on MUC7 corpus with additional dictionaries."
      ]
    },
    {
      "heading": "Acknowledgements",
      "text": [
        "This work was done while the first author was a visiting Scholar at the University of Washington.",
        "The work was carried out at the University’s Turing Center and was supported in part by NSF grant IIS-0312988, DARPA contract NBCHD030010, ONR grant N00014-02-1-0324, and a gift from Google.",
        "We would like to thank Dr. Eugene Agichtein for informing us the technical details of SnowBall, and Prof. Ronen Feldman for a helpful discussion."
      ]
    }
  ]
}
