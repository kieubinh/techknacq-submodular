{
  "info": {
    "authors": [
      "Yi Yang",
      "Alexander Yates",
      "Doug Downey"
    ],
    "book": "NAACL",
    "id": "acl-N13-1065",
    "title": "Overcoming the Memory Bottleneck in Distributed Training of Latent Variable Models of Text",
    "url": "https://aclweb.org/anthology/N13-1065",
    "year": 2013
  },
  "references": [
    "acl-N10-1020",
    "acl-N10-1026",
    "acl-P07-1088",
    "acl-P09-1056",
    "acl-W10-2604"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "Large unsupervised latent variable models (LVMs) of text, such as Latent Dirichlet Allocation models or Hidden Markov Models (HMMs), are constructed using parallel training algorithms on computational clusters.",
        "The memory required to hold LVM parameters forms a bottleneck in training more powerful models.",
        "In this paper, we show how the memory required for parallel LVM training can be reduced by partitioning the training corpus to minimize the number of unique words on any computational node.",
        "We present a greedy document partitioning technique for the task.",
        "For large corpora, our approach reduces memory consumption by over 50%, and trains the same models up to three times faster, when compared with existing approaches for parallel LVM training."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "Unsupervised latent variable models (LVMs) of text are utilized extensively in natural language processing (Griffiths and Steyvers, 2004; Ritter et al., 2010; Downey et al., 2007; Huang and Yates, 2009; Li and McCallum, 2005).",
        "LVM techniques include Latent Dirichlet Allocation (LDA) (Blei et al., 2003), Hidden Markov Models (HMMs) (Rabiner, 1989), and Probabilistic Latent Semantic Analysis (Hofmann, 1999), among others.",
        "LVMs become more predictive as they are trained on more text.",
        "However, training LVMs on massive corpora introduces computational challenges, in terms of both time and space complexity.",
        "The time complexity of LVM training has been addressed through parallel training algorithms (Wolfe et al., 2008; Chu et al., 2006; Das et al., 2007; Newman et al., 2009; Ahmed et al., 2012; Asuncion et al., 2011), which reduce LVM training time through the use of large computational clusters.",
        "However, the memory cost for training LVMs remains a bottleneck.",
        "While LVM training makes sequential scans of the corpus (which can be stored on disk), it requires consistent random access to model parameters.",
        "Thus, the model parameters must be stored in memory on each node.",
        "Because LVMs include a multinomial distribution over words for each latent variable value, the model parameter space increases with the number of latent variable values times the vocabulary size.",
        "For large models (i.e., with many latent variable values) and large corpora (with large vocabularies), the memory required for training can exceed the limits of the commodity servers comprising modern computational clusters.",
        "Because model accuracy tends to increase with both corpus size and model size (Ahuja and Downey, 2010; Huang and Yates, 2010), training accurate language models requires that we overcome the memory bottleneck.",
        "We present a simple technique for mitigating the memory bottleneck in parallel LVM training.",
        "Existing parallelization schemes begin by partitioning the training corpus arbitrarily across computational nodes.",
        "In this paper, we show how to reduce memory footprint by instead partitioning the corpus to minimize the number of unique words on each node (and thereby minimize the number of parameters the node must store).",
        "Because corpus partitioning is a preprocessing step in parallel LVM training, our",
        "technique can be applied to reduce the memory footprint of essentially any existing LVM or training approach.",
        "The accuracy of LVM training for a fixed model size and corpus remains unchanged, but intelligent corpus partitioning allows us to train larger and typically more accurate models using the same memory capacity.",
        "While the general minimization problem we encounter is NP-hard, we develop greedy approximations that work well.",
        "In experiments with both HMM and LDA models, we show that our technique offers large advantages over existing approaches in terms of both memory footprint and execution time.",
        "On a large corpus using 50 nodes in parallel, our best partitioning method can reduce the memory required per node to less than 1/10th that when training without corpus partitioning, and to half that of a random partitioning.",
        "Further, our approach reduces the training time of an existing parallel HMM codebase by 3x.",
        "Our work includes the release of our partitioning codebase, and an associated codebase for the parallel training of HMMs.1"
      ]
    },
    {
      "heading": "2 Problem Formulation",
      "text": [
        "In a distributed LVM system, a training corpus D = {d1, d2, .",
        ".",
        ".",
        ", dN} of documents is distributed across T computational nodes.",
        "We first formalize the memory footprint on each node nt, where t = {1, ..., T}.",
        "Let Dt ?",
        "D denote the document collection on node nt, and Vt be the number of word types (i.e., the number of unique words) in Dt.",
        "Let K be the number of latent variable values in the LVM.",
        "With these quantities, we can express how many parameters must be held in memory on each computational node for training LVMs in a distributed environment.",
        "In practice, the LVM parameter space is dominated by an observation model: a conditional distribution over words given the latent variable value.",
        "Thus, the observation model includes K(Vt?",
        "1) parameters.",
        "Different LVMs include various other parameters to specify the complete model.",
        "For example, a first-order HMM includes additional distributions for the initial latent variable and latent variable transitions, for a total of K(Vt ?",
        "1) + K2 parameters.",
        "LDA, on the other hand, includes just a",
        "single multinomial over the latent variables, making a total of K(Vt ?",
        "1) + K ?",
        "1 parameters.",
        "The LVM parameters comprise almost all of the memory footprint for LVM training.",
        "Further, as the examples above illustrate, the number of parameters on each node tends to vary almost linearly with Vt (in practice, Vt is typically larger than K by an order of magnitude or more).",
        "Thus, in this paper we attempt to minimize memory footprint by limiting Vt on each computational node.",
        "We assume the typical case in a distributed environment where nodes are homogeneous, and thus our goal is to partition the corpus such that the maximum vocabulary size Vmax = maxTt=1Vt on any single node is minimized.",
        "We define this task formally as follows.",
        "Definition CORPUSPART : Given a corpus of N documents D = {d1, d2, .",
        ".",
        ".",
        ", dN}, and T nodes, partition D into T subsets D1, D2, .",
        ".",
        ".",
        ", DT , such that Vmax is minimized.",
        "For illustration, consider the following small example.",
        "Let corpus C contain three short documents {c1=?I live in Chicago?, c2=?I am studying physics?, c3=?Chicago is a city in Illinois?",
        "}, and consider partitioning C into 2 non-empty subsets, i.e., T = 2.",
        "There are a total of three possibilities: ?",
        "{{c1, c2}, {c3}}.",
        "Vmax = 7 ?",
        "{{c1, c3}, {c2}}.",
        "Vmax = 8 ?",
        "{{c2, c3}, {c1}}.",
        "Vmax = 10 The decision problem version of CORPUSPART is NP-Complete, by a reduction from independent task scheduling (Zhu and Ibarra, 1999).",
        "In this paper, we develop greedy algorithms for the task that are effective in practice.",
        "We note that CORPUSPART has a submodu-lar problem structure, where greedy algorithms are often effective.",
        "Specifically, let |S |denote the vocabulary size of a set of documents S, and let S?",
        "?",
        "S. Then for any document c the following inequality holds.",
        "|S?",
        "?",
        "c |?",
        "|S?",
        "|?",
        "|S ?",
        "c |?",
        "|S| That is, adding a document c to the subset S?",
        "increases vocabulary size at least as much as adding c to S; the vocabulary size function is submodular.",
        "The CORPUSPART task thus seeks a partition of the data that minimizes the maximum of a set of submodular functions.",
        "While formal approximation",
        "guarantees exist for similar problems, to our knowledge none apply directly in our case.",
        "For example, (Krause et al., 2007) considers maximizing the minimum over a set of monotonic submodular functions, which is the opposite of our problem.",
        "The distinct task of minimizing a single submodular function has been investigated in e.g. (Iwata et al., 2001).",
        "It is important to emphasize that data partitioning is a preprocessing step, after which we can employ precisely the same Expectation-Maximization (EM), sampling, or variational parameter learning techniques as utilized in previous work.",
        "In fact, for popular learning techniques including EM for HMMs (Rabiner, 1989) and variational EM for LDA (Wolfe et al., 2008), it can be shown that the parameter updates are independent of how the corpus is partitioned.",
        "Thus, for those approaches our partitioning is guaranteed to produce the same models as any other partitioning method; i.e., model accuracy is unchanged.",
        "Lastly, we note that we target synchronized LVM training, in which all nodes must finish each training iteration before any node can proceed to the next iteration.",
        "Thus, we desire balanced partitions to help ensure iterations have similar durations across nodes.",
        "We achieve this in practice by constraining each node to hold at most 3% more than Z/T tokens, where Z is the corpus size in tokens."
      ]
    },
    {
      "heading": "3 Corpus Partitioning Methods",
      "text": [
        "Our high-level greedy partitioning framework is given in Algorithm 1.",
        "The algorithm requires answering two key questions: How do we select which document to allocate next?",
        "And, given a document, on which node should it be placed?",
        "We present alternative approaches to each question below.",
        "until all documents are allocated A baseline partitioning method commonly used in practice simply distributes documents across nodes randomly.",
        "As our experiments show, this baseline approach can be improved significantly.",
        "In the following, set operations are interpreted as applying to the set of unique words in a document.",
        "For example, |d?Dt |indicates the number of unique word types in node nt after document d is added to its document collection Dt."
      ]
    },
    {
      "heading": "3.1 Document Selection",
      "text": [
        "For document selection, previous work (Zhu and Ibarra, 1999) proposed a heuristic DISSIMILARITY method that selects the document d that is least similar to any of the node document collections Dt, where the similarity of d and Dt is calculated as: Sim(d,DT ) = |d ?",
        "Dt|.",
        "The intuition behind the heuristic is that dissimilar documents are more likely to impact future node selection decisions.",
        "Assigning the dissimilar documents earlier helps ensure that more greedy node selections are informed by these impactful assignments.",
        "However, DISSIMILARITY has a prohibitive time complexity of O(TN2), because we must compare T nodes to an order of N documents for a total of N iterations.",
        "To scale to large corpora, we propose a novel BATCH DISSIMILARITY method.",
        "In BATCH DISSIMILARITY, we select the top L most dissimilar documents in each iteration, instead of just the most dissimilar.",
        "Importantly, L is altered dynamically: we begin with L = 1, and then increase L by one for iteration i+1 iff using a batch size of L+1 in iteration i would not have altered the algorithm's ultimate selections (that is, if the most dissimilar document in iteration i + 1 is in fact the L + 1st most dissimilar in iteration i).",
        "In the ideal case where L is incremented each iteration, BATCH DISSIMILAR will have a reduced time complexity of O(TN3/2).",
        "Our experiments revealed two key findings regarding document selection.",
        "First, BATCH DISSIMILARITY provides a memory reduction within 0.1% of that of DISSIMILARITY (on small corpora where running DISSIMILARITY is tractable), but partitions an estimated 2,600 times faster on our largest evaluation corpus.",
        "Second, we found that document selection has relatively minor impact on memory footprint, providing a roughly 5% incremental benefit over random document selection.",
        "Thus, although",
        "we utilize BATCH DISSIMILARITY in the final system we evaluate, simple random document selection may be preferable in some practical settings."
      ]
    },
    {
      "heading": "3.2 Node Selection",
      "text": [
        "Given a selected document d, the MINIMUM method proposed in previous work selects node nt having the minimum number of word types after allocation of d to nt (Zhu and Ibarra, 1999).",
        "That is, MINIMUM minimizes |d ?Dt|.",
        "Here, we introduce an alternative node selection method JACCARD that selects node nt maximizing the Jaccard index, defined here as |d ?Dt|/|d ?Dt|.",
        "Our experiments showed that our JACCARD node selection method outperforms the MINIMUM selection method.",
        "In fact, for the largest corpora used in our experiments, JACCARD offered an 12.9% larger reduction in Vmax than MINIMUM.",
        "Our proposed system, referred to as BJAC, utilizes our best-performing strategies for document selection (BATCH DISSIMILARITY) and node selection (JACCARD)."
      ]
    },
    {
      "heading": "4 Evaluation of Partitioning Methods",
      "text": [
        "We evaluate our partitioning method against the baseline and Z&I, the best performing scalable method from previous work, which uses random document selection and MINIMUM node selection (Zhu and Ibarra, 1999).",
        "We evaluate on three corpora (Table 1): the Brown corpus of newswire text (Kucera and Francis, 1967), the Reuters Corpus Volume1 (RCV1) (Lewis et al., 2004), and a larger Web-Sent corpus of sentences gathered from the Web",
        "of documents, V = # of word types, Z = # of tokens.",
        "We treat each sentence as a document in the Brown and Web-Sent corpora.",
        "Table 2 shows how the maximum word type size Vmax varies for each method and corpus, for T = 50 nodes.",
        "BJAC significantly decreases Vmax over the",
        "partitioning method, for each corpus.",
        "For the larger corpora, BJAC reduces Vmax by over 50% compared to the baseline, and by 23% compared to Z&I. random partitioning baseline typically employed in practice.",
        "Furthermore, the advantage of BJAC over the baseline is maintained as more computational nodes are utilized, as illustrated in Figure 1.",
        "BJac reduces Vmax by a larger factor over the baseline as more computational nodes are employed.",
        "computational nodes increases (Web-Sent corpus).",
        "With 100 nodes, BJac's Vmax is half that of the baseline, and 1/10th of the full corpus vocabulary size.",
        "5 Evaluation in Parallel LVM Systems We now turn to an evaluation of our corpus partitioning within parallel LVM training systems.",
        "Table 3 shows the memory footprint required for HMM and LDA training for three different partitioning methods.",
        "We compare BJAC with the random partitioning baseline, Zhu's method, and with all-words, the straightforward approach of simply storing parameters for the entire corpus vocabulary on every node (Ahuja and Downey, 2010; Asuncion et al., 2011).",
        "All-words has the same memory footprint as when training on a single node.",
        "For large corpora, BJAC reduces memory size per node by approximately a factor of two over the random baseline, and by a factor of 8-11 over all",
        "in megabytes(MB), using 50 computational nodes.",
        "Both models utilize 1000 latent variable values.",
        "words.",
        "The results demonstrate that in addition to the well-known savings in computation time offered by parallel LVM training, distributed computation also significantly reduces the memory footprint on each node.",
        "In fact, for the RCV1 corpus, BJAC reduces memory footprint to less than 1/10th that of training with all words on each computational node.",
        "We next evaluate the execution time for an iteration of model training.",
        "Here, we use a parallel implementation of HMMs, and measure iteration time for training on the Web-sent corpus with 50 hidden states as the number of computational nodes varies.",
        "We compare against the random baseline and against the all-words approach utilized in an existing parallel HMM codebase (Ahuja and Downey, 2010).",
        "The results are shown in Table 4.",
        "Moving beyond the all-words method to exploit corpus partitioning reduces training iteration time, by a factor of two to three.",
        "However, differences in partitioning methods have only small effects in iteration time: BJAC has essentially the same iteration time as the random baseline in this experiment.",
        "It is also important to consider the additional time required to execute the partitioning methods themselves.",
        "However, in practice this additional time is negligible.",
        "For example, BJAC can partition the Web-sent corpus in 368 seconds, using a single computational node.",
        "By contrast, training a 200-state HMM on the same corpus requires over a hundred CPU-days.",
        "Thus, BJAC's time to partition has a negligible impact on total training time."
      ]
    },
    {
      "heading": "6 Related Work",
      "text": [
        "The CORPUSPART task has some similarities to the graph partitioning task investigated in other",
        "HMM with 50 hidden states on Web-Sent.",
        "Partitioning with BJAC outperforms all-words, which stores parameters for all word types on each node.",
        "parallelization research (Hendrickson and Kolda, 2000).",
        "However, our LVM training task differs significantly from those in which graph partitioning is typically employed.",
        "Specifically, graph partitioning tends to be used for scientific computing applications where communication is the bottleneck.",
        "The graph algorithms focus on creating balanced partitions that minimize the cut edge weight, because edge weights represent communication costs to be minimized.",
        "By contrast, in our LVM training task, memory consumption is the bottleneck and communication costs are less significant.",
        "Zhu & Ibarra (1999) present theoretical results and propose techniques for the general partitioning task we address.",
        "In contrast to that work, we focus on the case where the data to be partitioned is a large corpus of text.",
        "In this setting, we show that our heuristics partition faster and provide smaller memory footprint than those of (Zhu and Ibarra, 1999)."
      ]
    },
    {
      "heading": "7 Conclusion",
      "text": [
        "We presented a general corpus partitioning technique which can be exploited in LVM training to reduce memory footprint and training time.",
        "We evaluated the partitioning method's performance, and showed that for large corpora, our approach reduces memory consumption by over 50% and learns models up to three times faster when compared with existing implementations for parallel LVM training."
      ]
    },
    {
      "heading": "Acknowledgments",
      "text": [
        "This work was supported in part by NSF Grants IIS-101675 and IIS-1065397, and DARPA contract D11AP00268."
      ]
    }
  ]
}
