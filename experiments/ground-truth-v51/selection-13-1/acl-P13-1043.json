{
  "info": {
    "authors": [
      "Muhua Zhu",
      "Yue Zhang",
      "Wenliang Chen",
      "Min Zhang",
      "Jingbo Zhu"
    ],
    "book": "ACL",
    "id": "acl-P13-1043",
    "title": "Fast and Accurate Shift-Reduce Constituent Parsing",
    "url": "https://aclweb.org/anthology/P13-1043",
    "year": 2013
  },
  "references": [
    "acl-A00-2018",
    "acl-D09-1060",
    "acl-D09-1087",
    "acl-D10-1002",
    "acl-D12-1133",
    "acl-J93-2004",
    "acl-N06-1020",
    "acl-N06-2033",
    "acl-N07-1051",
    "acl-P04-1015",
    "acl-P05-1012",
    "acl-P05-1022",
    "acl-P08-1066",
    "acl-P08-1067",
    "acl-P08-1068",
    "acl-P08-1101",
    "acl-P10-1110",
    "acl-P11-2033",
    "acl-P12-1023",
    "acl-P12-1026",
    "acl-P97-1003",
    "acl-W05-1513",
    "acl-W08-2102",
    "acl-W09-3825",
    "acl-W97-0301"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "Shift-reduce dependency parsers give comparable accuracies to their chart-based counterparts, yet the best shift-reduce constituent parsers still lag behind the state-of-the-art.",
        "One important reason is the existence of unary nodes in phrase structure trees, which leads to different numbers of shift-reduce actions between different outputs for the same input.",
        "This turns out to have a large empirical impact on the framework of global training and beam search.",
        "We propose a simple yet effective extension to the shift-reduce process, which eliminates size differences between action sequences in beam-search.",
        "Our parser gives comparable accuracies to the state-of-the-art chart parsers.",
        "With linear runtime complexity, our parser is over an order of magnitude faster than the fastest chart parser."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "Transition-based parsers employ a set of shift-reduce actions and perform parsing using a sequence of state transitions.",
        "The pioneering models rely on a classifier to make local decisions, and search greedily for a transition sequence to build a parse tree.",
        "Greedy, classifier-based parsers have been developed for both dependency grammars (Yamada and Matsumoto, 2003; Nivre et al., 2006) and phrase-structure grammars (Sagae and Lavie, 2005).",
        "With linear runtime complexity, they were commonly regarded as a faster but less accurate alternative to graph-based chart parsers (Collins, 1997; Charniak, 2000; McDonald et al., 2005).",
        "Various methods have been proposed to address the disadvantages of greedy local parsing, among which a framework of beam-search and global discriminative training have been shown effective for dependency parsing (Zhang and Clark, 2008; Huang and Sagae, 2010).",
        "While beam-search reduces error propagation compared with greedy search, a discriminative model that is globally optimized for whole sequences of transition actions can avoid local score biases (Lafferty et al., 2001).",
        "This framework preserves the most important advantage of greedy local parsers, including linear runtime complexity and the freedom to define arbitrary features.",
        "With the use of rich non-local features, transition-based dependency parsers achieve state-of-the-art accuracies that are comparable to the best-graph-based parsers (Zhang and Nivre, 2011; Bohnet and Nivre, 2012).",
        "In addition, processing tens of sentences per second (Zhang and Nivre, 2011), these transition-based parsers can be a favorable choice for dependency parsing.",
        "The above global-learning and beam-search framework can be applied to transition-based phrase-structure (constituent) parsing also (Zhang and Clark, 2009), maintaining all the aforementioned benefits.",
        "However, the effects were not as significant as for transition-based dependency parsing.",
        "The best reported accuracies of transition-based constituent parsers still lag behind the state-of-the-art (Sagae and Lavie, 2006; Zhang and Clark, 2009).",
        "One difference between phrase-structure parsing and dependency parsing is that for the former, parse trees with different numbers of unary rules require different numbers of actions to build.",
        "Hence the scoring model needs to disambiguate between transitions sequences with different sizes.",
        "For the same sentence, the largest output can take twice as many as actions to build as the",
        "smallest one.",
        "This turns out to have a significant empirical impact on parsing with beam-search.",
        "We propose an extension to the shift-reduce process to address this problem, which gives significant improvements to the parsing accuracies.",
        "Our method is conceptually simple, requiring only one additional transition action to eliminate size differences between different candidate outputs.",
        "On standard evaluations using both the Penn Treebank and the Penn Chinese Treebank, our parser gave higher accuracies than the Berkeley parser (Petrov and Klein, 2007), a state-of-the-art chart parser.",
        "In addition, our parser runs with over 89 sentences per second, which is 14 times faster than the Berkeley parser, and is the fastest that we are aware of for phrase-structure parsing.",
        "An open source release of our parser (version 0.6) is freely available on the Web.",
        "1 In addition to the above contributions, we apply a variety of semi-supervised learning techniques to our transition-based parser.",
        "These techniques have been shown useful to improve chart-based parsing (Koo et al., 2008; Chen et al., 2012), but little work has been done for transition-based parsers.",
        "We therefore fill a gap in the literature by reporting empirical results using these methods.",
        "Experimental results show that semi-supervised methods give a further improvement of 0.9% in F-score on the English data and 2.4% on the Chinese data.",
        "Our Chinese results are the best that we are aware of on the standard CTB data."
      ]
    },
    {
      "heading": "2 Baseline parser",
      "text": [
        "We adopt the parser of Zhang and Clark (2009) for our baseline, which is based on the shift-reduce process of Sagae and Lavie (2005), and employs global perceptron training and beam search."
      ]
    },
    {
      "heading": "2.1 Vanilla Shift-Reduce",
      "text": [
        "Shift-reduce parsing is based on a left-to-right scan of the input sentence.",
        "At each step, a transition action is applied to consume an input word or construct a new phrase-structure.",
        "A stack is used to maintain partially constructed phrase-structures, while the input words are stored in a buffer.",
        "The set of transition actions are ?",
        "SHIFT: pop the front word from the buffer, and push it onto the stack.",
        "reduce parsing process.",
        "?",
        "REDUCE-L/R-X: pop the top two constituents off the stack, combine them into a new constituent with label X, and push the new constituent onto the stack.",
        "?",
        "UNARY-X: pop the top constituent off the stack, raise it to a new constituent with label X, and push the new constituent onto the stack.",
        "?",
        "FINISH: pop the root node off the stack and ends parsing.",
        "The deduction system for the process is shown in Figure 1, where the item is formed as ?stack, buffer front index, completion mark, score?, and cs, cr , and cu represent the incremental score of the SHIFT, REDUCE, and UNARY parsing steps, respectively; these scores are calculated according to the context features of the parser state item.",
        "n is the number of words in the input."
      ]
    },
    {
      "heading": "2.2 Global Discriminative Training and Beam-Search",
      "text": [
        "For a given input sentence, the initial state has an empty stack and a buffer that contains all the input words.",
        "An agenda is used to keep the k best state items at each step.",
        "At initialization, the agenda contains only the initial state.",
        "At each step, every state item in the agenda is popped and expanded by applying a valid transition action, and the top k from the newly constructed state items are put back onto the agenda.",
        "The process repeats until the agenda is empty, and the best completed state item (recorded as candidate output) is taken for"
      ]
    },
    {
      "heading": "Description Templates",
      "text": [
        "where si represents the ith item on the stack S and qi denotes the ith item in the queue Q. w refers to the head lexicon, t refers to the head POS, and c refers to the constituent label.",
        "the output.",
        "The score of a state item is the total score of the transition actions that have been applied to build the item:",
        "Here ?",
        "(ai) represents the feature vector for the ith action ai in state item ?.",
        "It is computed by applying the feature templates in Table 1 to the context of ?.",
        "N is the total number of actions in ?.",
        "The model parameter ~?",
        "is trained with the averaged perceptron algorithm, applied to state items (sequence of actions) globally.",
        "We apply the early update strategy (Collins and Roark, 2004), stopping parsing for parameter updates when the gold-standard state item falls off the agenda."
      ]
    },
    {
      "heading": "2.3 Baseline Features",
      "text": [
        "Our baseline features are adopted from Zhang and Clark (2009), and are shown in Table 1 Here si represents the ith item on the top of the stack S and qi denotes the ith item in the front end of the queue Q.",
        "The symbol w denotes the lexical head of an item; the symbol c denotes the constituent label of an item; the symbol t is the POS of a lexical head.",
        "These features are adapted from Zhang and Clark (2009).",
        "We remove Chinese specific features and make the baseline parser language-independent."
      ]
    },
    {
      "heading": "3 Improved hypotheses comparison",
      "text": [
        "Unlike dependency parsing, constituent parse trees for the same sentence can have different numbers of nodes, mainly due to the existence of unary nodes.",
        "As a result, completed state",
        "tence with different numbers of actions.",
        "items for the same sentence can have different numbers of unary actions.",
        "Take the phrase ?address issues?",
        "for example, two possible parses are shown in Figure 2 (a) and (b), respectively.",
        "The first parse corresponds to the action sequence [SHIFT, SHIFT, REDUCE-R-NP, FINISH], while the second parse corresponds to the action sequence [SHIFT, SHIFT, UNARY-NP, REDUCE-L-VP, FINISH], which consists of one more action than the first case.",
        "In practice, variances between state items can be much larger than the chosen example.",
        "In the extreme case where a state item does not contain any unary action, the number of actions is 2n, where n is the number of words in the sentence.",
        "On the other hand, if the maximum number of consequent unary actions is 2 (Sagae and Lavie, 2005; Zhang and Clark, 2009), then the maximum number of actions a state item can have is 4n.",
        "The significant variance in the number of actions N can have an impact on the linear separability of state items, for which the feature vectors are ?N i=1 ?",
        "(ai).",
        "This turns out to have a significant empirical influence on perceptron training with early-update, where the training of the model interacts with search (Daumé III, 2006).",
        "One way of improving the comparability of state items is to reduce the differences in their sizes, and we use a padding method to achieve this.",
        "The idea is to extend the set of actions by adding an IDLE action, so that completed state items can be further expanded using the IDLE action.",
        "The action does not change the state itself, but simply adds to the number of actions in the sequence.",
        "A feature vector is extracted for the IDLE action according to the final state context, in the same way as other actions.",
        "Using the IDLE action, the transition sequence for the two parses in Figure 2 can be [SHIFT, SHIFT, REDUCE-NP, FINISH, IDLE] and [SHIFT, SHIFT, UNARY-NP, REDUCE-L-VP, FINISH], respectively.",
        "Their",
        "sition system.",
        "corresponding feature vectors have about the same sizes, and are more linearly separable.",
        "Note that there can be more than one action that are padded to a sequence of actions, and the number of IDLE actions depends on the size difference between the current action sequence and the largest action sequence without IDLE actions.",
        "Given this extension, the deduction system is shown in Figure 3.",
        "We add the number of actions k to an item.",
        "The initial item (Axioms) has k = 0, while the goal item has 2n ?",
        "k ?",
        "4n.",
        "Given this process, beam-search decoding can be made simpler than that of Zhang and Clark (2009).",
        "While they used a candidate output to record the best completed state item, and finish decoding when the agenda contains no more items, we can simply finish decoding when all items in the agenda are completed, and output the best state item in the agenda.",
        "With this new transition process, we experimented with several extended features,and found that the templates in Table 2 are useful to improve the accuracies further.",
        "Here sill denotes the left child of si's left child.",
        "Other notations can be explained in a similar way."
      ]
    },
    {
      "heading": "4 Semi-supervised Parsing with Large",
      "text": [
        "Data This section discusses how to extract information from unlabeled data or auto-parsed data to further improve shift-reduce parsing accuracies.",
        "We consider three types of information, including s0llwc, s0lrwc, s0luwc s0rlwc, s0rrwc, s0ruwc s0ulwc, s0urwc, s0uuwc s1llwc, s1lrwc, s1luwc s1rlwc, s1rrwc, s1ruwc Table 2: New features for the extended parser.",
        "paradigmatic relations, dependency relations, and structural relations.",
        "These relations are captured by word clustering, lexical dependencies, and a dependency language model, respectively.",
        "Based on the information, we propose a set of novel features specifically designed for shift-reduce constituent parsing."
      ]
    },
    {
      "heading": "4.1 Paradigmatic Relations: Word Clustering",
      "text": [
        "Word clusters are regarded as lexical intermediaries for dependency parsing (Koo et al., 2008) and POS tagging (Sun and Uszkoreit, 2012).",
        "We employ the Brown clustering algorithm (Liang, 2005) on unannotated data (word segmentation is performed if necessary).",
        "In the initial state of clustering, each word in the input corpus is regarded as a cluster, then the algorithm repeatedly merges pairs of clusters that cause the least decrease in the likelihood of the input corpus.",
        "The clustering results are a binary tree with words appearing as leaves.",
        "Each cluster is represented as a bit-string from the root to the tree node that represents the cluster.",
        "We define a function CLU(w) to return the cluster ID (a bit string) of an input word w."
      ]
    },
    {
      "heading": "4.2 Dependency Relations: Lexical Dependencies",
      "text": [
        "Lexical dependencies represent linguistic relations between words: whether a word modifies another word.",
        "The idea of exploiting lexical dependency information from auto-parsed data has been explored before for dependency parsing (Chen et al., 2009) and constituent parsing (Zhu et al., 2012).",
        "To extract lexical dependencies, we first run the baseline parser on unlabeled data.",
        "To simplify the extraction process, we can convert auto-parsed constituency trees into dependency trees by using Penn2Malt.",
        "2 From the dependency trees, we extract bigram lexical dependencies ?w1, w2, L/R?",
        "where the symbol L (R) means that w1 (w2) is the head of w2 (w1).",
        "We also extract trigram lexical",
        "dependencies ?w1, w2, w3, L/R?, where L means that w1 is the head of w2 and w3, meanwhile w2 and w3 are required to be siblings.",
        "Following the strategy of Chen et al. (2009), we assign categories to bigram and trigram items separately according to their frequency counts.",
        "Specifically, top-10% most frequent items are assigned to the category of High Frequency (HF); otherwise if an item is among top 20%, we assign it to the category of Middle Frequency (MF); otherwise the category of Low Frequency (LF).",
        "Hereafter, we refer to the bigram and trigram lexical dependency lists as BLD and TLD, respectively."
      ]
    },
    {
      "heading": "4.3 Structural Relations: Dependency Language Model",
      "text": [
        "The dependency language model is proposed by Shen et al. (2008) and is used as additional information for graph-based dependency parsing in Chen et al. (2012).",
        "Formally, given a dependency tree y of an input sentence x, we can denote by H(y) the set of words that have at least one dependent.",
        "For each xh ?",
        "H(y), we have a corresponding dependency structure Dh = (xLk, .",
        ".",
        ".",
        "xL1, xh, xR1, .",
        ".",
        ".",
        ", xRm).",
        "The probability",
        "PR(Dh) can be defined in a similar way.",
        "We build dependency language models on auto-parsed data.",
        "Again, we convert constituency trees into dependency trees for the purpose of simplicity.",
        "From the dependency trees, we build a bigram and a trigram language model, which are denoted by BLM and TLM, respectively.",
        "The following are the templates of the records of the dependency",
        "language models.",
        "(1) ?xLi, xh, P (xLi|xh)?",
        "(2) ?xRi, xh, P (xRi|xh)?",
        "(3) ?xLi, xLi?1, xh, P (xLi|xLi?1, xh)?",
        "(4) ?xRi, xRi?1, xh, P (xRi|xRi?1, xh)?",
        "Here the templates (1) and (2) belong to BLM and the templates (3) and (4) belong to TLM.",
        "To",
        "of the experimental data.",
        "use the dependency language models, we employ a map function ?",
        "(r) to assign a category to each record r according to its probability, as in Chen et al.",
        "(2012).",
        "The following is the map function."
      ]
    },
    {
      "heading": "4.4 Semi-supervised Features",
      "text": [
        "We design a set of features based on the information extracted from auto-parsed data or unannotated data.",
        "The features are summarized in Table 3.",
        "Here CLU returns a cluster ID for a word.",
        "The functions BLDl/r(?",
        "), TLDl/r(?",
        "), BLMl/r(?",
        "), and TLMl/r(?)",
        "check whether a given word combination can be found in the corresponding lists.",
        "For example, BLDl(s1w, s0w) returns a category tag (HF, MF, or LF) if ?s1w, s0w,L?",
        "exits in the list BLD, else it returns NONE."
      ]
    },
    {
      "heading": "5 Experiments",
      "text": []
    },
    {
      "heading": "5.1 Set-up",
      "text": [
        "Labeled English data employed in this paper were derived from the Wall Street Journal (WSJ) corpus of the Penn Treebank (Marcus et al., 1993).",
        "We used sections 2-21 as labeled training data, section 24 for system development, and section 23 for final performance evaluation.",
        "For labeled Chinese data, we used the version 5.1 of the Penn Chinese Treebank (CTB) (Xue et al., 2005).",
        "Articles 001- 270 and 440-1151 were used for training, articles 301-325 were used as development data, and articles 271-300 were used for evaluation.",
        "For both English and Chinese data, we used tenfold jackknifing (Collins, 2000) to automatically assign POS tags to the training data.",
        "We found that this simple technique could achieve an improvement of 0.4% on English and an improvement of 2.0% on Chinese.",
        "For English POS tagging, we adopted SVMTool, 3 and for Chinese POS tagging",
        "dependency language models.",
        "Here the symbol si denotes a stack item, qi denotes a queue item, w represents a word, and t represents a POS tag.",
        "Chinese development sets with the padding technique and new supervised features added incrementally.",
        "we employed the Stanford POS tagger.",
        "4 We took the WSJ articles from the TIPSTER corpus (LDC93T3A) as unlabeled English data.",
        "In addition, we removed from the unlabeled English data the sentences that appear in the WSJ corpus of the Penn Treebank.",
        "For unlabeled Chinese data, we used Chinese Gigaword (LDC2003T09), on which we conducted Chinese word segmentation by using a CRF-based segmenter.",
        "Table 4 summarizes data statistics on sentence and word numbers of the data sets listed above.",
        "We used EVALB to evaluate parser performances, including labeled precision (LP), labeled recall (LR), and bracketing F1.",
        "5 For significance tests, we employed the randomized permutation-based tool provided by Daniel Bikel.",
        "6 In both training and decoding, we set the beam size to 16, which achieves a good tradeoff between efficiency and accuracy.",
        "The optimal iter",
        "Chinese development sets with different types of semi-supervised features added incrementally to the extended parser.",
        "on the development sets.",
        "For word clustering, we set the cluster number to 50 for both the English and Chinese experiments."
      ]
    },
    {
      "heading": "5.2 Results on Development Sets",
      "text": [
        "Table 5 reports the results of the extended parser (baseline + padding + supervised features) on the English and Chinese development sets.",
        "We integrated the padding method into the baseline parser, based on which we further incorporated the supervised features in Table 2.",
        "From the results we find that the padding method improves the parser accuracies by 0.5% and 0.4% on English and Chinese, respectively.",
        "Incorporating the supervised features in Table 2 gives further improvements of 0.2% on English and 0.1% on Chinese.",
        "Based on the extended parser, we experimented different types of semi-supervised features by adding the features incrementally.",
        "The results are shown in Table 6.",
        "By comparing the results in Table 5 and the results in Table 6 we can see that the semi-supervised features achieve an overall improvement of 1.0% on the English data and an im",
        "work on the English test set.",
        "?",
        "Shift-reduce parsers.",
        "?",
        "The results of self-training with a single latent annotation grammar.",
        "work on the test set of CTB5.1.?",
        "Huang (2009) adapted the parsers to Chinese parsing on CTB5.1.",
        "?",
        "We run the parser on CTB5.1 to get the results.",
        "provement of 1.5% on the Chinese data."
      ]
    },
    {
      "heading": "5.3 Final Results",
      "text": [
        "Here we report the final results on the English and Chinese test sets.",
        "We compared the final results with a large body of related work.",
        "We grouped the parsers into three categories: single parsers (SI), discriminative reranking parsers (RE), and semi-supervised parsers (SE).",
        "Table 7 shows the comparative results on the English test set and Table 8 reports the comparison on the Chinese test set.",
        "From the results we can see that our extended parser (baseline + padding + supervised features) outperforms the Berkeley parser by 0.3% on English, and is comparable with the Berkeley parser on Chinese (?0.1% less).",
        "Here +padding means the padding technique and the features in Table 2.",
        "After integrating semi-supervised features, the parsing accuracy on English is improved to 91.3%.",
        "We note that the performance is on the same level",
        "glish test set, where the time for loading models is excluded.",
        "?",
        "The results of SVM-based shift-reduce parsing with greedy search.",
        "?",
        "The results of MaxEnt-based shift-reduce parser with best-first search.",
        "?",
        "Times reported by authors running on different hardware.",
        "as the performance of self-trained parsers, except for McClosky et al. (2006), which is based on the combination of reranking and self-training.",
        "On Chinese, the final parsing accuracy is 85.6%.",
        "To our knowledge, this is by far the best reported performance on this data set.",
        "The padding technique, supervised features, and semi-supervised features achieve an overall improvement of 1.4% over the baseline on English, which is significant on the level of p < 10?5.",
        "The overall improvement on Chinese is 3.0%, which is also significant on the level of p < 10?5."
      ]
    },
    {
      "heading": "5.4 Comparison of Running Time",
      "text": [
        "We also compared the running times of our parsers with the related single parsers.",
        "We ran timing tests on an Intel 2.3GHz processor with 8GB memory.",
        "The comparison is shown in Table 9.",
        "From the table, we can see that incorporating semi-supervised features decreases parsing speed, but the semi-supervised parser still has the advantage of efficiency over other parsers.",
        "Specifically, the semi-supervised parser is 7 times faster than the Berkeley parser.",
        "Note that Sagae & Lavie (2005) and Sagae & Lavie (2006) are also shift-reduce parsers, and their running times were evaluated on different hardwares.",
        "In practice, the running times of the shift-reduce parsers should be much shorter than the reported times in the table."
      ]
    },
    {
      "heading": "5.5 Error Analysis",
      "text": [
        "We conducted error analysis for the three systems: the baseline parser, the extended parser with",
        "parsers on spans of different lengths.",
        "the padding technique, and the semi-supervised parser, focusing on the English test set.",
        "The analysis was performed in four dimensions: parsing accuracies on different phrase types, on constituents of different span lengths, on different sentence lengths, and on sentences with different numbers of unknown words.",
        "Table 10 shows the parsing accuracies of the baseline, extended parser, and semi-supervised parser on different phrase types.",
        "Here we only consider the nine most frequent phrase types in the English test set.",
        "In the table, the phrase types are ordered from left to right in the descending order of their frequencies.",
        "We also show the improvements of the semi-supervised parser over the baseline parser (the last row in the table).",
        "As the results show, the extended parser achieves improvements on most of the phrase types with two exceptions: Preposition Prase (PP) and Quantifier Phrase (QP).",
        "Semi-supervised features further improve parsing accuracies over the extended parser (QP is an exception).",
        "From the last row, we can see that improvements of the semi-supervised parser over the baseline on VP, S, SBAR, ADVP, and ADJP are above the average improvement (1.4%).",
        "Figure 5 shows a comparison of the three parsers on spans of different lengths.",
        "Here we consider span lengths up to 8.",
        "As the results show, both the padding extension and semi-supervised features are more helpful on relatively large spans: the performance gaps between the three parsers are enlarged with increasing span lengths.",
        "parser on sentences of different lengths.",
        "Figure 6 shows a comparison of parsing accuracies of the three parsers on sentences of different lengths.",
        "Each number on the horizontal axis represents the sentences whose lengths are between the number and its previous number.",
        "For example, the number 30 refers to the sentences whose lengths are between 20 and 30.",
        "From the results we can see that semi-supervised features improve parsing accuracy on both short and long sentences.",
        "The points at 70 are exceptions.",
        "In fact, sentences with lengths between 60 and 70 have only 8 instances, and the statistics on such a small number of sentences are not reliable.",
        "Figure 4 shows a comparison of parsing accuracies of the baseline, extended parser, and semi-supervised parser on sentences with different numbers of unknown words.",
        "As the results show, the padding method is not very helpful on sentences with large numbers of unknown words, while semi-supervised features help significantly on this aspect.",
        "This conforms to the intuition that semi-supervised methods reduce data sparseness and improve the performance on unknown words."
      ]
    },
    {
      "heading": "6 Conclusion",
      "text": [
        "In this paper, we addressed the problem of different action-sequence lengths for shift-reduce phrase-structure parsing, and designed a set of novel non-local features to further improve parsing.",
        "The resulting supervised parser outperforms the Berkeley parser, a state-of-the-art chart parser, in both accuracies and speeds.",
        "In addition, we incorporated a set of semi-supervised features.",
        "The",
        "on sentences of different unknown words.",
        "final parser reaches an accuracy of 91.3% on English and 85.6% on Chinese, by far the best reported accuracies on the CTB data."
      ]
    },
    {
      "heading": "Acknowledgements",
      "text": [
        "We thank the anonymous reviewers for their valuable comments.",
        "Yue Zhang and Muhua Zhu were supported partially by SRG-ISTD-2012-038 from Singapore University of Technology and Design.",
        "Muhua Zhu and Jingbo Zhu were funded in part by the National Science Foundation of China (61073140; 61272376), Specialized Research Fund for the Doctoral Program of Higher Education (20100042110031), and the Fundamental Research Funds for the Central Universities (N100204002).",
        "Wenliang Chen was funded partially by the National Science Foundation of China (61203314)."
      ]
    }
  ]
}
