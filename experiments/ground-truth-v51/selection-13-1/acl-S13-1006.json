{
  "info": {
    "authors": [
      "Aliaksei Severyn",
      "Massimo Nicosia",
      "Alessandro Moschitti"
    ],
    "book": "*SEM",
    "id": "acl-S13-1006",
    "title": "iKernels-Core: Tree Kernel Learning for Textual Similarity",
    "url": "https://aclweb.org/anthology/S13-1006",
    "year": 2013
  },
  "references": [
    "acl-P02-1034",
    "acl-P10-1040",
    "acl-S12-1051",
    "acl-S12-1059",
    "acl-S12-1060",
    "acl-S12-1088",
    "acl-S13-1004",
    "acl-W06-1670"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "This paper describes the participation of iKernels system in the Semantic Textual Similarity (STS) shared task at *SEM 2013.",
        "Different from the majority of approaches, where a large number of pairwise similarity features are used to learn a regression model, our model directly encodes the input texts into syntactic/semantic structures.",
        "Our systems rely on tree kernels to automatically extract a rich set of syntactic patterns to learn a similarity score correlated with human judgements.",
        "We experiment with different structural representations derived from constituency and dependency trees.",
        "While showing large improvements over the top results from the previous year task (STS-2012), our best system ranks 21st out of total 88 participated in the STS2013 task.",
        "Nevertheless, a slight refinement to our model makes it rank 4th."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "Comparing textual data to establish the degree of semantic similarity is of key importance in many Natural Language Processing (NLP) tasks ranging from document categorization to textual entailment and summarization.",
        "The key aspect of having an accurate STS framework is the design of features that can adequately represent various aspects of the similarity between texts, e.g. using lexical, syntactic and semantic similarity metrics.",
        "The majority of approaches to semantic textual similarity treat the input text pairs as feature vectors where each feature is a score corresponding to a certain type of similarity.",
        "This approach is conceptually easy to implement and STS-2012 (Agirre et al., 2012) has shown that the best systems were built following this idea, i.e. a number of features encoding similarity of an input text pair were combined in a single scoring model, such as Linear Regression or Support Vector Regression (SVR).",
        "One potential limitation of using only similarity features to represent a text pair is that of low representation power.",
        "The novelty of our approach is that we encode the input text pairs directly into structural objects, e.g. trees, and rely on the power of kernel learning to extract relevant structures.",
        "This completely different from (Croce et al., ), where tree kernels where used to establish syntactic similarity and then plugged as similarity features.",
        "To link the documents in a pair we mark the nodes in the related structures with a special relational tag.",
        "In this way effective structural relational patterns are implicitly encoded in the trees and can be automatically learned by the kernel-based machine learning methods.",
        "We build our systems on top of the features used by two best systems from STS-2012 and combine them with the tree kernel models within the Support Vector Regression to derive a single scoring model.",
        "Since the test data used for evaluation in STS-2013 (Agirre et al., 2013) is different from the 2012 data provided for the system development, domain adaptation represents an additional challenge.",
        "To address this problem we augment our feature vector representation with features extracted from a text pair as a whole to capture individual properties of each dataset.",
        "Additionally, we experiment with a corpus type classifier and include its prediction score as additional features.",
        "Finally, we use stacking to combine several structural models into the feature vector representation.",
        "In the following sections we describe our approach to combine structural representations with the pairwise similarity features in a single SVR learning framework.",
        "We then report results on both STS-2012 and 2013 tasks."
      ]
    },
    {
      "heading": "2 Structural Relational Similarity",
      "text": [
        "In this section we first describe the kernel framework to combine structural and vector models, then we explain how to construct the tree models and briefly describe tree kernels we use to automatically extract the features."
      ]
    },
    {
      "heading": "2.1 Structural Kernel Learning",
      "text": [
        "In supervised learning, given the labeled data {(xi, y i)}ni=1, the goal is to estimate a decision function h(x) = y that maps input examples to the target variables.",
        "A conventional approach is to represent a pair of texts as a set of similarity features {fi}, s.t.",
        "the predictions are computed as h(x) =",
        "iwifi, wherew is the model weight vector.",
        "Hence, the learning problem boils down to estimating the individual weight of each of the similarity feature fi.",
        "One downside of such approach is that a great deal of similarity information carried by a given text pair is lost when modeled by single real-valued scores.",
        "A more versatile approach in terms of the input representation relies on kernels.",
        "In a typical kernel machine, e.g. SVM, the prediction function for a test input x takes on the following form h(x) = ?",
        "i ?iyiK(x,xi), where ?i are the model parameters estimated from the training data, yi - target variables, xi are support vectors, and K(?, ?)",
        "is a kernel function.",
        "To encode both structural representation and similarity feature vectors of input text pairs xi in a single model, we treat it as the following tuple: xi =",
        "first and the second document of xi, and t and v denote tree and vector representations respectively.",
        "To compute a kernel between two text pairs xi and xj we define the following all-vs-all kernel, where all possible combinations of documents from each pair are considered: K(xi,xj) = K(xai ,x",
        "j).",
        "Each of the kernel computations K between two documents xa and xb can be broken down into the following:",
        "KTK computes a tree kernel and Kfvec is a kernel over feature vectors, e.g. linear, polynomial or RBF, etc.",
        "Further in the text we refer to structural tree kernel models as TK and explicit feature vector representation as fvec.",
        "Having defined a way to jointly model text pairs using structural TK representations along with the similarity features fvec, we next briefly review tree kernels and our relational structures derived from constituency and dependency trees."
      ]
    },
    {
      "heading": "2.2 Tree Kernels",
      "text": [
        "We use tree structures as our base representation since they provide sufficient flexibility in representation and allow for easier feature extraction than, for example, graph structures.",
        "We use a Partial Tree Kernel (PTK) (Moschitti, 2006) to take care of automatic feature extraction and compute KTK(?, ?).",
        "PTK is a tree kernel function that can be effectively applied to both constituency and dependency parse trees.",
        "It generalizes a subset tree kernel (STK) (Collins and Duffy, 2002) that maps a tree into the space of all possible tree fragments constrained by the rule that the sibling nodes from their parents cannot be separated.",
        "Different from STK where the nodes in the generated tree fragments are constrained to include none or all of their direct children, PTK fragments can contain any subset of the features, i.e. PTK allows for breaking the production rules.",
        "Consequently, PTK generalizes STK generating an extremely rich feature space, which results in higher generalization ability."
      ]
    },
    {
      "heading": "2.3 Relational Structures",
      "text": [
        "The idea of using relational structures to jointly model text pairs was previously proposed in (Sev-eryn and Moschitti, 2012), where shallow syntactic structures derived from chunks and part-of-speech tags were used to represent question/answer pairs.",
        "In this paper, we define novel relational structures based on: (i) constituency and (ii) dependency trees.",
        "Constituency tree.",
        "Each document in a given text pair is represented by its constituency parse tree.",
        "If a document contains multiple sentences they are merged in a single tree with a common root.",
        "To encode the structural relationships between docu",
        "ments in a pair a special REL tag is used to link the related structures.",
        "We adopt a simple strategy to establish such links: words from two documents that have a common lemma get their parents (POS tags) and grandparents, non-terminals, marked with a REL tag.",
        "Dependency tree.",
        "We propose to use dependency relations between words to derive an alternative structural representation.",
        "In particular, dependency relations are used to link words in a way that words are always at the leaf level.",
        "This reordering of the nodes helps to avoid the situation where nodes with words tend to form long chains.",
        "This is essential for PTK to extract meaningful fragments.",
        "We also plug part-of-speech tags between the word nodes and nodes carrying their grammatical role.",
        "Again a special REL tag is used to establish relations between tree fragments.",
        "Fig.",
        "1 gives an example of a dependency-based structure taken from STS-2013 headlines dataset."
      ]
    },
    {
      "heading": "3 Pairwise similarity features.",
      "text": [
        "Along with the direct representation of input text pairs as structural objects our framework also encodes feature vectors (base), which we describe below."
      ]
    },
    {
      "heading": "3.1 Baseline features",
      "text": [
        "We adopt similarity features from two best performing systems of STS-2012, which were publicly released: namely, the Takelab1 system (S?aric?",
        "et al, 2012) and the UKP Lab's system2 (Bar et al., 2012).",
        "Both systems represent input texts with similar",
        "ity features which combine multiple text similarity measures of varying complexity.",
        "UKP provides metrics based on matching of character, word n-grams and common subsequences.",
        "It also includes features derived from Explicit Semantic Analysis vector comparisons and aggregation of word similarity based on lexical-semantic resources, e.g. WordNet.",
        "In total it provides 18 features.",
        "Takelab includes n-gram matching of varying size, weighted word matching, length difference, WordNet similarity and vector space similarity where pairs of input sentences are mapped into Latent Semantic Analysis (LSA) space (Turney and Pantel, 2010).",
        "The features are computed over several sentence representations where stop words are removed and/or lemmas are used in place of raw tokens.",
        "The total number of Takelab's features is 21.",
        "Even though some of the UKP and Takelab features overlap we include all of them in a combined system with the total of 39 features."
      ]
    },
    {
      "heading": "3.2 iKernels features",
      "text": [
        "Here we describe our additional features added to the fvec representation.",
        "First, we note that word frequencies used to compute weighted word matchings and the word-vector mappings to compute LSA similarities required by Takelab features are provided only for the vocabulary extracted from 2012 data.",
        "Hence, we use both STS-2012 and 2013 data to obtain the word counts and re-estimate LSA vector representations.",
        "For the former we extract unigram counts from Google Books Ngrams3, while for the latter we use additional corpora as described below.",
        "LSA similarity.",
        "To construct LSA word-vector mappings we use the following three sources: (i)",
        "Aquaint4, which consists of more than 1 million newswire documents, (ii) ukWaC (Baroni et al., 2009) - a 2 billion word corpus constructed from the Web, and (iii) and a collection of documents extracted from Wikipedia dump5.",
        "To extract LSA topics we use GenSim6 software.",
        "We preprocess the data by lowercasing, removing stopwords and words with frequency lower than 5.",
        "Finally, we apply tf-idf weighting.",
        "For all representations we fix the number of dimensions to 250.",
        "For all corpora we use document-level representation, except for Wikipedia we also experimented with a sentence-level document representation, which typically provides a more restricted context for estimating word-document distributions.",
        "Brown Clusters.",
        "In addition to vector representations derived from LSA, we extract word-vector mappings using Brown word clusters7 (Turian et al., 2010), where words are organized into a hierarchy and each word is represented as a bit-string.",
        "We encode each word by a feature vector where each entry corresponds to a prefix extracted from its bit-string.",
        "We use prefix lengths in the following range: k = {4, 8, 12, 16, 20}.",
        "Finally, the document is represented as a feature vector composed by the individual word vectors.",
        "Term-overlap features.",
        "In addition to the word overlap features computed by UKP and Takelab systems we also compute a cosine similarity over the following representations: (i) n-grams of part-of-speech tags (up to 4-grams), (ii) SuperSense tags (Ciaramita and Altun, 2006), (iii) named entities, and (iv) dependency triplets.",
        "PTK similarity.",
        "We use PTK to provide a syntactic similarity score between documents in a pair: PTK(a, b) = PTK(a, b), where as input representations we use dependency and constituency trees.",
        "Explicit Semantic Analysis (ESA) similarity.",
        "ESA (Gabrilovich and Markovitch, 2007) represents input documents as vectors of Wikipedia concepts.",
        "To compute ESA features we use Lucene8 to index documents extracted from a Wikipedia dump.",
        "Given a text pair we retrieve k top documents (i.e.",
        "Wikipedia concepts) and compute the metric by looking at the overlap of the concepts between the documents: esak(a, b) =",
        "the set of concepts retrieved for document a.",
        "We compute esa features with k ?",
        "{10, 25, 50, 100}."
      ]
    },
    {
      "heading": "3.3 Corpus type features",
      "text": [
        "Here we describe two complementary approaches (corpus) in an attempt to alleviate the problem of domain adaptation, where the datasets used for training and testing are drawn from different sources.",
        "Pair representation.",
        "We treat each pair of texts as a whole and extract the following sets of corpus features: plain bag-of-words, dependency triplets, production rules of the syntactic parse tree and a length feature, i.e. a log-normalized length of the combined text.",
        "Each feature set is normalized and added to the fvec model.",
        "Corpus classifier.",
        "We use the above set of features to train a multi-class classifier to predict for each instance its most likely corpus type.",
        "Our categories correspond to five dataset types of STS-2012.",
        "Prediction scores for each of the dataset categories are then plugged as features into the final fvec representation.",
        "Our multi-class classifier is a one-vs-all binary SVM trained on the merged data from STS2012.",
        "We apply 5-fold cross-validation scheme, s.t.",
        "for each of the held-out folds we obtain independent predictions.",
        "The accuracy (averaged over 5-folds) on the STS-2012 data is 92.0%."
      ]
    },
    {
      "heading": "3.4 Stacking",
      "text": [
        "To integrate multiple TK models into a single model we apply a classifier stacking approach (Fast and Jensen, 2008).",
        "Each of the learned TK models is used to generate predictions which are then plugged as features into the final fvec representation, s.t.",
        "the final model uses only explicit feature vector representation.",
        "We apply a 5-fold cross-validation scheme to obtain prediction scores in the same manner as described above."
      ]
    },
    {
      "heading": "4 Experimental Evaluation",
      "text": []
    },
    {
      "heading": "4.1 Experimental setup",
      "text": [
        "To encode TK models along with the similarity feature vectors into a single regression scoring model,",
        "(T) and iKernels (I); corpus type features (corpus) include plain features (B), corpus classifier (O), and manually encoded dataset category (M); TK contains constituency (C) and dependency-based (D) models.",
        "UKPbest is the best system of STS-2012.",
        "First column shows configuration of our three system runs submitted to STS-2013.",
        "we use an SVR framework implemented in SVM-Light-TK9.",
        "We use the following parameter settings t 5 F 3 W A C +, which specifies to use a combination of trees and feature vectors (-C +), PTK over trees (-F 3) computed in all-vs-all mode (-W A) and using polynomial kernel of degree 3 for the feature vector (active by default).",
        "We report the following metrics employed in the final evaluation: Pearson correlation for individual test sets10 and Mean ?",
        "an average score weighted by the test set size."
      ]
    },
    {
      "heading": "4.2 STS-2012",
      "text": [
        "For STS-2013 task the entire data from STS-2012 was provided for the system development.",
        "To compare with the best systems of the previous year we followed the same setup, where 3 datasets (MSRp, MSRv and SMTe) are used for training and 5 for testing (two ?surprise?",
        "datasets were added: OnWN and SMTn).",
        "We use the entire training data to obtain a single model.",
        "Table 1 summarizes the results using structural models (TK), pairwise similarity (base) and corpus type features (corpus).",
        "We first note, that combining all three features sets (U, T and I) provides a good match to the best system UKPbest.",
        "Next, adding TK models results in a large improvement beating the top results in STS-2012.",
        "Furthermore, using corpus features results in even greater im",
        "of all five test sets (ALL) provement with the Mean = 0.7416 and Pearson ALL = 0.8810."
      ]
    },
    {
      "heading": "4.3 STS-2013",
      "text": [
        "Below we specify the configuration for each of the submitted runs (also shown in Table 1) and report the results on the STS-2013 test sets: headlines (head), OnWN, FNWN, and SMT: Sys1: combines base features (U, T and I), TK models (C and D) and plain corpus type features (B).",
        "We use STS-2012 data to train a single model.",
        "Sys2: different from Sys1 where a single model trained on the entire data is used to make predictions, we adopt a different training/test setup to account for the different nature of the data used for training and testing.",
        "After performing manual analysis of the test data we came up with the following strategy to split the training data into two sets to learn two different models: STMe and OnWN (model1) and MSRp, SMTn and STMe (model2); model1 is then used to get predictions for OnWN, FNWN, while model2 is used for SMT and headlines.",
        "Sys3: same as Sys1 + a corpus type classifier O as described in Sec. 3.3.",
        "Table 2 shows the resulting performance of our systems and the best UMBC system published in the final ranking.",
        "Sys2 appears the most accurate among our systems, which ranked 21st out of 88.",
        "Comparing to the best system across four datasets we observe that it performs reasonably well on the headlines dataset (it is 5th best), while completely fails on the OnWN and FNWN test sets.",
        "After performing",
        "error analysis, we found that TK models underper-form on FNWN and OnWN sets, which appear underrepresented in the training data from STS-2012.",
        "We build a new system (Sys?2), which is based on Sys2, by making two adjustments in the setup: (i) we exclude SMTe from training to obtain predictions on SMT and head and (ii) we remove all TK features to train a model for FNWN and OnWN.",
        "This is motivated by the observation that text pairs from STS2012 yield a paraphrase model, since the texts are syntactically very similar.",
        "Yet, two datasets from STS-2013 FNWN, and OnWN contain text pairs where documents exhibit completely different structures.",
        "This is misleading for our syntactic similarity model learned on the STS-2012."
      ]
    },
    {
      "heading": "5 Conclusions and Future Work",
      "text": [
        "We have described our participation in STS-2013 task.",
        "Our approach treats text pairs as structural objects which provides much richer representation for the learning algorithm to extract useful patterns.",
        "We experiment with structures derived from constituency and dependency trees where related fragments are linked with a special tag.",
        "Such structures are then used to learn tree kernel models which can be efficiently combined with the a feature vector representation in a single scoring model.",
        "Our approach ranks 1st with a large margin w.r.t.",
        "to the best systems in STS-2012 task, while it is 21st according to the final rankings of STS-2013.",
        "Nevertheless, a small change in the system setup makes it rank 4th.",
        "Clearly, domain adaptation represents a big challenge in STS-2013 task.",
        "We plan to address this issue in our future work."
      ]
    },
    {
      "heading": "6 Acknowledgements",
      "text": []
    }
  ]
}
