{
  "info": {
    "authors": [
      "António H. Branco",
      "João Silva"
    ],
    "book": "Conference of the European Association for Computational Linguistics – Demonstrations",
    "id": "acl-E06-2024",
    "title": "A Suite of Shallow Processing Tools for Portuguese: LX-Suite",
    "url": "https://aclweb.org/anthology/E06-2024",
    "year": 2006
  },
  "references": [
    "acl-A00-1031",
    "acl-C90-3030"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "In this paper we present LX-Suite, a set of tools for the shallow processing of Portuguese.",
        "This suite comprises several modules, namely: a sentence chunker, a tokenizer, a POS tagger, featurizers and lemmatizers."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "The purpose of this paper is to present LX-Suite, a set of tools for the shallow processing of Portuguese, developed under the TagShare1 project by the NLX Group.",
        "The tools included in this suite are a sentence chunker; a tokenizer; a POS tagger; a nominal fea-turizer; a nominal lemmatizer; and a verbal featurizer and lemmatizer.",
        "These tools were implemented as autonomous modules.",
        "This option allows to easily replace any of the modules by an updated version or even by a third-party tool.",
        "It also allows to use any of these tools separately, outside the pipeline of the suite.",
        "The evaluation results mentioned in the next sections have been obtained using an accurately hand-tagged 280, 000 token corpus composed of newspaper articles and short novels."
      ]
    },
    {
      "heading": "2 Sentence chunker",
      "text": [
        "The sentence chunker is a finite state automaton (FSA), where the state transitions are triggered by specified character sequences in the input, and the emitted symbols correspond to sentence (<s>) and paragraph (<p>) boundaries.",
        "Within this setup, a transition rule could define, for example,",
        "that a period, when followed by a space and a capital letter, marks a sentence boundary: “.... A...” 4 “....</s><s>A ... ” Being a rule-based chunker, it was tailored to handle orthographic conventions that are specific to Portuguese, in particular those governing dialog excerpts.",
        "This allowed the tool to reach a very good performance, with values of 99.95% for recall and 99.92% for precision.3"
      ]
    },
    {
      "heading": "3 Tokenizer",
      "text": [
        "Tokenization is, for the most part, a simple task, as the whitespace character is used to mark most token boundaries.",
        "Most of other cases are also rather simple: Punctuation symbols are separated from words, contracted forms are expanded and cl-itics in enclisis or mesoclisis position are detached from verbs.",
        "It is worth noting that the first element of an expanded contraction is marked with a symbol (+) indicating that, originally, that token occurred as part of a contraction:4",
        "In what concerns Portuguese, the non-trivial aspects of tokenization are found in the handling of ambiguous strings that, depending on their POS tag, may or may not be considered a contraction.",
        "For example, the word deste can be tokenized as the single token |deste |if it occurs as a verb (Eng.",
        ": [you] gave) or as the two tokens |de+ |e s t e |if it occurs as a contraction (Eng.",
        ": of this).",
        "It is worth noting that this problem is not a minor issue, as these strings amount to 2% of the corpus that was used and any tokenization error will have a considerable negative influence on the subsequent steps of processing, such as POS tagging.",
        "To resolve the issue of ambiguous strings, a two-stage tokenization strategy is used, where the ambiguous strings are not immediately tokenized.",
        "Instead, the decision counts on the contribution of the POS tagger: The tagger must first be trained on a version of the corpus where the ambiguous strings are not tokenized, and are tagged with a composite tag when occurring as a contraction (for example P+DEM for a contraction of a preposition and a demonstrative).",
        "The tagger then runs over the text and assigns a simple or a composite tag to the ambiguous strings.",
        "A second pass with the tokenizer then looks for occurrences of tokens with a composite tag and splits them:",
        "This approach allowed us to successfully resolve 99.4% of the ambiguous strings.",
        "This is a much better value than the baseline 78.20% obtained by always considering that the ambiguous strings are a contraction.5"
      ]
    },
    {
      "heading": "4 POS tagger",
      "text": [
        "For the POS tagging task we used Brant’s TnT tagger (Brants, 2000), a very efficient statistical tagger based on Hidden Markov Models.",
        "For training, we used 90% of a 280, 000 token corpus, accurately hand-tagged with a tagset of ca.",
        "60 tags, with inflectional feature values left aside.",
        "Evaluation showed an accuracy of 96.87% for this tool, obtained by averaging 10 test runs over different 10% contiguous portions of the corpus that were not used for training.",
        "The POS tagger we developed is currently the fastest tagger for the Portuguese language, and it is in line with state-of-the-art taggers for other languages, as discussed in (Branco and Silva, 2004)."
      ]
    },
    {
      "heading": "5 Nominal featurizer",
      "text": [
        "This tool assigns feature value tags for inflection (Gender and Number) and degree (Diminutive, Superlative and Comparative) to words from nominal morphosyntactic categories.",
        "Such tagging is typically done by a POS tagger, by using a tagset where the base POS tags have been extended with feature values.",
        "However, this increase in the number of tags leads to a lower tagging accuracy due to the data-sparseness problem.",
        "With our tool, we explored what could be gained by having a dedicated tool for the task of nominal featurization.",
        "We tried several approaches to nominal featurization.",
        "Here we report on the rule-based approach which is the one that better highlights the difficulties in this task.",
        "For this tool, we built on morphological regularities and used a set of rules that, depending on the word termination, assign default feature values to words.",
        "Naturally, these rules were supplemented by a list of exceptions, which was collected by using an machine readable dictionary (MRD) that allowed us to search words by termination.",
        "Nevertheless, this procedure is still not enough to assign a feature value to every token.",
        "The most direct reason is due to the so-called invariant words, which are lexically ambiguous with respect to feature values.",
        "For example, the Common Noun ermita (Eng.",
        ": hermit) can be masculine or feminine, depending on the occurrence.",
        "By simply using termination rules supplemented with exceptions, such words will always be tagged with underspecified feature values:6 ermita/?S To handle such cases the featurizer makes use of feature propagation.",
        "With this mechanism, words from closed classes, for which we know their feature values, propagate their values to the words from open classes following them.",
        "These words, in turn, propagate those features to other words:",
        "Special care must be taken to avoid that feature propagation reaches outside NP boundaries.",
        "For this purpose, some sequences of POS categories block feature propagation.",
        "In the example below, a PP inside an NP context, a z u l (an “invariant”",
        "adjective) might agree with f a c a or with the preceding word, a c¸o.",
        "To prevent mistakes, propagation from a c¸ o to a z u l should be blocked.",
        "For the sake of comparability with other possible similar tools, we evaluated the featurizer only over Adjectives and Common Nouns: It has 95.05% recall (leaving ca.",
        "5% of the tokens with underspecified tags) and 99.05% precision.7"
      ]
    },
    {
      "heading": "6 Nominal lemmatizer",
      "text": [
        "Nominal lemmatization consists in assigning to Adjectives and Common Nouns a normalized form, typically the masculine singular if available.",
        "Our approach uses a list of transformation rules that helps changing the termination of the words.",
        "For example, one states that any word ending in t a should have that ending transformed into to: gata ([female] cat) – * gato ([male] cat) There are, however, exceptions that must be accounted for.",
        "The word porta, for example, is a feminine common noun, and its lemma is p or t a: p o r t a (door, feminine common noun) – * porta Relevant exceptions like the one above were collected by resorting to a MRD that allowed to search words on the basis of their termination.",
        "Being that dictionaries only list lemmas (and not inflected forms), it is possible to search for words with terminations matching the termination of inflected words (for example, words ending in ta).",
        "Any word found by the search can thus be considered as an exception.",
        "A major difficulty in this task lies in the listing of exceptions when non-inflectional affixes are taken into account.",
        "As an example, lets consider again the word porta.",
        "This word is an exception to the rule that transforms t a into to.",
        "As expected, this word can occur prefixed, as in superporta.",
        "Therefore, this derived word",
        "should also appear in the list of exceptions to prevent it from being lemmatized into sup e r p o r t o by the rule.",
        "However, proceeding like this for every possible prefix leads to an explosion in the number of exceptions.",
        "To avoid this, a mechanism was used that progressively strips prefixes from words while checking the resulting word forms against the list of exceptions:",
        "A similar problem arises when tackling words with suffixes.",
        "For instance, the suffix - z i nh o and its inflected forms (-zinha, -zinhos and - z i nh a s) are used as diminutives.",
        "These suffixes should be removed by the lemmatization process.",
        "However, there are exceptions, such as the word vizinho (Eng.",
        ": neighbor) which is not a diminutive.",
        "This word has to be listed as an exception, together with its inflected forms (vizinha, vizinhos and vizinhas), which again leads to a great increase in the number of exceptions.",
        "To avoid this, only vi z inho is explicitly listed as an exception and the inflected forms of the diminutive are progressively undone while looking for an exception:",
        "To ensure that exceptions will not be overlooked, when both these mechanisms work in parallel one must follow all possible paths of affix removal.",
        "An heuristic chooses the lemma as being the result found in the least number of steps.8 To illustrate this, consider the word antena (Eng.",
        ": antenna).",
        "Figure 1 shows the paths followed by the lemmatization algorithm when it is faced with antenazinha (Eng.",
        ": [small] antenna).",
        "Both ante and -zinha are possible affixes.",
        "In a first step, two search branches are opened, the first where ante is removed and the second where -zinha is transformed into",
        "-zinho.",
        "The search proceeds under each branch until no transformation is possible, or an exception has been found.",
        "The end result is the “leaf node” with the shortest depth which, in this example, is antena (an exception).",
        "This branching might seem to lead to a great performance penalty, but only a few words have affixes, and most of them have only one, in which case there is no branching at all.",
        "This tool evaluates to an accuracy of 94.75%.9"
      ]
    },
    {
      "heading": "7 Verbal featurizer and lemmatizer",
      "text": [
        "To each verbal token, this tool assigns the corresponding lemma and tag with feature values for Mood, Tense, Person and Number.",
        "The tool uses a list of rules that, depending on the termination of the word, assign all possible lemma-feature pairs.",
        "The word d i r i a, for example, is assigned the following lemma-feature pairs:",
        "Currently, this tool does not attempt to disambiguate among the proposed lemma-feature pairs.",
        "So, each verbal token will be tagged with all its possible lemma-feature pairs.",
        "The tool was evaluated over a list with ca.",
        "800,000 verbal forms.",
        "It achieves 100% precision, but at 50% recall, as half of those forms are ambiguous and receive more than one lemma-feature pair."
      ]
    },
    {
      "heading": "8 Final Remarks",
      "text": [
        "So far, LX-Suite has mostly been used in-house for projects being developed by the NLX Group.",
        "It is being used in the GramaXing project, where a computational core grammar for deep linguistic processing of Portuguese is being developed under the Delphin initiative.",
        "10 In collaboration with CLUL,11 and under the TagShare project, LX-Suite is being used to help in the building of a corpus of 1 million accurately hand-tagged tokens, by providing an initial, high-quality tagging which is then manually corrected.",
        "It is also used for the QueXting project, whose aim is to make available a question answering system on the Portuguese Web.",
        "There is an on-line demo of LX-Suite located at http://lxsuite.di.fc.ul.pt.",
        "This on-line version of the suite is a partial demo, as it currently only includes the modules up to the POS tagger.",
        "By the end of the TagShare project (mid-2006), all the other modules described in this paper are planned to have been included.",
        "Additionally, the verbal featurizer and lemmatizer can be tested as a standalone tool at http://lxlemmatizer.di.fc.ul.pt.",
        "Future work will be focused on extending the suite with new tools, such as a named-entity recognizer and a phrase chunker."
      ]
    }
  ]
}
