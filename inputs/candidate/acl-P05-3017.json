{
  "info": {
    "authors": [
      "Preslav Nakov",
      "Ariel S. Schwartz",
      "Brian Wolf",
      "Marti A. Hearst"
    ],
    "book": "Annual Meeting of the Association for Computational Linguistics – Interactive Poster and Demonstration Sessions",
    "id": "acl-P05-3017",
    "title": "Supporting Annotation Layers for Natural Language Processing",
    "url": "https://aclweb.org/anthology/P05-3017",
    "year": 2005
  },
  "references": [
    "acl-X96-1039"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "We demonstrate a system for flexible querying against text that has been annotated with the results of NLP processing.",
        "The system supports self-overlapping and parallel layers, integration of syntactic and ontological hierarchies, flexibility in the format of returned results, and tight integration with SQL.",
        "We present a query language and its use on examples taken from the NLP literature."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "Today most natural language processing (NLP) algorithms make use of the results of previous processing steps.",
        "For example, a word sense disambiguation algorithm may combine the output of a to-kenizer, a part-of-speech tagger, a phrase boundary recognizer, and a module that classifies noun phrases into semantic categories.",
        "Currently there is no standard way to represent and store the results of such processing for efficient retrieval.",
        "We propose a framework for annotating text with the results of NLP processing and then querying against those annotations in flexible ways.",
        "The framework includes a query language and an indexing architecture for efficient retrieval, built on top of a relational database management system (RDBMS).",
        "The model allows for both hierarchical and overlapping layers of annotation as well as for querying at multiple levels of description.",
        "In the remainder of the paper we describe related work, illustrate the annotation model and the query language and describe the indexing architecture and the experimental results, thus showing the feasibility of the approach for a variety of NLP tasks."
      ]
    },
    {
      "heading": "2 Related Work",
      "text": [
        "There are several specialized tools for indexing and querying treebanks.",
        "(See Bird et al.",
        "(2005) for an overview and critical comparisons.)",
        "TGrep21 is a a grep-like utility for the Penn Treebank corpus of parsed Wall Street Journal texts.",
        "It allows Boolean expressions over nodes and regular expressions inside nodes.",
        "Matching uses a binary index and is performed recursively starting at the top node in the query.",
        "TIGERSearch2 is associated with the German syntactic corpus TIGER.",
        "The tool is more typed than TGrep2 and allows search over discontinuous constituents that are common in German.",
        "TIGERSearch stores the corpus in a Prolog-like logical form and searches using unification matching.",
        "LPath is an extension of XPath with three features: immediate precedence, subtree scoping and edge alignment.",
        "The queries are executed in an SQL database (Lai and Bird, 2004).",
        "Other tree query languages include",
        "Some tools go beyond the tree model and allow multiple intersecting hierarchies.",
        "Emu (Cassidy and Harrington, 2001) supports sequential levels of annotations over speech datasets.",
        "Hierarchical relations may exist between tokens in different levels, but precedence is defined only between elements within the same level.",
        "The queries cannot",
        "express immediate precedence and are executed using a linear search.",
        "NiteQL is the query language for the MATE annotation workbench (McKelvie et al., 2001).",
        "It is highly expressive and, similarly to TIGERSearch, allows quering of intersecting hierarchies.",
        "However, the system uses XML for storage and retrieval, with an in-memory representation, which may limit its scalability.",
        "Bird and Liberman (2001) introduce an abstract general annotation approach, based on annotation graphs.",
        "The model is best suited for speech data, where time constraints are limited within an interval, but it is unnecessarily complex for supporting annotations on written text."
      ]
    },
    {
      "heading": "3 The Layered Query Language",
      "text": [
        "Our framework differs from others by simultaneously supporting several key features:",
        "• Multiple overlapping layers (which cannot be expressed in a single XML file), including self-overlapping (e.g., a word shared by two phrases from the same layer), and parallel layers, as when multiple syntactic parses span the same text.",
        "• Integration of multiple intersecting hierarchies (e.g., MeSH, UMLS, WordNet).",
        "• Flexible results format.",
        "• Tight integration with SQL, including application of SQL operators over the returned results.",
        "• Scalability to large collections such as MED-LINE (containing millions of documents).4",
        "While existing systems possess some of these features, none offers all of them.",
        "We assume that the underlying text is fairly static.",
        "While we support addition, removal and editing of annotations via a Java API, we do not optimize for efficient editing, but instead focus on compact representation, easy query formulation, easy addition and removal of layers, and straightforward translation into SQL.",
        "Below we illustrate our Layered Query Language (LQL) using examples from bioscience NLP.5",
        "of the language and additional examples.",
        "Figure 1 illustrates the layered annotation of a sentence from biomedical text.",
        "Each annotation represents an interval spanning a sequence of characters, using absolute beginning and ending positions.",
        "Each layer corresponds to a conceptually different kind of annotation (e.g., word, gene/protein6, shallow parse).",
        "Layers can be sequential, overlapping (e.g., two concepts sharing the same word), and hierarchical (either spanning, when the intervals are nested as in a parse tree, or ontologically, when the token itself is derived from a hierarchical ontology).",
        "Word, POS and shallow parse layers are sequential (the latter can skip or span multiple words).",
        "The gene/protein layer assigns IDs from the LocusLink database of gene names.7 For a given gene there are as many LocusLink IDs as the number of organisms it is found in (e.g., 4 in the case of the gene Bcl-2).",
        "The MeSH layer contains entities from the hierarchical medical ontology MeSH (Medical Subject Headings).8 The MeSH annotations on Figure 1 are overlapping (share the word cell) and hierarchical both ways: spanning, since blood cell (with MeSH id D001773) orthographically spans the word cell (id A1 1), and ontologically, since blood cell is a kind of cell and cell death (id D0 16923) is a kind of Biological Phenomena.",
        "Given this annotation, we can extract potential protein-protein interactions from MEDLINE text.",
        "One simple approach is to follow (Blaschke et al., 1999), who developed a list of verbs (and their derived forms) and scanned for sentences containing the pattern PROTEIN ... INTERACTION-VERB ...",
        "PROTEIN.",
        "This can be expressed in LQL as follows:",
        "This example extracts sentences containing a protein name in the gene/protein layer, followed by any sequence of words (because of ALLOW GAPS), followed by the interaction verb activates, followed by any sequence of words, and finally followed by an",
        "other protein name.",
        "All possible protein matches within the same sentence will be returned.",
        "The results are presented as pairs of protein names.",
        "Each query level specifies a layer (e.g., sentence, part-of-speech, gene/protein) and optional restrictions on the attribute values.",
        "A binding statement is allowed after the layer’s closing bracket.",
        "We can search for more than one verb simultaneously, e.g., by changing the POS layer of the query above",
        "Further, a wildcard like content ˜ ’ activate%’ can match the verb forms activate, activates and activated.",
        "We can also use double quotes \" to make the comparison case insensitive.",
        "Finally, since LQL is automatically translated into SQL, SQL code can be written to surround the LQL query and to reference its results, thus allowing the use of SQL operators such as GROUP BY, COUNT, DISTINCT, ORDER BY, etc., as well as set operations like UNION.",
        "Now consider the task of extracting interactions between chemicals and diseases.",
        "Given the sentence “Adherence to statin prevents one coronary heart disease event for every 429 patients.”, we want to extract the relation that statin (potentially) prevents coronary heart disease.",
        "The latter is in the MeSH hierarchy (id D003327) with tree codes C14.280.647.250 and C14.907.553.470.250, while the former is listed in the MeSH supplementary concepts (ID C047068).",
        "In fact, the whole C subtree in MeSH contains diseases and all supplementary MeSH concepts represent chemicals.",
        "So we can find potentially useful sentences (to be further processed by another algorithm) using the following query:",
        "This looks for sentences containing two NPs in any order without overlaps (NO ORDER) and separated by any number of intervening elements.",
        "We further require one of the NPs to end (ensured by the $ symbol) with a chemical, and the other (the disease) to end with a MeSH term from the C subtree."
      ]
    },
    {
      "heading": "4 System Architecture",
      "text": [
        "Our basic model is similar to that of TIPSTER (Gr-ishman, 1996): each annotation is stored as a record, which specifies the character-level beginning and ending positions, the layer and the type.",
        "The basic table9 contains the following columns: (1) an-notationid; (2) docid; (3) section: title, abstract or body; (4) layerid: layer identifier (word, POS, shallow parse, sentence, etc.",
        "); (5) startcharpos: beginning character position, relative to section and docid; (6) endcharpos: ending character position; (7) tag type: a layer-specific token identifier.",
        "After evaluating various different extensions of the structure above, we have arrived at one with some additional columns, which improves cross-layer query performance: (8) sentenceid; (9) wordid; (10) firstwordpos; and (11) lastwordpos.",
        "Columns (9)-(11) treat the word layer as atomic and require all annotations to coincide with word boundaries.",
        "Finally, we use two types of composite indexes: forward, which looks for positions in a given document, and inverted, which supports searching based on annotation values.1 0 An index lookup can be performed on any column combination that corresponds to an index prefix.",
        "An RDBMS’ query optimizer estimates the optimal access paths (index and table scans), and join orders based on statistics collected over the stored records.",
        "In complex queries a combination of forward (F) and inverted (I) indexes is typically used.",
        "The particular ones we used are:11 (F) +docid+section+layerid+sentence +firstwordpos+lastwordpos+tag type (I) +layerid+tag type+docid+section+sentence +firstwordpos+lastwordpos (I) +wordid+layerid+tag type+docid+section +sentence+firstwordpo s We have experimented with the system on a collection of 1.4 million MEDLINE abstracts, which include 10 million sentences annotated with 320 million multi-layered annotations.",
        "The current database size is around 70 GB.",
        "Annotations are indexed as they are inserted into the database.",
        "Our initial evaluation shows variation in the execution time, depending on the kind and complexity of the query.",
        "Response time for simple queries is usually less than a minute, while for more complex ones it can be much longer.",
        "We are in the process of further investigating and tuning the system."
      ]
    },
    {
      "heading": "5 Conclusions and Future Work",
      "text": [
        "We have provided a mechanism to effectively store and query layers of textual annotations, focusing on compact representation, easy query formulation, easy addition and removal of layers, and straightforward translation into SQL.",
        "Using a collection of 1.4 MEDLINE abstracts, we have evaluated various structures for data storage and have arrived at a promising one.",
        "We have also designed a concise language (LQL) to express queries that span multiple levels of annotation structure, allowing users to express queries in a syntax that closely resembles the underlying annotation structure.",
        "We plan to release the software to the research community for use in their own annotation and querying needs.",
        "Acknowledgements This research was supported by NSF DBI-0317510 and a gift from Genentech."
      ]
    }
  ]
}
