{
  "info": {
    "authors": [
      "Miguel Ballesteros",
      "Joakim Nivre"
    ],
    "book": "EACL",
    "id": "acl-E12-2012",
    "title": "MaltOptimizer: An Optimization Tool for MaltParser",
    "url": "https://aclweb.org/anthology/E12-2012",
    "year": 2012
  },
  "references": [
    "acl-C10-1093",
    "acl-D07-1096",
    "acl-J08-4003",
    "acl-P05-1013",
    "acl-P09-1040",
    "acl-W06-2920",
    "acl-W09-3811"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "Data-driven systems for natural language processing have the advantage that they can easily be ported to any language or domain for which appropriate training data can be found.",
        "However, many data-driven systems require careful tuning in order to achieve optimal performance, which may require specialized knowledge of the system.",
        "We present MaltOptimizer, a tool developed to facilitate optimization of parsers developed using MaltParser, a data-driven dependency parser generator.",
        "MaltOptimizer performs an analysis of the training data and guides the user through a three-phase optimization process, but it can also be used to perform completely automatic optimization.",
        "Experiments show that MaltOptimizer can improve parsing accuracy by up to 9 percent absolute (labeled attachment score) compared to default settings.",
        "During the demo session, we will run MaltOptimizer on different data sets (user-supplied if possible) and show how the user can interact with the system and track the improvement in parsing accuracy."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "In building NLP applications for new languages and domains, we often want to reuse components for tasks like part-of-speech tagging, syntactic parsing, word sense disambiguation and semantic role labeling.",
        "From this perspective, components that rely on machine learning have an advantage, since they can be quickly adapted to new settings provided that we can find suitable training data.",
        "However, such components may require careful feature selection and parameter tuning in order to give optimal performance, a task that can be difficult for application developers without specialized knowledge of each component.",
        "A typical example is MaltParser (Nivre et al. 2006), a widely used transition-based dependency parser with state-of-the-art performance for many languages, as demonstrated in the CoNLL shared tasks on multilingual dependency parsing (Buch-holz and Marsi, 2006; Nivre et al. 2007).",
        "MaltParser is an open-source system that offers a wide range of parameters for optimization.",
        "It implements nine different transition-based parsing algorithms, each with its own specific parameters, and it has an expressive specification language that allows the user to define arbitrarily complex feature models.",
        "Finally, any combination of parsing algorithm and feature model can be combined with a number of different machine learning algorithms available in LIBSVM (Chang and Lin, 2001) and LIBLINEAR (Fan et al. 2008).",
        "Just running the system with default settings when training a new parser is therefore very likely to result in suboptimal performance.",
        "However, selecting the best combination of parameters is a complicated task that requires knowledge of the system as well as knowledge of the characteristics of the training data.",
        "This is why we present MaltOptimizer, a tool for optimizing MaltParser for a new language or domain, based on an analysis of the training data.",
        "The optimization is performed in three phases: data analysis, parsing algorithm selection, and feature selection.",
        "The tool can be run in ?batch mode?",
        "to perform completely automatic optimization, but it is also possible for the user to manually tune parameters after each of the three phases.",
        "In this way, we hope to cater for users",
        "without specific knowledge of MaltParser, who can use the tool for black box optimization, as well as expert users, who can use it interactively to speed up optimization.",
        "Experiments on a number of data sets show that using MaltOptimizer for completely automatic optimization gives consistent and often substantial improvements over the default settings for MaltParser.",
        "The importance of feature selection and parameter optimization has been demonstrated for many NLP tasks (Kool et al. 2000; Daelemans et al. 2003), and there are general optimization tools for machine learning, such as Paramsearch (Van den Bosch, 2004).",
        "In addition, Nilsson and Nugues (2010) has explored automatic feature selection specifically for MaltParser, but MaltOptimizer is the first system that implements a complete customized optimization process for this system.",
        "In the rest of the paper, we describe the optimization process implemented in MaltOptimizer (Section 2), report experiments (Section 3), outline the demonstration (Section 4), and conclude (Section 5).",
        "A more detailed description of MaltOptimizer with additional experimental results can be found in Ballesteros and Nivre (2012)."
      ]
    },
    {
      "heading": "2 The MaltOptimizer System",
      "text": [
        "MaltOptimizer is written in Java and implements an optimization procedure for MaltParser based on the heuristics described in Nivre and Hall (2010).",
        "The system takes as input a training set, consisting of sentences annotated with dependency trees in CoNLL data format,1 and outputs an optimized MaltParser configuration together with an estimate of the final parsing accuracy.",
        "The evaluation metric that is used for optimization by default is the labeled attachment score (LAS) excluding punctuation, that is, the percentage of non-punctuation tokens that are assigned the correct head and the correct label (Buchholz and Marsi, 2006), but other options are available.",
        "For efficiency reasons, MaltOptimizer only explores linear multiclass SVMs in LIBLINEAR."
      ]
    },
    {
      "heading": "2.1 Phase 1: Data Analysis",
      "text": [
        "After validating that the data is in valid CoNLL format, using the official validation script from the CoNLL-X shared task,2 the system checks the",
        "of the data set.",
        "If there is not enough memory available on the current machine, the system informs the user and automatically reduces the size of the data set to a feasible subset.",
        "After these initial checks, MaltOptimizer checks the following characteristics of the data set:",
        "1.",
        "Number of words/sentences.",
        "2.",
        "Existence of ?covered roots?",
        "(arcs spanning tokens with HEAD = 0).",
        "3.",
        "Frequency of labels used for tokens with HEAD = 0.",
        "4.",
        "Percentage of non-projective arcs/trees.",
        "5.",
        "Existence of non-empty feature values in the LEMMA and FEATS columns.",
        "6.",
        "Identity (or not) of feature values in the CPOSTAG and POSTAG columns.",
        "Items 1?3 are used to set basic parameters in the rest of phase 1 (see below); 4 is used in the choice of parsing algorithm (phase 2); 5 and 6 are relevant for feature selection experiments (phase 3).",
        "If there are covered roots, the system checks whether accuracy is improved by reattaching such roots in order to eliminate spurious non-projectivity.",
        "If there are multiple labels for tokens with HEAD=0, the system tests which label is best to use as default for fragmented parses.",
        "Given the size of the data set, the system suggests different validation strategies during phase 1.",
        "If the data set is small, it recommends using 5-fold cross-validation during subsequent optimization phases.",
        "If the data set is larger, it recommends using a single development set instead.",
        "But the user can override either recommendation and select either validation method manually.",
        "When these checks are completed, MaltOptimizer creates a baseline option file to be used as the starting point for further optimization.",
        "The user is given the opportunity to edit this option file and may also choose to stop the process and continue with manual optimization."
      ]
    },
    {
      "heading": "2.2 Phase 2: Parsing Algorithm Selection",
      "text": [
        "MaltParser implements three groups of transition-based parsing algorithms:3 (i) Nivre's algorithms (Nivre, 2003; Nivre, 2008), (ii) Covington's algorithms (Covington, 2001; Nivre, 2008), and (iii) 3Recent versions of MaltParser contains additional algorithms that are currently not handled by MaltOptimizer.",
        "rithm (+PP for pseudo-projective parsing).",
        "Stack algorithms (Nivre, 2009; Nivre et al. 2009) Both the Covington group and the Stack group contain algorithms that can handle non-projective dependency trees, and any projective algorithm can be combined with pseudo-projective parsing to recover non-projective dependencies in post-processing (Nivre and Nilsson, 2005).",
        "In phase 2, MaltOptimizer explores the parsing algorithms implemented in MaltParser, based on the data characteristics inferred in the first phase.",
        "In particular, if there are no non-projective dependencies in the training set, then only projective algorithms are explored, including the arc-eager and arc-standard versions of Nivre's algorithm, the projective version of Covington's projective parsing algorithm and the projective Stack algorithm.",
        "The system follows a decision tree considering the characteristics of each algorithm, which is shown in Figure 1.",
        "On the other hand, if the training set contains a substantial amount of non-projective dependencies, MaltOptimizer instead tests the non-projective versions of Covington's algorithm and the Stack algorithm (including a lazy and an eager variant), and projective algorithms in combination with pseudo-projective parsing.",
        "The system then follows the decision tree shown in Figure 2.",
        "If the number of trees containing non-projective arcs is small but not zero, the system tests both projective algorithms and non-projective algorithms, following the decision trees in Figure 1 and Figure 2 and picking the algorithm that gives the best results after traversing both.",
        "Once the system has finished testing each of the algorithms with default settings, MaltOptimizer tunes some specific parameters of the best performing algorithm and creates a new option file for the best configuration so far.",
        "The user is again given the opportunity to edit the option file (or stop the process) before optimization continues."
      ]
    },
    {
      "heading": "2.3 Phase 3: Feature Selection",
      "text": [
        "In the third phase, MaltOptimizer tunes the feature model given all the parameters chosen so far (especially the parsing algorithm).",
        "It starts with backward selection experiments to ensure that all features in the default model for the given parsing algorithm are actually useful.",
        "In this phase, features are omitted as long as their removal does not decrease parsing accuracy.",
        "The system then proceeds with forward selection experiments, trying potentially useful features one by one.",
        "In this phase, a threshold of 0.05% is used to determine whether an improvement in parsing accuracy is sufficient for the feature to be added to the model.",
        "Since an exhaustive search for the best possible feature model is impossible, the system relies on a greedy optimization strategy using heuristics derived from proven experience (Nivre and Hall, 2010).",
        "The major steps of the forward selection experiments are the following:4",
        "1.",
        "Tune the window of POSTAG n-grams over the parser state.",
        "2.",
        "Tune the window of FORM features over the parser state.",
        "3.",
        "Tune DEPREL and POSTAG features over the partially built dependency tree.",
        "4.",
        "Add POSTAG and FORM features over the input string.",
        "5.",
        "Add CPOSTAG, FEATS, and LEMMA features if available.",
        "6.",
        "Add conjunctions of POSTAG and FORM",
        "features.",
        "These six steps are slightly different depending on which algorithm has been selected as the best in phase 2, because the algorithms have different parsing orders and use different data structures,",
        "comparison to default settings for the 13 training sets from the CoNLL-X shared task (Buchholz and Marsi, 2006).",
        "but the steps are roughly equivalent at a certain level of abstraction.",
        "After the feature selection experiments are completed, MaltOptimizer tunes the cost parameter of the linear SVM using a simple stepwise search.",
        "Finally, it creates a complete configuration file that can be used to train MaltParser on the entire data set.",
        "The user may now continue to do further optimization manually."
      ]
    },
    {
      "heading": "3 Experiments",
      "text": [
        "In order to assess the usefulness and validity of the optimization procedure, we have run all three phases of the optimization on all the 13 data sets from the CoNLL-X shared task on multilingual dependency parsing (Buchholz and Marsi, 2006).",
        "Table 1 shows the labeled attachment scores with default settings and after each of the three optimization phases, as well as the difference between the final configuration and the default.",
        "The first thing to note is that the optimization improves parsing accuracy for all languages without exception, although the amount of improvement varies considerably from about 1 percentage point for Chinese, Japanese and Swedish to 8?9 points for Dutch, Czech and Turkish.",
        "For most languages, the greatest improvement comes from feature selection in phase 3, but we also see sig-5Note that these results are obtained using 80% of the training set for training and 20% as a development test set, which means that they are not comparable to the test results from the original shared task, which were obtained using the entire training set for training and a separate held-out test set for evaluation.",
        "nificant improvement from phase 2 for languages with a substantial amount of non-projective dependencies, such as Czech, Dutch and Slovene, where the selection of parsing algorithm can be very important.",
        "The time needed to run the optimization varies from about half an hour for the smaller data sets to about one day for very large data sets like the one for Czech."
      ]
    },
    {
      "heading": "4 System Demonstration",
      "text": [
        "In the demonstration, we will run MaltOptimizer on different data sets and show how the user can interact with the system while keeping track of improvements in parsing accuracy.",
        "We will also explain how to interpret the output of the system, including the final feature specification model, for users that are not familiar with MaltParser.",
        "By restricting the size of the input data set, we can complete the whole optimization procedure in 10?15 minutes, so we expect to be able to complete a number of cycles with different members of the audience.",
        "We will also let the audience contribute their own data sets for optimization, provided that they are in CoNLL format.6"
      ]
    },
    {
      "heading": "5 Conclusion",
      "text": [
        "MaltOptimizer is an optimization tool for MaltParser, which is primarily aimed at application developers who wish to adapt the system to a new language or domain and who do not have expert knowledge about transition-based dependency parsing.",
        "Another potential user group consists of researchers who want to perform comparative parser evaluation, where MaltParser is often used as a baseline system and where the use of suboptimal parameter settings may undermine the validity of the evaluation.",
        "Finally, we believe the system can be useful also for expert users of MaltParser as a way of speeding up optimization."
      ]
    },
    {
      "heading": "Acknowledgments",
      "text": [
        "The first author is funded by the Spanish Ministry"
      ]
    }
  ]
}
