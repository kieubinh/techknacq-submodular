{
  "info": {
    "authors": [
      "Shashank Srivastava",
      "Dirk Hovy",
      "Eduard Hovy"
    ],
    "book": "EMNLP",
    "id": "acl-D13-1144",
    "title": "A Walk-Based Semantically Enriched Tree Kernel Over Distributed Word Representations",
    "url": "https://aclweb.org/anthology/D13-1144",
    "year": 2013
  },
  "references": [
    "acl-C08-1088",
    "acl-D11-1096",
    "acl-D11-1116",
    "acl-E06-1015",
    "acl-I05-5003",
    "acl-J08-2003",
    "acl-P02-1034",
    "acl-P04-1043",
    "acl-P05-1015",
    "acl-P09-3004",
    "acl-W04-3219",
    "acl-W06-1603",
    "acl-W10-2919",
    "acl-W13-0907"
  ],
  "sections": [
    {
      "text": [
        "(1) Carnegie Mellon University, Pittsburgh (2) Center for Language Technology, University of Copenhagen, Denmark"
      ]
    },
    {
      "heading": "Abstract",
      "text": [
        "In this paper, we propose a walk-based graph kernel that generalizes the notion of tree-kernels to continuous spaces.",
        "Our proposed approach subsumes a general framework for word-similarity, and in particular, provides a flexible way to incorporate distributed representations.",
        "Using vector representations, such an approach captures both distributional semantic similarities among words as well as the structural relations between them (encoded as the structure of the parse tree).",
        "We show an efficient formulation to compute this kernel using simple matrix operations.",
        "We present our results on three diverse NLP tasks, showing state-of-the-art results."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "Capturing semantic similarity between sentences is a fundamental issue in NLP, with applications in a wide range of tasks.",
        "Previously, tree kernels based on common substructures have been used to model similarity between parse trees (Collins and Duffy, 2002; Moschitti, 2004; Moschitti, 2006b).",
        "These kernels encode a high number of latent syntactic features within a concise representation, and compute the similarity between two parse trees based on the matching of node-labels (words, POS tags, etc.",
        "), as well as the overlap of tree structures.",
        "While this is sufficient to capture syntactic similarity, it does not capture semantic similarity very well, even when using discrete semantic types as node labels.",
        "This constrains the utility of many traditional tree kernels in two ways: i) two sentences that are syntactically identical, but have no semantic similarity can receive a high matching score (see Table 1, top) while ii) two sentences with only local syntactic overlap, but high semantic similarity can receive low scores (see Table 1, bottom).",
        "tree pairs semantic syntactic score",
        "mantic similarity In contrast, distributional vector representations of words have been successful in capturing fine-grained semantics, but lack syntactic knowledge.",
        "Resources such as Wordnet, dictionaries and ontologies that encode different semantic perspectives can also provide additional knowledge infusion.",
        "In this paper, we describe a generic walk-based graph kernel for dependency parse trees that subsumes general notions of word-similarity, while focusing on vector representations of words to capture lexical semantics.",
        "Through a convolutional framework, our approach takes into account the distributional semantic similarities between words in a sentence as well as the structure of the parse tree.",
        "Our main contributions are: 1.",
        "We present a new graph kernel for NLP that extends to distributed word representations, and diverse word similarity measures.",
        "2.",
        "Our proposed approach provides a flexible framework for incorporating both syntax and semantics of sentence level constructions.",
        "3.",
        "Our generic kernel shows state-of-the-art performance on three eclectic NLP tasks."
      ]
    },
    {
      "heading": "2 Related Work",
      "text": [
        "Tree kernels in NLP Tree kernels have been extensively used to capture syntactic information about parse trees in tasks such as parsing (Collins and Duffy, 2002), NER (Wang et al., 2010; Cumby and Roth, 2003), SRL (Moschitti et al., 2008) and relation extraction (Qian et al., 2008).",
        "These kernels are based on the paradigm that parse trees are similar if they contain many common substructures, consisting of nodes with identical labels (Vishwanathan and Smola, 2003; Collins and Duffy, 2002).",
        "Moschitti (2006a) proposed a partial tree kernel that adds flexibility in matching tree substructures.",
        "Croce et al. (2011) introduce a lexical semantic tree kernel that incorporates continuous similarity values between node labels, albeit with a different focus than ours and would not match words with different POS.",
        "This would miss the similarity of ?feline friend?",
        "and ?cat?",
        "in our examples, as it requires matching the adjective ?feline?",
        "with ?cat?, and verb ?kissed?",
        "with ?kiss?.",
        "Walk based kernels Kernels for structured data derive from the seminal Convolution Kernel formalism by Haussler (1999) for designing kernels for structured objects through local decompositions.",
        "Our proposed kernel for parse trees is most closely associated with the random walk-based kernels defined by Gartner et al. (2003) and Kashima et al. (2003).",
        "The walk-based graph kernels proposed by Gartner et al. (2003) count the common walks between two input graphs, using the adjacency matrix of the product graph.",
        "This work extends to graphs with a finite set of edge and node labels by appropriately modifying the adjacency matrix.",
        "Our kernel differs from these kernels in two significant ways: (i) Our method extends beyond label matching to continuous similarity metrics (this conforms with the very general formalism for graph kernels in Vish-wanathan et al. (2010)).",
        "(ii) Rather than using the adjacency matrix to model edge-strengths, we modify the product graph and the corresponding adjacency matrix to model node similarities."
      ]
    },
    {
      "heading": "3 Vector Tree Kernels",
      "text": [
        "In this section, we describe our kernel and an algorithm to compute it as a simple matrix multiplication formulation."
      ]
    },
    {
      "heading": "3.1 Kernel description",
      "text": [
        "The similarity kernel K between two dependency trees can be defined as:",
        "where the summation is over pairs of equal length walks h1 and h2 on the trees T1 and T2 respectively.",
        "The similarity between two n length walks, k(h1, h2), is in turn given by the pairwise similarities of the corresponding nodes vih in the respective walks, measured via the node similarity kernel ?",
        ":",
        "respond to words in the two parse trees, and thus can often be conveniently represented as vectors over distributional/dependency contexts.",
        "The vector representation allows us several choices for the node kernel function ?.",
        "In particular, we consider:",
        ") 2.",
        "Positive-Linear: ?",
        "(v1, v2) = max(vT1 v2, 0) 3.",
        "Sigmoid: ?",
        "(v1, v2) =",
        "We note that the kernels above take strictly non-negative values in [0, 1] (assuming word vector representations are normalized).",
        "Non-negativity is necessary, since we define the walk kernel to be the product of the individual kernels.",
        "As walk kernels are products of individual node-kernels, boundedness by 1 ensures that the kernel contribution does not grow arbitrarily for longer length walks.",
        "The kernel function K puts a high similarity weight between parse trees if they contain common walks with semantically similar words in corresponding positions.",
        "Apart from the Gaussian kernel, the other two kernels are based on the dot-product of the word vector representations.",
        "We observe that the positive-linear kernel defined above is not a Mercer kernel, since the max operation makes it non-positive semidefinite (PSD).",
        "However, this formulation has desirable properties, most significant being that all walks with one or more node-pair mismatches are strictly penalized and add no score to",
        "the tree-kernel.",
        "This is a more selective condition than the other two kernels, where mediocre walk combinations could also add small contributions to the score.",
        "The sigmoid kernel is also non-PSD, but is known to work well empirically (Boughorbel et al., 2005).",
        "We also observe while the summation in the kernel is over equal length walks, the formalism can allow comparisons over different length paths by including self-loops at nodes in the tree.",
        "With a notion of similarity between words that defines the local node kernels, we need computational machinery to enumerate all pairs of walks between two trees, and compute the summation over products in the kernel K(T1, T2) efficiently.",
        "We now show a convenient way to compute this as a matrix geometric series."
      ]
    },
    {
      "heading": "3.2 Matrix Formulation for Kernel Computation",
      "text": [
        "Walk-based kernels compute the number of common walks using the adjacency matrix of the product graph (Gartner et al., 2003).",
        "In our case, this computation is complicated by the fact that instead of counting common walks, we need to compute a product of node-similarities for each walk.",
        "Since we compute similarity scores over nodes, rather than edges, the product for a walk of length n involves n+ 1 factors.",
        "However, we can still compute the tree kernel K as a simple sum of matrix products.",
        "Given two trees T (V,E) and T ?",
        "(V ?, E?",
        "), we define a modified product graph G(Vp, Ep) with an additional ghost node u added to the vertex set.",
        "The vertex and edge sets for the modified product graph are given as:",
        "The modified product graph thus has additional edges connecting u to all other nodes.",
        "In our formulation, u now serves as a starting location for all random walks on G, and a k + 1 length walk of G corresponds to a pair of k length walks on T and T ?.",
        "We now define the weighted adjacency matrixW for G, which incorporates the local node kernels.",
        "There is a straightforward bijective mapping from walks on G starting from u to pairs of walks on T and T ?.",
        "Restricting ourselves to the case when the first node of a k + 1 length walk is u, the next k steps allow us to efficiently compute the products of the node similarities along the k nodes in the corresponding k length walks in T and T ?.",
        "Given this adjacency matrix for G, the sum of values of k length walk kernels is given by the uth row of the (k+1)th exponent of the weighted adjacency matrix (denoted asW k+1).",
        "This corresponds to k+1 length walks on G starting from u and ending at any node.",
        "Specifically, Wu,(vi,v?j) corresponds to the sum of similarities of all common walks of length n in T and T ?",
        "that end in vi in T and v?j in T ?.",
        "The kernel K for walks upto length N can now be calculated as :",
        "We note that in out formulation, longer walks are naturally discounted, since they involve products of more factors (generally all less than unity).",
        "The above kernel provides a similarity measure between any two pairs of dependency parse-trees.",
        "Depending on whether we consider directional relations in the parse tree, the edge set Ep changes, while the procedure for the kernel computation remains the same.",
        "Finally, to avoid larger trees yielding larger values for the kernel, we normalize the kernel by the number of edges in the product graph."
      ]
    },
    {
      "heading": "4 Experiments",
      "text": [
        "We evaluate the Vector Tree Kernel (VTK) on three NLP tasks.",
        "We create dependency trees using the FANSE parser (Tratz and Hovy, 2011), and use distribution-based SENNA word embeddings by Collobert et al. (2011) as word representations.",
        "These embeddings provide low-dimensional vector",
        "representations of words, while encoding distributional semantic characteristics.",
        "We use LibSVM for classification.",
        "For sake of brevity, we only report results for the best performing kernel.",
        "We first consider the Cornell Sentence Polarity dataset by Pang and Lee (2005).",
        "The task is to identify the polarity of a given sentence.",
        "The data consists of 5331 sentences from positive and negative movie reviews.",
        "Many phrases denoting sentiments are lexically ambiguous (cf. ?terribly entertaining?",
        "vs ?terribly written?",
        "), so simple lexical approaches are not expected to work well here, while syntactic context could help disambiguation.",
        "Next, we try our approach on the MSR paraphrase corpus.",
        "The data contains a training set of 4077 pairs of sentences, annotated as paraphrases and non-paraphrases, and a test-set of 1726 sentence pairs.",
        "Each instance consists of a pair of sentences, so the VTK cannot be directly used by a kernel machine for classification.",
        "Instead, we generate 16 kernel values based for each pair on different parameter settings of the kernel, and feed these as features to a linear SVM.",
        "We finally look at the annotated Metaphor corpus by (Hovy et al., 2013).",
        "The dataset consists of sentences with specified target phrases.",
        "The task here is to classify the target use as literal or metaphorical.",
        "We focus on target phrases by upweighting walks that pass through target nodes.",
        "This is done by simply multiplying the corresponding entries in the adjacency matrix by a constant factor."
      ]
    },
    {
      "heading": "5 Results",
      "text": []
    },
    {
      "heading": "5.1 Sentence Polarity Dataset",
      "text": [
        "On the polarity data set, Vector Tree Kernel (VTK) significantly outperforms the state-of-the-art method by Carrillo de Albornoz et al. (2010), who use a hybrid model incorporating databases of affective lexicons, and also explicitly model the effect of negation and quantifiers (see Table 2).",
        "Lexical approaches using pairwise semantic similarity of SENNA embeddings (DSM), as well as Wordnet Affective Database-based (WNA) labels perform poorly (Carrillo de Albornoz et al., 2010), showing the importance of syntax for this particular problem.",
        "On the other hand, a syntactic tree kernel (SSTK) that ignores distributional semantic similarity between words, fails as expected."
      ]
    },
    {
      "heading": "5.2 MSR Paraphrase Dataset",
      "text": [
        "On the MSR paraphrase corpus, VTK performs competitively against state-of-the-art-methods.",
        "We expected paraphrasing to be challenging to our method, since it can involve little syntactic overlap.",
        "However, data analysis reveals that the corpus generally contains sentence pairs with high syntactic similarity.",
        "Results for this task are encouraging since ours is a general approach, while other systems use multiple task-specific features like semantic role labels, active-passive voice conversion, and synonymy resolution.",
        "In the future, incorporating such features to VTK should further improve results for this task ."
      ]
    },
    {
      "heading": "5.3 Metaphor Identification",
      "text": [
        "On the Metaphor corpus, VTK improves the previous score by Hovy et al. (2013), whose approach uses an conjunction of lexical and syntactic tree kernels (Moschitti, 2006b), and distributional vectors.",
        "VTK identified several templates of metaphor usage such as ?warm heart?",
        "and ?cold shoulder?.",
        "We look towards approaches for automatedly mining such metaphor patterns from a corpus."
      ]
    },
    {
      "heading": "6 Conclusion",
      "text": [
        "We present a general formalism for walk-based kernels to evaluate similarity of dependency trees.",
        "Our method generalizes tree kernels to take distributed representations of nodes as input, and capture both lexical semantics and syntactic structures of parse trees.",
        "Our approach has tunable parameters to look for larger or smaller syntactic constructs.",
        "Our experiments shows state-of-the-art performance on three diverse NLP tasks.",
        "The approach can generalize to any task involving structural and local similarity, and arbitrary node similarity measures."
      ]
    }
  ]
}
