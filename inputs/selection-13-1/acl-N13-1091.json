{
  "info": {
    "authors": [
      "Amnon Lotan",
      "Asher Stern",
      "Ido Dagan"
    ],
    "book": "NAACL",
    "id": "acl-N13-1091",
    "title": "TruthTeller: Annotating Predicate Truth",
    "url": "https://aclweb.org/anthology/N13-1091",
    "year": 2013
  },
  "references": [
    "acl-D12-1048",
    "acl-S12-1020",
    "acl-W07-1431",
    "acl-W08-1301",
    "acl-W09-3714"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "We propose a novel semantic annotation type of assigning truth values to predicate occurrences, and present TruthTeller, a standalone publicly-available tool that produces such annotations.",
        "TruthTeller integrates a range of semantic phenomena, such as negation, modality, presupposition, implicativity, and more, which were dealt only partly in previous works.",
        "Empirical evaluations against human annotations show satisfactory results and suggest the usefulness of this new type of tool for NLP."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "In a text, the action or relation denoted by every predicate can be seen as being either positively or negatively inferred from its sentence, or otherwise having an unknown truth status.",
        "Only in (3) below can we infer that Gal sold her shop, hence the positive truth value of the predicate sell, while according to (2) and (4) Gal did not sell it, hence the negative truth values, and in (1) we do not know if she sold it or not (the notations pt+, pt-and pt?",
        "denote truth states, defined in Subsection 2.3).",
        "Identifying these predicate truth values is an important subtask within many semantic processing scenarios, including various applications such as Question Answering (QA), Information Extraction (IE), paraphrasing and summarization.",
        "The following examples illustrate the phenomenon:",
        "(1) Gal made an attempt pt+ to sell pt?",
        "her shop.",
        "(2) Gal did not try pt?",
        "to sell pt?",
        "her shop after hearing pt+ the offers.",
        "(3) Maybe Gal wasn't smart pt?",
        "to sell pt+ her shop.",
        "(4) Gal wasn't smart pt?",
        "enough to sell pt?",
        "the",
        "shop that she had bought pt+.",
        "Previous works addressed specific aspects of the truth detection problem: Nairn et al. (2006), and later MacCartney & Manning (2007; 2009), were the first to build paraphrasing and inference systems that combine negation (see try in (2)), modality (smart in (3)) and ?natural logic?, a recursive truth value calculus (sell in (1-3)); recently, Mausam et al. (2012) built an open IE system that identifies granulated variants of modality and conditions on predicates (smart in (3)); and Kiparsky & Kiparsky (1970) and Karttunen (1971; 2012) laid the ground work for factive and implicative entailment calculus (sell in (1-4)), as well as many generic constructions of presupposition (hearing in (2) is presupposed because it heads an adverbial clause and bought in (4) heads a finite relative clause), which, to our knowledge, have not yet been implemented computationally.",
        "Notice in the examples that presuppositions persist under negation, in questions and if-clauses, while entailments do not.",
        "In addition, there is a growing research line of negation and modality detection.",
        "See, for example, Morante & Daelemans (2012).",
        "We present TruthTeller1, a novel algorithm and system that identifies the truth value of each predicate in a given sentence.",
        "It annotates nodes in the text's dependency parse-tree via a combination of pattern-based annotation rules and a recursive algorithm based on natural logic.",
        "In the course of computing truth value, it also computes the implicativity/factivity signature of predicates, and their negation and modality to a basic degree, both of which are made available in the system output.",
        "It addresses and combines the aforementioned phenomena (see Section 2), many of which weren't dealt in previous systems.",
        "TruthTeller is an open source and publicly available annotation tool, offers a relatively simple algebra for truth value computation, and is accompanied by a publicly available lexicon of over 1,700 implicative and factive predicates.",
        "Also, we provide an intuitive GUI for viewing and modifying the algorithm's annotation rules."
      ]
    },
    {
      "heading": "2 Annotation Types and Algorithm",
      "text": [
        "This section summarizes the annotation algorithm (a detailed report is available with the system release).",
        "We perform the annotations over dependency parse trees, generated according to the Stanford Dependencies standard (de Marn-effe and Manning, 2008).",
        "For all verbs, nouns and adjectives in a sentence's parse tree, we produce the following 4 annotation types, given in the order they are calculated, as described in the following subsections:",
        "1.",
        "Predicate Implication Signature (sig) - describes the pattern by which the predicate entails or presupposes its complements, e.g., the verb refuse entails the negative of its complements: Ed refused to pay entails that Ed didn't pay.",
        "2.",
        "Negation and Uncertainty (NU) - indicates whether the predicate is modified by an uncertainty modifier like might, probably, etc., or whether it's negated by no, never etc.",
        "3.",
        "Clause-Truth (CT) - indicates whether the 1http://cs.biu.ac.il/~nlp/downloads/TruthTeller entire clause headed by the predicate is entailed by the complete sentence 4.",
        "Predicate Truth (PT) - indicates whether",
        "the predicate itself is entailed by the sentence, as defined below Before presenting the detailed definitions and descriptions below, we give a high-level description of TruthTeller's algorithm, where each step relies on the results of its predecessor: a) every predicate in the parse tree is annotated with a predicate implication signature, identified by lexicon lookup; b) NU annotations are added, according to the presence of uncertainty modifiers (maybe, might, etc.)",
        "and negation modifies (not, never, etc.",
        "); c) predicates in certain presupposition constructions (e.g., adverbial clauses, WH arguments) are annotated with positive CT values; d) the parse tree is depth-first scanned, in order to compute both CT and PT annotations by the recursive effects of fac-tives and implicatives; e) in conjunction with the previous step, relative clause constructions are identified and annotated with CT and PT.",
        "Except for steps a) and d), all of the procedure is implemented as an ordered sequence of annotation rule applications.",
        "An annotation rule is a dependency parse tree template, possibly including variables, which assigns certain annotations to any parse tree node that matches against it.",
        "Step a) is implemented with signature lexicon lookups, and step d) is an algorithm implemented in code.",
        "To illustrate this entire process, Figure 1 presents the annotation process of a simple sentence, step by step, resulting in TruthTeller's complete output, fully specified below.",
        "Most other examples in this paper show only partial annotations for brevity."
      ]
    },
    {
      "heading": "2.1 Predicate Implication Signature",
      "text": [
        "Our system marks the signature of each predicate, as defined in Table 1.",
        "There, each signature has a left sign and a right sign.",
        "The left sign determines the clause truth value of the predicate's complements, when the predicate is in positive contexts (e.g., not negated), while the right sign applies in negative contexts (clause",
        "truth is defined in Subsection 2.3).",
        "See examples for both context types in the table.",
        "Each sign can be either + (positive), - (negative) or ?",
        "(unknown).",
        "The unknown sign signifies that the predicate does not entail its complements in any way.",
        "Signatures are identified via lookup, using two lexicons, one for single-word predicates and the other for verb+noun phrasal verbs, e.g., take the time to X.",
        "Our single-word lexicon is similar to those used in (Nairn et al., 2006) and (Bar-Haim et al., 2007), but is far greater, holding over 1,700 entries, while each of the previous two has, to the best of our knowledge, less than 300 entries.",
        "It was built semi automatically, out of a kernel of 320 manually inspected predicates, which was then expanded with WordNet synonyms (Fellbaum, 1998).",
        "The second lexicon is the implicative phrasal verb lexicon of Karttunen (2012), adapted into our framework.",
        "The +/?",
        "implicative serves as the default signature for all unlisted predicates.",
        "Signature is also sensitive to the type of the",
        "complement.",
        "Consider: (6) Ed forgot?/+ to call pt?",
        "Joe (7) Ed forgot+/+ that he called pt+ Joe",
        "Therefore, signatures are specified separately for finite and non finite complements of each predicate.",
        "After the initial signature lookup, two annotation rules correct the signatures of +/+ fac-tives modified by enough and too, into +/- and -/+, correspondingly, see Kiparsky & Kiparsky",
        "(1970).",
        "Compare: (8) Ed was mad+/+ to go ?",
        "Ed went (9) Ed was too mad?/+ to go ?",
        "Ed didn't go",
        "In addition, we observed, like Karttunen (2012), that most verbs that have passive voice and the into preposition become +/?",
        "implicatives, e.g., (10) Workers were pushed / maddened / managed+/?",
        "into signing ?",
        "They signed (11) Workers weren't pushed / maddened / managed+/?",
        "into signing?",
        "It is unknown whether they signed so we captured this construction in another rule."
      ]
    },
    {
      "heading": "2.2 Negation and Uncertainty (NU)",
      "text": [
        "NU takes the values {nu+, nu-, nu?",
        "}, standing for non-negated certain actions, negated certain actions, and uncertain actions.",
        "The first NU rules match against a closed set of negation modifiers around the predicate, like not, never, neither etc.",
        "(see (2)), while later rules detect uncertainty modifiers, like maybe, probably, etc.",
        "Therefore, nu?",
        "takes precedence over nu-.",
        "Many constructions of subject-negation,",
        "object-negation and ?double negation?",
        "are accounted for in our rules, as in: (12) Nobody was seennu?",
        "at the site (13) Almost nobody was seennu+ at the site 2.3 Clause Truth and Predicate Truth",
        "Clause Truth (CT, denoted as ct(p)) corresponds to polarity of Nairn et al. (2006).",
        "It represents whether the clause headed by a predicate p is entailed by the sentence, contradicted or unknown, and thus takes three values {ct+, ct-, ct?}.",
        "Predicate Truth (PT) (denoted as pt(p)) represents whether we can infer from the sentence that the action described by the predicate happened (or that its relation holds).",
        "It is defined as the binary product of NU and CT: Definition 1.",
        "PT = NU ?",
        "CT and takes analogous values: {pt+, pt-, pt?}.",
        "Intuitively, the product of two identical positive/negative values yields pt+, a positive and a negative yield pt-, and nu?",
        "or ct?",
        "always yield pt?.",
        "To illustrate these definitions, consider:",
        "(14) Meg may have sleptct+,pt?",
        "after eatingct+,pt+ the meal Ed cookedct+,pt+,",
        "while no one was therect+,pt?",
        "After signatures and NU are annotated, CT and PT are calculated.",
        "At first, we apply a set of rules that annotate generic presupposition constructions with ct+.",
        "These include adverbial clauses opening with {while, before, after, where, how come, because, since, owing to, though, despite, yet, therefore...},",
        "ct(gov(p)) is the CT of p's governing predicate.",
        "parataxis2.",
        "See for example the effects of after and while in (14).",
        "Then, we apply the following recursive sequential procedure.",
        "The tree root always gets ct+ (see slept in (14)).",
        "The tree is then scanned downwards, predicate by predicate.",
        "At each one, we compute CT by the formula in Figure 2, as follows.",
        "First, we check if one of the aforementioned presupposition rules already matched the node.",
        "Second, if none matched, we apply to the node's entire subtree another set of rules that annotate each relative clause with the CT of its governing noun3, ct(gov(p)) (see failed in (15)).",
        "Third, if no previous rule matched, and p is a complement of another predicate gov(p), then compCT(p) is calculated, by the following logic: when pt(gov(p)) is pt+ or pt-, the corresponding left or right sign of sig(gov(p)) is copied.",
        "Otherwise, if pt(gov(p)) = pt?, ct?",
        "is returned, except when the signature of gov(p) is +/+ (or -/-) factive, which always yields ct+ (or ct-).",
        "Third, if nothing applied to p, ct?",
        "is returned by default.",
        "Finally, PT is set, according to Definition 1.",
        "To illustrate, consider these annotations: (15) Gal managed+/?,ct+,pt+ a building+/?,ct+,pt+, which Ginger failed?/+,ct+,pt+ to sell+/?,ct?,pt?",
        "First, managed gets ct+ as the tree root.",
        "Then, we get compCT (building) = ct+, as the complement of managed+/?,pt+.",
        "Next, a relative clause rule copies ct+ from building to failed.",
        "Finally, compCT (sell) = ct- is calculated, as the complement of failed?/+,pt+."
      ]
    },
    {
      "heading": "3 Evaluation",
      "text": [
        "To evaluate TruthTeller's accuracy, we sampled 25 sentences from each of the RTE5 and RTE6 Test datasets (Bentivogli et al., 2009; Bentivogli et al., 2010), widely used for textual inference benchmarks.",
        "In these 50 sentences, we manually annotated each predicate, 153 in total, forming a gold standard.",
        "As baseline, we report the most frequent value for each annotation.",
        "The results, in Table 2, show high accuracy for all types, reducing the baseline CT and PT errors by half.",
        "Furthermore, most of the remaining errors were due to parser errors, according to a manual error analysis we conducted.",
        "The baseline for NU annotations shows that negations are scarce in these RTE datasets, which was also the case for ct- and pt annotations.",
        "Thus, Table 2 mostly indicates TruthTeller's performance in distinguishing positive CT and PT annotations from unknown ones, the latter constituting v20% of the gold standard.",
        "To further assess ct- and pt-annotations we performed two targeted measurements.",
        "Precision for ct- and pt-was measured by manually judging the correctness of such annotations by TruthTeller, on a sample from RTE6 Test including 50 ct- and 124 pt annotations.",
        "This test yielded 78% and 83% precision, respectively.",
        "pt- is more frequent as it is typically triggered by ct-, as well as by other constructions involving negation.",
        "Recall was estimated by employing a human annotator to go through the dataset and look for ct- and pt-gold standard annotations.",
        "The annotator identified 40 ?ct-'s and 50 ?pt-?s, out of which TruthTeller found 47.5% of the ?ct-'s and 74% of the ?pt-?s.",
        "In summary, TruthTeller's performance on our target PT annotations is quite satisfactory with 89% accuracy overall, having 83% precision and 74% recall estimates specifically for pt-."
      ]
    },
    {
      "heading": "4 Conclusions and Future Work",
      "text": [
        "We have presentedTruthTeller, a novel algorithm and system that identifies truth values of",
        "TruthTeller's 4 annotations.",
        "The right column gives the accuracy for the corresponding most-frequent baseline: {+/?, nu+, ct+, pt+}.",
        "predicates, the first such system to a) address or combine a wide variety of relevant grammatical constructions; b) be an open source annotation tool; c) address the truth value annotation task as an independent tool, which makes it possible for client systems to use its output, while previous works only embedded annotations in their task-specific systems; and d) annotate unknown truth values extensively and explicitly.",
        "TruthTeller may be used for several purposes, such as inferring parts of a sentence from the whole and improving textual entailment (and contradiction) detection.",
        "It includes a novel, large and accurate, lexicon of predicate implication signatures.",
        "While in this paper we evaluated the correctness of TruthTeller as an individual component, in the future we propose integrating it in a state-of-the-art RTE system and report its impact.",
        "One challenge in this scenario is having other system components interact with TruthTeller's decisions, possibly masking its effects.",
        "In addition, we plan to incorporate monotonicity calculations in the annotation process, like in MacCartney and Manning (2009)."
      ]
    },
    {
      "heading": "5 Acknowledgements",
      "text": [
        "This work was partially supported by the Israel Science Foundation grant 1112/08 and the European Community's Seventh Framework Programme (FP7/2007-2013) under grant agreement no.",
        "287923 (EXCITEMENT).",
        "We thank Roni Katzir and Fred Landman for useful discussions."
      ]
    }
  ]
}
