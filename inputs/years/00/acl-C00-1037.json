{
  "info": {
    "authors": [
      "Christian Ebert",
      "Marcus Kracht II"
    ],
    "book": "International Conference on Computational Linguistics",
    "id": "acl-C00-1037",
    "title": "Formal Syntax and Semantics of Case Stacking Languages",
    "url": "https://aclweb.org/anthology/C00-1037",
    "year": 2000
  },
  "references": [],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "In this paper the phenomenon of case stacking is investigated from a formal point of view.",
        "We will define a formal language whit idealized case marking behaviour and prove that stacked cases have the ability to encode structural information on the word thereby allowing for unrestricted word.",
        "order.",
        "Furthermore, the case stacks help to compute this structure with a low complexity bound.",
        "As a second part we propose a compositional semantics for languages with stacked cases and show how this proposal may work for our formal language as well as for an example from Warlpiri."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "Case stacking is a phenomenom that occurs in many Australian languages (such as Warlpiri and Kayardild) and e.g. Old Georgian.",
        "Case stacking is known to pose problems for the treatment of case in many formal frameworks today'.",
        "In (Nordlinger, 1997) the problem was attacked by extending the framework of LFG.",
        "Nordlinger claims that case morphology can construct grammatical relations and larger syntactic contexts.",
        "In Section 2 we will introduce an ideal Ian-owe, winch exhibits perfect marking.",
        "This language captures Nordlinger's idea of case as constructors of grammatical relations, but is independent of any syntactic framework.",
        "We will prove of this language that the case stacks provide all the information needed for reconstructing the functor-argument relations and the syntactic context a word appears in.",
        "Additionally, shice structure lies encoded in these case stacks there is no need to assume any phrase structure I see (Nonni/4er, 1997) and (Maiad, 1999) for a discussion on LIA-1 and HPSG respectively.",
        "or restriction on word order.",
        "At the end of this section we consider the computational complexity of our language and draw some conclusions about grammar formalisms that are able to generate it hi Section 3 we propose a compositional semantics for our case stacking languages.",
        "Unlike.",
        "Montague semantics, where the management of variables is not made explicit, we will use referent systems to keep track of variables and to make semantic composition ellicently computable2.",
        "The proposal will be applied to our formal language and to an example from Warlpiri."
      ]
    },
    {
      "heading": "2 Syntax",
      "text": [
        "In this section a perfectly case marked formal language will be defined and investigated.",
        "The definition of this language is based on terms consisting of functors and arguments and thus cases will be taken to mark arguments.",
        "In the following we let N denote the set of non-negative integers and – the concatenation of strings, winch is often omitted.",
        "We shall use typewriter font to denote true characters in print for a formal language."
      ]
    },
    {
      "heading": "2.1 Basic Definitions",
      "text": [
        "An abstract definition of terms runs as follows.",
        "Let 1' be a set of symbols and Q: F N function.",
        "The pair (F, 11) is called a signature.",
        "We shall often write Q in place of Q).",
        "An element f E F is called a funcior and Q( f) the arily of f. We let (LI max{Q(f) I f E denote the maximal arity.",
        "Terms are denoted here by strings in Polish Notation, for simplicity.",
        "The set C of case markcrs wil.1 he the set {1, ... ca}, which we assume to he disjoint from Given a term, each functor will be case marked according to the argiiment position it ocicopies.",
        "This is achieved through .",
        "the notion of a unit, whicli consists of a finictor and a sequence of case markers called case stack.",
        "The corresponding bag, A(1), is inductively defined as follows.",
        "For example, if f .",
        "g, and.",
        "3: are functors of arity 2,1 and 0, respectively, the bag A(f:,:ga:) is {1, x1.",
        "g2, x12}.",
        "The meaning of a unit x12 could be described by is the funetor of the first argument of ihe second argument of the tenni.",
        "Then the string (5)-4) – .",
        "' ' (1„_ is said 10 be a AM-string.",
        "Some of the A (fxg:E)-strings are, e.g. fx1g2x12 and g2x1fx12.",
        "We are now prepared to define a formal language over the alphabet F U C by collecting all AM-strings for a given signature: Definition 4.",
        "Let Q bc sig nature.",
        "Thc ideal ease marking language ICA/U:12 over this signature consists of all AM-strings such that t is a term over O."
      ]
    },
    {
      "heading": "2.2 Trees and Unique Readability",
      "text": [
        "There is a strong correspondence between bags and labelled trees since case stacks can be identified with tree addresses:",
        "The function 'I' reverses the case stacks of all units to get a set of tree addresses.",
        "Then the functor of the unit is assigned to the tree address.",
        "E.g. if the bag contains a unit g321 the resulting tree domain will contaiii a tree address .123 and the labelling function will assign g to Similarly one can define an inverse function ussigiiing a bag to each S tree.",
        "Thus there is a Injection between.",
        "Sh-labelled trees and bags.",
        "'I:herd:ore different hags correspond to different ordered, labelled trees.",
        "'filis shows that WO have unique readability for bags and since every /C.M.C.Si string can be uniquely decomposed into its units we may state the fcillowing proposition, Proposition 6.",
        "Let Q he asignaturc.",
        "Then ev-erg IC.A4E9 string is uniquely readable."
      ]
    },
    {
      "heading": "2.3 Pumpability and Semilinearity",
      "text": [
        "We will first consider the property of being finitely puinpable as defined in (Groenink, 1997).",
        "Proof.",
        "It is easy to observe that the pumpable parts cannot contain a functor since that would lead to pumped strings containing the same units more than once.",
        "Hence the number of units cannot be increased by pumping and all pumpable parts must consist of ease markers solely.",
        "But since the length of an IC e?",
        "string consisting of a fixed number of units is bounded each pumpable string could be pumped up such that it exceeds this bound.",
        "Tints TeM,CP is not finitely pumpable at all.",
        "Now we are concerned with semilinearity.",
        "where e(i) is the i + 1-th unit vector, which consists of zems except for the i-th component, which is 1.",
        "Note that - - given a term t the Parikh image of allAM-strings is the same since these are just concatenations of different permutations of the units in AM.",
        "In the following we make use of a proof technique used in (Michaelis and Kracht) 1997) to show that Old Georgian is not a semilinear language.",
        "We cite a special_ instance of a proposition given therein:",
        "In order to investigate the semilincarity of ZC,A4& we choose distinct symbols f,x C F, such that l(j) w and Q(x) = 0.",
        "We shall construct terms si by the following inductive definition:",
        "1.",
        "So := 2. s„, := f (sn_i , x, x) for n > 0",
        "it is easy to observe that by virtue of construction sn consists of n leading functors f and that in each iteration the number of x increases by (w – 1).",
        "Lemma 11.",
        "Let F Li C {f,1,x, 2, be an enumeration of the alphabet underlying IC,A4L°, where ff _2 are the remaining funclors in {f, x} Then the Parikh image of some A(s„)-string S„ is",
        "bound on the second COMpOneTli Proof.",
        "The first part of the lemma can lw proved in a straightforward way by induction on n. The claim on the upper bound follows from the observation that the number of occurrences of case marker 1 can be maximized by repeated embedding of terms in the first argument position.",
        "Proposition 12.",
        "Let Q be a signature.",
        "Then le.M.Crl is not semilinear.",
        "Proof.",
        "Let n = w and consider the linear, and_ hence semilinear, set 11 :=",
        "1.",
        "For any k E 1(k) (k, P (k),11') N+ there are some numbers N for which the n-tuple 1) belongs to M.",
        "Then the full preimage .L/?, of 1?",
        "under the Parikh map consists of all strings which contain n2((a) – + 1.)",
        "occurrences of the symbol x (where n2 is any number) and any number of occurrences of the symbols f, 1, .",
        ", w, and no other symbols.",
        "We define the language LM as the set of all strings belonging to LR and the ideal case marking languages.",
        "Then LH contains all A(.97,)-strings.",
        "Considering the Parikh image M of LH we get = [LM] = kif[L11] n kif[icA4,0] = R n kif [IC.M.C9] because of the definition of fin as the full preimage of R. But then the set M fulfills the conditions of Proposition 10 due to Lemma 1.1.",
        "Hence M is not semilinear.",
        "Since 1?, is semilinear lw definition and semilinearity is closed under intersection /CMG° is not semilinear."
      ]
    },
    {
      "heading": "2.4 Computational Complexity",
      "text": [
        "In this subsection the computational complexity of /CM& is considered.",
        "The results are achieved by defining a 3-tape-Turing machine acceptor (depending on a given signature) that recognizes IC,A4e.",
        "Pivof.",
        "In the Ibllowing we let it denote the length of the input string.",
        "The Turing machine algorithm can be subdivided into three main parts: 1..",
        "The input string is segmented into its units: The algorithm steps through the input and adds separation markers in between two units.",
        "This can be done in 0(n) time.",
        "2.",
        "The units are sorted according to their case stacks: More formally a 2,-way straight merge sort is performed.",
        "This sorting algorithm is known for its worst case optimal complexity: it performs the sort of k keys in 0(k log k) steps.",
        "In our case the keys are units and thus their number is clearly bounded by 71.",
        "The additional square root factor comes from the comparison step.",
        "One can show that the maximal length of a case stack occuring in an IC.A4Lc2 string of length 11 is bounded above by O('..rn).",
        "Hence a comparison of two units takes at most 0 (VT,) steps.",
        "Thus the overall complexity of the sorting part is 0(71,7 log n).",
        "3.",
        "The sorted sequence of units is dthecked: The algorithm successively generates case stacks according to the functors it has read.",
        "Each case stack is compared to the unit of the input.",
        "If they coincide the algorithm advances to the next unit on the input and generates the next case stack.",
        "After all case stacks have been generated the whole input string must have been worked through.",
        "In this case the algorithm accepts.",
        "This can be done in 0(n) time.",
        "Summing up the complexities of these three parts shows that the time complexity is as claimed in the proposition.",
        "Furthermore, the algorithm uses only the cells needled by the input plus at most k – 1 cells for additional separation markers (due to the first part), where k is the number of units the input string consists of.",
        "This shows that the space complexity is linear.",
        "2.5 Discussion A first conclusion we may draw is that cases have the ability to construct the context they appear in.",
        "/CMCc2 strings encode the same structural information as ordered labelled trees do thereby allowing unconstrained order of units.",
        "Additionally each such siring can be read unambigously.",
        "'This was shown by means of a bijection between bags and ordered labelled trees.",
        "The fact that ideal case marking languages are neither finitely pumpable nor semilinear means that they fall out of a lot of hierarchies of formal languages.",
        "As (Weir, 1988) shows, multicomponent tree adjoining grammars: generate only semilinear languages.",
        "Consequently, ideal case marking languages are not MCTALs.",
        "However, (Groenink, 1997) defines a class of grammars, called simple literal movement grammars, , hence linear context-free rewrite systems, which are shown to be weakly equivalent to MCTAGs in (Weir, 1988)",
        "which generate all and only the PTIME recognizable languages.",
        "Ideal case marking languages should therefore be generated by sonic simple literal movement grammar.",
        "We note furthermore that; the (theoretical) time complexity is significantly better than the best known for recognizing context-free grammars.",
        "In fact, we implemented a practically applicable algorithm which constructs the corresponding tree out of a given /CMG° string in linear time (in average)."
      ]
    },
    {
      "heading": "3 Semantics",
      "text": [
        "We are now going to propose a semantics for languages with stacked cases.",
        "The basic principle is rather easy: we are going to identify variables by case stacks thereby making use of referent systems."
      ]
    },
    {
      "heading": "3.1 Referent Systems",
      "text": [
        "The semantics uses two levels: a DRS-level, which contains DR,Ss, and a referent level, which talks about the names of the referents used by the DRS.",
        "Referent systems were introduced in (Vermeillen, 1995).",
        "We keep the idea of a referent system as a device which administrates the variables (or referents) under merge.",
        "The technical apparatus is however quite different.",
        "In particular, the referent systems we use define explicit; global string substitutions over the referent names.",
        "There is one additional symbol 0.",
        "It is a variable over names of referents.",
        "If we assume that a fimctor g has meaning g a simple lexical entry for g looks like this:",
        "Here, the upper part is the referent system, and the lower part an ordinary DRS, with a head section, containing a set of referents, and a body section, containing a set of clauses.",
        "This means that the semantics of a functor g is given by the application of g to its arguments.",
        "However, instead of variables x, y, etc.",
        "we find 1\"o, 2^o, etc.",
        "The semantics of a 0-ary functor x and a case marker, say 2, are:",
        "When two such structures come together they will be merged.",
        "The merge operation 0) takes two structures and results in a new one thereby using the referent systems to substitute the names of referents if necessary and then taking the union of the sets of clauses.",
        "E.g. the result of the merge /g/ 0) /2/ is",
        "The meaning of o : 2 – o is as follows.",
        "If some structure A is merged with one bearing that referent system, then all occurrences of the variable o in A are replaced by 2 – o.",
        "As the resulting referent system we get 0 : 0.",
        "This is exactly what is done in the merge shown above.",
        "We shall call a structure with referent system 0 : 0 plain.",
        "Merge is only defined if at least on structure is plain."
      ]
    },
    {
      "heading": "3.2 Semantics for ICMG",
      "text": [
        "To see how the semantics works we shall reproduce an earlier example and take the /CMG° string g2x1f x12.",
        "Motivated by the definition of the ideal case marking language we shall agree to the conventions that",
        "1.",
        "Case markers may only be suffixes 2.",
        "Case markers may only be attached to",
        "functors or case marked functors By these conventions the string under consideration must be parsed as (g2)(x1)(f )((x1)2).",
        "They force us to combine the functors with their case stacks first and afterwards combine the units.",
        "We shall understand that this is a syntactic restriction and not due to any semantics.",
        "The composition of g and 2 was already shown above and is repeated on the left hand side, using that 52(g) = 1.",
        "The result of composing x and 1 is shown to the right.",
        "which is the intended result.",
        "After the semantics of the units has been computed the order of merge is unimportant.",
        "If we choose to merge these semantics in an order different from the one above, we get the same result.",
        "By composing the structures for x and 1 we get the structure /x1/ shown above.",
        "We merge this one with that for 2 and get",
        "The merge of till two structures above finally gives",
        "We shall verify that the value of 0 is actually the same as the value of f(x, g(x)).",
        "Notice first that in the body of the DR,S we find that; 12-0 and 1-0 have the same value as x.",
        "We may therefore reduce the body of this structure to 2 – o = g(x) o f(x, 2 – o) Finally we may replace 2-0 by g(x) in the second line.",
        "We get then o f (x, g(x)) To show how this proposal may work for natural languages we give an example from Warlpiri4 in which case stacking occurs.",
        "We have to deal with the four case markers ergative (ERG), past tense (PsT), absolutive (ABs), and locative (LOG).",
        "Japanangka-EBG shoot-BST kangaroo-ABs rock-LOG-ERG Japanangka shot the kangaroo (while) on the rock We extend the proposal by taking into account that cases may not only fitnction as argument markers but have a semantics, too.",
        "This actually does not make much of a difference for this calculus.",
        "We propose the following semantics for the locative and the past tense case marker",
        "So, when the locative is attached, it says that the thing to which it; attaches is located somewhere.",
        "Here, 0 represents the thing that is located, while Loco is the location.",
        "The past tense semantics simply says that the thing which it attaches to happened in the past.",
        "We construe the meaning of the ergative as being the actor and the meaning of the absolutive as being the theme5."
      ]
    },
    {
      "heading": "/ERG/",
      "text": [
        "Again, we shall agree in using the conventions stated in subsection 3.2.",
        "First we have to attach the case markers to compose the resulting structures afterwards.",
        "The semantics of the proper noun Japanangka is taken to be a plain structure with body 0 = japanangka'.",
        "The composition of this structure and the ergative semantics yields",
        "We assume that the nominals pirlil and I marlul have the following lexical entries:",
        "Similady we can compose marlu with the absolutive case:",
        "The semantics of the verb is shown on the left hand side and its composition with /BST/ on the right hand side.",
        "0 shoot' (a) Finally by merging the structures I Japanangka-ERG\", //uwa-PST/, /mar/u-ABS/, and I pirliLOC-ERG/ in any order, we get the following result.",
        "It says that there was an event of shooting in the past, whose actor is Japanangka and whose theme is something that is a kangaroo, and that there is a rock, such that Japanangka is located on it.",
        "Note that the only syntactic restriction were the conventions stated in subsection 3.2 and that we did not make any further assumptions on syntactic structure or word order."
      ]
    }
  ]
}
