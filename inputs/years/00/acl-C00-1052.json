{
  "info": {
    "authors": [
      "Mark Johnson",
      "Brian Roark"
    ],
    "book": "International Conference on Computational Linguistics",
    "id": "acl-C00-1052",
    "title": "Compact Non-Left-Recursive Grammars Using the Selective Left-Corner Transform and Factoring",
    "url": "https://aclweb.org/anthology/C00-1052",
    "year": 2000
  },
  "references": [
    "acl-A00-2033",
    "acl-C92-1032",
    "acl-J97-3004",
    "acl-J98-4004",
    "acl-P97-1003",
    "acl-P98-1101",
    "acl-P99-1054",
    "acl-P99-1070"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "The left-corner transform removes left-recursion from (probabilistic) context-free grammars and unification grammars, permitting simple top-down parsing techniques to be used.",
        "Unfortunately the grammars produced by the standard left-corner transform are usually much larger than the original.",
        "The selective left-corner transform described in this paper produces a transformed grammar winch simulates left-corner recognition of a user-specified set of the original productions, and top-down recognition of the others.",
        "Combined with two factorizations, it; produces non-left-recursive grammars that are not much larger than the original."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "Top-down parsing techniques are attractive because of their simplicity, and can often achieve good performance in practice (Roark and Johnson, 1999).",
        "However, with a left-recursive grans nnar such parsers typically fail to terminate.",
        "The left-corner grammar transform converts a left-recursive grammar into a non-left-recursive one: a top-down parser using a left-corner transformed grammar simulates a left-corner parser using the original grammar (Rosenkrantz and Lewis II, 1970; Alto and Ullman, 1972).",
        "However, the left, cornertransformed grammar can be significantly larger than the original grammar, causing numerous problems.",
        "For example, we show below that a probabilistic context-free grammar (PCFG) estimated from left-corner transformed Penn WSJ treebank trees exhibits considerably greater sparse data problems than a PCFG estimated in the usual manner, simply because the left-corner transformed grammar contains approximately 20 times more productions.",
        "The transform described in this paper produces a grammar approximately the same size as the input grammar, which is not as adversely affected by sparse data.",
        "* This research was supported by NSF awards 9720368, 9870676 and 9812169.",
        "We would like to thank our colleagues in 13LIAP (Brown Laboratory for Linguistic Information Processing) and Bob Moore for their helpful comments on this paper.",
        "Left-corner transforms are particularly useful because they can preserve annotations on productions (more on this below) and are therefore applicable to more complex grammar formalisms as well as CFGs; a property which other approaches to left-recursion elimination typically lack.",
        "For example, they apply to left-recursive unification-based grammars (Matsumoto et al., 1983; Pereira and Shieber, 1987; Johnson, 1998a).",
        "Because the emission probability of a PCFG production can be regarded as an annotation on a CFG production, the left-corner transform can produce a CFG with weighted productions which assigns the same probabilities to strings and transformed trees as the original grammar (Abney et al., 1999).",
        "However, the transformed grammars can be much larger than the original, which is unacceptable for many applications involving large grammars.",
        "The selective left-corner transform reduces the transformed grammar size because only those productions which appear in a left-recursive cycle need be recognized left, cornerin order to remove left-recursion.",
        "A top-down parser using a grammar produced by the selective left, cornertransform simulates a generalized left-corner parser (Demers, 1977; NiTholt, 1980) which recognizes a user-specified subset of the original productions in a left-corner fashion, and the other productions top-down.",
        "Although we do not investigate it in tins paper, the selective left-corner transform should usually have a smaller search space relative to the standard left-corner transform, all else being equal.",
        "The partial parses produced during a top-down parse consist of a single connected tree fragment, while the partial parses produced produced during a left-corner parse generally consist of several disconnected tree fragments.",
        "Since these fragments are only weakly related (via the \"link\" constraint described below), the search for each fragment is relatively independent.",
        "This may be responsible for the observation that exhaustive left-corner parsing is less efficient than top-down parsing (Covington, 1994).",
        "Informally, because the selective left, cornertransform recognizes only a subset of productions in a left, cornerfashion, its partial parses contain fewer tree discontiguous",
        "fragments and the search may be more efficient.",
        "While this paper focuses on reducing grammar size to minimize sparse data problems in PCFG estimation, the modified left-corner transforms described here are generally applicable wherever the original left-corner transform is.",
        "For example, the selective left-corner transform can be used in place of the standard left-corner transform in the construction of finite-state approximations (Johnson, 1998a), often reducing the size of the intermediate automata constructed.",
        "The selective left-corner transform can be generalized to head-corner parsing (van Noord, 1997), yielding a selective head-corner parser.",
        "(This follows from generalizing the selective left-corner transform to Horn clauses).",
        "After this paper was accepted for publication we learnt of Moore (2000), which addresses the issue of grammar size using very similar techniques to those proposed here.",
        "The goals of the two papers are slightly different: Moore's approach is designed to reduce the total grammar size (i.e., the sum of the lengths of the productions), while our approach minimizes the number of productions.",
        "Moore (2000) does not address left-corner tree-transforms, or questions of sparse data and parsing accuracy that are covered in section 3.",
        "2 The selective left-corner and related transforms This section introduces the selective left-corner transform and two additional factorization transforms which apply to its output.",
        "These transforms are used in the experiments described in the following section.",
        "As Moore (2000) observes, in general the transforms produce a non-left-recursive output grammar only if the input grammar G does not contain unary cycles, i.e., there is no nonterminal A such that A A."
      ]
    },
    {
      "heading": "2.1 The selective left-corner transform",
      "text": [
        "The selective left-corner transform takes as input a CFG G = (V, T, P, S) and a set of left-corner productions L C P, which contains no epsilon productions; the non-left-corner productions P – L are called top-down productions.",
        "The standard left-corner transform is obtained by setting L to the set of all non-epsilon productions in P. The selective left-corner transform of G with respect to L is the CFG",
        "and 11 contains all instances of the schemata 1.",
        "In these schemata, D E 17, w E T, and lower case greek letters range over (V U T)*.",
        "The D-X are new nonterminals; informally they encode a parse state in which an D is predicted top-down awl an X",
        "has been found left-corner, so D-X *LeL(G,) 7 only if D X7.",
        "The schemata function as follows.",
        "The productions introduced by schema la start a left-corner parse of a predicted nonterminal D with its leftmost terminal w, while those introduced by schema lb start a left-corner parse of D with a left, corner A, which is itself found by the top-down recognition of production A a E P – L. Schema lc extends the current left-corner B up to a C with the left-corner recognition of production C B I.",
        "Finally, schema hi matches the top-down prediction with the recognized left-corner category.",
        "Figure 1 schematically depicts the relationship between a chain of left-corner productions in a parse tree generated by G and the chain of corresponding instances of schema lc.",
        "The left-corner recognition of the chain starts with the recognition of a, the right-hand sidle of a top-down production A. a, using an instance of schema lb.",
        "The left-branching chain of left-corner productions corresponds to a right-branching chain of instances of schema lc; the left-corner transform in effect converts left recursion into right recursion.",
        "Notice that the top-down predicted category D is passed clown this right-recursive chain, effectively multiplying each left-corner productions by the possible top-down predicted categories.",
        "The right recursion terminates with an instance of schema ld when the left-corner and top-down categories match.",
        "Figure 2 shows how top-clown productions from G are recognized using £C1 (C).",
        "When the se",
        "a by ECL(G) involves a left-corner category A-A, which immediately rewrites to c. One-step c-removal applied to ECL(G) produces a grammar in which each top-down production A a corresponds to a production A in the transformed grammar.",
        "lective left-corner transform is followed by a one-step c-removal transform (i.e., composition or partial evaluation of schema lb with respect to schema ld (Johnson, 1998a; Abney and Johnson, 1991.; Resnik, 1992)), each top-down production from G appears unchanged in the final grammar.",
        "Full c-removal yields the grammar given by the schemata below.",
        "Moore (2000) introduces a version of the left-corner transform called LC LH, winch applies only to productions with left-recursive parent and left child categories.",
        "In the context of the other transforms that Moore introduces, it seems to have the same effect in his system as the selective left-corner transform does here."
      ]
    },
    {
      "heading": "2.2 Selective left-corner tree transforms",
      "text": [
        "There is a 1.-to-1 correspondence between the parse trees generated by G and fCL(G).",
        "A tree t is generated by G if there is a corresponding t' generated by .CCL(G), where each occurrence of a top-down production in the derivation of t corresponds to exactly one local tree generated by occurrence of the corresponding instance of schema 11) in the derivation of t' , and each occurrence of a left, cornerproduction in 1 corresponds to exactly one occurrence of the corresponding instance of schema lc, in t'.",
        "It is straightforward to define a 1-to-1 tree transform mapping parse trees of G into parse trees of ,CC1,(G) (Johnson, 1998a; Roark and Johnson, 1999).",
        "In the empirical evaluation below, we estimate a PCFG from the trees obtained by applying T1, to the trees in the Penn WSJ treebank, and compare it to the PCFG estimated from the original treebank trees.",
        "A stochastic top-down parser using the PCFG estimated from the trees produced by simulates a stochastic generalized left-corner parser, which is a generalization of a standard stochastic left-corner parser that permits productions to be recognized top-down as well as left-corner (Manning and Carpenter, 1997).",
        "Thus investigating the properties of PCFG estimated from trees transformed with Tr, is an easy way of studying stochastic push-down automata performing generalized left-corner parses."
      ]
    },
    {
      "heading": "2.3 Pruning useless productions",
      "text": [
        "We turn now to the problem of reducing the size of the grammars produced by left-corner transforms.",
        "Many of the productions generated by schemata 1 are useless, i.e., they never appear in any terminating derivation.",
        "While they can be removed by standard methods for deleting useless productions (Iloperoft and Ullman, 1979), the relationship between the parse trees of G and L'CL (C) depicted in Figure 1 shows how to determine ahead of time the new nonterminals D-X that can appear in useful productions of ECL(0.",
        "Tins is known as a link constraint.",
        "For (P)CFGs there is a particularly simple link constraint: D-X appears in useful productions of GC L(G) only if 4-y e (V U T)* .D Xy.",
        "If epsilon removal is applied to the resulting grammar, D-X appears in useful productions only if l'y E (V U T)+.",
        "Dl X-y.",
        "Thus one only need generate instances of the left-corner schemata which satisfy the corresponding link constraints.",
        "Moore (2000) suggests an additional constraint on nonterminals 1)- X that can appear in useful productions of fC1,(61): D must either be the start symbol of G or else appear in a. production A a013 of G, for any A c V, a C {V U TY\" and /3 C {V U T}*.",
        "It is easy to see that the productions that Moore's constraint prohibits are useless.",
        "There is one nonterminal in the treebank grammar investigated below that has tins property, namely LST.",
        "However, in the treebank grammar none of the productions expanding LST are left-recursive (in fact, the first child is always a pretermitial), so Moore's constraint does not affect the size of the transformed grammars investigated below.",
        "While these constraints can dramatically reduce both the number of productions and the size of the parsing search space of the transformed grammar, in general the transformed grammar EC, L(G) can be quadratically larger than G. There are two causes for the explosion in grammar size.",
        "First, reL(G) contains an instance of schema lb for each top-down production A –> a and each D such that ]7.",
        "Ay.",
        "Second, ECL (G) contains an instance of schema lc for each left-corner production C /3 and each D such that ]7.D Cy.",
        "effect, fc,;(G) contains one copy of each production for each possible left-corner ancestor.",
        "Section 2.5 describes further factorizations of the productions of f.CL(G) which mitigate these causes."
      ]
    },
    {
      "heading": "2.4 Optimal choice of L",
      "text": [
        "Becauser increases monotonically with and hence L, we typically reduce the size of ECL(G) by making the left-corner production set L as small as possible.",
        "This section shows how to find the unique minimal set of left-corner productions L such that L(G) is not left-recursive.",
        "Assume G = (V, T, P, S) is pruned (i.e., P contains no useless productions) and that there is no A E V such that A – 4-; A (i.e., G does not generate recursive unary branching chains).",
        "For reasons of space we also assume that P contains no 6-productions, but this approach can be extended to deal with them if desired.",
        "A production A 4 B13 E P is left-recursive if E U T)*.",
        "B , i.e., P rewrites B into a string beginning with A.",
        "Let Lo be the set of left-recursive productions in G. Then we claim (1) that re Lo(G) is not left-recursive, and (2) that for all L C L0, GCI(G) is left-recursive.",
        "Claim 1 follows from the fact that if A Lo By then A By and the constraints in section 2.3 on useful productions of r C Lo(G).",
        "Claim 2 follows from the fact that if L C L0 then there is a chain of left-recursive productions that includes a top-down production; a simple induction on the length of the chain shows that a L(G) is left-recursive.",
        "This result justifies the common practice in natural language left-corner parsing of taking the terminals to be the preterminal part-of-speech tags, rather than the lexical items themselves.",
        "(We did not attempt to calculate the size of such a left-corner grammar in the empirical evaluation below, but it would be much larger than any of the grammars described there).",
        "In fact, if the preterminals are distinct from the other nonterminals (as they are in the treebank grammars investigated below) then Lo does not include any productions beginning with a preterminal, and ,CC, Lo(G) contains no instances of schema la at all.",
        "We now turn our attention to the other schemata of the selective left-corner grammar transform."
      ]
    },
    {
      "heading": "2.5 Factoring the output of L...0",
      "text": [
        "This section defines two factorizations of the output of the selective left-corner grammar transform that can dramatically reduce its size.",
        "These factorizations are most effective if the number of productions is much larger than the number of nonterminals, as is usually the case with treebank grammars.",
        "The top-down factorization decomposes schema lb by introducing new nonterminals D', where D E 17, that have the same expansions that D does in G. Using the same interpretation for variables as in schemata 1, if G = (17, T, P, S) then",
        "and Ptd contains all instances of the schemata la, 3a, 3b, lc and ld.",
        "D A' D-A where A E P L (3a) A' a where A a EP – L (3b) Notice that the number of instances of schema 3a is less than the square of the number of nonterminals and that the number of instances of schema 3b is the number of top-down productions; the sum of these numbers is usually much less than the number of instances of schema lb.",
        "Top-down factoring plays approximately the same role as \"non-left-recursion grouping\" (NLRG) does in Moore's (2000) approach.",
        "The major difference is that NLRG applies to all productions A Bi3 in which B is not left-recursive, i.e., dry.",
        "B By, while in our system top-down factorization applies to those productions for which /1-y.",
        "B , i.e., the productions not directly involved in left recursion.",
        "The left-corner factorization decomposes schema lc in a similar way using new limiter-mina's DUX, where D E V and X E VU T.",
        "and Ph, contains all instances of the schemata la, lb, 4a, 41) and ld.",
        "DB C\\B DC where C B 13 E L (4a) C\\B 13 where C B E L (4b) The number of instances of schema 4a is bounded by the number of instances of schema lc and is typically much smaller, while the number of instances of schema 41) is precisely the number of left-corner productions L. Left-corner factoring seems to correspond to one step of Moore's (2000) \"left factor\" (LF) operation.",
        "The left factor operation constructs new nonterminals corresponding to common prefixes of arbitrary length, while left-corner factoring effectively only factors the first nonterminal symbol on the right hand side of left-corner productions.",
        "While we have not done experiments, Moore's left factor operation would seem to reduce the total number of symbols in the transformed grammar at the expense of possibly introducing additional productions, while our left-corner factoring reduces the number of productions.",
        "These two factorizations can be used together in the obvious way to define a grammar transform fCj0d'ic) whose productions are defined by schemata la, 3a, 3b, 4a, 4b and lcl.",
        "There are corre) sponding tree transforms, which we refer to as TT,(td , etc., below.",
        "Of course, the pruning constraints described in section 2.3 are applicable with these factorizations, and corresponding invertible tree transforms can be constructed."
      ]
    },
    {
      "heading": "3 Empirical Results",
      "text": [
        "To examine the effect of the transforms outlined above, we experimented with various PCFGs induced from sections 2-21 of a modified Penn WSJ treebank as described in Johnson (1998b) (i.e., labels simplified to grammatical categories, RooT 10xles added, empty nodes and vacuous unary branches deleted, and auxiliaries retagged as Aux or AuxG).",
        "We ignored lexical items, and treated the part-of-speech tags as terminals.",
        "As Bob Moore pointed out to us, the left-corner transform may produce left-recursive grammars if its input grammar contains unary cycles, so we removed them using the a transform that Moore suggested.",
        "Given an initial set of (non-epsilon) productions P, the transformed grammar contains the following productions, where the \"0 are new non-terminals: where A E P, A -A); A where A --); A where A E P, AA cx h.* A",
        "Tins transform can be extended to one on PCFGs which preserves derivation probabilities.",
        "In tins section, we fix P to be the productions that result after applying this unary cycle removal transformation to the treebank productions, and C to be the corresponding grammar.",
        "Tables 1 and 2 give the sizes of selective left-corner grammar transforms of C; for various values of the left-corner set L and factorizations, without and with epsilon-removal respectively.",
        "In the tables, Lo is the set of left-recursive productions in P, as defined in section 2.4.",
        "N is the set of productions in P whose left-hand sides do not begin with a part-of-speech (POS) tag; because POS tags are distinct from other nonterminals in the treebank, N is an easily identified set of productions guaranteed to include Lo.",
        "The tables also gives the sizes of maximum-likelihood PCFGs estimated from the trees resulting from applying time selective left-corner tree transforms T to the treebank, breaking unary cycles as described above.",
        "For the parsing experiments below we always deleted empty nodes in time output of these tree transforms; this corresponds to epsilon removal in the grammar transform.",
        "First, note that fCi, (C) , time result of applying the standard left, corner grammar transform to C, has approximately 20 times the number of productions that GI has.",
        "However fe(Lldc'ic)(C), the result of applying the selective left-corner grammar transformation with factorization, has approximately 1.4 times the number of productions that G has.",
        "Thus the methods described in this paper can in fact dramatically reduce the size of left-corner transformed grammars.",
        "Second, note that E.C(N\"'\"(G) is not much larger than EC(Iod'\"(C).",
        "This is because N is not",
        "and tree transforms after pruning with link constraints without epsilon removal.",
        "Columns indicate factorization.",
        "In the grammar and tree transforms, P is the set of productions in C; (i.e., the standard left-corner transform), N is the set of all productions in P which do not begin with a POS tag, and Lo is the set of left-recursive productions.",
        "much larger than Lo, which in turn is because most pairs of non-POS nonterminals A,13 are mutually left-recursive.",
        "'Finning now to the estimated after applying tree transforms, we notice that grammar size does not increase nearly so dramatically.",
        "These PCFGs encode a maximum-likelihood estimate of the state transition probabilities for various stochastic generalized left-corner parsers, since a top-down parser using these grammars simulates a generalized left-corner parser.",
        "The fact that LC p(C) is 17 times larger than the PCFG inferred after apply-Mg Tr to time treebank means that most of the possible transitions of a standard stochastic left-corner parser are not observed in the treebank training data.",
        "The state of a left-corner parser does capture some linguistic generalizations (Manning and Carpenter, 1997; Roark and Johnson, 1999), but one might, still expect sparse-data problems.",
        "Note that L',C(Ltd'ic) is only 1.4 times larger than \"Ti'd'le), so we expect less serious sparse data problems with the factored selective left-corner transform.",
        "We quantify these sparse data problems in two ways using a held-out, test corpus, viz., all sentences in section 23 of the treebank.",
        "First, table 3 lists time number of sentences in time test corpus that fail to receive a parse with the various PCFGs mentioned",
        "above.",
        "This is a relatively crude measure, but correlates roughly with the ratios of grammar sizes, as expected.",
        "Second, table 4 lists the number of productions found in the tree-transformed test corpus that do not appear in the correspondingly transformed trees of sections 2-21.",
        "What is striking here is that the number of missing productions after either of the ,10 ,ritd,te) transforms 7-1,1,'d is approximately the same as the number of missing productions using the untransformed trees, indicating that the factored selective left-corner transforms cause little or no additional sparse data problem.",
        "(The relationship between local trees in the parse trees of G and CC (G) mentioned earlier implies that left-corner tree transformations will not decrease the number of missing productions).",
        "We also investigate the accuracy of the maximum-likelihood parses (MLPs) obtained using the PCFGs estimated from the output of the various left-corner tree transforms.' We searched for these parses using an exhaustive CKY parser.",
        "Because the parse trees of these PCFGs are isomorphic to the derivations of the corresponding stochastic generalized left-corner parsers, we are in fact evaluating different kinds of stochastic generalized left-corner parsers inferred from sections 2-21 of the treebank.",
        "We used 1We did not investigate the grammars produced by the various left-corner grammar transforms.",
        "Because a left-corner grammar transform rc, preserves production probabilities, the highest scoring parses obtained using the weighted CFG rcL(G) should be the highest scoring parses obtained using G transformed by TL.",
        "the transform-detransform framework described in Johnson (1998b) to evaluate the parses, i.e., we applied the appropriate inverse tree transform T-1to detransform the parse trees produced using the PCFG estimated from trees transformed by T. By calculating the labelled precision and recall scores for the detransformed trees in the usual manner, we can systematically compare the parsing accuracy of different kinds of stochastic generalized left-corner parsers.",
        "Table 5 presents the results of this comparison.",
        "As reported previously, the standard left, cornergram-mar embeds sufficient non-local information in its productions to significantly improve the labelled precision and recall of its MLPs with respect to MLPs of the PCFG estimated from the untransformed trees (Manning and Carpenter, 1997; Roark and Johnson, 1999).",
        "Parsing accuracy drops off as grammar size decreases, presumably because smaller PCFGs have fewer adjustable parameters with which to describe this non-local information.",
        "There are other kinds of non-local information which can be incorporated into a PCFG using a transform-detransform approach that result in an even greater improvement of parsing accuracy (Johnson, 1998b).",
        "Ultimately, however, it seems that a more complex approach incorporating back-off and smoothing is necessary in order to achieve the parsing accuracy achieved by Charniak (1997) and Collins (1997)."
      ]
    },
    {
      "heading": "4 Conclusion",
      "text": [
        "Tins paper presented factored selective left-corner grammar transforms.",
        "These transforms preserve the primary benefits of the left-corner grammar transform (i.e., elimination of left-recursion and preservation of annotations on productions) while dramatically ameliorating its principal problems (grammar size and sparse data problems).",
        "This should extend the applicability of left-corner techniques to situations involving large grammars.",
        "We showed how to identify the minimal set L0 of productions of a grammar that must be recognized left-corner in order for the transformed grammar not to be left-recursive.",
        "We also proposed two factorizations of the output of the selective left-corner grammar transform winch further reduce grammar size, and showed that there is only a minor increase in grammar size when the",
        "factored selective left-corner transform is applied to a large treebank grammar.",
        "Finally, we exploited the tree transforms that correspond to these grammar transforms to formulate and study a class of stochastic generalized left-corner parsers.",
        "'Phis work could be extended in a number of ways.",
        "For example, in tins paper we assumed that one would always choose a left-corner production set that includes the minimal set L0 required to ensure that the transformed grammar is not left-recursive.",
        "However, Roark and Johnson (1999) report good performance from a stochastically-guided top-down parser, suggesting that left-recursion is not always fatal.",
        "It might be possible to judiciously choose a left-corner production set smaller than L0 which eliminates pernicious left-recursion, so that the remaining left-recursive cycles have such low probability that they will effectively never be used and a stochastically-guided top-down parser will never search them."
      ]
    }
  ]
}
