{
  "info": {
    "authors": [
      "Sylvain Pogodalla"
    ],
    "book": "International Conference on Computational Linguistics",
    "id": "acl-C00-2091",
    "title": "Generation, Lambek Calculus, Montague's Semantics and Semantic Proof Nets",
    "url": "https://aclweb.org/anthology/C00-2091",
    "year": 2000
  },
  "references": [],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "Most of the studies in the framework of Lambek calculus have considered the parsing process and ignored the generation process.",
        "This paper wants to rely on the close link between Lambek calculus and linear logic to present a method for the generation process with semantic proof nets.",
        "We express the process as a proof search procedure based on a graph calculus and the solutions appear as a matrix computation preserving the decidability properties, and we characterize a polynomial time case."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "From the type logical grammars point of view, the parametric part of the language analysis is the lexicon, and the constant one is the logical rules.",
        "This should of course hold both for parsing and generation, hence we can consider the reversibility properties of such grammars.",
        "And a relevant problem is to compare the complexity of the two cases.",
        "For Lambek calculus (Lambek, 1958), the parsing complexity is still an open problem.",
        "But the question arises to know how to generate in this framework, and how difficult (on the computational side) it is.",
        "(Merenciano and Morrill, 1997) answered with a labelled deductive system guided with A-term unification.",
        "But a drawback of this latter mechanism consists in its algorithmic undecidability (from second order unification).",
        "Relying on the linear logic (Girard, l 987) (which provides a powerful framework to express Lambek calculus, specially with proof nets for the latter (Roorda, 1991; Lamarche and Retore, 1996)), this paper wants to adress the problem of finding the way we can associate given lexical entries to fit a given semantic expression and generate a syntactically correct expression (for the moment, we do not care to the choice of the lexical items).",
        "For this purpose, we express our problem as a proof search one in (multiplicative) linear logic which is decidable.",
        "Moreover, we characterize the semantic recipes of lexical items that provide a polynomial solution for the syntactic realization process.",
        "Then we give an example of this process."
      ]
    },
    {
      "heading": "2 Proof Nets for Linear Logic",
      "text": [
        "Linear logic (Girard, 1987) proposes for proofs a more compact and accurate syntax than sequent calculus: proof nets (they group distinct sequential proofs that only have inessential differences).",
        "They have both a related to sequential proof definition and a geometrical definition: they can be defined as a class of graphs (proof structures) satisfying a geometrical property so that every proof net corresponds to a sequential proof and every proof structure built from a sequential proof has this property (Retore, 1998).",
        "In this paper, we only consider proof nets of the intuitionistic implicative linear logic: sequents are made of several antecedent formulas, but only one succedent formula.",
        "To deal with the intuitionistic notion for proof nets (since we consider one-sided sequents), we use the notion of polarities with the input (•: negative) and the output (o: positive) (Danos, 1990; Lamarche, 1995) to decorate formulas.",
        "Positive ones correspond to succedent formulas and negative ones to antecedent formulas.",
        "Given the links of table 1, we define proof structures (we consider implicative fragment) as graphs made of these links such that:",
        "1. any premise of any link is connected to exactly one conclusion of some other link; 2. any conclusion of any link is connected to at most one premise of some other link; 3. input (resp.",
        "output) premises are connected to input (resp.",
        "output) conclusions of the same type.",
        "Proof nets are proof structures that respect the correctness criterion.",
        "The last link of table 1, the Cut link, allows the combination of proofs of F I – A. and of A, A B into a single proof of F, A H B.",
        "In sequential cal-culs, the cut-elimination property states that there exists a normal (not using the Cut rule) proof for the same sequent only from premises of h and A (and builds it).",
        "Of course, this property holds for proof nets too.",
        "And to enforce the intrinsic definition of these latter, a simple rewriting process (described in table 2) actually performs the cut-elimination (in case of complex formulas as in the third rewriting rule, those rules can apply again on the result and propagate until reaching atoms)."
      ]
    },
    {
      "heading": "2.1 Proof Nets for Lambek Calculus",
      "text": [
        "As Lambek calculus is an intuitionistic fragment of non commutative linar logic (with two linear implications: \"\\\" on the left and \"/\" on the right), proof nets for it naturally appeared in (Roorda, 1991).",
        "They slightly differ from those of table 1:",
        "• we get two tensor links: one for the formula (13/A) – (the one in table 1) and one for the formula CB \\ A.",
        ") – (just inverse the polarities of the premises).",
        "And two par links: one for the formula (A\\B)+ and one for (A113)+ (idem); • formulas in Lambek's sequents are ordered, so that conclusions of the proof nets are cyclically ordered and axiom links may not cross.",
        "From a syntactic category, we can unfold the formula to obtain a graph which only lacks axiom links to become a proof structure.",
        "So that the parsing process in this framework is, given the syntactic categories of the items and their order, to put non crossing axiom links such that the proof structure is a proof net.",
        "It means there is a proof of S given types in a certain order.",
        "Proving that John lives in Paris is a correct sentence w.r.t.",
        "the lexicon of table 3 (the two first columns) is finding axiom links between the atoms in the figure 1(a) so that the proof structure is correct.",
        "Figure 1(b) shows it actually happens (for technical reasons, in the proof net, the order of the syntactic categories is the inverse of the order of the words in the sentence to be analysed.",
        "Figure 1(c) shows John lives Paris in cannot be successfully parsed)."
      ]
    },
    {
      "heading": "2.2 Proof Nets for Montague's Semantics",
      "text": [
        "Capitalizing on the fact that both A-terms (with the Curry-Howard isomorphism) and proof nets represent proofs of intuitionistic implicative linear logic, (de Groote and Retore, 1996) propose to use proof nets as semantic recipes: since proof nets encode linear A-terms, instead of associating a A-term in the Montagovian style to a lexical entry, they associate a proof net (decorated with typed constants).",
        "An example of such a lexicon is given in table 31(par links encode abstraction, and tensor links encode application).",
        "Of course, to respect semantic types based on Montagovian basic types e and I, they use the following homomorphism:",
        "Let us illustrate the process in parsing the sentence John lives in Paris.",
        "First we have to find the syntactic proof net of figure 1(b) as explained in 2.1.",
        "It provides the way syntactic componants combine, hence how semantic recipes of each lexical item combine: we take its homomorphic image Unlike in (de Groote and Retore, 1996), we restrict ourselves for the moment to linear A-terms.",
        "as in figure 3(a).",
        "The substitution of every input with its semantic definition we would like to perform on the A-calculus side appears on the logical side as plugging semantic proof nets with cut-links.",
        "Then, the /3-reduction we would like to perform has its logical counterpart in the cut-elimination on the resulting proof net.",
        "It gives a new proof net (on figure 3(b)) we can use as the semantic analysis of John lives in Paris.",
        "If necessary, we can come back to the A-term expression: (in p)(Iive j).",
        "In other words, the syntactic proof net yields a term t expressing how the elementary parts combine (in this case t = (ab)(cd)).",
        "Then the resulting proof net of figure 3(b) corresponds to the 0-normal form of t[Ax.Ay.",
        "(in x)yla, p/b, xlc, j/d]."
      ]
    },
    {
      "heading": "3 What is Generation?",
      "text": [
        "We can now state the problem we are dealing with: given a semantic proof net (like the one in figure 3(b)), we want to put together syntactic entries with axiom links such that:",
        "1. this yields a correct (syntactic) proof net; 2. the meaning of the resulting proof net matches the given semantic expression.",
        "Thus, if we define:",
        "• 110 the semantic proof net of the expression we want to generate; • IL the semantic proof nets associated to the given lexical entries i we use; • TI the unfolding in proof structure of the syntactic formula of the lexical item i (as in figure 1(a)); • F the forest made of the syntactic trees (Ti) of all the considered lexical entries plus the output (the type we want to derive), the generation problem (see figure 4) is to find a matching M of atomic formulas of F such that: 1.",
        "F endowed with M (let us call this proof structure F') is a correct proof net; 2. when cut-linking '11(P) with the IL, and eliminating these cuts, we obtain 110.",
        "We note that the problem is intrinsically decidable (because the finitness of the number of the matchings) without making any assumption on the form of the semantic entries.",
        "Of course, we want to keep these good properties in our algorithm."
      ]
    },
    {
      "heading": "4 Cut-elimination as Matrix Computation",
      "text": [
        "Using proof nets resulting from a cut-elimination to guide a proof search on proof nets before cut-elimination relics on the algebraic representation of cut-elimination on proof nets expressed in (Girard, 1989) and reformulated in (Retore, 1990; Girard, 1995).",
        "Due to lack of space, we can not developp it, but the principle is to express cut-elimination between axioms with incidence matrices and paths in graphs.",
        "Let us consider a proof net U.",
        "We can define U the incidence matrix of axiom links, a the incidence matrix of cut links (we assume without loss of generality that they happen only between axiom links), and the incidence matrix of axiom links of 11 where 11 is the_ proof net resulting from all the cut-eliminations on U.",
        "Then we have (Girard, 1989):",
        "We want to give an equivalent relation to (1) focusing on some axiom links we are interested in.",
        "Without loss of generality, we assume the lack of any axiom link in U such that none of its conclusions are involved in cut links.",
        "Then we can choose an order for the atoms (from the proof net before the cut-elimination, there is three subsets of atoms: those not involved in a cut link, those involved in a cut link and whose dual is not involved in a cut link, and those involved in a cut link and their dual as well) such that:",
        "Note that all the atoms belonging to the matching we are looking for in the generation process (see figure 4) are ill /113.",
        "If we define A , ( - o1 iU1 )U1 and X = U3(1 - o4U3)-1, we can state the theorem:",
        "• Res(a, U) = (1 - (72)U(1.",
        "- aU)-1-(1 - a2) • ( 111 - al VIA = a2U3(1 - a,IU3)-1 tat • A = ta2X a2 and U3 =",
        "Of course, all the terms are defined.",
        "We base the proof search algorithm corresponding to the generation process we are dealing with on this third relation.",
        "Indeed, the axiom links we are looking for are those whose two conclusions are involved in cut links.",
        "That is we want to complete 113 (knowing all the other matrices).",
        "The previous theorem states that solving the equation (1) correponds to solving",
        "the equation A = a2X to-2 in X with X inversible.",
        "Then, we have to solve U3 = + a4 such that tU3 = U3 and Ul = 1.",
        "Theorem 2 If a4 = 0 and there exists a solution, then the latter is unique and completely defined (as matrices product) from.",
        "A and o-2.",
        "If a4 0 we generally have many solutions, and we have to investigate this case to obtain good computational properties for example in adding word order constraints.",
        "Nevertheless, we can decide the case we are handling as soon as we are given the lexical entries."
      ]
    },
    {
      "heading": "5 Example",
      "text": [
        "Let us process on an example the previous results.",
        "We still use the lexicon of table 3, and we want to generate (if possible) a sentence whose meaning is given by the proof net of figure 3(b).",
        "We first need to associate every atom with an index (in the figures, we indicate a number i beside the atom).",
        "Of course, we have to know how to recognize the atoms that are the same in U (figure 5(b)) and in II (figure 5(a)).",
        "This can be done by looking at the typed constants decorating the input conclusions (for the moment, we don't have a general procedure).",
        "We also assume in this numbering that we know which of the atoms in 1-1(F) is linked to t+ (the unique output).",
        "In our case where a4 = 0, it is not a problem to make such a statement.",
        "In other cases, the complexity would increase at most polynomially.",
        "Then, the given matrices are:",
        "We can add this matching to the syntactic forest of figure 6(a) (do not forget that the link between 8+ and S – is in U1 and not in U3, and that U3 represents edges between atoms with i E [17,22]) and obtain on F the matching of figure 6(b).",
        "We still have to ensure the correctness of this proof net (because we add all the tensor and par links), but it has a quadratic complexity (less than the matricial computation).",
        "In this case, it is correct.",
        "Actually, this only gives us the axiom links.",
        "It still requires to compute the word order to have no crossing axiom link.",
        "This can be done from the axiom links easier than quadratic time (it is a bracketing problem)."
      ]
    },
    {
      "heading": "6 Conclusion",
      "text": [
        "We showed that the problem of generation in the Lambek calculus framework is decidable, and we relied on semantic proof nets to express it as a guided proof search.",
        "On top of keeping the decidability property of this framework, we characterized the semantic proof nets that enable a polynomial time processing.",
        "Nevertheless, some work remains: we should soon work on the atom numbering and the choice of the lexical items to enable a practical implementation of this work.",
        "Moreover, we want to benefit from the power of linear logic (and modalities) to deal with non linear A-terms.",
        "Finally, since different extensions of Lambek calculus based on proof nets (Moortgat, 1996; Lecomte and Retore, 1995) have been considered, we hope our proposal and its good properties to apply to other linguistic approaches."
      ]
    },
    {
      "heading": "Acknowledgments",
      "text": [
        "I would like to thank Christian Retore who pointed out to me Girard's algebraic interpretation of the cut elimination, and the anonymous reviewers for their helpful comments."
      ]
    }
  ]
}
