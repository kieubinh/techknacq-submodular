{
  "info": {
    "authors": [
      "Karl-Michael Schneider"
    ],
    "book": "International Conference on Computational Linguistics",
    "id": "acl-C00-2106",
    "title": "Parsing Schemata for Grammars With Variable Number and Order of Constituents",
    "url": "https://aclweb.org/anthology/C00-2106",
    "year": 2000
  },
  "references": [
    "acl-E93-1004",
    "acl-P83-1021",
    "acl-P89-1017"
  ],
  "sections": [
    {
      "text": [
        "Innstr.",
        "40, 94032 Passau, Germany schneideqphil.uni-passau.de"
      ]
    },
    {
      "heading": "Abstract",
      "text": [
        "We define state transition grammars (STG) as an intermediate formalism between grammars and parsing algorithms which is intended to separate the description of a parsing strategy from the grammar formalism.",
        "This allows to define more general parsing algorithms for larger classes of grammars, including grammars where the number and order of subconstituents defined by a production may not be fixed.",
        "Various grammar formalisms are characterized in terms of properties of STG's.",
        "We define an Earley parsing schema for STG's and characterize the valid parse items.",
        "We also discuss the usability of STG's for head-corner parsing and direct parsing of sets of tree constraints."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "This paper addresses the question of how to define (tabular) parsing algorithms on a greater level of abstraction, in order to apply them to larger classes of grammars (as compared to parsing algorithms for context-free grammars).",
        "Such an abstraction is useful because it allows to study properties of parsing algorithms, and to compare different parsing algorithms, independently of the properties of an underlying grammar formalism.",
        "While previous attempts to define more general parsers have only aimed at expanding the domain of the nonterminal symbols of a grammar (Pereira and Warren, 1983), this paper aims at a generalization of parsing in a different dimension, namely to include grammars with a flexible constituent structure, i.e., where the sequence of subconstituents specified by a grammar production is not fixed.",
        "We consider two grammar formalisms: Extended context-free grammars (ECFG) and ID/LP grammars.",
        "ECFG's (sometimes called regular right part grammars) are a generalization of context-free grammars (CFG) in which a grammar production specifies a regular set of sequences of subconstituents of its left-hand side instead of a fixed sequence of subconstituents.",
        "The right-hand side of a production can be represented as a regular set, or a regular expression, or a finite automaton, which are all equivalent concepts (Hoperoft and Ullman, 1979).",
        "ECFG's are often used by linguistic and programming language grammar writers to represent a (possibly infinite) set of context-free productions as a single production rule (Kaplan and Bresnan, 1982; Woods, 1973).",
        "Parsing of ECFG's has been studied for example in Purdom, Jr. and Brown (1981) and.",
        "Leermakers (1989).",
        "Tabular parsing techniques for CFG's can be generalized to ECFG's in a natural way by using the computations of the finite automata in the grammar productions to guide the recognition of new subconstituents.",
        "ID/LP grammars are a variant of CFO's that were introduced into linguistic formalisms to encode word order generalizations (Gazdar et al., 1985).",
        "Here, the number of subconstituents of the left-hand side of a production is fixed, but their order can vary.",
        "ID rules (immediate dominance rules) specify the subconstituents of a constituent but leave their order unspecified.",
        "The admissible orderings of subconstituents are specified separately by a set of LP constraints (linear precedence constraints).",
        "A simple approach to ID/LP parsing (called indirect parsing) is to fully expand a grammar into a CFG, but this increases the number of productions significantly.",
        "Therefore, direct parsing algorithms for ID/LP grammars were proposed (Shieber, 1984).",
        "It is also possible to encode an ID/LP grammar as an ECFG by interleaving the ID rules with LP checking with",
        "out increasing the number of productions.",
        "However, for unification ID/LP grammars, expansion into a CFG or encoding as an ECFG is ruled out because the information contained in the ID rules is only partial and has to be instantiated, which can result in an infinite number of productions.",
        "Moreover, Seifert (1991) has observed that, during the recognition of subconstituents, a subconstituent recognized in one step can instantiate features on another sub constituent recognized in a previous step.",
        "Therefore, all recognized subconstituents must remain accessible for LP checking (Morawietz, 1995).",
        "We define an intermediate formalism between grammars and parsers (called state transition grammars, STG) in which different grain-mar formalisms, including CFG's, ECFG's, and ID/LP grammars can be represented.",
        "Moreover, admissible sequences of subconstituents are defined in a way that allows a parser to access subconstituents that were recognized in previous parsing steps.",
        "Next, we describe an Earley algorithm for STG's, using the parsing schemata formalism of Sikkel (1993).",
        "This gives us a very high level description of Earley's algorithm, in which the definition of parsing steps is separated from the properties of the grammar formalism.",
        "An Earley algorithm for a grammar may be obtained from this description by representing the grammar as an STG.",
        "The paper is organized as follows.",
        "In Section 2, we define STG's and give a characterization of various grammar formalisms in terms of properties of STG's.",
        "In Section 3 we present an Earley parsing schema for STG's and give a characterization of the valid parse items.",
        "In Section 4, we introduce a variant of STG's for head-corner parsing.",
        "In Section 5, we discuss the usability of STG's to define parsers for grammars that define constituent structures by means of local tree constraints, i.e., formulae of a (restricted) logical language.",
        "Section 6 presents final conclusions."
      ]
    },
    {
      "heading": "2 State Transition Grammars",
      "text": [
        "We denote nonterminal symbols with A, B , terminal symbols with a, terminal and nonterminal symbols with X, states with F, strings of symbols with 0,-y, and the empty string with E. An STG is defined as follows: Definition 1 (STG).",
        "An STG G is a tuple (N, E, M, Mp', G, P, S) where",
        "• N is a finite set of nonterminal symbols, • E is a finite set of terminal symbols, • M is a finite set of states, • MF C M is a set of final states, • h G C x V)2 is a binary relation of the form (I', HG (Ft, 0 X), where V = NU E, • PC N x M\\ MF is a set of productions written as A I', and • S E N is a start symbol.",
        "Note that we do not allow final states in the right-hand side of a production.",
        "A pair (F, (3) is called a configuration.",
        "If F is a final state then (F, /3) is called a final configuration.",
        "The reflexive and transitive closure of HG is denoted with The state projection of 1--G is the binary relation",
        "/3'X).",
        "The set of terminal states of G is the set T(G) {F I yr' : (r, ri) 0-(HG)}.",
        "The language defined by a state F is the set of strings in the final configurations reachable from (F, L(F) {,8 I fl r' EMF (r, (F/, 13)1.",
        "Note that if A F is a production then E L(F) (i.e., there are no c-productions).",
        "The derivation relation is defined by -06 7,86 iff for some production A F: E L(F).",
        "The language defined by G is the set of strings in E* that are derivable from the start symbol.",
        "We denote a CFG as a tuple (N ,E, P, S) where N, E, S are as before and PCNx V+ is a finite set of productions A O.",
        "We assume that; there are no E-productions.",
        "An ECFG can be represented as an extension of a CFG with productions of the form A A, where A = (V, Q, go, Q f) is a nondeterministic finite automaton (NFA) without E.-transitions,",
        "with input alphabet V, state set Q, initial state qo, final (or accepting) states Q f, and transition relation SC Q x V x Q (Hoperoft and Ullman, 1979).",
        "A accepts a string /3 iff for some final state q E Q f, (qo, 13, q) E S. Furthermore, we assume that go Q f, i.e., A does not accept the empty word.",
        "We can assume without loss of generalization that the automata in the right-hand sides of a grammar are all disjoint.",
        "Then we can represent; an ECFG as a tuple (N,2],Q,Q f , 6, P, S) where N,2],Q, , 6, S are as before and P C N x Q is a finite set of productions A – > go (go is an initial state).",
        "For any production p = A qo let AP = (V, Q, qo, 5, be the NM with initial state go.",
        "The derivation relation is defined by 7A6 > 7/35 iff for some production p = A go, 111) accepts 0.",
        "An ID/LP grammar is represented as a tuple (N, 1', LP, S) where N,,S are as before and P is a finite set of productions (ID rules) A M, where A E N and /14 is a multiset over 17, and LP is a set of linear precedence constraints.",
        "We are not concerned with details of the LP constraints here.",
        "We write /3 E LP to denote that the string /3 satisfies all the constraints in LP.",
        "The derivation relation is defined by 7/16 > 'y/38 iff /3 = X k and A , Xk C P and 11 C LP.",
        "CFG's, ECFG's and ID/LP grammars can be characterized by appropriate restrictions on the transition relation and the final states of an",
        "• CFG: [-G is context-free and deterministic, o (1) is acyclic, Mp, = T (G).",
        "• ECFG: I-G is context-free.",
        "• ID/LP: a(I- G) is acyclic; ME= T(G), for all F: if /3, y E L(F) then y is a permutation",
        "17.",
        "'hese conditions define normal-forms of STG's; that is, for STG's that do not satisfy the conditions for sonic type there can nevertheless be strongly equivalent grammars of that type.",
        "These STG's are regarded as degenerate and are not further considered.",
        "of /3.",
        "For instance, if G is an STG that; satisfies the conditions for CFG's, then a CFG GI can be constructed as follows: For every production A – > go in G, let A – > /3 be a production in GI where L(qo) = {/3}.",
        "Then the derivation relations of G and GI coincide.",
        "Similarly for the other grammar types.",
        "Conversely, if a grammar is of a given type, then it can be represented as an STG satisfying the conditions for that type, by specifying the states and transition relation, as shown in Table 1 (U denotes multiset union)."
      ]
    },
    {
      "heading": "3 Earley Parsing",
      "text": [
        "Parsing schemata were proposed by Sikkel (1993) as a framework for the specification (and comparison) of tabular parsing algorithms.",
        "Parsing schemata provide a well-defined level of abstraction by abstracting from control structures (i.e., ordering of operations) and data structures.",
        "A parsing schema can be implemented as a tabular parsing algorithm in a canonical way (Sikkel, 1998).",
        "A parsing schema for a grammar class is a function that assigns each grammar and each input string a deduction system, called a parsing sy stria.",
        "A parsing schema is usually defined by presenting a parsing system.",
        "A parsing system consists of a finite set; I of parse items, a finite set 1-{ of hypotheses, which encode the input string, and a finite set D of deduction steps of the form x1, , x„ F x where xi E I U 11 and E E. The hypotheses can be represented as deduction steps with empty premises, so we can assume that all xi are items, and represent a parsing system as a pair (I ,D).",
        "Correctness of a parsing system is defined with respect to some item semantics.",
        "Every item denotes a particular derivation of sonic substring of the input string.",
        "A parsing system is correct if an item is deducible precisely if it denotes an admissible derivation.",
        "Items that denote admissible derivations are called cancel.",
        "STG's constitute a level of abstraction between grammars and parsing schemata because they can be used to encode various classes of grammars, whereas the mechanism for recognizing admissible sequences of subconstituents by a parsing algorithm is built into the grammar.",
        "Therefore, STG's allow to define the parsing steps separately from the mechanism in a grammar that specifies admissible sequences of subconstituents.",
        "A generalization of Earley's algorithm for CFG's (Earley, 1970) to STG's is described by the parsing schema shown in Fig. 1.",
        "An item [A 13.r, j] denotes an A-constituent that is partially recognized from position i through j in the input string, where 0 is the sequence of recognized subconstituents of A, and a sequence of transitions that recognizes /3 can lead to state F. Note that the length of /3 can be restricted to the length of the input string because there are no c-productions.",
        "In order to give a precise definition of the semantics of the items, we define a derivation relation which is capable of describing the partial recognition of constituents.",
        "This relation is defined on pairs (7, A) where 'y E V* and A is a finite sequence of states (a pair (7, A) could be called a super configuration).",
        "y represents the front (or yield) of a partial derivation, while A contains one state for every partially recognized constituent.",
        "Definition 2.",
        "The Earley derivation relation is defined by the clauses:",
        "• (7A, A) I-, (70, FA) iff E P: (r, (F,13).",
        "• (7A(5, A) H(yOS, A) 7118 > 7/66.",
        "The first clause describes the partial recognition of an A-constituent; where /3 is the recognized part and the state F is reached when /3 is recognized.",
        "The second clause describes the complete recognition of an A-constituent; in this case, the final state is discarded.",
        "Each step in the derivation of a super configuration (y, A) corresponds to a sequence of deduction steps in the parsing schema.",
        "As a consequence of the second clause we have that w E L(G) if (5, OH,* (w, e).",
        "Note that H is too weak to describe the recognition of the next subconstituent of a partially recognized constituent, but it is sufficient to define the semantics of the items in Fig. 1.",
        "The following theorem is a generalization of the definition of the semantics of Earley items for CFG's (Sikkel, 1993) (am ... an is the input string):"
      ]
    },
    {
      "heading": "Theorem 1 (Correctness).",
      "text": [
        "H* [A i, the conditions are satisfied:",
        "• for some A, (S,e)h,* (al ... aiA, A).",
        "• (A, 6) • p ai+1 ai.",
        "The first and third condition are sometimes called top-down and bottom-up condition, respectively.",
        "The second condition refers to the partial recognition of the A-constituent.",
        "Table 2 shows some valid parse items for the recognition of the string a * a, together with the conditions according to Theorem 1."
      ]
    },
    {
      "heading": "4 Bidirectional Parsing",
      "text": [
        "STG's describe the recognition of admissible sequences of subconstituents in unidirectional parsing algorithms, like Earley's algorithm.",
        "Bidirectional parsing strategies, e.g., head-corner strategies, start the recognition of a sequence of subconstituents at some position in the middle of the sequence and proceed to both sides.",
        "We can define appropriate STG's for bidirectional parsing strategies as follows.",
        "productions of the form A -> (11, X, A), 'inhere AEN and X EV and 11, A E M. The two states in a production account for the bidirectional expansion of a constituent.",
        "The derivation relation for a headed, bidirectional STG is defined by -yA6 > 01 X 0.7. if for some production A 4 (F, X, A): 0)-1 E L(F) and 137.",
        "E L(A) ((01)-1 denotes the inversion of /31).",
        "Note that F defines the left; part of an admissible sequence from right to left.",
        "A bottom-up head-corner parsing schema uses items of the form [A -› P. /3.",
        "A, i, j] (Schneider, 2000).",
        "The semantics of these items is given by the following clauses:",
        "• for sonic production A -+ (F0, X, A0), sonic 01 , 137. : /3 = 01 X 131. and (F0, c) HG (1', (01)-1) and (A0, c) G (A, /3r).",
        "• /3 >* ai+1 ai.",
        "5 Local Tree Constraints",
        "In this section we discuss the usability of STG's for the design of direct parsing algorithms for grammars that use a set of well-formedness conditions, or constraints, expressed in a logical language, to define the admissible syntactic structures (i.e., trees), in contrast to grammars that are based on a derivation mechanism",
        "(i.e., production rules).",
        "Declarative characterizations of syntactic structures provide a means to formalize grammatical frameworks, and thus to compare theories expressed in different formalisms.",
        "There are also applications in theoretical explorations of the complexity of linguistic theories, based on results which relate language classes to definability of structures in certain logical languages (Rogers, 2000).",
        "From a model-theoretic point of view, such a grammar is an axiomatization of a class of structures, and a well-formed syntactic structure is a model of the grammar (Blackburn et al., 1993).",
        "The connection between models and strings is established via a yield function, which assigns each syntactic structure a string of terminal symbols.",
        "The parsing problem can then be stated as the problem: Given a string w and a grammar G, find the models M with M G and yield(M) = w. In many cases, there are effective methods to translate logical formulae into equivalent tree automata (Rogers, 2000) or rule-based grammars (Palm, 1997).",
        "Thus, a possible way to approach the parsing problem is to translate a set of tree constraints into a grammar and use standard parsing methods.",
        "However, depending on the expressive power of the logical language, the complexity of the translation often limits this approach in practice.",
        "In this section, we consider the possibility to apply tabular parsing methods directly to grammars that consist of sets of tree constraints.",
        "The idea is to interleave the translation of formulae into production rules with the recognition of subconstituents.",
        "It should be noted that this approach suffers from the same complexity limitations as the pure translation.",
        "In Schneider (1999), we used a fragment of a propositional bimodal language to express local constraints on syntactic structures.",
        "The two modal operators (4.)",
        "and (-->) refer to the leftmost child and the right sibling, respectively, of a node in a tree.",
        "Furthermore, the nesting of (.1,) is limited to depth one.",
        "A so-called modal grammar consists of a formula that represents the conjunction of a set of constraints that must be satisfied at every node of a tree.",
        "In addition, a second formula represents a condition for the root of a tree.",
        "In Schneider (1999), we have also shown how an extension of a standard method for automatic proof search in modal logic (so-called analytic labelled tableaux) in conjunction with dynamic programming techniques can be employed to parse input strings according to a modal grammar.",
        "Basically, a labelled tableau procedure is used to construct a labelled tableau, i.e., a tree labelled with formulae, by breaking formulae up into subformulae; this tableau may then be used to construct a model for the original formula.",
        "The extended tableau procedure constructs an infinite tableau that allows to obtain all admissible trees (i.e., models of the grammar).",
        "The approach can be described as follows: An STG is defined by using certain formulae that appear on the tableau as states, and by defining the transition relation in terms of the tableau rules (i.e., the operations that are used to construct a tableau).",
        "The states are formulae of the form X n A4)(2 A AWCY A AHR A AHRi where X is a propositional variable and [1.",
        "], [-4] are the dual operators to (1.",
        "), (-4).",
        "X is used as a node label in a tree model.",
        "The transition relation can be regarded as a simulation of the application of tableau rules to formulae, and a tabular parser for this STG can be viewed as a tabulation of the (infinite) tableau construction.",
        "In particular, it should be noted that this construction makes no reference to any particular parsing strategy."
      ]
    },
    {
      "heading": "6 Conclusion",
      "text": [
        "We have defined state transition grammars (STG) as an intermediate formalism between grammars and parsing algorithms.",
        "They complement the parsing schemata formalism of Sikkel (1993).",
        "A parsing schema abstracts from unimportant algorithmic details and thus, like STG's, represents a well-defined level of abstraction between grammars and parsers.",
        "STG's add another abstraction to parsing schemata, namely on the grammar side.",
        "Therefore, we argued, a parsing schema defined over a STG represents a very high level description of a tabular parsing algorithm that can be applied to various grammar formalisms.",
        "In this paper we concentrated on grammar formalisms with a flexible constituent structure, i.e., where the",
        "number and order of subconstituents specified by a grammar production may not be fixed.",
        "In particular, we have discussed extended context-free grammars (ECFG), ID/LP grammars, and grammars in which admissible trees are defined by means of local tree constraints expressed in a simple logical language."
      ]
    }
  ]
}
