{
  "info": {
    "authors": [
      "Mark-Jan Nederhof"
    ],
    "book": "Computational Linguistics",
    "id": "acl-J00-1003",
    "title": "Practical Experiments With Regular Approximation of Context-Free Languages",
    "url": "https://aclweb.org/anthology/J00-1003",
    "year": 2000
  },
  "references": [
    "acl-C92-1032",
    "acl-P94-1011",
    "acl-P96-1032",
    "acl-P97-1058",
    "acl-P98-1101",
    "acl-P98-2147",
    "acl-W98-1302"
  ],
  "sections": [
    {
      "heading": "Intelligence",
      "text": [
        "Several methods are discussed that construct a finite automaton given a context-free grammar, including both methods that lead to subsets and those that lead to supersets of the original context free language.",
        "Some of these methods of regular approximation are new, and some others are presented here in a more refined form with respect to existing literature.",
        "Practical experiments with the different methods of regular approximation are performed for spoken-language input: hypotheses from a speech recognizer are filtered through a finite automaton."
      ]
    },
    {
      "heading": "1. Introduction",
      "text": [
        "Several methods of regular approximation of context-free languages have been proposed in the literature.",
        "For some, the regular language is a superset of the context-free language, and for others it is a subset.",
        "We have implemented a large number of methods, and where necessary, refined them with an analysis of the grammar.",
        "We also propose a number of new methods.",
        "The analysis of the grammar is based on a sufficient condition for context-free grammars to generate regular languages.",
        "For an arbitrary grammar, this analysis identifies sets of rules that need to be processed in a special way in order to obtain a regular language.",
        "The nature of this processing differs for the respective approximation methods.",
        "For other parts of the grammar, no special treatment is needed and the grammar rules are translated to the states and transitions of a finite automaton without affecting the language.",
        "Few of the published articles on regular approximation have discussed the application in practice.",
        "In particular, little attention has been given to the following two questions: First, what happens when a context-free grammar grows in size?",
        "What is then the increase of the sizes of the intermediate results and the obtained minimal deterministic automaton?",
        "Second, how \"precise\" are the approximations?",
        "That is, how much larger than the original context-free language is the language obtained by a superset approximation, and how much smaller is the language obtained by a subset approximation?",
        "(How we measure the \"sizes\" of languages in a practical setting will become clear in what follows.)",
        "Some considerations with regard to theoretical upper bounds on the sizes of the intermediate results and the finite automata have already been discussed in Nederhof (1997).",
        "In this article we will try to answer the above two questions in a practical setting, using practical linguistic grammars and sentences taken from a spoken-language corpus.",
        "* DFKI, Stuhlsatzenhausweg 3, D-66123 Saarbrucken, Germany.",
        "E-mail: nederhof@dfki.de"
      ]
    },
    {
      "heading": "2000 Association for Computational Linguistics",
      "text": [
        "Computational LinguisticsVolume 26, Number 1 The structure of this paper is as follows: In Section 2 we recall some standard definitions from language theory.",
        "Section 3 investigates a sufficient condition for a context-free grammar to generate a regular language.",
        "We also present the construction of a finite automaton from such a grammar.",
        "In Section 4, we discuss several methods to approximate the language generated by a grammar if the sufficient condition mentioned above is not satisfied.",
        "These methods can be enhanced by a grammar transformation presented in Section 5.",
        "Section 6 compares the respective methods, which leads to conclusions in Section 7."
      ]
    },
    {
      "heading": "2. Preliminaries",
      "text": [
        "Throughout this paper we use standard formal language notation (see, for example, Harrison [19781).",
        "In this section we review some basic definitions.",
        "A context-free grammar G is a 4-tuple (E, N, P, S), where E and N are two finite disjoint sets of terminals and nonterminals, respectively, S E N is the start symbol, and P is a finite set of rules.",
        "Each rule has the form A a with A E N and a E V*, where V denotes N U E. The relation on N x V* is extended to a relation on V* x V* as usual.",
        "The transitive and reflexive closure of is denoted by The language generated by G is given by the set {w E E* I Sw}.",
        "By definition, such a set is a context-free language.",
        "By reduction of a grammar we mean the elimination from P of all rules A --+ ry such that SaA0 4 cry -* w does not hold for any a, (3 E V* and w E E*.",
        "We generally use symbols A, B, C, .",
        ".",
        ".",
        "to range over N, symbols a, b, c, .",
        ".",
        ".",
        "to range over E, symbols X, Y, Z to range over V, symbols a, 0,-y, .",
        ".",
        ".",
        "to range over V*, and symbols ...v, w, x, .",
        ".",
        "to range over E*.",
        "We write c to denote the empty string.",
        "A rule of the form A B is called a unit rule.",
        "A (nondeterministic) finite automaton .T is a 5-tuple (K, E, A, s, F), where K is a finite set of states, of which s is the initial state and those in F K are the final states, E is the input alphabet, and the transition relation A is a finite subset of K x E* x K. We define a configuration to be an element of K x E. We define the binary relation I between configurations as: (q, vw) (q' ,w) if and only if (q, v, q') E A.",
        "The transitive and reflexive closure of F is denoted by H*.",
        "Some input v is recognized if (s, v) 1-* (q, E), for some q E F. The language accepted by .F is defined to be the set of all strings v that are recognized.",
        "By definition, a language accepted by a finite automaton is called a regular language.",
        "3.",
        "Finite Automata in the Absence of Self-Embedding We define a spine in a parse tree to be a path that runs from the root down to some leaf.",
        "Our main interest in spines lies in the sequences of grammar symbols at nodes bordering on spines.",
        "A simple example is the set of parse trees such as the one in Figure 1, for a grammar of palindromes.",
        "It is intuitively clear that the language is not regular: the grammar symbols to the left of the spine from the root to E \"communicate\" with those to the right of the spine.",
        "More precisely, the prefix of the input up to the point where it meets the final node c of the spine determines the suffix after that point, in such a way that an unbounded quantity of symbols from the prefix need to be taken into account.",
        "A formal explanation for why the grammar may not generate a regular language relies on the following definition (Chomsky 1959b):",
        "Grammar of palindromes, and a parse tree.",
        "Definition A grammar is self-embedding if there is some A E N such that A * cIAO, for some a c and /3 E. If a grammar is not self-embedding, this means that when a section of a spine in a parse tree repeats itself, then either no grammar symbols occur to the left of that section of the spine, or no grammar symbols occur to the right.",
        "This prevents the \"unbounded communication\" between the two sides of the spine exemplified by the palindrome grammar.",
        "We now prove that grammars that are not self-embedding generate regular languages.",
        "For an arbitrary grammar, we define the set of recursive nonterminals as: N = {A E N cE, 13[A * aA13]1 We determine the partition Al of N consisting of subsets N1, N2, .",
        ", Nk, for some k > 0, of mutually recursive nonterminals:",
        "We now define the function recursive from Ar to the set {left, right, self, cyclic} .",
        "For",
        "Computational LinguisticsVolume 26, Number 1 When recursive(N1) = left, Ni consists of only left-recursive nonterminals, which does not mean it cannot also contain right-recursive nonterminals, but in that case right recursion amounts to application of unit rules.",
        "When recursive(Ni) = cyclic, it is only such unit rules that take part in the recursion.",
        "That recursive(N ,) = self, for some i, is a sufficient and necessary condition for the grammar to be self-embedding.",
        "Therefore, we have to prove that if recursive(Ni) E {left, right, cyclic}, for all i, then the grammar generates a regular language.",
        "Our proof differs from an existing proof (Chomsky 1959a) in that it is fully constructive: Figure 2 presents an algorithm for creating a finite automaton that accepts the language generated by the grammar.",
        "The process is initiated at the start symbol, and from there the process descends the grammar in all ways until terminals are encountered, and then transitions are created labeled with those terminals.",
        "Descending the grammar is straightforward in the case of rules of which the left-hand side is not a recursive nonterminal: the sub-automata found recursively for members in the right-hand side will be connected.",
        "In the case of recursive nonterminals, the process depends on whether the nonterminals in the corresponding set from Ar are mutually left-recursive or right-recursive; if they are both, which means they are cyclic, then either subprocess can be applied; in the code in Figure 2 cyclic and right-recursive subsets N, are treated uniformly.",
        "We discuss the case in which the nonterminals are left-recursive.",
        "One new state is created for each nonterminal in the set.",
        "The transitions that are created for terminals and nonterminals not in N, are connected in a way that is reminiscent of the construction of left-corner parsers (Rosenkrantz and Lewis 1970), and specifically of one construction that focuses on sets of mutually recursive nonterminals (Nederhof 1994, Section 5.8).",
        "An example is given in Figure 3.",
        "Four states have been labeled according to the names they are given in procedure make fa.",
        "There are two states that are labeled qB.",
        "This can be explained by the fact that nonterminal B can be reached by descending the grammar from S in two essentially distinct ways.",
        "The code in Figure 2 differs from the actual implementation in that sometimes, for a nonterminal, a separate finite automaton is constructed, namely, for those nonterminals that occur as A in the code.",
        "A transition in such a subautomaton may be labeled by another nonterminal B, which then represents the subautomaton corresponding to B.",
        "The resulting representation is similar to extended context-free grammars (Purdom and Brown 1981), with the exception that in our case recursion cannot occur, by virtue of the construction.",
        "The representation for the running example is indicated by Figure 4, which shows two subautomata, labeled S and B.",
        "The one labeled S is the automaton on the top level, and contains two transitions labeled B, which refer to the other subautomaton.",
        "Note that this representation is more compact than that of Figure 3, since the transitions that are involved in representing the sublanguage of strings generated by nonterminal B are included only once.",
        "The compact representation consisting of subautomata can be turned into a single finite automaton by substituting subautomata A for transitions labeled A in other automata.",
        "This comes down to regular substitution in the sense of Berstel (1979).",
        "The advantage of this way of obtaining a finite automaton over a direct construction of a nondeterministic automaton is that subautomata may be determinized and minimized before they are substituted into larger subautomata.",
        "Since in many cases determinized and minimized automata are much smaller, this process avoids much of the combina20"
      ]
    },
    {
      "heading": "NederhofExperiments with Regular Approximation",
      "text": [
        "if there exists i such that A E Ari then for each B E Ni do let qB = fresh_state end; if recursive(NN) = left then for each (C Xi X,,) E P such that C E N, A Xi, , Xn NZ",
        "procedure fresh_state(): create some object q such that q K; let K = K U {q}; return q end.",
        "Figure 2 Transformation from a grammar G = (E, N, P, S) that is not self-embedding into an equivalent finite automaton .F (K, E, A, s, F).",
        "Application of the code from Figure 2 on a small grammar."
      ]
    },
    {
      "heading": "SB",
      "text": [
        "The automaton from Figure 3 in a compact representation.",
        "torial explosion that takes place upon naive construction of a single nondeterministic finite automaton.'",
        "Assume we have a list of subautomata A1, ... , Am that is ordered from lower-level to higher-level automata; i.e., if an automaton Ap occurs as the label of a transition of automaton Aq, then p < q; Am must be the start symbol S. This order is a natural result of the way that subautomata are constructed during our depth-first traversal of the grammar, which is actually postorder in the sense that a subautomaton is output after all subautomata occurring at its transitions have been output.",
        "Our implementation constructs a minimal deterministic automaton by repeating the following for p = 1, , m: 1.Make a copy of Ap.",
        "Determinize and minimize the copy.",
        "If it has fewer transitions labeled by nonterminals than the original, then replace Ap by its copy.",
        "2.Replace each transition in Ap of the form (q, A q') by (a copy of) automaton A, in a straightforward way.",
        "This means that new e-transitions connect q to the start state of A, and the final states of A, to q'.",
        "1 The representation in Mohri and Pereira (1998) is even more compact than ours for grammars that are not self-embedding.",
        "However, in this paper we use our representation as an intermediate result in approximating an unrestricted context-free grammar, with the final objective of obtaining a single minimal deterministic automaton.",
        "For this purpose, Mohri and Pereira's representation offers little advantage."
      ]
    },
    {
      "heading": "NederhofExperiments with Regular Approximation",
      "text": [
        "3.Again determinize and minimize Ap and store it for later reference.",
        "The automaton obtained for Am after step 3 is the desired result."
      ]
    },
    {
      "heading": "4. Methods of Regular Approximation",
      "text": [
        "This section describes a number of methods for approximating a context-free grammar by means of a finite automaton.",
        "Some published methods did not mention self-embedding explicitly as the source of nonregularity for the language, and suggested that approximations should be applied globally for the complete grammar.",
        "Where this is the case, we adapt the method so that it is more selective and deals with self-embedding locally.",
        "The approximations are integrated into the construction of the finite automaton from the grammar, which was described in the previous section.",
        "A separate incarnation of the approximation process is activated upon finding a nonterminal A such that A E N, and recursive(N,) = self, for some i.",
        "This incarnation then only pertains to the set of rules of the form B a, where B E N ,.",
        "In other words, nonterminals not in N are treated by this incarnation of the approximation process as if they were terminals."
      ]
    },
    {
      "heading": "4.1 Superset Approximation Based on RTNs",
      "text": [
        "The following approximation was proposed in Nederhof (1997).",
        "The presentation here, however, differs substantially from the earlier publication, which treated the approximation process entirely on the level of context-free grammars: a self-embedding grammar was transformed in such a way that it was no longer self-embedding.",
        "A finite automaton was then obtained from the grammar by the algorithm discussed above.",
        "The presentation here is based on recursive transition networks (RTNs) (Woods 1970).",
        "We can see a context-free grammar as an RTN as follows: We introduce two states qA and qA for each nonterminal A, and m + 1 states q0,...,qm for each rule A > Xl ... Xm.",
        "The states for a rule AXm are connected with each other and to the states for the left-hand side A by one transition (qA, Et q0), a transition (qi_i,qt) for each i such that 1 < i < m, and one transition (qm, ).",
        "(Actually, some epsilon transitions are avoided in our implementation, but we will not be concerned with such optimizations here.)",
        "In this way, we obtain a finite automaton with initial state qA and final state qA for each nonterminal A and its defining rules A Xm.",
        "This automaton can be seen as one component of the RTN.",
        "The complete RTN is obtained by the collection of all such finite automata for different nonterminals.",
        "An approximation now results if we join all the components in one big automaton, and if we approximate the usual mechanism of recursion by replacing each transition (q, A, q') by two transitions (q, c, qA) and (qA, E, q').",
        "The construction is illustrated in Figure 5.",
        "In terms of the original grammar, this approximation can be informally explained as follows: Suppose we have three rules B aA,3, B' a' A,3' , and A > 7.",
        "Top-down, left-to-right parsing would proceed, for example, by recognizing a in the first rule; it would then descend into rule A 4 -y, and recognize 'y; it would then return to the first rule and subsequently process /3.",
        "In the approximation, however, the finite automaton \"forgets\" which rule it came from when it starts to recognize -y, so that it may subsequently recognize 13' in the second rule.",
        "Application of the RTN method for the grammar in (a).",
        "The RTN is given in (b), and (c) presents the approximating finite automaton.",
        "We assume A is the start symbol and therefore qA becomes the initial state and qA becomes the final state in the approximating automaton.",
        "For the sake of presentational convenience, the above describes a construction working on the complete grammar.",
        "However, our implementation applies the construction separately for each nonterminal in a set Ni such that recursive(N,) = self, which leads to a separate subautomaton of the compact representation (Section 3).",
        "See Nederhof (1998) for a variant of this approximation that constructs finite transducers rather than finite automata.",
        "We have further implemented a parameterized version of the RTN approximation.",
        "A state of the nondeterministic automaton is now also associated to a list H of length IHI strictly smaller than a number d, which is the parameter to the method.",
        "This list represents a history of rule positions that were encountered in the computation leading to the present state.",
        "More precisely, we define an item to be an object of the form [A > a 0], where A p a/3 is a rule from the grammar.",
        "These are the same objects as the \"dotted\" productions of Earley (1970).",
        "The dot indicates a position in the right-hand side.",
        "The unparameterized RTN method had one state qi for each item I, and two states qA and qA for each nonterminal A.",
        "The parameterized RTN method has one state qIH for each item I and each list of items H that represents a valid history for reaching I, and two states qAH and q'AH for each nonterminal A and each list of items H that represents a valid history for reaching A.",
        "Such a valid history is defined to be a list"
      ]
    },
    {
      "heading": "NederhofExperiments with Regular Approximation",
      "text": [
        "H with 0 < IHI < d that represents a series of positions in rules that could have been invoked before reaching I or A, respectively.",
        "More precisely, if we set H .",
        ".",
        ".",
        "In, then each Im (1 < m < n) should be of the form [Am > am BmiGm] and for 1 < m < n we should have Am = Bm+1.",
        "Furthermore, for a state qIH with I = [A > a 13] we demand A = Bi if n > 0.",
        "For a state qAH we demand A = Bi if n > 0.",
        "(Strictly speaking, states qAH and qIH, with IHI < d 1 and I = [A > a /3], will only be needed if Aim is the start symbol in the case 11-1I > 0, or if A is the start symbol in the case H = E.) The transitions of the automaton that pertain to terminals in right-hand sides of rules are very similar to those in the case of the unparameterized method: For a state qIH with I of the form [A a a,3], we create a transition (gm,a,gm), with",
        "Similarly, we create epsilon transitions that connect left-hand sides and right-hand sides of rules: For each state qAH there is a transition (qAH, 6/ qIH) for each item I = [A > a], for some a, and for each state of the form qv'', with I' = [A > a ], there is a transition(qr,H, cj'AH).",
        "For transitions that pertain to nonterminals in the right-hand sides of rules, we need to manipulate the histories.",
        "For a state qIH with I of the form [A > a B/3], we create two epsilon transitions.",
        "One is (qIH, Et (MHO, where H' is defined to be IH if IIHI < d, and to be the first d 1 items of IH, otherwise.",
        "Informally, we extend the history by the item I representing the rule position that we have just come from, but the oldest information in the history is discarded if the history becomes too long.",
        "The second transition is (g'Bw, E, qPII), with I' = [A + aB /3].",
        "If the start symbol is S, the initial state is qs and the final state is qs (after the symbol S in the subscripts we find empty lists of items).",
        "Note that the parameterized method with d = 1 concurs with the unparameterized method, since the lists of items then remain empty.",
        "An example with parameter d = 2 is given in Figure 6.",
        "For the unparameterized method, each I = [A > a [3] corresponded to one state (Figure 5).",
        "Since reaching A can have three different histories of length shorter than 2 (the empty history, since A is the start symbol; the history of coming from the rule position given by item [A c A]; and the history of coming from the rule position given by item [B d Ae]), in Figure 6 we now have three states of the form qIH for each I = [A > a /3], as well as three states of the form qAH and q'An.",
        "The higher we choose d, the more precise the approximation is, since the histories allow the automaton to simulate part of the mechanism of recursion from the original grammar, and the maximum length of the histories corresponds to the number of levels of recursion that can be simulated accurately."
      ]
    },
    {
      "heading": "4.2 Refinement of RTN Superset Approximation",
      "text": [
        "We rephrase the method of Grimley-Evans (1997) as follows: First, we construct the approximating finite automaton according to the unparameterized RTN method above.",
        "Then an additional mechanism is introduced that ensures for each rule A Xl .",
        "X,,, separately that the list of visits to the states go,...,gni satisfies some reasonable criteria: a visit to g,, with 0 < i < m, should be followed by one to qi+i or go.",
        "The latter option amounts to a nested incarnation of the rule.",
        "There is a complementary condition for what should precede a visit to q,, with 0 < i < m. Since only pairs of consecutive visits to states from the set { qo, , gm} are considered, finite-state techniques suffice to implement such conditions.",
        "This can be realized by attaching histories to the states as in the case of the parameterized RTN method above, but now each history is a set rather than a list, and can contain at most one",
        "Figure 6 Application of the parameterized RTN method with d = 2.",
        "We again assume A is the start symbol.",
        "States qIH have not been labeled in order to avoid cluttering the picture.",
        "firmed by our own experiments, the nondeterministic finite automata resulting from this method may be quite large, even for small grammars.",
        "The explanation is that the number of such histories is exponential in the number of rules.",
        "We have refined the method with respect to the original publication by applying the construction separately for each nonterminal in a set N, such that recursive(N,) = self."
      ]
    },
    {
      "heading": "4.3 Subset Approximation by Transforming the Grammar",
      "text": [
        "Putting restrictions on spines is another way to obtain a regular language.",
        "Several methods can be defined.",
        "The first method we present investigates spines in a very detailed way.",
        "It eliminates from the language only those sentences for which a sub-derivation is required of the form B aBO, for some a c and )3 E. The motivation is that such sentences do not occur frequently in practice, since these subderivations make them difficult for people to comprehend (Resnik 1992).",
        "Their exclusion will therefore not lead to much loss of coverage of typical sentences, especially for simple application domains.",
        "We express the method in terms of a grammar transformation in Figure 7.",
        "The effect of this transformation is that a nonterminal A is tagged with a set of pairs (B, Q), where B is a nonterminal occurring higher in the spine; for any given B, at most one such pair (B, Q) can be contained in the set.",
        "The set Q may contain the element I to indicate that something to the left of the part of the spine from B to A",
        "NederhofExperiments with Regular Approximation We are given a grammar G = (E, N, P, S).",
        "The following is to be performed for each",
        "otherwise.",
        "4.",
        "Remove from P the old rules of the form A > a, where A E N,.",
        "5.Reduce the grammar.",
        "Subset approximation by transforming the grammar.",
        "was generated.",
        "Similarly, r E Q indicates that something to the right was generated.",
        "If Q = {l, r}, then we have obtained a derivation B aAI3, for some a c and 13 c, and further occurrences of B below A should be blocked in order to avoid a derivation with self-embedding.",
        "An example is given in Figure 8.",
        "The original grammar is implicit in the depicted parse tree on the left, and contains at least the rules S A a, A b B, B 4 C, and C > S. This grammar is self-embedding, since we have a subderivation S -4* bSa.",
        "We explain how FB is obtained from FA in the rule AFA b BFB .",
        "We first construct F' = {(S, {r}), (A, 0)1 from FA = {(S, {r})} by adding (A, 0), since no other pair of the form (A, Q) was already present.",
        "To the left of the occurrence of B in the original rule A b B we find a nonempty string b.",
        "This means that we have to add 1 to all second components of pairs in F', which gives us FB = {(S, {l, r}), (A, {1})}.",
        "In the transformed grammar, the lower occurrence of S in the tree is tagged with the set {(S, {l, r}), (A, {4), (B, 0), (C, 0)}.",
        "The meaning is that higher up in the spine, we will find the nonterminals S, A, B, and C. The pair (A, {l}) indicates that since we saw A on the spine, something to the left has been generated, namely, b.",
        "The pair (B, 0) indicates that nothing either to the left or to the right has been generated since we saw B.",
        "The pair (S, {l, r}) indicates that both to the left and to the right something has been generated (namely, b on the left and a on the right).",
        "Since this indicates that an",
        "A parse tree in a self-embedding grammar (a), and the corresponding parse tree in the transformed grammar (b), for the transformation from Figure 7.",
        "For the moment we ignore step 5 of Figure 7, i.e., reduction of the transformed grammar.",
        "offending subderivation S >* aS,3 has been found, further completion of the parse tree is blocked: the transformed grammar will not have any rules with left-hand side SI (S,{1,r}),(A,{1}),(B4O),(C,0)} In fact, after the grammar is reduced, any parse tree that is {(S,-(14),(A,{11),(B4O),(C,0)}, constructed can no longer even contain a node labeled by Sor any nodes with labels of the form AF such that (A, {l, r}) e F. One could generalize this approximation in such a way that not all self-embedding is blocked, but only self-embedding occurring, say, twice in a row, in the sense of a subderivation of the form A 4* ct1A131 ce2A0201.",
        "We will not do so here, because already for the basic case above, the transformed grammar can be huge due to the high number of nonterminals of the form AF that may result; the number of such nonterminals is exponential in the size of N,.",
        "We therefore present, in Figure 9, an alternative approximation that has a lower complexity.",
        "By parameter d, it restricts the number of rules along a spine that may generate something to the left and to the right.",
        "We do not, however, restrict pure left recursion and pure right recursion.",
        "Between two occurrences of an arbitrary rule, we allow left recursion followed by right recursion (which leads to tag r followed by tag rl), or right recursion followed by left recursion (which leads to tag 1 followed by tag 1r).",
        "An example is given in Figure 10.",
        "As before, the rules of the grammar are implicit in the depicted parse tree.",
        "At the top of the derivation we find S. In the transformed grammar, we first have to apply S + ST'.",
        "The derivation starts with a rule S + A a, which generates a string (a) to the right of a nonterminal (A).",
        "Before we can apply zero T,0 _> sr,o or more of such rules, we first have to apply a unit rule Sin the transformed grammar.",
        "For zero or more rules that subsequently generate something on the left, such as A + b B, we have to obtain a superscript containing rl, and in the example this is done by applying Ar'C' Arl' Now we are finished with pure left recursion and pure right recursion, and apply Brl' > B-L.",
        "This allows us to apply one unconstrained rule, which appears in the transformed grammar as 131' cd."
      ]
    },
    {
      "heading": "NederhofExperiments with Regular Approximation",
      "text": [
        "We are given a grammar G = (E, N, P, S).",
        "The following is to be performed for each set N, E A such that recursive(N,) = self.",
        "The value d stands for the maximum number of unconstrained rules along a spine, possibly alternated with a series of left-recursive rules followed by a series of right-recursive rules, or vice versa.",
        "A parse tree in a self-embedding grammar (a), and the corresponding parse tree in the transformed grammar (b), for the simple subset approximation from Figure 9.",
        "Figure 10 (b) is no longer possible, since no nonterminal in the transformed grammar would contain 1 in its superscript.",
        "Because of the demonstrated increase of the counter f, this transformation is guaranteed to remove self-embedding from the grammar.",
        "However, it is not as selective as the transformation we saw before, in the sense that it may also block subderivations that are not of the form A * ceA13.",
        "Consider for example the subderivation from Figure 10, but replacing the lower occurrence of S by any other nonterminal C that is mutually recursive with S, A, and B.",
        "Such a subderivation S * b c C d a would also be blocked by choosing d = 0.",
        "In general, increasing d allows more of such derivations that are not of the form A * aA/3 but also allows more derivations that are of that form.",
        "The reason for considering this transformation rather than any other that eliminates self-embedding is purely pragmatic: of the many variants we have tried that yield nontrivial subset approximations, this transformation has the lowest complexity in terms of the sizes of intermediate structures and of the resulting finite automata.",
        "In the actual implementation, we have integrated the grammar transformation and the construction of the finite automaton, which avoids reanalysis of the grammar to determine the partition of mutually recursive nonterminals after transformation.",
        "This integration makes use, for example, of the fact that for fixed NZ and fixed f, the set of nonterminals of the form Alf, with A E N, is (potentially) mutually right-recursive.",
        "A set of such nonterminals can therefore be treated as the corresponding case from Figure 2, assuming the value right.",
        "The full formulation of the integrated grammar transformation and construction of the finite automaton is rather long and is therefore not given here.",
        "A very similar formulation, for another grammar transformation, is given in Nederhof (1998)."
      ]
    },
    {
      "heading": "NederhofExperiments with Regular Approximation 4.4 Superset Approximation through Pushdown Automata",
      "text": [
        "The distinction between context-free languages and regular languages can be seen in terms of the distinction between pushdown automata and finite automata.",
        "Pushdown automata maintain a stack that is potentially unbounded in height, which allows more complex languages to be recognized than in the case of finite automata.",
        "Regular approximation can be achieved by restricting the height of the stack, as we will see in Section 4.5, or by ignoring the distinction between several stacks when they become too high.",
        "More specifically, the method proposed by Pereira and Wright (1997) first constructs an LR automaton, which is a special case of a pushdown automaton.",
        "Then, stacks that may be constructed in the course of recognition of a string are computed one by one.",
        "However, stacks that contain two occurrences of a stack symbol are identified with the shorter stack that results by removing the part of the stack between the two occurrences, including one of the two occurrences.",
        "This process defines a congruence relation on stacks, with a finite number of congruence classes.",
        "This congruence relation directly defines a finite automaton: each class is translated to a unique state of the nondeterministic finite automaton, shift actions are translated to transitions labeled with terminals, and reduce actions are translated to epsilon transitions.",
        "The method has a high complexity.",
        "First, construction of an LR automaton, of which the size is exponential in the size of the grammar, may be a prohibitively expensive task (Nederhof and Satta 1996).",
        "This is, however, only a fraction of the effort needed to compute the congruence classes, of which the number is in turn exponential in the size of the LR automaton.",
        "If the resulting nondeterministic automaton is determinized, we obtain a third source of exponential behavior.",
        "The time and space complexity of the method are thereby bounded by a triple exponential function in the size of the grammar.",
        "This theoretical analysis seems to be in keeping with the high costs of applying this method in practice, as will be shown later in this article.",
        "As proposed by Pereira and Wright (1997), our implementation applies the approximation separately for each nonterminal occurring in a set N, that reveals self-embedding.",
        "A different superset approximation based on LR automata was proposed by Baker (1981) and rediscovered by Heckert (1994).",
        "Each individual stack symbol is now translated to one state of the nondeterministic finite automaton.",
        "It can be argued theoretically that this approximation differs from the unparameterized RTN approximation from Section 4.1 only under certain conditions that are not likely to occur very often in practice.",
        "This consideration is confirmed by our experiments to be discussed later.",
        "Our implementation differs from the original algorithm in that the approximation is applied separately for each nonterminal in a set Ni that reveals self-embedding.",
        "A generalization of this method was suggested by Bermudez and Schimpf (1990).",
        "For a fixed number d > 0 we investigate sequences of d topmost elements of stacks that may arise in the LR automaton, and we translate these to states of the finite automaton.",
        "More precisely, we define another congruence relation on stacks, such that we have one congruence class for each sequence of d stack symbols and this class contains all stacks that have that sequence as d topmost elements; we have a separate class for each stack that contains fewer than d elements.",
        "As before, each congruence class is translated to one state of the nondeterministic finite automaton.",
        "Note that the case d 1 is equivalent to the approximation in Baker (1981).",
        "If we replace the LR automaton by a certain type of automaton that performs top-down recognition, then the method in Bermudez and Schimpf (1990) amounts to the parameterized RTN method from Section 4.1; note that the histories from Section 4.1 in fact function as stacks, the items being the stack symbols."
      ]
    },
    {
      "heading": "4.5 Subset Approximation through Pushdown Automata",
      "text": [
        "By restricting the height of the stack of a pushdown automaton, one obstructs recognition of a set of strings in the context-free language, and therefore a subset approximation results.",
        "This idea was proposed by Krauwer and des Tombe (1981), Langendoen and Langsam (1987), and Pulman (1986), and was rediscovered by Black (1989) and recently by Johnson (1998).",
        "Since the latest publication in this area is more explicit in its presentation, we will base our treatment on this, instead of going to the historical roots of the method.",
        "One first constructs a modified left-corner recognizer from the grammar, in the form of a pushdown automaton.",
        "The stack height is bounded by a low number; Johnson (1998) claims a suitable number would be 5.",
        "The motivation for using the left-corner strategy is that the height of the stack maintained by a left-corner parser is already bounded by a constant in the absence of self-embedding.",
        "If the artificial bound imposed by the approximation method is chosen to be larger than or equal to this natural bound, then the approximation may be exact.",
        "Our own implementation is more refined than the published algorithms mentioned above, in that it defines a separate left-corner recognizer for each nonterminal A such that A E Ni and recursive(N,) = self, some i.",
        "In the construction of one such recognizer, nonterminals that do not belong to Ni are treated as terminals, as in all other methods discussed here."
      ]
    },
    {
      "heading": "4.6 Superset Approximation by N-grams",
      "text": [
        "An approximation from Seyfarth and Bermudez (1995) can be explained as follows.",
        "Define the set of all terminals reachable from nonterminal A to be EA = {a I a, ,(3[A 4* aa[3]}.",
        "We now approximate the set of strings derivable from A by EA, which is the set of strings consisting of terminals from EA.",
        "Our implementation is made slightly more sophisticated by taking EA to be {X I 3B, a, /3[B E N, A B aX/3 A X Na, for each A such that A E N, and recursive(N,) = self, for some i.",
        "That is, each X E EA is a terminal, or a nonterminal not in the same set Ni as A, but immediately reachable from set N through B E Ni.",
        "This method can be generalized, inspired by Stolcke and Segal (1994), who derive N-gram probabilities from stochastic context-free grammars.",
        "By ignoring the probabilities, each N = 1, 2, 3, ... gives rise to a superset approximation that can be described as follows: The set of strings derivable from a nonterminal A is approximated by the set of strings al .",
        "an such that for each substring v = aii ai+N (0 < i < n N) we have A >* wvy, for some w and y, for each prefix v =- al ai (0 < i < n) such that i < N we have Avy, for some y, and for each suffix v = afry .",
        "an (0 < i < n) such that n i < N we have A * wv, for some w. (Again, the algorithms that we actually implemented are more refined and take into account the sets N,.)",
        "The approximation from Seyfarth and Bermudez (1995) can be seen as the case N = 1, which will henceforth be called the unigram method.",
        "We have also experimented with the cases N = 2 and N = 3, which will be called the bigram and trigram methods."
      ]
    },
    {
      "heading": "NederhofExperiments with Regular Approximation 5. Increasing the Precision",
      "text": [
        "The methods of approximation described above take as input the parts of the grammar that pertain to self-embedding.",
        "It is only for those parts that the language is affected.",
        "This leads us to a way to increase the precision: before applying any of the above methods of regular approximation, we first transform the grammar.",
        "This grammar transformation copies grammar rules containing recursive nonterminals and, in the copies, it replaces these nonterminals by new nonrecursive nonterminals.",
        "The new rules take over part of the roles of the old rules, but since the new rules do not contain recursion and therefore do not pertain to self-embedding, they remain unaffected by the approximation process.",
        "Consider for example the palindrome grammar from Figure 1.",
        "The RTN method will yield a rather crude approximation, namely, the language {a, b}*.",
        "We transform this grammar in order to keep the approximation process away from the first three levels of recursion.",
        "We achieve this by introducing three new nonterminals S[1], S[2] and S[3], and by adding modified copies of the original grammar rules, so that we obtain:",
        "The new start symbol is S[1].",
        "The new grammar generates the same language as before, but the approximation process leaves unaffected the nonterminals S[1], S[2], and S[3] and the rules defining them, since these nonterminals are not recursive.",
        "These nonterminals amount to the upper three levels of the parse trees, and therefore the effect of the approximation on the language is limited to lower levels.",
        "If we apply the RTN method then we obtain the language that consists of (grammatical) palindromes of the form wwR, where w E {E, a, b} U {a, b}2 U {a, b}3, plus (possibly ungrammatical) strings of the form wywR where w E {a, b}3 and v E {a, b}*.",
        "(wR indicates the mirror image of w.) The grammar transformation in its full generality is given by the following, which is to be applied for fixed integer j > 0, which is a parameter of the transformation, and for each Ni such that recursive(N,) = self.",
        "For each nonterminal A E N, we introduce j new nonterminals A[1], , A [j].",
        "For each A > Xl ... Xn, in P such that A Eand h such that 1 < h < j, we add A[h] >to P, where for 1 < k < m:",
        "Further, we replace all rules A > X1 ... Xn, such that A V N, by A >, where for 1 < k < m:",
        "If the start symbol S was in Nu we let S[1] be the new start symbol.",
        "A second transformation, which shares some characteristics with the one above, was presented in Nederhof (1997).",
        "One of the earliest papers suggesting such transformations as a way to increase the precision of approximation is due to ulik and Cohen (1973), who only discuss examples, however; no general algorithms were defined.",
        "The test material.",
        "The left-hand curve refers to the construction of the grammar from 332 sentences, the right-hand curve refers to the corpus of 1,000 sentences used as input to the finite automata."
      ]
    },
    {
      "heading": "6. Empirical Results",
      "text": [
        "In this section we investigate empirically how the respective approximation methods behave on grammars of different sizes and how much the approximated languages differ from the original context-free languages.",
        "This last question is difficult to answer precisely.",
        "Both an original context-free language and an approximating regular language generally consist of an infinite number of strings, and the number of strings that are introduced in a superset approximation or that are excluded in a subset approximation may also be infinite.",
        "This makes it difficult to attach numbers to the \"quality\" of approximations.",
        "We have opted for a pragmatic approach, which does not require investigation of the entire infinite languages of the grammar and the finite automata, but looks at a certain finite set of strings taken from a corpus, as discussed below.",
        "For this finite set of strings, we measure the percentage that overlaps with the investigated languages.",
        "For the experiments, we took context-free grammars for German, generated automatically from an HPSG and a spoken-language corpus of 332 sentences.",
        "This corpus consists of sentences possessing grammatical phenomena of interest, manually selected from a larger corpus of actual dialogues.",
        "An HPSG parser was applied on these sentences, and a form of context-free backbone was selected from the first derivation that was found.",
        "(To take the first derivation is as good as any other strategy, given that we have at present no mechanisms for relative ranking of derivations.)",
        "The label occurring at a node together with the sequence of labels at the daughter nodes was then taken to be a context-free rule.",
        "The collection of such rules for the complete corpus forms a context-free grammar.",
        "Due to the incremental nature of this construction of the grammar, we can consider the subgrammars obtained after processing the first p sentences, where p = 1, 2, 3, ... , 332.",
        "See Figure 11 (left) for the relation between p and the number of rules of the grammar.",
        "The construction is such that rules have at most two members in the right-hand side.",
        "As input, we considered a set of 1,000 sentences, obtained independently from the 332 sentences mentioned above.",
        "These 1,000 sentences were found by having a speech recognizer provide a single hypothesis for each utterance, where utterances come from actual dialogues.",
        "Figure 11 (right) shows how many sentences of different lengths the corpus contains, up to length 30.",
        "Above length 25, this number quickly declines, but still a fair quantity of longer strings can be found, e.g., 11 strings of a length between"
      ]
    },
    {
      "heading": "NederhofExperiments with Regular Approximation",
      "text": [
        "51 and 60 words.",
        "In most cases however such long strings are in fact composed of a number of shorter sentences.",
        "Each of the 1,000 sentences were input in their entirety to the automata, although in practical spoken-language systems, often one is not interested in the grammaticality of complete utterances, but tries to find substrings that form certain phrases bearing information relevant to the understanding of the utterance.",
        "We will not be concerned here with the exact way such recognition of substrings could be realized by means of finite automata, since this is outside the scope of this paper.",
        "For the respective methods of approximation, we measured the size of the compact representation of the nondeterministic automaton, the number of states and the number of transitions of the minimal deterministic automaton, and the percentage of sentences that were recognized, in comparison to the percentage of grammatical sentences.",
        "For the compact representation, we counted the number of lines, which is roughly the sum of the numbers of transitions from all subautomata, not considering about three additional lines per subautomaton for overhead.",
        "We investigated the size of the compact representation because it is reasonably implementation independent, barring optimizations of the approximation algorithms themselves that affect the sizes of the subautomata.",
        "For some methods, we show that there is a sharp increase in the size of the compact representation for a small increase in the size of the grammar, which gives us a strong indication of how difficult it would be to apply the method to much larger grammars.",
        "Note that the size of the compact representation is a (very) rough indication of how much effort is involved in determinization, minimization, and substitution of the subautomata into each other.",
        "For determinization and minimization of automata, we have applied programs from the FSM library described in Mohri, Pereira, and Riley (1998).",
        "This library is considered to be competitive with respect to other tools for processing of finite-state machines.",
        "When these programs cannot determinize or minimize in reasonable time and space some subautomata constructed by a particular method of approximation, then this can be regarded as an indication of the impracticality of the method.",
        "We were not able to compute the compact representation for all the methods and all the grammars.",
        "The refined RTN approximation from Section 4.2 proved to be quite problematic.",
        "We were not able to compute the compact representation for any of the automatically obtained grammars in our collection that were self-embedding.",
        "We therefore eliminated individual rules by hand, starting from the smallest self-embedding grammar in our collection, eventually finding grammars small enough to be handled by this method.",
        "The results are given in Table 1.",
        "Note that the size of the compact representation increases significantly for each additional grammar rule.",
        "The sizes of the finite automata, after determinization and minimization, remain relatively small.",
        "Also problematic was the first approximation from Section 4.4, which was based on LR parsing following Pereira and Wright (1997).",
        "Even for the grammar of 50 rules, we were not able to determinize and minimize one of the subautomata according to step 1 of Section 3: we stopped the process after it had reached a size of over 600 megabytes.",
        "Results, as far as we could obtain them, are given in Table 2.",
        "Note the sharp increases in the size of the compact representation, resulting from small increases, from 44 to 47 and from 47 to 50, in the number of rules, and note an accompanying sharp increase in the size of the finite automaton.",
        "For this method, we see no possibility of accomplishing the complete approximation process, including determinization and minimization, for grammars in our collection that are substantially larger than 50 rules.",
        "Since no grammars of interest could be handled by them, the above two methods will be left out of further consideration.",
        "Size of the compact representation and number of states and transitions, for the refined RTN approximation (Grimley-Evans 1997).",
        "50646,419??",
        "Below, we refer to the unparameterized and parameterized approximations based on RTNs (Section 4.1) as RTN and RTNd, respectively, for d = 2, 3; to the subset approximation from Figure 9 as Subd, for d = 1, 2, 3; and to the second and third methods from Section 4.4, which were based on LR parsing following Baker (1981) and Bermudez and Schimpf (1990), as LR and LRd, respectively, for d = 2, 3.",
        "We refer to the subset approximation based on left-corner parsing from Section 4.5 as LCd, for the maximal stack height of d = 2, 3, 4; and to the methods discussed in Section 4.6 as Unigram, Bigram, and Trigram.",
        "We first discuss the compact representation of the nondeterministic automata.",
        "In Figure 12 we use two different scales to be able to represent the large variety of values.",
        "For the method Subd, the compact representation is of purely theoretical interest for grammars larger than 156 rules in the case of Subl, for those larger than 62 rules in the case of Sub2, and for those larger than 35 rules in the case of Sub3, since the minimal deterministic automata could thereafter no longer be computed with a reasonable bound on resources; we stopped the processes after they had consumed over 400 megabytes.",
        "For LC3, LC4, RTN3, LR2, and LR3, this was also the case for grammars larger than 139, 62, 156, 217, and 156 rules, respectively.",
        "The sizes of the compact representation seem to grow moderately for LR and Bigram, in the upper panel, yet the sizes are much larger than those for RTN and Unigram, which are indicated in the lower panel.",
        "The numbers of states for the respective methods are given in Figure 13, again using two very different scales.",
        "As in the case of the grammars, the terminals of our finite automata are parts of speech rather than words.",
        "This means that in general there will be nondeterminism during application of an automaton on an input sentence due to lexical ambiguity.",
        "This nondeterminism can be handled efficiently using tabular",
        "Size of the compact representation.",
        "techniques, provided the number of states is not too high.",
        "This consideration favors methods that produce low numbers of states, such as Trigram, LR, RTN, Bigram, and Unigram.",
        "Number of states of the determinized and minimized automata.",
        "Note that the numbers of states for LR and RTN differ very little.",
        "In fact, for some of the smallest and for some of the largest grammars in our collection, the resulting automata were identical.",
        "Note, however, that the intermediate results for LR"
      ]
    },
    {
      "heading": "NederhofExperiments with Regular Approximation",
      "text": [
        "(Figure 12) are much larger.",
        "It should therefore be concluded that the \"sophistication\" of LR parsing is here merely an avoidable source of inefficiency.",
        "The numbers of transitions for the respective methods are given in Figure 14.",
        "Again, note the different scales used in the two panels.",
        "The numbers of transitions roughly correspond to the storage requirements for the automata.",
        "It can be seen that, again, Trigram, LR, RTN, Bigram, and Unigram perform well.",
        "The precision of the respective approximations is measured in terms of the percentage of sentences in the corpus that are recognized by the automata, in comparison to the percentage of sentences that are generated by the grammar, as presented by Figure 15.",
        "The lower panel represents an enlargement of a section from the upper panel.",
        "Methods that could only be applied for the smaller grammars are only presented in the lower panel; LC4 and Sub2 have been omitted entirely.",
        "The curve labeled G represents the percentage of sentences generated by the grammar.",
        "Note that since all approximation methods compute either supersets or subsets, a particular automaton cannot both recognize some ungrammatical sentences and reject some grammatical sentences.",
        "Unigram and Bigram recognize very high percentages of ungrammatical sentences.",
        "Much better results were obtained for RTN.",
        "The curve for LR would not be distinguishable from that for RTN in the figure, and is therefore omitted.",
        "(For only two of the investigated grammars was there any difference, the largest difference occurring for grammar size 217, where 34.1 versus 34.5 percent of sentences were recognized in the cases of LR and RTN, respectively.)",
        "Trigram remains very close to RTN (and LR); for some grammars a lower percentage is recognized, for others a higher percentage is recognized.",
        "LR2 seems to improve slightly over RTN and Trigram, but data is available only for small grammars, due to the difficulty of applying the method to larger grammars.",
        "A more substantial improvement is found for RTN2.",
        "Even smaller percentages are recognized by LR3 and RTN3, but again, data is available only for small grammars.",
        "The subset approximations LC3 and Sub1 remain very close to G, but here again only data for small grammars is available, since these two methods could not be applied on larger grammars.",
        "Although application of LC2 on larger grammars required relatively few resources, the approximation is very crude: only a small percentage of the grammatical sentences are recognized.",
        "We also performed experiments with the grammar transformation from Section 5, in combination with the RTN method.",
        "We found that for increasing j, the intermediate automata soon became too large to be determinized and minimized, with a bound on the memory consumption of 400 megabytes.",
        "The sizes of the automata that we were able to compute are given in Figure 16.",
        "RTN+j, for j = 1, 2, 3, 4, 5, represents the (unparameterized) RTN method in combination with the grammar transformation with parameter j.",
        "This is not to be confused with the parameterized RTNd method.",
        "Figure 17 indicates the number of sentences in the corpus that are recognized by an automaton divided by the number of sentences in the corpus that are generated by the grammar.",
        "For comparison, the figure also includes curves for RTNd, where d = 2, 3 (cf.",
        "Figure 15).",
        "We see that j 1, 2 has little effect.",
        "For j = 3, 4, 5, however, the approximating language becomes substantially smaller than that in the case of RTN, but at the expense of large automata.",
        "In particular, if we compare the sizes of the automata for RTN+j in Figure 16 with those for RTNd in Figures 13 and 14, then Figure 17 suggests the large sizes of the automata for RTN+j are not compensated adequately by a reduction of the percentage of sentences that are recognized.",
        "RTNd seems therefore preferable to RTN+j."
      ]
    },
    {
      "heading": "7. Conclusions",
      "text": [
        "If we apply the finite automata with the intention of filtering out incorrect sentences, for example from the output from a speech recognizer, then it is allowed that a",
        "Percentage of sentences that are recognized.",
        "certain percentage of ungrammatical input is recognized.",
        "Recognizing ungrammatical input merely makes filtering less effective; it does not affect the functionality of the system as a whole, provided we assume that the grammar specifies exactly the set of sentences that can be successfully handled by a subsequent phase of pro41",
        "Number of recognized sentences divided by number of grammatical sentences.",
        "cessing.",
        "Also allowed is that \"pathological\" grammatical sentences are rejected that seldom occur in practice; an example are sentences requiring multiple levels of self-embedding.",
        "Of the methods we considered that may lead to rejection of grammatical sentences, i.e., the subset approximations, none seems of much practical value.",
        "The most serious problem is the complexity of the construction of automata from the compact representation for large grammars.",
        "Since the tools we used for obtaining the minimal",
        "NederhofExperiments with Regular Approximation deterministic automata are considered to be of high quality, it seems unlikely that alternative implementations could succeed on much larger grammars, especially considering the sharp increases in the sizes of the automata for small increases in the size of the grammar.",
        "Only LC2 could be applied with relatively few resources, but this is a very crude approximation, which leads to rejection of many more sentences than just those requiring self-embedding.",
        "Similarly, some of the superset approximations are not applicable to large grammars because of the high costs of obtaining the minimal deterministic automata.",
        "Some others provide rather large languages, and therefore do not allow very effective filtering of ungrammatical input.",
        "One method, however, seems to be excellently suited for large grammars, namely, the RTN method, considering both the unparameterized version and the parameterized version with d = 2.",
        "In both cases, the size of the automaton grows moderately in the grammar size.",
        "For the unparameterized version, the compact representation also grows moderately.",
        "Furthermore, the percentage of recognized sentences remains close to the percentage of grammatical sentences.",
        "It seems therefore that, under the conditions of our experiments, this method is the most suitable regular approximation that is presently available."
      ]
    },
    {
      "heading": "Acknowledgments",
      "text": [
        "This paper could not have been written without the wonderful help of Hans-Ulrich Krieger, who created the series of grammars that are used in the experiments.",
        "I also owe to him many thanks for countless discussions and for allowing me to pursue this work.",
        "I am very grateful to the anonymous referees for their inspiring suggestions.",
        "This work was funded by the German Federal Ministry of Education, Science, Research and Technology (BMBF) in the framework of the VERBMOBIL Project under Grant 01 IV 701 V0."
      ]
    }
  ]
}
