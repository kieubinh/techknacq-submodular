{
  "info": {
    "authors": [
      "Pieter Adriaans",
      "Erik De Haas"
    ],
    "book": "Conference on Computational Natural Language Learning and of the Second Learning Language in Logic Workshop CoNLL and LLL",
    "id": "acl-W00-0739",
    "title": "Learning from a Substructural Perspective",
    "url": "https://aclweb.org/anthology/W00-0739",
    "year": 2000
  },
  "references": [],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "In this paper we study learning from a logical perspective.",
        "We show that there is a strong relationship between a learning strategy, its formal learning framework and its logical representational theory.",
        "This relationship enables one to translate learnability results from one theory to another.",
        "Moreover if we go from a classical logic theory to a substructural logic theory, we can transform learnability results of logical concepts to results for string languages.",
        "In this paper we will demonstrate such a translation by transforming the Valiant learnability result for boolean concepts to a learnability result for a class of string pattern languages."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "There is a strong relation between a learning strategy, its formal learning framework and its representational theory.",
        "Such a representational theory typically is (equivalent to) a logic.",
        "As an example for this strong relationship assume that the implication A – > B is a given fact, and you observe A; then you can deduce B, which means that you can learn B from A based on the underlying representational theory.",
        "The learning strategy is very tightly connected to its underlying logic.",
        "Continuing the above example, suppose you observe –.B.",
        "In a representational theory based on classical logic you may deduce given the fact A -+ B.",
        "In intuitionistic logic however, this deduction is not valid.",
        "This example shows that the character of the representational theory is essential for your learning strategy, in terms of what can be learned from the facts and examples.",
        "In the science of the representational theories, i.e. logic, it is a common approach to connect different representational theories, and transform results of one representational theory to results in an other representational theory.",
        "Interesting is now whether we can transform learnability results of learning strategies within one representational theory to others.",
        "Observe that to get from a first order calculus to a string calculus one needs to eliminate structural rules from the calculus.",
        "Imagine now that we do the same transformation to the learning strategies, we would come up with a learning strategy for the substructural string calculus starting from a learning strategy for the full first order calculus.",
        "The observation that learning categorial grammars translates to the task of learning derivations in a substructural logic theory motivates a research program that investigates learning strategies from a logical point of view (Adriaans and de Haas, 1999).",
        "Many domains for learning tasks can be embedded in a formal learning framework based on a logical representational theory.",
        "In Adriaans and de Haas (1999) we presented two examples of substructural logics, that were suitable representational theories for different learning tasks; The first example was the Lambek calculus for learning categorial grammars, the second example dealt with a substructural logic that was designed to study modern Object Oriented modeling languages like UML (OMG, 1997), (Fowler, 1997).",
        "In the first case the representation theory is first order logic without structural rules, the formal learning theory from a logical point of view is inductive substructural logic programming and an example of a learning strategy in this framework is EMILE, a learning algorithm that learns categorial grammars (Adriaans, 1992).",
        "In this paper we concentrate on the transformation of classical logic to substructural logic and show that Valiant's proof of PAC",
        "learnability of boolean concepts can be transformed to a PAC learnability proof for learning a class of finite languages.",
        "We discuss the extension of this learnability approach to the full range of substructural logics.",
        "Our strategy in exploring the concept of learning is to look at the logical structure of a learning algorithm, and by this reveal the inner working of the learning strategy.",
        "In Valiant (1984) the principle of Probably Approximately Correct learning (PAC learning) was introduced.",
        "There it has been shown that k-CNF (k-length Conjunctive Normal Form) boolean concepts can be learned efficiently in the model of PAC learning.",
        "For the proof that shows that these boolean concepts can be learned efficiently Valiant presents a learning algorithm and shows by probabilistic arguments that boolean concept can be PAC learned in polynomial time.",
        "In this paper we investigate the logical mechanism behind the learning algorithm.",
        "By revealing the logical mechanism behind this learning algorithm we are able to study PAC learnability of various other logics in the substructural landscape of first order propositional logic.",
        "In this paper we will first briefly introduce substructural logic in section 2.",
        "Consequently we will reconstruct in section 3 Valiant's result on learnability of boolean concepts in terms of logic.",
        "Then in section 4 we will show that the learnability result of Valiant for k-CNF boolean concepts can be transformed to a learnability result for a grammar of string patterns denoted by a substructural variant of the k-CNF formulas.",
        "We will conclude this paper with a discussion an indicate how this result could be extended to learnability results for categorial grammars."
      ]
    },
    {
      "heading": "2 Substructural logic",
      "text": [
        "In Gentzen style sequential formalisms a substructural logic shows itself by the absence of (some of) the so-called structural rules.",
        "Examples of such logics are relevance logic (Dunn, 1986), linear logic (Girard, 1987) and BCK logic (Grishin, 1974).",
        "Notable is the substructural behavior of categorial logic, which in its prototype form is the Lambek calculus.",
        "Categorial logics are motivated by its use as grammar for natural languages.",
        "The absence of the structural rules degrades the abstraction of sets in the semantic domain to strings, where elements in a string have position and arity, while they do not have that in a set.",
        "As we will see further on in this paper the elimination of the structural rules in the learning context of the boolean concepts will transform the learning framework from sets of valuated variables to strings of valuated variables.",
        "a,b,b In figure 2 we list the axiomatics of the first order propositional sequent calculus', with the axioms , the cut rule, rules for the connectives and the structural rules for exchange, weakening and contraction."
      ]
    },
    {
      "heading": "3 PAC Boolean concept learning revisited",
      "text": [
        "In this section we describe the principle of Probably Approximately Correct Learning (PAC learning) of Boolean concepts.",
        "We will reveal 'Note that in the variant we use here we have a special case of the RA rule.",
        "the logical deduction process behind the learning algorithm.",
        "Consider the sample space for boolean concepts.",
        "An example is a vector denoting the truth (presence,l) or falsehood (absence,0) of propositional variables.",
        "Such an example vector can be described by a formula consisting of the conjunction of all propositional variables or negations of propositional variables, depending on the fact whether there is a 1 or a 0 in the position of the propositional variable name in the vector.",
        "A collection of vectors, i.e. a concept, in its turn can be denoted by a formula too, being the disjunction of all the formula's of the vectors.",
        "Example 3.1 Let universe U = {a, b} and let concept f = {(0,1)}, then the following formula exactly describes f : A b",
        "A little more extensive: Let universe U' = {a, b, c} and let concept = {(0, 0,0), (0,0, 1), (0,1,1), (1, 1, 1)1 Then the following formula exactly describes 1' (with a clear translation):",
        "Note that these formulas are in Disjunctive normal form (DNF).",
        "An interesting observation now is that the learning algorithm of Valiant that learns k-CNF formulas actually is trying to prove the equivalence between a DNF formula and a k-CNF formula.",
        "Example 3.2 Let universe U = {a, b} and let concept f {(0, 1)}, then the following sequent should be 'learned' by a 2-CNF learning algo",
        "A little more extensive: Let U' = {a, b, c} and let concept f' {(0, 0, 0), (0,0, 1), (0,1,1), (1, 1,1)1 Then the following sequent should be 'learned' by a 2-CNF learning algorithm: (U,AbAZ)V(TiAbAc)V(dAbAc)V(aAbAc) <=> (rt V b) A (ri V b) A (a V b) The above observation says in logical terms that the learning algorithm needs to implement an inductive procedure to find this desired proof and the concluding concept description (2-CNF formula) from examples.",
        "In the search space for this proof the learning algorithm can use the axioms and rules from the representational theory.",
        "In the framework of boolean concept learning this means that the learning algorithm may use all the rules and axioms from the representational theory of classical propositional logic.",
        "Example 3.3 Let U =-- {a, b} and let concept f {(0,1)} and assume f can be represented by a 2-CNF formula.",
        "to learn the 2-CNF description of concept f the learning algorithm needs to find the proof for a sequent starting 'i.e.",
        "an algorithm that can learn 2-CNF boolean concepts.",
        "from the DNF formula ?I A b to a 2-CNF formula and vice versa (<=>) and to do so it may use all the rules and axioms from the first order propositional calculus including the structural rules.",
        "The proof for one side of such a sequent is spelled out in figure 3.",
        "In general an inductive logic programming algorithm for the underlying representational theory can do the job of learning the concept; i.e. from the examples (DNF formulas) one can induce possible sequents, targeting on a 2-CNF sequent on the righthand side.",
        "The learning algorithm we present here is more specific and simply shows that an efficient algorithm for the proof search exists.",
        "The steps:",
        "1.",
        "Form the collection G of all 2-CNF clauses (p V q) 2. do / times (a) pick an example al A • • A am (b) form the collection of all 2-CNF clauses deducible from al A ••A am and intersect this collection with G resulting in a new G Correctness proof (outline): By (Ax), (RV), (Weak), (LA) and (Ex) we can proof that for any conjunction (i.e. example vector) al A • • • A am we have for all 1 < i < m and any b a clause of a 2-CNF in which ai occurs with b , hence having all clauses deducible from the vector proven individually enabling one to form the collection of all clauses deducible from a vector; i.e. al A • • • A am ai V b A••• A am bVai",
        "By (RA) and (Contr) we can proof the conjunction of an arbitrary subset of all the clauses deducible from the vector, in particular all those clauses that happen to be common to all the vectors for each individual vector we have seen so far, hence proving the 2-CNF for every individual vector; i.e.",
        "al A • • A am clausei A • • • A clausep",
        "It is easy to see that for the above algorithm the same complexity analysis holds as for the Valiant algorithm, because we have the same progression in 1 steps, an the individual steps have constant overhead."
      ]
    },
    {
      "heading": "4 PAC learning substructural logic",
      "text": [
        "When we transform the representational theory of the boolean concept learning framework to a substructural logic, we do the following:",
        "• eliminate the structural rules from the calculus of first order propositional logic",
        "When we want to translate the learriability result of k-CNF expressible boolean concepts we need to do the same with the formal learning framework and the strategy (algorithm).",
        "In other words:",
        "• the learning framework will contain concepts that are sensitive to the features which were before abstracted by the structural rules ('position' and 'arity' ) • the learning algorithm from above is no longer allowed to use the structural rules in its inductive steps.",
        "Below we present a learning algorithm for the substructural logic representational theory.",
        "Suppose again the universe U = {al,.",
        "• • ,an}, and the concept f is a CNF expressible concept for vectors of length m.",
        "1. start with m empty clauses (i.e. disjunction of zero literals) clause', , clausem 2. do 1 times (a) pick an example al A • • • A am (b) for all 1 < i < m add a, to clause, if a, does not occur in clause,.",
        "Correctness proof (outline): By (Ax) and (RV) we can proof for any a, that the sequent a, clause, for any clause, containing a, as one of its disjuncts, especially for a clause, containing next to a, all the a\", from the former examples.",
        "Then by (RA) and (LA) we can position all the vectors and clauses in the right-hand position; i.e.",
        "Hence justifying the adding of the literal a, of a vector in clause,.",
        "Now (LV) completes the sequent for all the example vectors; i.e.",
        "(al A • • • A am) V (aC A • • • A aim) V ... clauses A • • • A clausem",
        "For the algorithmic complexity in terms of PAC learning, suppose we want present examples of concept f and that the algorithm learned concept f' in 1 steps.",
        "Concept f' then describes a subset of concept f because on every position in the CNF formula contains a subset of the allowed variables; i.e. those variables that have encountered in the examples3.",
        "have m positions in the string.",
        "By the same argument as for the Valiant algorithm we may conclude that e and S decrease exponentially in the number of examples 1, meaning that we have an efficient polynomial time learning algorithm for arbitrary e and 6."
      ]
    },
    {
      "heading": "5 Discussion",
      "text": [
        "We showed that the learnability result of Valiant for learning boolean concepts can be transformed to a learnability result for pattern languages by looking at the transformation of the underlying representational theories; i.e. looking at the transformation from classical first order propositional logic (underlying the boolean concepts) to substructural first order propositional logic (underlying the pattern languages).",
        "An interesting extension would be to look at the substructural concept language that includes implication (instead of the CNF formula's only).",
        "A language that allows implication coincides with the full Lambek calculus, and a learning algorithm and learnability result for this framework amounts to results for all languages that can be described by context free grammars.",
        "This is subject to future research."
      ]
    },
    {
      "heading": "References",
      "text": [
        "P. Adriaans and E. de Haas.",
        "1999.",
        "Grammar induction as substructural inductive logic programming.",
        "In Proceedings of the workshop on Learning Language in Logic (LLL99), pages 117-126, Bled, Slovenia, jun."
      ]
    },
    {
      "heading": "Addendum: PAC learning",
      "text": [
        "The model of PAC learning arises from the work of Valiant (Valiant, 1984).",
        "In this model of learning it is assumed that we have a sample space U* of vectors over an alphabet U, where each position in a vector denotes the presence (1) or absence (0) of a symbol a E U in the sample vector.",
        "A concept f is a subset of vectors from the sample space U.",
        "an example of a concept is f := {(0, 1)} and an other example is g := {(0, 0), (0,1), (1, 1)}.",
        "A concept can be learned by an algorithm by giving this algorithm positive and/or negative examples of the target concept to be learned.",
        "An algorithm efficiently learns a concept if this algorithm produces a description of this concept in polynomial time.",
        "Informally a concept is PAC (Probably Approximately Correct) learned if the algorithm produces a description of a concept that is by approximation the same as the target concept from which examples are feeded into the algorithm.",
        "A collection of concepts constitutes to a concept class.",
        "A concept class can be (PAC) learned if all the concepts in the concept class can be (PAC) learned.",
        "We are especially interested in concept classes that are defined by some formalism (language).",
        "In other words a language can describe come collection of concepts.",
        "An example of such a language is the language of boolean formulas.",
        "A boolean formula describes a concept that consists of all the vectors over the alphabet of propositional variable names that satisfy the formula.",
        "These concepts are called boolean concepts.",
        "Example 5.3 Let U := {a, b} be an alphabet of propositional variable names.",
        "Then the formula d A b describes the concept f := {(0,1)} of the sample space U*; and the formula dVb describes the concept g := {(0, 0), (0,1), (1, 1)}.",
        "In Valiant (1984) Valiant proves that the language of k-CNF boolean formula's can be efficiently PAC learned.",
        "This means that for an arbitrary k the concept class defined by the language of k-CNF formula's can be PAC learned by an algorithm in a polynomial number of steps.",
        "Below we briefly recapitulate this result.",
        "Definition 5.4 (Boolean concept languages) Let U be a set of propositional variable names, then the language L of boolean formulas is defined by:",
        "A literal is a propositional variable or a negation of a propositional variable; i.e.",
        "A conjunction of a collection of formulas C is a finite sequence of formulas from C connected by the binary connective A; i.e.",
        "A disjunction of a collection of formulas C is a finite sequence of formulas from C connected by the binary connective V; i.e.",
        "A formula is a CNF formula (Conjunctive Normal Form) if the formula is a conjunction of disjunctions of literals.",
        "A formula is a k-CNF formula if all the disjuctions in the formula are of length k. A formula is a DNF formula (Disjunctive Normal Form) if the formula is a disjunction of conjunctions of literals.",
        "Theorem 5.5 (Valiant (1984)) The classes of k-CNF boolean concept languages are PAC learnable in polynomial time.",
        "Proof (outline): Let U := • ,anl(n E f) be a alphabet and let concept f be a set of vectors V := {vi, , vn,}(m < n) over U*, which is equivalent to the k-CNF formula A.",
        "Let P be an arbitrary probability distribution over concept f such that E,4EfP(vi) = 1; i.e. P(f) = 1.",
        "Examples picked using the distribution based on P will be feeded into the following learning algorithm:",
        "• Form the collection G := ,cnkl of all the clauses (disjunctions of literals) of length k. • do / times - v := pick-an-example",
        "- for each ci in G * delete ci from G if v ci Now suppose that the algorithm learned concept f' from 1 examples (1 taken from the algorithm).",
        "The concept f' now is a concept that is a subset of f, because it may not have seen enough examples to eliminate all the clauses that are in conflict with f; i.e. there are still clauses in f' restricting this concept in the conjunction of clauses, while it is disqualified by a vector in f. What is the size of the number of examples 1 we need to let fi approximate f with a confidence 6 and error E. We have that",
        "(confidence is the chance of not making an error after learning from 1 examples) thus 1n6 < 11n(1 - e) resulting in the following expression for 1:",
        "This means that the confidence parameter 6 and the error parameter E are exponentially small w.r.t.",
        "the number of examples 1 feeded into the learning algorithm.",
        "This means that for an arbitrary 6 and E we can keep 1 polynomial because the 6 and e decrease exponentially with respect to 1."
      ]
    }
  ]
}
