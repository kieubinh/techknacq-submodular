{
  "info": {
    "authors": [
      "Kyriakos N. Sgarbas",
      "Nikos D. Fakotakis",
      "George K. Kokkinakis"
    ],
    "book": "Annual Meeting of the Association for Computational Linguistics",
    "id": "acl-P01-1062",
    "title": "Incremental Construction of Compact Acyclic NFAs",
    "url": "https://aclweb.org/anthology/P01-1062",
    "year": 2001
  },
  "references": [
    "acl-J00-1002",
    "acl-W98-1305"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "This paper presents and analyzes an incrementalalgorithmforthe construction of Acyclic Nondeterministic"
      ]
    },
    {
      "heading": "Finite-state Automata",
      "text": [
        "(NFA).",
        "Automata of this type are quite useful in computational linguistics, especially for storing lexicons.",
        "The proposed algorithm produces compact NFAs, i.e. NFAs that do not contain equivalent states.",
        "Unlike Deterministic Finite-state Automata (DFA), this property is not sufficient to ensure minimality, but still the resulting NFAs are considerably smaller than the minimal DFAs for the same languages."
      ]
    },
    {
      "heading": "1 Introduction Acyclic Finite-State Automata (FSA)' provide a",
      "text": [
        "very efficient data structure for lexicon representation and fast string matching, with a great variety of applications in lexicon building (Daciuk et al., 2000), morphological processing (Sgarbas et al., 2000b) and speech processing (Lacouture and De Mori, 1991).",
        "They constitute very compact representations of lexicons, since common word prefixes and suffixes are represented by the same transitions.",
        "This representation also facilitates content-addressable pattern matching.",
        "'Some authors (e.g. Perrin, 1990; Aoe et al.",
        "1992; Sgarbas et al., 1995) use the term DAWG (Directed Acyclic Word Graph) when referring to acyclic FSAs.",
        "However, others (e.g. Crochemore and Verin, 1997) use the same term to denote the suffix automaton of a string.",
        "Examples of acyclic FSAs storing lexicons are shown in Fig.l.",
        "The FSAs consist of states and transitions between states.",
        "Each transition has a label.",
        "The words are stored as directed paths on the graph.",
        "They can be retrieved by traversing the graph from an initial state (source) to a terminal state (sink), collecting the labels of the transitions encountered.",
        "In this way, traversing the graphs of Fig.l from the source () to the sink (0) we retrieve the words dance, darts, dart, start and smart.",
        "There are two types of FSAs.",
        "The graph of Fig.la is called deterministic (DFA) because no transitions exist that have the same labels and leave the same state.",
        "This property results to a very efficient search function.",
        "Graphs that do not have this property, like the one of Fig.",
        "Ib, are called non-deterministic automata (NFA).",
        "NFAs are smaller than DFAs but they are a little slower to search.",
        "DFAs are more popular for lexicon representation, especially the minimal ones, i.e. DFAs with the least number of states.",
        "Several algorithms are known for the construction of the minimal DFA, given a set of words (Hoperoft",
        "and Ullman, 1979; Perrin, 1990; Revuz, 1992; Watson, 1993).",
        "Recently, some incremental algorithms have been proposed for this task (Aoe et al., 1993; Park et al., 1994; Sgarbas et al., 1995; Daciuk et al., 1998; Mihov, 1998; Ciura and Deorowicz, 1999; Daciuk et al., 2000; Revuz, 2000; Sgarbas et al., 2000a).",
        "Incremental algorithms are useful because they can update the lexicon without rebuilding the whole structure from scratch?",
        "For minimal NFAs there are also some (non-incremental) algorithms (Kameda and Weiner, 1970; Kim, 1974; Arnold et al., 1992; Matz and Potthoff, 1995) but unlike DFAs, there is no single minimal NFA for a given language.",
        "In this paper we present an incremental algorithm for constructing Acyclic NFAs.",
        "We consider NFAs with one source and one sink state, like the one in Fig.lb, because this facilitates bidirectional search in the graph.",
        "We introduce the notion of a compact automaton (i.e. one with no equivalent states) and we prove that the presented algorithm produces compact NFAs.",
        "We also show that (unlike DFAs) a compact NFA is not necessarily minimal.",
        "Therefore the algorithm does not always produce minimal acyclic NFAs; the size of the NFA depends on the order the words are inserted.",
        "However, the NFAs produced by this algorithm are typically considerably smaller than the corresponding minimal DFAs and the process of adding a new word to an existing automaton is fast enough to be used on-line.",
        "In Section 2 of this paper some basic definitions are given that will be used throughout the paper.",
        "We have tried to define appropriate concepts that simplify the proofs of the lemmas.",
        "The presentation of the algorithm follows in Section 3 with a step-by-step example.",
        "In Section 4, a set of interesting lemmas is provided, resulting to a proof that the algorithm actually produces compact NFAs.",
        "Experimental results are presented in Section 5.",
        "The paper conclusions follow in Section 6.",
        "DAWGs as defined by Crochemore and Verin (1997), Blumer et al.",
        "(1989), where whole strings are allowed as labels on transitions."
      ]
    },
    {
      "heading": "2 Definitions",
      "text": [
        "Let Q be a set of states (vertices) and E be a set of symbols (alphabet).",
        "A labeled directed transition is then defined as a triple (nl,n2,^) from state n1 to n2 with label s, where n1,n2EQ and sEE.",
        "Let LcQxQxE be a set of labeled directed transitions.",
        "Then an ordered series [(no,nl,s1), (n1,n2,s2)1 (n2,n3,S3), a (nk-2,nk-1,Sk-1), (nk-1, nk,sk)] of successive transitions of L is called a succession from state no to state nk and is denoted by succ(no,nk).",
        "We say that state nk is a successor of state no and that state no is a predecessor of state nk.",
        "In the special case where ISucc(no,nk)I=1, state nk is an immediate successor of no and state no is an immediate predecessor of nk.",
        "There may be more than one successions between two states.",
        "We define as SUCC(no, nk) the set of all successions from no to nk.",
        "For a succession G=succ(no, nk)=[(no,nl,s1), (nbn2,01 (n2,n3,SA e (nk-2,nk-1,Sk-1)e (nk-1,nk,SkA we define as label(G) the ordered series [s1, s2, S3, ..., sk-1, sk] of symbols as derived by the labels of the transitions in G. For a set of successions H=SUCC(no, sk), we define as LABEL(H) the set of all label(G), `dGEH.",
        "Based on the above, a Finite State Automaton with one source and one sink is defined as the quintuple (Q,L,E,source,sink), where source,sinkEQ and Vne-Q-{source}, SUCC( source,n)#O and VnEQ-{sink}, SUCC(n,sink) #0.",
        "In other words, source is a predecessor of every other state in Q and sink is a successor of every other state in Q.",
        "The graph is acyclic iff VnEQ, SUCC(n,n)=O.",
        "The set of strings or words contained in an acyclic FSA is finite and equals to LABEL(SUCC(source,sink)).",
        "All words in an acyclic FSA are finite-lengthed.",
        "If two states n1,n2EQ (with n1#n2) satisfy the property LABEL(SUCC(nl,sink)) = LABEL( SUCC(n2,sink)), then we say that n1 and n2 are down-equivalent.",
        "Accordingly, if LABEL( SUCC(source,nl)) = LABEL(SUCC(source,n2)), we say that n1 and n2 are up-equivalent.",
        "Saying that n1 and n2 are equivalent means that they are either up-equivalent or down-equivalent.",
        "Two states that are not equivalent are called distinct.",
        "A single state is called distinct if it is not equivalent with any other state in Q.",
        "An automaton that contains no equivalent states is called compact (for DFAs compact also implies minimal).",
        "For each state nEQ, we consider the transitions entering n and the transitions leaving n and we define two sets: the fan-in set of n, F.(n)={(n',^): (n',n,^)EL} and the fanout set of n, F.,, (n)={(n',^): (n,n',^)EL}.",
        "Although the transitions contained in these two sets are not full transitions (state n is missing from the triples) they are considered as transitions, since state n is always known and they can be restored into triples at any time.",
        "However, the above representation facilitates the comparison of fan-in and fanout sets of different states.",
        "An automaton is deterministic (DFA) iff `dnEQ, `dsEE {n': (n',^)EFo,(n)}j <_1.",
        "Thus, in DFAs VnEQ, IF, ,,.",
        "(n)j <_1E1.",
        "An automaton is called non-deterministic (NFA) otherwise.",
        "If two states n1,n2 E Q (with nl#n2) satisfy the property Fot,,.(nl)=Fot,,.",
        "(n2), then we say that nl and n2 are down-similar.",
        "Respectively, if they satisfy the property F,,,(nl)=F4n2), then we say that nl and n2 are up-similar.",
        "Saying that two states are similar means that they are either up-similar or down-similar.",
        "In other words, two states are similar if the input(output) transitions of the one match the input(output) transitions of the other in labels and destinations.",
        "Similar states are always equivalent, but equivalent states are not necessarily similar (see Lemma 1, below).",
        "Let D=(Q,L,E, source, sink) be an acyclic NFA as defined above.",
        "We present the following lemmas: Lemma 1: (a) Two down-equivalent states of D are either down-similar or their immediate successors are also down-equivalent.",
        "(b) Two up-equivalent states of D are either up-similar or their immediate predecessors are also up-equivalent.",
        "Proof.",
        "(a) Let p,q E Q and p, q are down-equivalent.",
        "Consider two transitions (p,p',^) and (q,q',^) such that p'#q'.",
        "If for no sel two such transitions exist, that implies Fo,(p)=Fo,(q) and p,q are down-similar.",
        "Otherwise, if the transitions exist, consider the states p' and q'.",
        "Suppose that they are not down-equivalent.",
        "Thus create new state n; create new transition (no,n,w[i]); if i=0 then kF(n,w[O]);",
        "we can find two successions sP succ(p',sink) and sq succ(q',sink) such that sp#sq.",
        "Then the successions [(p,p',^)]usP and [(q,q',^)]usq will also be different.",
        "But this contradicts to the assumption that p and q are down-equivalent.",
        "Therefore p' and q' are down-equivalent.",
        "(b) Symmetrical to (a).",
        "^ Lemma 2: D is not compact isimilar states exist in Q.",
        "Proof.",
        "First we show that if p,gEQ and p,q are similar, then D is not compact: Similar states are always equivalent.",
        "Therefore p and q are equivalent and D is not compact.",
        "Next we show that if D is not compact then Q contains similar states: If D is not minimal then we can find p,gEQ with p and q equivalent.",
        "By Lemma 1, it is either p similar to q, or their immediate successors (predecessors) p' and q' are equivalent.",
        "Supposing the latter, we can apply Lemma 1 to p' and q'.",
        "Since there is only one sink and one source and Isucc(p,sink)j, Isucc(source,p)l are finite, we eventually arrive in two equivalent states which are also similar.",
        "^ Lemma 2 constitutes a very useful criterion for checking whether an automaton is compact or not.",
        "Checking using this criterion is more efficient than searching for equivalent states, since given two states, it is much faster to decide if they are similar than it is to check their equivalence."
      ]
    },
    {
      "heading": "3 Presentation of the Algorithm",
      "text": [
        "The proposed algorithm adds a new word to an existing acyclic NFA.",
        "Figure 2 displays an example of word insertion.",
        "The original NFA of Fig.2a contains six words: cut, chat, chop, chip, flat and flip.",
        "We wish to add the word flop.",
        "The insertion is performed as following:",
        "STAGE l: First we attach the new word to the existing NFA by creating a separate succession of transitions between the source and the sink.",
        "We mark all these transitions.",
        "In Fig.2b they appear dashed.",
        "STAGE 2: We consider the marked transition (n',p,c) closer to the sink and we search in F~kp)",
        "for a state n down-similar to n'.",
        "State n' is deleted (and so all its outgoing transitions) after redirecting its incoming transition to n: F.(n)=F.(n)uF.(n').",
        "The process is repeated, again considering the marked transition closest to the sink, until no down-similar states can be found (see Fig.2c).",
        "STAGE 3: We consider the marked transition (c,p,n') closer to the source and we search in F,,,,.",
        "(p) for a state n up-similar to n'.",
        "State n' is deleted (and so all its incoming transitions) after redirecting its outgoing transition to n: Fo,(n)=Fo,(n)uFo,(n').",
        "The process is repeated, again considering the marked transition closest to the source, until no up-similar states can be found (see Fig.2d).",
        "STAGE 4: Stages 2 and 3 are repeated until both of them fail to find similar states (see Fig.2e).",
        "The updated NFA contains all the words of the original one, plus the new word.",
        "Note that the algorithm does not traverse every state and transition of the original NFA to add the new word.",
        "However, the resulting NFA is compact.",
        "A proof of this is given in the next section.",
        "The algorithm is shown in Table 1."
      ]
    },
    {
      "heading": "4 Proof of Correctness",
      "text": [
        "For the analysis of this section, consider again the example of Fig.2.",
        "The original NFA of Fig.2a is compact.",
        "The algorithm creates new states and transitions in the first stage and it deletes states and transitions in the following stages.",
        "The NFA at the end of Stage 1 (Fig.2b) contains all the words of the original NFA plus the new word, but it is not compact.",
        "The compaction is performed in Stages 2-4, based on the criterion of Lemma 2: Since a non-compact NFA always contains similar states, Stages 2-4 find similar states and merge them, until no more similar states can be found in the NFA.",
        "Then by Lemma 2 the NFA will be compact.",
        "Note that the algorithm does not search the whole NFA to find similar states.",
        "For every transition (n',p,c) in the path of the newly inserted word, starting from the one closest to the sink (source) and continuing upwards (downwards), it considers only the states n such that (n,c)EF,,,(o,)(p) and n#n', and it checks only them for similarity with n'.",
        "Now consider the dashed (marked) transitions of Fig.2b.",
        "The algorithm keeps track of them.",
        "They form a succession that corresponds to the new word.",
        "Let Z be the set of states contained in that succession, excluding source and sink.",
        "Then Z contains all the new states created by the process.",
        "If any state n' in Z is found similar to some other state, state n' is deleted from Z.",
        "Following are some interesting lemmas concerning properties of acyclic NFAs.",
        "The last one proves the correctness of the algorithm.",
        "Lemma 3: For every n EZ, IF,(n) l = IFO,(n) I =L Proof.",
        "This property is self-evident at Stage 1 where all states in Z form a succession from source to sink.",
        "During Stages 2 and 3 states and transitions are deleted from the edges of the succession only.",
        "Therefore the properly is maintained throughout the whole process.",
        "^ Lemma 4: (a) There is only one state n EZ such that exists (p, n, c) with p EQ-Z.",
        "(b) There is only one state n EZ such that exists (n, q, c) with q EQ-Z.",
        "Proof.",
        "(a) Suppose there are n,mEZ and pEQ-Z such that both (p,n,c) and (p,m,d) exist.",
        "But since n and m belong to the same succession, one must be successor of the other.",
        "Let m the successor and n the predecessor.",
        "Then there should also exist a transition (k,m,e) where kEZ.",
        "That implies IF,,,(n)1>1, contradicting to",
        "Proof.",
        "Suppose there are two equivalent states in Z.",
        "Then by Lemma 1 there are two similar states in Z.",
        "Let p,gEZ be these states.",
        "Then there are either two transitions (n,p,c) (n,q,c) or two transitions (p,n,c) (q,n,c).",
        "In either case n cannot belong to Z due to Lemma 3.",
        "Therefore n E Q-Z and by Lemma 4, p and q cannot both belong to Z.",
        "^ Lemma 6: There are no equivalent states in the set Q-Z.",
        "Proof.",
        "Suppose there are two equivalent states in Q-Z.",
        "Then, by Lemma 1 we can find two similar states p,gEQ-Z.",
        "Since they are similar they should be directly linked to at least one state n. By Lemma 3 n cannot belong to Z.",
        "It should belong to Q-Z.",
        "But in that case the original NFA also contains p, q and n and thus it could not be compact.",
        "^ Lemma 7: Every state in Z has at most one equivalent state.",
        "Proof: Let n E Z, p,q E Q such that n is equivalent to both p and q.",
        "By Lemma 5, neither p nor q can belong to Z, since nEZ.",
        "Thus they must both belong to Q-Z.",
        "But since p and q are also equivalent, this contradicts Lemma 6.",
        "^ Lemma 8: If we use the described algorithm to add a new word to a compact acyclic NFA, then the updated NFA is also compact.",
        "Proof.",
        "Suppose that after the end of Stage 4 the updated NFA is not compact.",
        "Then by Lemma 2 there should be two similar states in Q.",
        "Let us examine in what sets these two states can belong to: By Lemma 5 they cannot both belong to Z.",
        "By Lemma 6 then cannot both belong to Q-Z.",
        "Therefore one must belong to Z and the other to Q-Z.",
        "But since the process has been completed, Stages 2 and 3 have already checked Z for similar states.",
        "Therefore it is not possible to find two similar (or equivalent) states in Q.",
        "Thus the updated NFA is compact.",
        "^"
      ]
    },
    {
      "heading": "5 Experimental Results",
      "text": [
        "The described algorithm has been tested using a lexicon of 230,000 Greek words in random order.",
        "The average word length in the lexicon was 9.5 characters; the size of the alphabet was 36.",
        "The number of states, transitions and the construction time were measured.",
        "The results are shown in Fig.3.",
        "The thick lines refer to the NFA; the thin lines refer to the corresponding minimal DFA.",
        "For the construction of the minimal DFA an incremental algorithm was used (Sgarbas et al., 2000a) with O(n) time performance.",
        "The test was performed on a 200 MHz PC.",
        "Figures 3a, 3b and 3c display respectively the number of states, the number of transitions and the construction time of the automaton, in respect to the size of the lexicon (number of words).",
        "It is evident that the compact NFA constructed by the proposed algorithm had much fewer states than the corresponding minimal DFA and its construction time was notably short.",
        "However, for lexicon size grater than 130,000 words, the algorithm was less efficient concerning the number of transitions (see Fig.3b).",
        "The same results are also shown in logarithmic scales in Figs.3d, 3e and 3f, respectively.",
        "The slopes of the lines indicate linear growth of transitions, less than linear growth of states and time complexity between"
      ]
    },
    {
      "heading": "6 Conclusion",
      "text": [
        "We have presented an algorithm for adding words (strings) in acyclic NFAs and proved its compact behavior, i.e. if this algorithm is applied to a compact acyclic NFA, then the resulting NFA will also be compact.",
        "This algorithm provides an efficient and elegant way to update acyclic NFAs without having to build them from scratch.",
        "In experiments with Greek lexicons, compact NFAs constructed by the described algorithm typically required significantly less states than the corresponding minimal DFAs and about the same number of transitions, while their construction time was short enough to be used for on-line updates of lexicons.",
        "However, the proposed algorithm produces compact, but not necessarily minimal NFAs, because the order of the inserted words affects the size of the automaton.",
        "To illustrate this, consider Fig.4.",
        "Both NFAs of Fig.4 represent the same lexicon and they have both been produced by the described algorithm.",
        "However, in the case of Fig.4a the words were inserted in the order: [in, it, at, on], while in the case of Fig.4b the words were inserted in the order: [in, on, at, it].",
        "Evidently, both NFAs are compact, but only the one of Fig.4b is minimal.",
        "Apart from its theoretic interest, this algorithm has direct practical uses.",
        "On-line word insertion is highly desirable in every application where the data need to be updated regularly (e.g. spell-checkers) and the size of the structure is important."
      ]
    },
    {
      "heading": "Acknowledgements",
      "text": [
        "The work presented in this paper was part of the R&D project DELOS (EPET-II, 98FT-12), funded by the Greek Ministry of Development, General Secretariat of Research and Technology.",
        "The authors would like to thank the members of FSA-Research@yahoogroups.com, especially Gertjan van Noord, Mark-Jan Nederhof, Jan Daciuk, Dale Gerdemann and Bruce Watson for their discussions on NFA minimization and Burak Emir for his help on porting the AMoRE program to Linux."
      ]
    },
    {
      "heading": "References",
      "text": []
    },
    {
      "heading": "4 states 6 transitions",
      "text": []
    }
  ]
}
