{
  "info": {
    "authors": [
      "Bruce Eddy",
      "Diana Bental",
      "Alison Cawsey"
    ],
    "book": "Workshop on Natural Language Generation EWNLG",
    "id": "acl-W01-0806",
    "title": "An Algorithm for Efficiently Generating Summary Paragraphs Using Tree-Adjoining Grammar",
    "url": "https://aclweb.org/anthology/W01-0806",
    "year": 2001
  },
  "references": [
    "acl-P97-1026",
    "acl-W98-1415"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "We present an algorithm which improves the efficiency of a search for the optimally aggregated paragraph which summarises a flat structured input specification.",
        "We model the space of possible paraphrases of possible paragraphs as the space of sequences of compositions of a set of tree-adjoining grammar (TAG) elementary trees.",
        "Our algorithm transforms this to a set with equivalent paraphrasing power but better computational properties.",
        "Also, it identifies an explicit mapping between input propositions and their possible surface realisations."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "Summarisation of simply structured data as short natural language paragraphs has recently been a focus of interest.",
        "Shaw (1998) and Bental et al.",
        "(1999) looked at generating text from database records.",
        "Robin and McKeown (1996) summarised quantitative data.",
        "Shaw’s examples were drawn from patient medical records; Bental et al’s from online resource cataloging information.",
        "A requirement common to all these studies has been to produce aggregated (Reape and Mel-lish, 1999) text.",
        "Also in all these studies, the structure of the input data used was fairly flat.",
        "In particular, in (Shaw, 1998) and (Bental et al., 1999) each record This work is supported by EPSRC grant GR/M23106.",
        "is associated with a particular entity (e.g. a patient or an online resource) and is essentially a list of attribute-value pairs.",
        "We refer to pairs as fields, and to attributes as field names.",
        "The relationship between a value and the entity with which it is associated is specified by the field name.",
        "Most field names represent “is a” or “has a” relationships and hence most values represent facts about the entity.",
        "Slightly more complex structure may also be coerced into this form, but we will focus on this simple case.",
        "For our application (summarising data about educational resources), we additionally assume that we are required to be able to summarise any subset of fields from a given record, and that our summary must include every member of that subset.",
        "The challenge from this sort of summarisation is to devise a system which satisfies two potentially incompatible constraints.",
        "First, it must be flexible enough to model, for any combination of fields, the optimally aggregated paragraph which expresses them.",
        "Second, despite the very large search space that such flexibility probably implies, it must be capable of finding that paragraph in a reasonable time.",
        "The contribution the present work makes is a set of algorithms which prune this search space.",
        "This space is specified in terms of compositions of elementary trees of a tree-adjoining grammar (TAG) (Joshi, 1986).",
        "The first transforms a TAG into a lexicalised version of itself which has better computational properties with respect to summarising a record.",
        "The second removes those parts of a TAG which are redundant with respect to summarising a particular record.",
        "The third identifies an explicit mapping from each field to its possible surface realisations, and hence allows a desirable surface form to be chosen for each field.",
        "Our partial implementation of these algorithms has produced some promising results.",
        "The rest of the paper is organised as follows.",
        "In section 2 we discuss the problem, our approach to modelling it, and characteristics of the search space implied by our approach.",
        "In section 3 we present our algorithms for searching this space.",
        "In section 4 we summarise and discuss."
      ]
    },
    {
      "heading": "2 Searching for concise, coherent paragraphs",
      "text": []
    },
    {
      "heading": "2.1 Aggregation is a global optimisation problem",
      "text": [
        "Our aim is to generate paragraphs which are well aggregated.",
        "This notion should be defined in terms of conciseness and coherence, which terms are not formally definable.",
        "However, some reasonable approximation to them can be achieved by specifying preferences for certain types of syntactic constructions over others (Robin and McKeown, 1996), possibly by giving each generatable construction a score which reflects its relative preferability.",
        "We then define the best aggregated paragraph to be that which achieves the best sum of its constituent constructions’ preference scores.",
        "Robin and McKeown’s (1996) system, STREAK, generates aggregated, fact-rich sentences.",
        "It adds facts in order of the preferability of their best possible realisation.",
        "It revises its syntactic choices every time an extra fact is aggregated.",
        "This is computationally expensive, and makes multi-sentence generation by the same means prohibitively slow.",
        "They do suggest how to deal with this when many of the facts occur in fixed positions, but this is not the case in our corpus.",
        "CASPER (Shaw, 1998) delays syntactic choices until after it has decided where sentence boundaries should fall.",
        "It thereby gains computational efficiency at the cost of its sentences being less optimal aggregations.",
        "Our algorithms are an attempt to avoid these problems and to achieve greater efficiency by pre-compiling detailed syntactic decisions, the results of which we store in the form of explicit mappings from fields to surface forms.",
        "At generation time, we search for the optimal selection of realisations.",
        "This approach deviates from the pipeline architecture of NLG systems which, it has been observed, is not wholly suited to the generation of aggregated texts.",
        "The first author to discuss this was Meteer (1992), who showed that the microplanning stage of the pipeline is constrained by surface realisation in two ways.",
        "First, a microplan must be realisable in the target language; second, a realisable microplan must make best use of the capacities the target language for concise expression.",
        "More generally, in order to generate aggregated text, constraints imposed by and opportunities afforded by the surface form may be taken into account at any stage in the pipeline.",
        "Reape and Mel-lish (1999) provided examples of different systems each of which takes aggregation decisions at a different stage.",
        "It may not be easy to determine what effect a decision taken at an early stage will have at the surface; and decisions taken at one stage may preclude at a later stage a choice which results in a more aggregated surface form.",
        "Similarly, it may not be easy to make a decision at an early stage which makes best use of the surface possibilities.",
        "Consider the examples of figures 1 and 2.",
        "Both summarise the same set of fields; figure 2 summarises additionally the field “subject = science”.",
        "Both paragraphs summarise their fields in the most concise and coherent manner possible (although this is, of course, a subjective judgement).",
        "Note that they treat the fields they have in common differently with respect to ordering and distribution between the sentences.",
        "Various types of constraints cause this.",
        "Syntactic constraints include: “science” may be used as an adjective to pre-modify “lesson plan”.",
        "Semantic constraints include: “Constellations” lasts 4 hours, but ProLog does not.",
        "Stylistic constraints include: ‘Maureen Ryff wrote ...’ is preferable to ‘... was written by Maureen Ryff’.",
        "We suggest, as do Stone and Doran (1997), that integrating these constraints simultaneously is more efficient then pipelining them.",
        "We additionally suggest that representing these constraints in a unified form can provide further efficiency gains.",
        "“Constellations” is a 4-hour lesson plan published by online provider ProLog.",
        "Maureen Ryff wrote it for small group teaching.",
        "“Constellations” is a science lesson plan which lasts 4 hours.",
        "Maureen Ryff wrote it for small group teaching and ProLog, an online provider, is its publisher.",
        "Figure 2: A well aggregated paragraph which summarises the set of fields of figure 1, together with field subject = “science”.",
        "Notice the nonlinear effect the addition of a single extra proposition can have on the structure of the paragraph."
      ]
    },
    {
      "heading": "2.2 Modeling paragraphs with TAG",
      "text": [
        "Our approach uses, as its primary representation, TAG formalism extended to include unification based feature structures (Vijay-Shanker and Joshi, 1991).",
        "Joshi (1986) describes the advantages TAG possesses as a syntactic formalism for NLG.",
        "In generation, the TAG model has usually been applied to generating clauses and sentences.",
        "Recently, Webber et al.",
        "(1999) outlined the benefits of modelling longer strings of text by the same means.",
        "The most important characteristic of TAG for our purposes is the local definability of dependencies: constraints between the nodes of elementary trees are preserved under adjoinings which increase the distances between them.",
        "For example, in the sentence fragment “Springer published ...”,which might be modelled by a single initial tree, the object is constrained to be some entity published by Springer.",
        "If an adjunction is made so that the fragment becomes “Springer, the largest publishing company in Europe, published ...”, this constraint is undisturbed.",
        "Our approach presupposes the existence of a TAG whose string set is exactly those paragraphs which are comprehensible summaries of subsets of fields.",
        "We do not discuss the creation of such a TAG here.",
        "We have made progress with designing one; we believe that it is the flatness of the input data which makes it possible.",
        "Let us restate the problem somewhat more formally.",
        "Suppose that we have a set of fields whose values we may be required to express.",
        "Suppose that for every there is a template which expresses .",
        "A template is a paragraph in which certain words are replaced by slots.",
        "A slot is a reference to a field-name.",
        "A template expresses a set of fields if the name of every element of is referenced by a slot, and every slot refers to an element of .",
        "We say that expresses and that the resulting paragraph is the expression of with respect to .",
        "See figure 3.",
        "Let denote the template which “best” expresses some .",
        "Suppose also that we have a TAG with string set such that .",
        "The creation of is not discussed here.",
        "Every string in is the yield of , some derived tree of .",
        "Each of a TAG’s derived trees is represented by a unique derivation tree.",
        "Typically a derivation tree represents several (differently ordered) sequences of compositions of (the same set of) elementary trees, all of which result in the same derived tree.",
        "Hence, a derived tree of a TAG with elementary trees is the result of some sequence of compositions of the elements of which is equivalent to some derivation tree .",
        "We write or just , Hence, our problem is, given and some , find some such that .",
        "There are two parts to the problem of finding .",
        "First we must recognise , which we may do, as described in section 2.1, by defining to be the paragraph which achieves the best sum of its constituent constructions’ preference scores.",
        "Second, since the search space of derivation trees grows exponentially with the number of trees in the grammar, we must find its derivation in a reasonable amount of time.",
        "For each field to be expressed, the slot which refers to it may be expressed by means of one of several different syntactic constructions.",
        "So each slot will contribute one of several possible preference scores to the paragraph in which it occurs, depending on the syntactic form in which it is realised.",
        "However, the syntactic forms by which a",
        "slot may be expressed are an implicit property of the grammar: it requires search to discover what they are, and then further search to find their optimal configuration."
      ]
    },
    {
      "heading": "2.3 The search space",
      "text": [
        "We model possible paraphrases with a TAG, the paraphrases being the elements of its string set.",
        "The nodes in the search space are TAG derivation trees, and an arc from to represents the composition into the partial derivation corresponding to , of an elementary tree, with result the partial derivation corresponding to .",
        "The size of the search space may be reduced by collapsing certain paths in it, and by pruning certain arcs.",
        "These operations correspond to specific lexicali-sation and the removal of redundant trees from the grammar respectively.",
        "A tree in the grammar is redundant if it cannot contribute to a paragraph which expresses the required fields; or if it cannot contribute to a ‘best’ paragraph which expresses those fields.",
        "We will expand on redundancy removal after describing the specific lexicalisation algorithm.",
        "The specific lexicalisation algorithm converts a TAG into a specific-lexicalised version of itself, in which certain paths in the search space, which it can be known will be used in any derivation, are collapsed."
      ]
    },
    {
      "heading": "3 The algorithms",
      "text": []
    },
    {
      "heading": "3.1 Specific lexicalisation: creating a clausal lexicon",
      "text": [
        "We begin by introducing some notation, and defining some properties of TAGs and their elementary trees.",
        "Let denote , a TAG, and , some set of elementary trees, not necessarily in .",
        "A leaf node of an elementary tree may be labelled as a slot, which is a special case of the lexical anchor.",
        "An elementary tree is specific-lexicalised if at least one1 of its leaf nodes is a slot.",
        "An elementary tree is -lexicalised if it is specific-lexicalised or if it has no substitution nodes or foot nodes.",
        "A TAG is specific-lexicalised if all its elementary trees are -lexicalised.2 Given some , let be an element of which is not specific-lexicalised.",
        "Let be an elementary tree of .",
        "Suppose that there is some composition of into and that the resulting tree is specific-lexicalised.",
        "Then we say that is single-step-lexicalisable in .",
        "We call any such resulting tree a single-step-lexicalisation at of in , where is the node at which the composition occurred.",
        "We now present the algorithm for our transformation Specific Lexicalisa-tion.",
        "1: is some TAG, .",
        "2: repeat 3: Add to .",
        "4: for all do 5: if is sinlge-step lexicalisable in",
        "then 6: if then 7: Remove from .",
        "8: Add to .",
        "9: end if 10: For some node of , ,add all the single-step-lexicalisations at of in , to .3 11: end if 12: end for 13: until 14: is a specific-lexicalisation4 of .",
        "To illustrate this procedure, we have provided some figures.",
        "Consider the TAG , whose elementary trees are shown in figure 4.",
        "We have chosen, for reasons of space and simplicity, not to show the feature structures attached to each node of these trees.",
        "Their approximate form can perhaps be deduced by examination of the templates modelled by , shown in figure 6.",
        "A specific lexicalised version of the TAG, is shown in figure 5.",
        "We have named each elementary tree in by concatenating the names of its constituents from .",
        "The templates generated by (and hence ) are shown in figure 6."
      ]
    },
    {
      "heading": "3.2 Redundancy removal",
      "text": [
        "We can further remove redundancy in a specific-lexicalisation, , of some TAG.",
        "Let be a pair as in the previous section.",
        "The following three subsets of the elementary trees of are redundant.",
        "First, those trees which are not rooted on the distinguished symbol and for which there is no such that can be composed into .",
        "Second, those which have a substitution node into which no can be substituted.",
        "Third, those such that for each tree which is the result of the composition of some into , .",
        "Our program 3 Note that there is a choice at this step.",
        "Our implementation of this algorithm chooses such that the number of single-step-lexicalisations at is maximised.",
        "But different choices result in a transformed grammar with different properties.",
        "4We claim that a specific-lexicalisation of a TAG is indeed specific-lexicalised.",
        "Note that there does not necessarily exist a specific-lexicalisation of a TAG.",
        "For certain pathological examples of TAGs, the algorithm does not terminate.",
        "Note also that if a specific-lexicalisation exists, it is not necessarily unique.",
        "Further work is required to discover the properties of the various specific-lexicalisations in these cases.",
        "which implements the algorithm in fact removes these redundancies, not only after completion, but also after every iteration."
      ]
    },
    {
      "heading": "3.3 Finding the (approximately) global optimum",
      "text": [
        "Specific-lexicalisation causes the (previously implicit) grammatical constructions by which an element of may be expressed to become explicit properties of the transformed grammar.",
        "Specifically, each element of occurs as the anchor of each of a number of elementary trees.",
        "Let us refer to the set of elementary trees in the transformed grammar anchored by as .5 Each of these trees corresponds to a grammatical form in which the element may be realised.",
        "Hence, rather than performing an exhaustive search of the space of derivation trees , specific-lexicalisation allows us to instead perform a bestfirst search.",
        "That is, we choose exactly one element of for each .",
        "Let denote the set of all sets which contain exactly one element of for each .",
        "Recall that we may assign to each syntactic form in which an element of may be realised a preference score, and that each element of corresponds to some syntactic form.",
        "So, for each element of we may sum the preference scores of its elements.",
        "Hence, we may impose an order on the elements of according to their sum of preference scores.",
        "We may then refer to each element of as , where is the element’s position in the order, with being first.",
        "We then search, in order, the spaces of possible compositions of the s combined with some necessary supporting trees which are not anchored by an element of .",
        "Call these spaces .In terms of redundancy removal, is the specific-lexicalised TAG with those trees which might be redundant with respect to the search for removed.",
        "We begin the search with .",
        "It is not guaranteed that is in this space.",
        "If it is not, we repeat the search using , and so on.",
        "At worst (if where has elements), this procedure exhaustively searches the space of compositions of the elements of .",
        "Each tree’s name is below it, in bold.",
        "Note that, since the feature structures are not shown, it is not apparent why certain trees which the algorithm seems to imply do not occur in this set.",
        "In fact, since the s do not partition , in the worst cases this procedure is slower than an exhaustive search.",
        "However, is defined in terms of maximal preference scores, so it is likely to be found in for “low” .",
        "For illustration, refer again to the specific-lexicalisation in figure 5.",
        "Notice that @ <publisher.name> occurs as the anchor of more than one tree.",
        "These trees, predication part:-participleclause:item name and adj pred partp:participleclause:item name which we will refer to as and respectively, represent the forms in which that slot may be expressed.",
        "Hence, @ <publisher.name> may be realised as a predication in its own right using , as in templates 7 and 8 in figure 6, or as an adjunct to another predication using the second, as in templates 2, 3, 5 and 6.",
        "Suppose that our preference scores rate more highly than , and that we must include all four slots.",
        "Then the system would first search the space of compositions of the trees of without , and generate template 6.",
        "The second choice, without leads to the generation of the concatenation of templates 4 and 8, which expresses the same fields but is less aggregated.",
        "This is as we would wish."
      ]
    },
    {
      "heading": "3.4 Redundancies in the search space",
      "text": [
        "Specific-lexicalisation is a transformation which operates on a complete TAG and its result is another TAG whose string set is the same as ’s.",
        "Also, the feature structures on the nodes of the elementary trees of contain fewer unbound variables.",
        "Unbound variables represent 6 We are ignoring the tree item adjective adjoin:-adjective:item title, which is not usable due to its features, which are not shown.",
        "dependencies between parts of the grammar.",
        "A search of the space of compositions of elementary trees may make a long chain of compositions before discovering that the composed structure is forbidden by such a dependency.",
        "The forbidden chain of compositions is redundant, and specific-lexicalisation removes it from the search space.",
        "Importantly, specific-lexicalisation may also take as a parameter , the set of fields to be expressed.",
        "It then removes from all elementary trees which are anchored on slots which do not refer to elements of and operates on this reduced TAG, with result .",
        "And if then .",
        "Then, in effect, specific-lexicalisation, as well as removing general redundant dependencies, is specifically removing some of those parts of the grammar which are redundant with respect to the search for .",
        "Redundancy occurs in a grammar for two reasons.",
        "First, it is written, by hand, with linguistic rather than computational efficiency concerns in mind.",
        "It is too complex for its writer to be able to spot redundancies arising from long chains of dependencies between its parts.",
        "So specific-lexicalisation may be regarded as automatic bug removal.",
        "Second, the grammar is written to be able to model all the templates which express some .",
        "So for any particular , the grammar will contain information about how to express items not in that set.",
        "Specific-lexicalisation highlights this redundancy.",
        "We have conducted some preliminary experiments using several small TAGs in which, for each TAG and for its specific-lexicalised equivalent, we measured the time our system takes to generate the modelled sentences.",
        "The results showed a decrease in the generation time after lexicalisation of orders of magnitude, with the best observed reduction being a factor of about 3000.",
        "The specific-lexicalisation of a TAG has the property of having the same string set (and possibly the same tree set) as the original, but a smaller space of possible compositions.",
        "We have not proved either clause of this statement, but on the basis of experimental evidence we believe both to be true.",
        "Also, the following argument supports the case for the second.",
        "Recall that a feature structure attached to a nonterminal symbol in some rule (tree in the case of TAG) of a grammar is an abbreviation for several similar rules.",
        "For example, if a node has associated with it a feature structure containing three features each of which may be in one of two states and none of which are currently instantiated, then it abbreviates nodes.",
        "So each tree in a TAG with feature structures is an abbreviation for trees, where is the number of possible configurations of the feature structures on its nodes.",
        "Hence, when we search the space of possible compositions of some number of trees, we are in fact searching the space of compositions of trees, where is some factor related to the number of possible configurations of the feature structures on the trees.",
        "Specific-lexicalisation identifies exactly which of the (non-featured) trees for which a tree with feature structures is an abbreviation are irrelevant to a search by instantiating unbound variables in its features."
      ]
    },
    {
      "heading": "4 Further work and discussion",
      "text": [
        "The precise circumstances under which the techniques described are effective are still to be established.",
        "In particular, it is our intention to repeat our experiments with a standard LTAG; and with TAGs induced automatically from our corpus.",
        "To summarise, we claim that the generation of an optimally aggregated summary paragraph requires the ability to move facts across sentence boundaries.",
        "A difficulty to achieving this is the exponential relationship between the number of possible paraphrases of a summary of a set of facts and the number of facts in that set.",
        "Our algorithm addresses this by transforming a TAG to better model the search space."
      ]
    }
  ]
}
