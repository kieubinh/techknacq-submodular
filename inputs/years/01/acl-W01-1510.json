{
  "info": {
    "authors": [
      "Naoki Yoshinaga",
      "Yusuke Miyao",
      "Kentaro Torisawa",
      "Jun'ichi Tsujii"
    ],
    "book": "Workshop on Sharing Tools and Resources",
    "id": "acl-W01-1510",
    "title": "Resource Sharing Amongst HPSG and LTAG Communities by a Method of Grammar Conversion Between FB-LTAG and HPSG",
    "url": "https://aclweb.org/anthology/W01-1510",
    "year": 2001
  },
  "references": [
    "acl-C00-1060",
    "acl-C88-2121",
    "acl-C88-2147",
    "acl-J93-2004",
    "acl-P00-1058",
    "acl-P95-1013",
    "acl-P98-2132",
    "acl-P98-2144"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "This paper describes the RenTAL system, which enables sharing resources in LTAG and HPSG formalisms by a method of grammar conversion from an FB-LTAG grammar to a strongly equivalent HPSG-style grammar.",
        "The system is applied to the latest version of the XTAG English grammar.",
        "Experimental results show that the obtained HPSG-style grammar successfully worked with an HPSG parser, and achieved a drastic speed-up against an LTAG parser.",
        "This system enables to share not only grammars and lexicons but also parsing techniques."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "This paper describes an approach for sharing resources in various grammar formalisms such as Feature-Based Lexicalized Tree Adjoining Grammar (FB-LTAG1) (Vijay-Shanker, 1987; Vijay-Shanker and Joshi, 1988) and Head-Driven Phrase Structure Grammar (HPSG) (Pollard and Sag, 1994) by a method of grammar conversion.",
        "The RenTAL system automatically converts an FB-LTAG grammar into a strongly equivalent HPSG-style grammar (Yoshinaga and Miyao, 2001).",
        "Strong equivalence means that both grammars generate exactly equivalent parse results, and that we can share the LTAG grammars and lexicons in HPSG applications.",
        "Our system can reduce considerable workload to develop a huge resource (grammars and lexicons) from scratch.",
        "Our concern is, however, not limited to the sharing of grammars and lexicons.",
        "Strongly equivalent grammars enable the sharing of ideas developed in each formalism.",
        "There have been many studies on parsing techniques (Poller and Becker, 1998; Flickinger et al., 2000), ones on disambiguation models (Chiang, 2000; Kanayama et al., 2000), and ones on programming/grammar-development environ",
        "ment (Sarkar and Wintner, 1999; Doran et al., 2000; Makino et al., 1998).",
        "These works are restricted to each closed community, and the relation between them is not well discussed.",
        "Investigating the relation will be apparently valuable for both communities.",
        "In this paper, we show that the strongly equivalent grammars enable the sharing of “parsing techniques”, which are dependent on each computational framework and have never been shared among HPSG and LTAG communities.",
        "We apply our system to the latest version of the XTAG English grammar (The XTAG Research Group, 2001), which is a large-scale FB-LTAG grammar.",
        "A parsing experiment shows that an efficient HPSG parser with the obtained grammar achieved a significant speed-up against an existing LTAG parser (Yoshinaga et al., 2001).",
        "This result implies that parsing techniques for HPSG are also beneficial for LTAG parsing.",
        "We can say that the grammar conversion enables us to share HPSG parsing techniques in LTAG parsing.",
        "Figure 1 depicts a brief sketch of the RenTAL system.",
        "The system consists of the following four modules: Tree converter, Type hierarchy extractor, Lexicon converter and Derivation translator.",
        "The tree converter module is a core module of the system, which is an implementation of the grammar conversion algorithm given in Section 3.",
        "The type hierarchy extractor module extracts the symbols of the node, features, and feature values from the LTAG elementary tree templates and lexicon, and construct the type hierarchy from them.",
        "The lexicon converter module converts LTAG elementary tree templates into HPSG lexical entries.",
        "The derivation translator module takes HPSG parse",
        "trees, and map them to LTAG derivation trees.",
        "All modules other than the last one are related to the conversion process from LTAG into HPSG, and the last one enables to obtain LTAG analysis from the obtained HPSG analysis.",
        "Tateisi et al.",
        "also translated LTAG into HPSG (Tateisi et al., 1998).",
        "However, their method depended on translator’s intuitive analysis of the original grammar.",
        "Thus the translation was manual and grammar dependent.",
        "The manual translation demanded considerable efforts from the translator, and obscures the equivalence between the original and obtained grammars.",
        "Other works (Kasper et al., 1995; Becker and Lopez, 2000) convert HPSG grammars into LTAG grammars.",
        "However, given the greater expressive power of HPSG, it is impossible to convert an arbitrary HPSG grammar into an LTAG grammar.",
        "Therefore, a conversion from HPSG into LTAG often requires some restrictions on the HPSG grammar to suppress its generative capacity.",
        "Thus, the conversion loses the equivalence of the grammars, and we cannot gain the above advantages.",
        "Section 2 reviews the source and the target grammar formalisms of the conversion algorithm.",
        "Section 3 describes the conversion algorithm which the core module in the RenTAL system uses.",
        "Section 4 presents the evaluation of the RenTAL system through experiments with the XTAG English grammar.",
        "Section 5 concludes this study and addresses future works."
      ]
    },
    {
      "heading": "2 Background",
      "text": []
    },
    {
      "heading": "2.1 Feature-Based Lexicalized Tree Adjoining Grammar (FB-LTAG)",
      "text": [
        "LTAG (Schabes et al., 1988) is a grammar formalism that provides syntactic analyses for a sentence by composing elementary trees with two opera",
        "tions called substitution and adjunction.",
        "Elementary trees are classified into two types, initial trees and auxiliary trees (Figure 2).",
        "An elementary tree has at least one leaf node labeled with a terminal symbol called an anchor (marked with o).",
        "In an auxiliary tree, one leaf node is labeled with the same symbol as the root node and is specially marked as afoot node (marked with *).",
        "In an elementary tree, leaf nodes with the exception of anchors and the foot node are called substitution nodes (marked with , ).",
        "Substitution replaces a substitution node with another initial tree (Figure 3).",
        "Adjunction grafts an auxiliary tree with the root node and foot node labeled x onto an internal node of another tree with the same symbol x (Figure 4).",
        "FB-LTAG (Vijay-Shanker, 1987; Vijay-Shanker and Joshi, 1988) is an extension of the LTAG formalism.",
        "In FB-LTAG, each node in the elementary trees has a feature structure, containing grammatical constraints on the node.",
        "Figure 5 shows a result of LTAG analysis, which is described not",
        "There are several grammars developed in the FB-LTAG formalism, including the XTAG English grammar, a large-scale grammar for English (The XTAG Research Group, 2001).",
        "The XTAG group (Doran et al., 2000) at the University of Pennsylvania is also developing Korean, Chinese, and Hindi grammars.",
        "Development of a large-scale French grammar (Abeill´e and Can-dito, 2000) has also started at the University of Pennsylvania and is expanded at University of Paris 7."
      ]
    },
    {
      "heading": "2.2 Head-Driven Phrase Structure Grammar (HPSG)",
      "text": [
        "An HPSG grammar consists of lexical entries and ID grammar rules, each of which is described with typed feature structures (Carpenter, 1992).",
        "A lexical entry for each word expresses the characteristics of the word, such as the subcategorization frame and the grammatical category.",
        "An ID grammar rule represents a relation between a mother and its daughters, and is independent of lexical characteristics.",
        "Figure 6 illustrates an example of bottom-up parsing with an HPSG grammar.",
        "First, lexical entries for “can” and “run” are unified respectively with the daughter feature structures of",
        "an ID grammar rule.",
        "The feature structure of the mother node is determined as a result of these unifications.",
        "The center of Figure 6 shows a rule application to “can run” and “we”.",
        "There are a variety of works on efficient parsing with HPSG, which allow the use of HPSG-based processing in practical application contexts (Flickinger et al., 2000).",
        "Stanford University is developing the English Resource Grammar, an HPSG grammar for English, as a part of the Linguistic Grammars Online (LinGO) project (Flickinger, 2000).",
        "In practical context, German, English, and Japanese HPSG-based grammars are developed and used in the Verb-mobil project (Kay et al., 1994).",
        "Our group has developed a wide-coverage HPSG grammar for Japanese (Mitsuishi et al., 1998), which is used in a high-accuracy Japanese dependency analyzer (Kanayama et al., 2000)."
      ]
    },
    {
      "heading": "3 Grammar conversion",
      "text": [
        "The grammar conversion from LTAG to HPSG (Yoshinaga and Miyao, 2001) is the core portion of the RenTAL system.",
        "The conversion algorithm consists of:",
        "1.",
        "Conversion of canonical elementary trees to HPSG lexical entries.",
        "2.",
        "Definition of ID grammar rules to emulate substitution and adjunction.",
        "3.",
        "Conversion of non-canonical elementary trees to canonical ones.",
        "The left-hand side of Figure 7 shows a canonical elementary tree, which satisfies the following conditions:",
        "Condition 2 All branchings in a tree must contain trunk nodes.",
        "Trunk nodes are nodes on a trunk, which is a path from an anchor to the root node (the thick lines in Figure 7) (Kasper et al., 1995).",
        "Condition 1 guarantees that a canonical elementary tree has only one trunk, and Condition 2 guarantees that each branching consists of a trunk node, a leaf node, and their mother (also a trunk node).",
        "The right-hand side of Figure 7 shows elementary trees violating the conditions.",
        "Canonical elementary trees can be directly converted to HPSG lexical entries by regarding each leaf node as a subcategorization element of the anchor, and by encoding them into a list.",
        "Figure 8 shows an example of the conversion.",
        "By following the trunk from the anchor “think” to the",
        "root node labeled S, we store each branching in a list.",
        "As shown in Figure 8, each branching is specified by a leaf node and the mother node.",
        "A feature Sym represents the non-terminal symbol of the mother node.",
        "Features Leaf, Dir, Foot?",
        "represent the leaf node; the non-terminal symbol, the direction (on which side of the trunk node the leaf node is), and the type (whether a foot node or a substitution node), respectively.",
        "Figures 9 and 10 show ID grammar rules to emulate substitution and adjunction.",
        "These grammar rules are independent of the original grammar because they don’t specify any characteristics specific to the original grammar.",
        "In the substitution rule, the Sym feature of the substitution node must have the value of the Leaf feature 3 of the trunk node.",
        "The Arg feature of the substitution node must be a null list, because the substitution node must be unified only with the node corresponding to the root node of the initial tree.",
        "The substitution rule percolates the tail elements 2 of the Arg feature of a trunk node to the mother in order to continue constructing the tree.",
        "In the adjunction rule, the Sym feature of a foot node must have the same value as the Leaf feature 4 .",
        "The value of the Arg feature of the mother node is a concatenation list of both Arg features 2 and 3 of its daughters because we first construct the tree corresponding to the adjoining tree and next continue constructing the tree corresponding to the adjoined tree.",
        "The value “+” or “ – ” of the Foot?",
        "feature explicitly determines whether the next rule application is the adjunction rule or the substitution rule.",
        "tree ()2).",
        "The adjunction rule is applied to construct the branching marked with *, where “think” takes as an argument a node whose Sym feature’s value is S. By applying the adjunction rule, the Arg feature of the mother node (B) becomes a concatenation list of both Arg features of )1 ( 8 ) and a1(5 ).",
        "Note that when the construction of )1 is completed, the Arg feature of the trunk node (C) will be its former state (A).",
        "We can continue constructing a 1 as if nothing had happened.",
        "Multi-anchored elementary trees, which violate Condition 1, are divided into multiple canonical elementary trees.",
        "We call the cutting nodes in the divided trees cut-off nodes (Figure 12).",
        "Note that a cut-off node is marked by an identifier to preserve a co-occurrence relation among the multiple anchors.",
        "Figure 12 shows an example of the conversion of a multi-anchored elementary tree for a compound expression “look for”.",
        "We first select an anchor “look” as the syntactic head, and traverse the tree along the trunk from the root node S to the anchor “look”.",
        "We then cut off the multi",
        "anchored elementary tree at the node PP, and cutoff nodes PP in resulting single-anchored trees are marked by an identifier look f or.",
        "Non-canonical elementary trees violating Condition 2 have a non-anchored subtree which is a subtree of depth 1 or above with no anchor.",
        "A non-anchored subtree is converted into multi-anchored trees by substituting the deepest node (Figure 13).",
        "Substituted nodes are marked as breaking points to remember that the nodes originate from the substitution nodes.",
        "In the resulting trees, all subtrees are anchored so that we can apply the above conversion algorithms.",
        "Figure 13 shows a conversion of a non-canonical elementary tree for it-cleft.",
        "A substitution node P in the non-anchored subtree is selected, and is substituted by each initial tree.",
        "The substituted node P in resulting multi-anchored trees are marked as breaking points.",
        "The above algorithm gives the conversion of LTAG, and it can be easily extended to handle an FB-LTAG grammar by merely storing a feature structure of each node into the Sym feature and Leaf feature together with the non-terminal symbol.",
        "Feature structure unification is executed by ID grammar rules.",
        "The strong equivalence is assured because only substitution/adjunction operations performed in LTAG are performed with the obtained HPSG-style grammar.",
        "This is because each element in the Arg feature selects only feature structures corresponding to trees which can substitute/be adjoined by each leaf node of an elementary tree.",
        "By following a history of rule applications, each combination of elementary trees in LTAG derivation trees can be readily recovered.",
        "The strong equivalence holds also for conversion of non-canonical elementary trees.",
        "For trees violating Condition 1, we can distinguish the cut-off",
        "templates in the XTAG English grammar (LTAG) and converted lexical entry templates corresponding to them (HPSG): A: canonical elementary trees, 13: elementary trees violating only Condition 1, C: elementary trees violating only Condition 2, D: elementary trees violating both conditions Grammar A B C D Total LTAG 326 764 54 50 1,194 HPSG 326 1,992 1,083 2,474 5,875 nodes from the substitution nodes owing to identifiers, which recover the co-occurrence relation in the original elementary trees between the divided trees.",
        "For trees violating Condition 2, we can identify substitution nodes in a combined tree because they are marked as breaking points, and we can consider the combined tree as two trees in the LTAG derivation."
      ]
    },
    {
      "heading": "4 Experiments",
      "text": [
        "The RenTAL system is implemented in LiL-FeS (Makino et al., 1998)2.",
        "LiLFeS is one of the fastest inference engines for processing feature structure logic, and efficient HPSG parsers have already been built on this system (Nishida et al., 1999; Torisawa et al., 2000).",
        "We applied our system to the XTAG English grammar (The XTAG Research Group, 2001)3, which is a large-scale FB-LTAG grammar for English.",
        "The XTAG English grammar consists of 1,1944 elementary tree templates and around 45,000 lexical items5.",
        "We successfully converted all the elementary tree templates in the XTAG English grammar to HPSG lexical entry templates.",
        "Table 1 shows the classifications of elementary tree templates of the XTAG English grammar, according to the conditions we introduced in Section 3, and also shows the number of corresponding HPSG lexical entry templates.",
        "Conversion took about 25 minutes CPU time on a 700 Mhz Pentium III Xeon with four gigabytes main memory.",
        "The original and the obtained grammar generated exactly the same number of derivation trees in the parsing experiment with 457 sentences from the ATIS corpus (Marcus et al., 1994)6 (the average length is 6.32 words).",
        "This result empirically attested the strong equivalence of our algorithm.",
        "Table 2 shows the average parsing time with the LTAG and HPSG parsers.",
        "In Table 2, lem refers to the LTAG parser (Sarkar et al., 2000), ANSI C implementation of the two-phase parsing algorithm that performs the head corner parsing (van Noord, 1994) without features (phase 1), and then executes feature unification (phase 2).",
        "TNT refers to the HPSG parser (Torisawa et al., 2000), C++ implementation of the two-phase parsing algorithm that performs filtering with a compiled CFG (phase 1) and then executes feature unification (phase 2).",
        "Table 2 clearly shows that the HPSG parser is significantly faster than the LTAG parser.",
        "This result implies that parsing techniques for HPSG are also beneficial for LTAG",
        "parsing.",
        "We can say that the grammar conversion enables us to share HPSG parsing techniques in LTAG parsing.",
        "Another paper (Yoshinaga et al., 2001) describes the detailed analysis on the factor of the difference of parsing performance."
      ]
    },
    {
      "heading": "5 Conclusion",
      "text": [
        "We described the RenTAL system, a grammar converter from FB-LTAG to HPSG.",
        "The grammar conversion guarantees the strong equivalence, and hence we can obtain an HPSG-style grammar equivalent to existing LTAG grammars.",
        "Experimental result showed that the system enabled to share not only LTAG grammars, but also HPSG parsing techniques.",
        "This system will enable a variety of resource sharing such as the sharing of the programming/grammar-development environment (Makino et al., 1998; Sarkar and Wintner, 1999) and grammar extraction methods from bracketed corpora (Xia, 1999; Chen and Vijay-Shanker, 2000; Neumann, 1998).",
        "Although our system connects only FB-LTAG and HPSG, we believe that our approach can be extended to other formalisms such as Lexical-Functional Grammar (Kaplan and Bresnan, 1982).",
        "Acknowledgment The authors are indebted to Mr. Anoop Sarkar for his help in using his parser in our experiment.",
        "The authors would like to thank anonymous reviewers for their valuable comments and criticisms on this paper."
      ]
    }
  ]
}
