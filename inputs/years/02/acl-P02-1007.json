{
  "info": {
    "authors": [
      "Jonas Kuhn"
    ],
    "book": "Annual Meeting of the Association for Computational Linguistics",
    "id": "acl-P02-1007",
    "title": "OT Syntax - Decidability of Generation-Based Optimization",
    "url": "https://aclweb.org/anthology/P02-1007",
    "year": 2002
  },
  "references": [
    "acl-C00-1062",
    "acl-J98-2006",
    "acl-P00-1046",
    "acl-P00-1061",
    "acl-P02-1035",
    "acl-P97-1040",
    "acl-P99-1069",
    "acl-W98-1301"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "In Optimality-Theoretic Syntax, optimization with unrestricted expressive power on the side of the OT constraints is undecidable.",
        "This paper provides a proof for the decidability of optimization based on constraints expressed with reference to local subtrees (which is in the spirit of OT theory).",
        "The proof builds on Kaplan and Wedekind’s (2000) construction showing that LFG generation produces context-free languages."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "Optimality-Theoretic (OT) grammar systems are an interesting alternative to classical formal grammars, as they construe the task of learning from data in a meaning-based way: a form is defined as grammatical if it is optimal (most harmonic) within a set of generation alternatives for an underlying logical form.",
        "The harmony of a candidate analysis depends on a language-specific ranking (») of violable constraints, thus the learning task amounts to adjusting the ranking over a given set of constraints.",
        "(1) Candidate Al is more harmonic than A2 iff it incurs fewer violations of the highest-ranking constraint C' E C in which A, and A2 differ.",
        "The comparison-based setup of OT learning is closely related to discriminative learning approaches in probabilistic parsing (Johnson et al., 1999; Rie-zler et al., 2000; Riezler et al., 2002),1 however the comparison of generation alternatives – rather than parsing alternatives – adds the possibility of systematically learning the basic language-specific grammatical principles (which in probabilistic parsing are typically fixed a priori, using either a treebank-derived or a manually written grammar for the given",
        "language).",
        "The “base grammar” assumed as given can be highly unrestricted in the OT setup.",
        "Using a linguistically motivated set of constraints, learning proceeds with a bias for unmarked linguistic structures (cf. e.g., (Bresnan et al., 2001)).",
        "For computational OT syntax, an interleaving of candidate generation and constraint checking has been proposed (Kuhn, 2000).",
        "But the decidability of the optimization task in OT syntax, i.e., the identification of the optimal candidate(s) in a potentially infinite candidate set, has not been proven yet.2"
      ]
    },
    {
      "heading": "2 Undecidability for unrestricted OT",
      "text": [
        "Assume that the candidate set is characterized by a context-free grammar (cfg) G1, plus one additional candidate ‘yes’.",
        "There are two constraints (Cl » C2): Cl is violated if the candidate is neither ‘yes’ nor a structure generated by a cfg G2; C2 is violated only by ‘yes’.",
        "Now, ‘yes’ is in the language defined by this system iff there are no structures in Gl that are also in G2.",
        "But the emptiness problem for the intersection of two context-free languages is known to be undecidable, so the optimization task for unrestricted OT is undecidable too.3 However, it is not in the spirit of OT to have extremely powerful individual constraints; the explanatory power should rather arise from interaction of simple constraints."
      ]
    },
    {
      "heading": "3 OT-LFG",
      "text": [
        "Following (Bresnan, 2000; Kuhn, 2000; Kuhn, 2001), we define a restricted OT system based on Lexical-Functional Grammar (LFG) representations: c(ategory) structure/f(unctional) structure",
        "pairs (T, ID) like ((4),(5)).",
        "Each c-structure tree node is mapped to a node in the f-structure graph by the function 0.",
        "The mapping is specified by f-annotations in the grammar rules (below category symbols, cf. (2)) and lexicon entries (3).4",
        "present node’s mother category.",
        "The correct f-structure for a sentence is the minimal model satisfying all properly instantiated f-annotations.",
        "In OT-LFG, the universe of possible candidates is defined by an LFG GZ,,,,,,i,l (encoding inviolable principles, like an X-bar scheme).",
        "A particular candidate set is the set GenGi.vio,(4)in) – i.e., the c-/f-structure pairs in GZn,i,,, which have the input (Din",
        "as their f-structure.",
        "Constraints are expressed as local configurations in the c-/f-structure pairs.",
        "They have one of the following implicational forms:5 (6) N =* N'",
        "where N, N', M, M' are descriptions of nonterminals of Gi.vior; N, N' refer to the mother in a local subtree",
        "Any of the descriptions can be maximally unspecific; (6) can for example be instantiated by the OPSPEC constraint (TOP)=+ => (DF T) (an operator must be the value of a discourse function, (Bresnan, 2000)) with the category information unspecified.",
        "An OT-LFG system 0 is thus characterized by a base grammar and a set of constraints, with a language-specific ranking relation »,C:",
        "The evaluation function Eval�c �»L) picks the most harmonic from a set of candidates, based on the constraints and ranking.",
        "The language (set of analyses)6 generated by an OT system is defined as"
      ]
    },
    {
      "heading": "4 LFG generation",
      "text": [
        "Our decidability proof for generation-based optimization builds on the result of (Kaplan and Wedekind, 2000) (K&W00) that LFG generation produces context-free languages.",
        "structure (b, a cfg G' can be constructed that generates exactly the strings to which G assigns the f-structure (D. I will refer to the resulting cfg ✎' as ✁✂ (✎, (D).",
        "K&W00 present a constructive proof, folding all f-structural contributions of lexical entries and LFG rules into the c-structural rewrite rules (which is possible since we know in advance the range of f-structural objects that can instantiate the f-structure meta-variables in the rules).",
        "I illustrate the specialization steps with grammar (2) and lexicon (3) and for generation from f-structure (5).",
        "Initially, the generalized format of right-hand sides in LFG rules is converted to the standard context-free notation (resolving regular expressions by explicit disjunction or recursive rules).",
        "F-structure (5) contains five substructures: the root f-structure, plus the embedded f-structures under the paths SUBJ, COMP, COMP SUBJ, and COMP OBJ.",
        "Any relevant metavariable (T, ☎) in the grammar must end up instantiated to one of these.",
        "So for each path from the root f-structure, a distinct variable is introduced: ✆, subscripted with the (abbreviated and possibly empty) feature path: ✆, ✆✝, ✆✟, ✆✟✝, ✆✟☛.",
        "Rule augmentation step 1 adds to each category name a concrete f-structure to which the category corresponds.",
        "So for FP, we get FP:✆, FP:✆✝, FP:✆✟, FP:✆✟✝, and FP:✆✟☛.",
        "The rules are multiplied out to cover all combinations of augmented categories obeying the original f-annotations.7 Step 2 adds a set of instantiated f-annotation schemes to each symbol, based on the instantiation of metavariables from step 1.",
        "One instance of the lexicon entry Mary look as follows:",
        "The rules are again multiplied out to cover all combinations for which the set of f-constraints on the mother is the union of all daughters’ f-constraints, plus the appropriately instantiated rule-specific annotations.",
        "So, for the VP rule based on the categories NP:✎✏✒:{ (✎✏✒ PRED)=‘Mary’ l",
        "With this bottom-up construction it is ensured that each new category ROOT:✆:✤... ✥ (corresponding to the original root symbol) contains a complete possible collection of instantiated f-constraints.",
        "To exclude analyses whose f-structure is not (D (for which we are generating strings) a new start symbol is introduced “above” the original root symbol.",
        "Only for the sets of f-constraints that have (D as their minimal model, rules of the form ROOT' ✦ ROOT:✆:✤... ✥ are introduced (this also excludes inconsistent f-constraint sets).",
        "With the cfg ✁✂ (✎, (D), standard techniques for cfg’s can be applied, e.g., if there are infinitely many possible analyses for a given f-structure, the smallest one(s) can be produced, based on the pumping lemma for context-free languages.",
        "Grammar (2) does indeed produce infinitely many analyses for the input f-structure (5).",
        "It overgenerates in several respects: The functional projection FP can be stacked due to recursions like the following (with the augmented FP reoccuring in the FV rules): ✪★ PRED)=‘see� .",
        ".",
        ".",
        "� ’ ✧ ✪",
        "is one of the augmented categories we get for that in (3), so",
        "generates an arbitrary number of thats on top of any FP.",
        "A similar repetition effect will arise for the auxiliary",
        "choices in generation arise from the freedom of generating the subject in the specifier of VP or FP and f om the possibility of (unbounded) topicalization of the object (the first disjunction of the FP rule in (2)"
      ]
    },
    {
      "heading": "5 LFG generation in OT-LFG",
      "text": [
        "While grammar (2) would be considered defective as a classical LFG grammar, it constitutes a reasonable example of a candidate generation grammar (GZ,,,,,,ZOI) in OT.",
        "Here, it is the OT constraints that enforce language-specific restrictions, so Gi,,,i,l has to ensure that all candidates are generated in the first place.",
        "For instance, expletive elements as do in Who do you know will arise by passing a recursion in the cfg constructed during generation.",
        "A candidate containing such a vacuous cycle can still become the winner of the OT competition if the Faithfulness constraint punishing expletives is outranked by some constraint favoring an aspect of the recursive structure.",
        "So the harmony is increased by going through the recursion a certain number of times.",
        "It is for this very reason, that Who do you know is predicted to be grammatical in English.",
        "So, in OT-LFG it is not sufficient to apply just the KW construction; I use an additional step: prior to application of KW, the LFG grammar GZ,,,,,,iol is converted to a different form Oc(GZ,,,,,,ZOI) (depending on the constraint set C), which is still an LFG grammar but has category symbols which reflect local constraint violations.",
        "When the KW construction is applied to Oc(Gi,,,,,Zol), all “pumping” structures generated by the cfg KW (Oc (Ginviol ), (� in ) can indeed be ignored since all OT-relevant candidates are already contained in the finite set of non-recursive structures.",
        "So, finally the ranking of the constraints is taken into consideration in order to determine the harmony of the candidates in this finite subset."
      ]
    },
    {
      "heading": "6 The conversion Oc (GZnviol )",
      "text": [
        "Preprocessing Like K&W00, I assume an initial conversion of the c-structure part of rules into standard context-free form, i.e., the right-hand side is a category string rather than a regular expression.",
        "This ensures that for a given local subtree, each constraint (of form (6) or (7)) can be applied only a finite number of times: if 1 is the arity of the longest right-hand side of a rule, the maximal number of local violations is l (since some constraints of type (7) can be instantiated to all daughters).",
        "Grammar conversion With the number of local violations bounded, we can encode all candidate distinctions with respect to constraint violations at the local-subtree level with finite means: The set of categories in the newly constructed LFG grammar",
        "The rules in Oc (Ginviol) are constructed in such a way that for each rule Xo -4Xi ... XT,, T, T,,, in Gi,,viol and each sequence (no, no ... no),",
        "are included such that no (the number of violations of constraint Ci incurred local to the rule) and the f-annotations Ti ... T;L are specified as follows:",
        "if Xo does not match the condition N; b. no = Edj; Tj' = 6(Tj, S, S') (1 < j < m), j=I where i. dj = 0; S(Tj, S, S') = Tj if Xj does not match M, or X, ... Xj I do not match p, or Xj+1 ... XT,,, do not match a; ii.",
        "dj=0; S(T;,S,S')=TjASAS' if Xo matches both N and N'; Xj matches both M and M'; X, ... Xj- 1 match p and p'; Xj+1 ...X,,,, match a and a' ; iii.",
        "dj = 0; S(Tj, S, S') = Tj n S if Xo matches both N and N'; Xj matches both M and M'; X, ... Xj- 1 match p and p'; Xj+1 ...X,,,, match a and a' ; iv.",
        "dj = 1; S(Tj, S, S') = Tj n S if Xo matches N, Xj matches M, X, ... Xj I match p, Xj+1 ...X.. match a, but (at least) one of them does not match the respective description in the consequent",
        "and a' .",
        "Note that the constraint profile of the daughter categories does not play any role in the determination of constraint violations local to the subtree under consideration (only the sequences ni �are restricted by the conditions (12) and (13)).",
        "So for each new rule type, all combinations of constraint profiles on the daughters are constructed (creating a large but finite number of rules).9 This ensures that no sentence that can be parsed (or generated) by Ginviol is",
        "excluded from Oc (Ginviol) (as stated by fact (14)):10 (14) Coverage preseveration",
        "All strings generated by an LFG grammar G are also generated by Oc (G).",
        "The original G analysis can be recovered from an Oc(G) analysis by applying a projection function Cat to all c-structure categories: Cat(N:(nl, n'... nk)) = N",
        "of a constraint of form (6), three clauses apply: (12b), (12c), and (12d).",
        "So, we get two new rules with the count of 0 local violations of the constraint and two rules with count 1, with a difference in the f-annotations.",
        "10Providing all possible combinations of augmented category symbols on the right-hand rule sides in Oc (G) ensures that the newly constructed rules can be reached from the root symbol in a derivation.",
        "It is also guaranteed that whenever a rule R in G contributes to an analysis, at least one of the rules constructed from R will contribute to the corresponding analysis in Oc (G).",
        "This is ensured since the subclauses in (12) and (13) cover the full space of logical possibilities.",
        "We can overload the function name Cat with a function applying to the set of analyses produced by an LFG grammar G by defining",
        "applying Cat to all category symbols }.",
        "Coverage preservation of the Oc construction holds also for the projected c-category skeleton (cf. the argumentation in fn.",
        "10):",
        "(15) C-structure level coverage preservation"
      ]
    },
    {
      "heading": "For an LFG grammar G: Cat(Oc (G)) = G",
      "text": [
        "Each category in Oc(G) encodes the number of local violations for all constraints.",
        "Since all constraints are locally evaluable by assumption, all constraints violated by a candidate analysis have to be incurred local to some subtree.",
        "Hence the total number of constraint violations incurred by a candidate can be computed by simply summing over all category-encoded local violation profiles:",
        "(16) Total number of constraint violations",
        "Let Nodes (T) be the multiset of categories occurring in the c-structure tree T, then the total number of violations of constraint C' incurred by an analysis (T, (D) E",
        "Since Oc (Ginviol) is a standard LFG grammar, we can apply the KW construction to it to get a cfg for a given f-structure in .",
        "The category symbols then have the form X:(nI ... , nl,):v:D, with v and D arising from the KW construction.",
        "We can overload the projection function Cat again such that",
        "bol of the new format; likewise Cat(G) for G a cfg.",
        "Since the Oc construction (strongly) preserves the language generated, coverage preservation holds also after the application of KW to Oc (Ginviol) and",
        "GZ,,,,viol, respectively: (17) Cat(KW(Oc(Giavior),�Dia)) ="
      ]
    },
    {
      "heading": "Cat(KW (Giavior, �Di.))",
      "text": [
        "But since the symbols in OC (Ginviol) reflect local constraint violations, Cat(KW(OC(Ginviol),(Din)) has the property that all instances ofrecursion in the resulting cfg create candidates that are at most as harmonic as their non-recursive counterparts.",
        "Assuming a projection function CatCount(�",
        "u:v, we can state more formally: (18) If T, and T2 are CatCount projections of trees produced by the cfg KW (Oc (Gi_ior), (Di.",
        "), using exactly the same rules, and T2 contains a superset of the nodes that T, contains, then ni G_ n2, for all n1, n2 (i =1..k) from (ni ... ni ... ni) = Totalc (Ti), and (n2 ... n2 ... n2) =Totalc (T2).",
        "This fact follows from definition of Total (16): the violation counts in the additional nodes in T will add to the total of constraint violations (and if none of the additional nodes contains any local constraint violation at all, the total will be the same as in T1).",
        "Intuitively, the effect of the augmentation of the category format is that certain recursions in the pure KW construction (which one may think of as a loop) are unfolded, leading to a longer loop.",
        "The new loop is sufficiently large to make all relevant distinctions.",
        "This result can be directly exploited in processing: if all non-recursive analyses are generated (of which there are only finitely many) it is guaranteed that a subset of the optimal candidates is among them.",
        "If the grammar does not contain any violation-free recursion, we even know that we have generated all optimal candidates.",
        "(19) A recursion with the derivation path A ... => A is called violation-free iff all categories dominated by the upper occurrence of A, but not dominated by the lower occurrence of A have the form N : (nl, n2 ... nk) with",
        "n'=O,i=L.k Note that if there is an applicable violation-free recursion, the set of optimal candidates is infinite; so if the constraint set is set up properly in a linguistic analysis, one would assume that violation-free recursion should not arise.",
        "(Kuhn, 2000) excludes the application of such recursions by a similar condition as offline parsability (which excludes vacuous recursions over a string in parsing), but with the KW construction, this condition is not necessary for decidability of the generation-based optimization task.",
        "The cfg produced by KW can be transformed further to only generate the optimal candidates according to the constraint ranking >,C of the OT system 0 = (Ginvzol, (C, »,c)), eliminating all but the violation-free recursions in the grammar:",
        "Using the function Total defined in (16), this function is straightforward to compute for finite sets, i.e., in particu",
        "where n' = 0 for i = L .",
        "k. Introduce a new unique index ✝ ✟ 1 for each node of the form X: (n', ... nk):v:✞, where ni :?� 0 for some ni (1 G_ i G_ k) occurring in the analyses Eval(c,»L) (TN,) (i.e., different occurrences of the same category are distinguished).",
        "d. Construct the cfg",
        "where N☎✌�✎ � �T✌✎ are the indexed symbols of step c.; S✌✎ is a new start symbol; the rules R10m are (i) those rules from KW (Oc (Gi_ior), (Di.)",
        "which were used in the analyses in Eval(c,>L)(TNR) – with the original symbols replaced by the indexed symbols –, (ii) the rules in KW (Oc (Gi_ior),(Di�), in which the mother category and all daughter categories are of the form X:(nl, ... nk):v:✞, n' = 0 for i = L.k (with the new index 0 added), and (iii) one rule SS✎ � -4Sj:✝ for each of the indexed versions Sj :✝ of the start symbols of"
      ]
    },
    {
      "heading": "KW (Oc (Gi_ioi),,bin).",
      "text": [
        "With the index introduced in step (20c), the original recursion in the cfg is eliminated in all but the violation-free cases.",
        "The grammar Cat(G✗✓T) produces (the c-structure of) the set of optimal candidates for the input (D Z,,,, :12",
        "i.e., the set of c-structures for the optimal candidates for input f-structure (Di.. according to the OT system 0 = Wmvioi, (C, »c)).",
        "11 The projection function Cat is again overloaded to also remove the index on the categories.",
        "12 Like K&W00, I make the assumption that the input f-structure in generation is fully specified (i.e., all the candidates have the form (T, (Di,)), but the result can be extended to allow for the addition of a finite amount of f-structure information in generation.",
        "Then, the specified routine is computed separately for each possible f-structural extension and the results are compared in the end."
      ]
    },
    {
      "heading": "8 Proof",
      "text": [
        "To prove fact (21) we will show that the c-structure of an arbitrary candidate analysis generated from (Din with GZ,,,,,,i,l is contained in Cat(G✗✓T) iff all other candidates are equally or less harmonic.",
        "Take an arbitrary candidate c-structure T generated from (Din with Ginviol such that T E Cat(✗ G✓�✕�).",
        "We have to show that all other candidates T' generated from (Din are equally or less harmonic than T. Assume there were a T' that is more harmonic than T. Then there must be some constraint Ci E C, such that T' violates Ci fewer times than T does, and Ci is ranked higher than any other constraint in which T and T' differ.",
        "Constraints have to be incurred within some local subtree; so T must contain a local violation configuration that T' does not contain, and by the construction (12)/(13) the 0C augmented analysis of T – call it Oc (T) – must make use of some violation-marked rule not used in Oc (T') .",
        "Now there are three possibilities: (i) Both OC (T) and OC (T') are free of recursion.",
        "Then the fact that OC (T') avoids the highest-ranking constraint violation excludes T from Cat(G✗✓,,) (by construction step (20b)).",
        "This gives us a contradiction with our assumption.",
        "(ii) OC (T) contains a recursion and Oc (T') is free of recursion.",
        "If the recursion in Oc (T) is violation-free, then there is an equally harmonic recursion-free candidate V. But this T\" is also less harmonic than OC (T'), such that it would have been excluded from CatO✗ G ✓✕) too.",
        "This again means that Oc (T) would also be excluded (for lack of the relevant rules in the non-recursive part).",
        "On the other hand, if it were the recursion in Oc (T) that incurred the additional violation (as compared to OC (T') ), then there would be a more harmonic recursion-free candidate T\"'.",
        "However, this T\"' would exclude the presence of 0C (T) in G✓T by construction step ✗ (20c,d) (only violation-free recursion is possible).",
        "So we get another contradiction to the assumption"
      ]
    },
    {
      "heading": "that T E Cat(G✗✓T ).",
      "text": [
        "(iii) OC (T') contains a recursion.",
        "If this recursion is violation-free, we can pick the equally harmonic candidate avoiding the recursion to be our OC (T'), and we are back to case (i) and (ii).",
        "Likewise, if the recursion in Oc(T') does incur some violation, not using the recursion leads to an even more harmonic candidate, for which again cases (i) and (ii) will apply.",
        "All possible cases lead to a contradiction with the assumptions, so no candidate is more harmonic than our T E Cat(G✗i.",
        ".",
        "We still have to prove that if the c-structure T of a candidate analysis generated from (Din with Gin„ioi is equally or more harmonic than all other candidates, then it is contained in Cat(G✗i.).",
        "We can construct an augmented version T' of T, such that Cat(V) ✪ T and then show that there is a homo✗morphism mapping T' to some analysis T\" E G✓✕T with Cat(T11) ✪ T. We can use the constraint marking construction OC and the KW construction to construct the tree T' with augmented category symbols of the analysis T. The result of K&W00 plus (17) guarantee that Cat(V) ✪ T. Now, there has to be a homomorphism from the categories in T' to the categories of some analysis in G✗✓�✕ �.",
        "G✓✕ is also based on KW (Ginviol, (Din) (with an additional index h on each category and some categories and rules of KW (Ginviol, (bin) having no counterpart in G✗✓✕ �).",
        "Since we know that T is equally or more harmonic than any other candidate generated from (Di\"', we know that the augmented tree T' either contains no recursion or only violation-free recursion.",
        "If it does contain such violation-free recursions we map all categories N on the recursion paths to the indexed form N:O, and furthermore consider the variant of T' avoiding the recursion(s).",
        "For our (non-recursive) tree, there is guaranteed to be a counterpart in the finite set of non-recursive trees in G✗✓�✕ with all categories pairwise identical apart from the index h in G4)T. We pick this tree and map each of the categories in T' to the h-indexed counterpart.",
        "The existence of this homomorphism guarantees that an analysis T\" E G✓✕ exists with Cat(V) ✪ Cat(V)"
      ]
    },
    {
      "heading": "T. QED 9 Conclusion",
      "text": [
        "We showed that for OT-LFG systems in which all constraints can be expressed relative to a local subtree in c-structure, the generation task from (non-cyclic13) f-structures is solvable.",
        "The infinity of 13 The non-cyclicity condition is inherited from K&W00; in linguistically motivated applications of the LFG formalism, cru-the conceptually underlying candidate set does not preclude a computational approach.",
        "It is obvious that the construction proposed here has the purpose of bringing out the principled computability, rather than suggesting a particular algorithm for implementation.",
        "However on this basis, an implementation can be easily devised.",
        "The locality condition on constraint-checking seems unproblematic for linguistically relevant constraints, since a GPSG-style slash mechanism permits reference to (finitely many) nonlocal configurations from any given category (cf. fn.",
        "5).14 Decidability of generation-based optimization (from a given input f-structure) alone does not imply that the recognition and parsing tasks for an OT grammar system defined as in sec. 3 are decidable: for these tasks, a string is given and it has to be shown that the string is optimal for some underlying input f-structure (cf. (Johnson, 1998)).",
        "However, a similar construction as the one presented here can be devised for parsing-based optimization (even for an LFG-style grammar that does not obey the offline parsability condition).",
        "So, if the language generated by an OT system is defined based on (strong) bidirectional optimality (Kuhn, 2001, ch.",
        "5), decidability of both the general parsing and generation problem follows.",
        "15 For the unidirectionally defined OT language (as in sec. 3), decidability of parsing can be guaranteed under the assumption of a contextual recoverability condition in parsing (Kuhn, in preparation)."
      ]
    }
  ]
}
