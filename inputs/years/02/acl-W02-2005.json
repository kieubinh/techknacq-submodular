{
  "info": {
    "authors": [
      "Liviu Ciortuz"
    ],
    "book": "Conference on Computational Natural Language Learning CoNLL",
    "id": "acl-W02-2005",
    "title": "Learning Attribute Values in Typed-Unification Grammars: On Generalised Rule Reduction",
    "url": "https://aclweb.org/anthology/W02-2005",
    "year": 2002
  },
  "references": [
    "acl-A00-2022",
    "acl-C86-1045",
    "acl-C92-2068",
    "acl-P85-1017",
    "acl-P98-2144"
  ],
  "sections": [
    {
      "text": [
        "Abstract: We present Generalised Reduction (GR), a learning technique for generalising attribute/feature values in typed-unification grammars.",
        "GR eliminates as many as possible of the feature constraints (FCs) from the type feature structures (FSs) while applying a criterion of preserving the parsing results on a given, training corpus.",
        "For parsing with GR-restricted rule FSs, and for checking the correctness of obtained parses on other corpora, one may use a new form FS unification which we call two-step unification to speed up parsing.",
        "We report results on a large-scale HPSG grammar for English."
      ]
    },
    {
      "heading": "1 Introduction and Related Work",
      "text": [
        "Interest in typed-unification grammars in Natural Language Processing can be traced back to the seminal work on the PATR-II system [20].",
        "Since then, different types of unification-based grammar formalisms were developed by the Computational Linguistics community most notably Lexical Functional Grammars [11], Head-driven Phrase Structure Grammars (HPSG, [19]) and Categorial (unification) Grammars [23].",
        "During the last years, such wise-coverage grammars were implemented.' FS unification is by far the most time-consuming task during unification with large-scale typed-unification grammars.",
        "Therefore, making it more efficient is of great interest.",
        "Several solutions for speeding-up FS unification have been proposed until now: FS sharing [18] [22], the Quick-Check preunification filter [12], the hyperactive parsing [16] strategy, or parsing with ambiguity packing [17].",
        "Compilation of parsing with typed FSs [24] [7] is another approach for speeding-up the FS unification.",
        "This paper will show that an ILP-inspired learning technique [14] for generalising typed-unification grammars opens the way for further applying a new For instance the HPSG for English developed at Stanford [9] called LinGO, two HPSGs for Japanese developed at Tokyo University [13], and respectively at DFKIâ€“Saarbrucken, Germany [21], and the HPSG for German, developed also at DFKI [15].",
        "Large-scale LFG grammars were developed by Xerox Corp., but they are not publicly available.",
        "speed-up technique for parsing with such grammars, namely two-step unification.",
        "The QC pre-unification filter, one of the most effective speed-up technique for FS unification, is very simple in itself.",
        "It considers the set of feature paths most probably leading to unification failure, and then compares the corresponding values of these paths inside the two FSs to be unified.",
        "If such a pair of values is eventually if their root sorts are incompatible, then certainly the two FSs don't unify.",
        "The QC filter rules out many of the unifications, and speeds up considerably the parsing around 63% for the PET system [4], and 42% for the LIGHTCOmpiler [8].2 The effectiveness of the QC pre-unification technique resides in the fact that there is a relatively reduced number of failure paths inside rule FSs.",
        "Using the LIGHT system, we identified 148 failure paths on the CSLI test-suite, out of the total of 494 paths inside rule FSs for LinGO.",
        "Among these paths, only a small number is responsible for most of the unification failures.",
        "The Generalised Reduction technique will work on a larger subset of feature paths inside rule FSs, namely those paths which contribute to unification failure, by eliminating those FCs which are not decisively contribute (or only seldom contribute) to unification failure.",
        "The paths retained by GR will be called in the sequel GR-paths.4 We will present an efficient algorithm for generalised reduction of rule FSs in large-scale typed-unification grammars.",
        "Measurements done on the LinGO grammar revealed that almost 60% of the feature constraints in the expanded grammar rule FSs can be eliminated without affecting the parsing result on the CSLI test-suite.",
        "As a consequence, the",
        "LIGHT system registered a reduction of the unification time that sped parsing up to 23%.5"
      ]
    },
    {
      "heading": "2 Generalised Reduction Definitions",
      "text": [
        "From the logical point of view, FSs can be viewed as positive OSF-clauses, which are finite sets of atomic OSF-constraints [2] sort constraints, feature constraints and equation constraints.",
        "Therefore the generalisation of FSs can be logically achieved through elimination of some atomic constraints from the FS.",
        "We showed in [6] how one can improve the linguistic competence i.e., enhancing the coverage of a given typed-unification grammar by guided general-isation, using parsing failures.6 Generalised reduction (GR) is a restricted form of FS generalisation that eliminates as many as possible of the feature constraints from a type FS of the given unification grammar while applying an evaluation criterion for maintaining the parsing results on a large corpus/test-suite.",
        "Note that although GR explicitly eliminates only feature constraints, it may be the case that sort and/or equation constraints associated with the value of an eliminated feature constraint get implicitly eliminated through FS normalisation [2].",
        "We make the observation that the notion of restriction in the HPSG literature designates the elimination of certain (few) features following the application of a parsing rule.",
        "Generalised Reduction extends this operation on arbitrary chosen features (of course, ensuring the parsing correctness on the given training corpus).",
        "We prefer the name reduction for this operation, since from the logical point of view, eliminating one feature constraint from a FS logically generalises that FS, while its set of attribute paths gets indeed restricted.",
        "However, we will denote the result of applying GR to a FS as the GR-restricted form or the GR-learnt form of that FS.",
        "Alternatively, one may think of generalised reduction as relative unfilling.",
        "Indeed, expansion for",
        "typed-unification grammars the procedure that propagates both top-down in the type hierarchy and locally in the typed FS the constraints associated to types in the grammar is usually followed by unfilling [10], a feature constraint removal technique which is corpus-independent.",
        "Generalised Reduction may be thought as a corpus/test-suite relative unfilling technique.",
        "GR is shown not only to improve the performance of the given grammar since it maximally reduces the size of the (rule) FSs in grammar but also adds an interesting improvement to the parsing system design.",
        "As measurements on parsing the CSLI test-suite have shown that in average only 8% of the items produced on the chart during parsing constitute part of the full parses, one can devise unification as a two-step operation.",
        "Parsing with two-step unification will i. use the GR-learnt form of the grammar rules to produce full parses, and ii.",
        "eventually complete/check the final parses using the full (or, better: complementary) form of rule FSs."
      ]
    },
    {
      "heading": "3 Generalised Reduction of Rule FSs Algorithms",
      "text": [
        "We present two algorithms for generalised reduction of types in unification grammars.",
        "The first one, called A in the sequel is a simple, non-incremental one.",
        "From it we derived a second, incremental algorithm (B) that we have optimised.",
        "Both algorithms have mainly the same kind of input and output.",
        "Input: 9, a typed-unification grammar, O a test-suite i.e., a set of sentences annotated by a parsing evaluation function; Output: a more/most general grammar than g obtained by generalised reduction of FSs, and producing the same parsing evaluation results as g on O.",
        "The measurements provided below used the following parsing evaluation criterion: the number of full parses, the number of attempted unifications and the number of successful unifications must be preserved for each sentence in the test-suite, after the elimination of a (selected) feature constraint.",
        "Notes: 1.",
        "Due to the large size of (both) the LinGO grammar and the test-suite used for running GR, this parsing evaluation criterion is a good approximation of the following \"tough\" criterion: the set of actual parses (up to the associated FSs) delivered for each sentence by the two grammar versions must be exactly the same.",
        "We make the remark that after applying GR on the LinGO using the CSLI test-suite, this \"tough\" criterion was satisfied.",
        "2.",
        "The parsing evaluation criteria must be actually combined with one regarding the memory/space resources exhaustion: if for a given sentence, after elimination of a feature constraint the resources initially allocated for parsing are exhausted, then that feature constraint is kept in the grammar.",
        "3.",
        "Although in our experiments only the rule types in g were subject to generalised reduction, the formulation of the two GR algorithms can be extended to any FS in the input grammar.",
        "Applying GR to the type FSs used in type-checking is easy, but if parsing correctness must be ensured i.e., elimination of overgeneralised parses is required in the end , then things get more complicated than for rule FSs.",
        "Extending GR to lexical entries is even more demanding in case lexical rules are used.",
        "1.",
        "Obviously, the GR result is dependent on the order in which feature constraints are processed: the elimination of the constraint co can block the elimination of the constraint co' if co is tried first, and vice-versa.",
        "Therefore usually there is no unique GR form for a given grammar.",
        "2.",
        "In the actual implementation of the GR algorithms",
        " â€“ we first worked on the elimination of feature constraints from key arguments (in the decreasing order of their \"usage\" frequency on the given test-suite), then from non-key arguments (according to the same kind of frequency), and finally from rule LHS substructures; â€“ inside a \"reduction partition\" (i.e., key argument, non-key argument, LHS structure), feature constraints are tried for elimination following the bottom-up traversal order of the acyclic rooted graph representing the rule FS.",
        "3.",
        "The first two for's in the procedure A can be combined into a single for iterating over the set of all feature constraints < r, co > in the grammar's rules (ï¿½o E ï¿½P(r))-The more efficient GR algorithm B introduced below is obtained basically by: â€“ reversing the two for's, namely the one identified above (4), and the one iterating over the sentences in the test-suite.",
        "The advantage is that those sentences which become/are correctly parsed by 9i an intermediate generalised form of g need not to be tried again when computing 9i+1.",
        " â€“ getting a first GR version of the input grammar by running the simple procedure A on one or more sentences, and subsequently improving it iteratively.",
        "B.",
        "An improved GR procedure: do 0. go = 9, i = 0;",
        "1.",
        "Apply the procedure A on a sentence s from O; let gi+1 be the result 2. eliminate from O the sentences for which 9i+1 provides the same parsing results as",
        "The reader should note that the set of FCs to be tried for elimination in the procedure A called at the step 1 see the Remark 3 following the presentation of the algorithm A is provided by 9-9i, therefore it is becoming lower and lower at each loop.",
        "Indeed, from the logical point of view, 9 _ go ï¿½= ... 9n+1 1_ gn ... 1_ 92 ï¿½= g1.",
        "Viewed as set of constraints, 9 _ go D ... D 9i+1 D 9i ... D 92 D 91 therefore 9 â€“ 9n+1 C 9 â€“ gn.",
        "Further improvements: 1.",
        "At the step 2, the elimination of sentences from O is done in a procrastinated manner: initially O is sorted according to the number of failed unifications per sentence when using 9, therefore the sentence s chosen at the step 1 may be considered the first sentence in Oi and subsequently only the first sentences from Oi which are correctly parsed by 9i+1 are eliminated.' The reason for procrastinated elimination of sentences from O is the significant time consumption engendered by the over-parsing and/or the exhaustion of allocated resources that may be caused very frequently, in the beginning for some of the the remaining sentences in O due to the (premature) elimination of certain constraints in precedent loops in the procedure B.",
        "2.",
        "Only FCs from rules involved in the parsing of the sentence s at the step 1 must be checked for elimination in view of generalisation.",
        "If the sentence exhausted the allocated resources for parsing, this optimisation does not apply, because it is not possible to tell in advance which rules might have been used if exhaustion had not been reached.",
        "3.",
        "A \"preview\" test which decides whether a whole rule partition is immediately learnable is highly improving the running time of the GR procedure on LinGO.",
        "This test means eliminating from 7 Oz+1 starts with the first sentence in Oi which causes over-parsing with gi+1.",
        "Obviously, Oo = O.",
        "g â€“ g2 in a single step all the constraints in a partition argument, respectively LHS substructure , for the rules previously identified as contributing to parsing the sentence s. At rule level, identifying the FCs that must be retained in 92+I may be further speeded up through halving the FC search space.",
        "4.",
        "As constraints in FCs in a rule FS are implicitly ordered by their position in the rooted acyclic graph representing the rule, another optimisation is possible: if all ancestors of a FC have been approved for elimination, than that FC may be eliminated immediately, assuming that its value is not coref-erenced in a subsequent partition argument of LHS , and this fact that can be determined in the preparation of the GR application.",
        "5.",
        "In our current implementation of the GR procedure, the exhaustion of resources allocated for parsing is controlled by a sentence-independent criterion.",
        "Currently, the allocated resources allow for the complete parsing of all sentences in the test-suite.",
        "But using such a criterion has the following drawback: if the procedure A causes strong over-parsing (possibly looping) for a sentence, then this fact is detected eventually only after all resources get exhausted.",
        "We suggest a better, punctual criterion for evaluating the consumption of allocated resources for parsing: i. initially, for each sentence in the given test-suite register the parsing time using 9; ii.",
        "if during the generalised reduction, parsing a sentence using the current generalised form of rules consumes more than n times the initially registered parsing time without finishing, then consider that that sentence is a resource exhausting one.",
        "Incorporating all but the last improvement mentioned above, the procedure B required 61 minutes on a Pentium III PC at 933MHz running Red Hat Linux 7.1.",
        "(All measurements reported in the next section were done on that PC.)",
        "Because the test-suite for training is processed incrementally only by the algorithm B, we will refer to it as the incremental GR algorithm, while the algorithm A will be called the non-incremental one."
      ]
    },
    {
      "heading": "4 Measurements and Comparisons",
      "text": [
        "When running the GR algorithm A, the reduction of the number of FCs in rule argument substructures of LinGO was impressive: 61.38% for key/head arguments and respectively 61.85% for non-key arguments (see Figure 1).",
        "The number of feature paths in rule argument substructures was reduced from 494 to 234, revealing that the decisive contribution to unification failures for LinGO on the CSLI test-suite is restricted to less than half of the feature paths in the arguments.",
        "We will call those feature paths GR-paths.",
        "This result complements the view provided by the QC technique: only 8.5% of the total feature paths in the arguments are responsible for most of the unification failures during parsing with LinGO.",
        "As expected, all QC-paths we are using in LIGHT for LinGO are among the GR-paths identified by the procedure A.",
        "While the average number of FCs eliminated from LinGO by the GR algorithm B and the parsing performances on the resulted grammar version are only slightly different than those provided by the algorithm A, the number of GR-paths retained in the rule arguments is significantly higher in the B case than in the A case.",
        "This is difference is explained by the test-suite fragmentation/ atomisation on which the design of the procedure B was based.",
        "The table in Figure 2 presents a snapshot on the most needed memory resources (and the reduction percentage) when parsing with full-form rule FSs, respectively GR-restricted rule FSs.",
        "The graphic in Figure 3 presents the evolution of the average rule reduction rate for getting the LinGO GR-version using the algorithm B.",
        "Figure 4 illustrates the reduction of the parsing time for the sentences in the CSLI test-suite when running the LinGO grammar with the GR-restricted rules.",
        "One can see in this last figure especially for the sentences requiring many unifications that although the number of unifications is increased, the total parsing time is reduced.",
        "The GR algorithm B may be generalised so to provide the inner loop (the call to the procedure A) not only one but several (n) sentences which are incorrectly parsed by 92+I.",
        "If so, the processing time for getting the GR-version of the given grammar will increase.",
        "However, as the table in Figure 5 shows, this is a convenient way to get (empirically) a smaller number of computed GR-paths.We expect this would be convenient for further research compiled unification of FSs using lookup tables using the GR-result or independently of this.",
        "8 8 Note that the running time of all GR algorithms can be significantly improved if, in the beginning of the GR application, all feature constraints not used when parsing the training test-suite are eliminated from the initial grammar.",
        "(Unfortunately, the current version of the LIGHT system cannot identify these unused FCs.)",
        "However, eliminating from start these FCs will bias the set of GR-paths to be computed.",
        "In general, FCs initially not used in parsing the training test-suite may however appear in the GR-restricted grammar version.",
        "We tested a GR-version of LinGO (produced when using the CSLI test-suite) on the aged test-suite also provided with LinGO.",
        "This test-suite requires in average 4.65 times more unifications per sentence than the CSLI test-suite.",
        "(The CSLI test-suite has 1348 sentences of average length of 6.38 tokens and the ambiguity 1.5.",
        "For the aged test-suite, the average length is 8.5 and the ambiguity 14.14.)",
        "Of the 96 sentences in the aged test-suite, 59 were correctly parsed, 3 exhausted the allocated resources, and 34 were over-parsed.",
        "The average parsing precision for the sentences non-exhausting the allocated resources was 83.79%.",
        "On LinGO, applying the algorithm A (only) to the most complicated sentence in the CSLI test-suite resulted in a 18% reduction of the number of FCs inside rule FSs.",
        "We obtained the same reduction rate (i.e., feature constraint elimination percentage) on LinGO, running 30 iterations using the simplest sentences in the CSLI test-suite.",
        "To produce a GR-version of LinGO using the aged test-suite for training, the procedure B needed 4h 44min, and the reduction rate was 65.60%.",
        "How",
        "ever, it took only 38min to further improve the previously obtained GR-version of LinGO (on the CSLI test-suite), using the aged test-suite, and the rule FS reduction rate went down only with 3.1%."
      ]
    },
    {
      "heading": "5 Further Work",
      "text": [
        "A.",
        "Compiled 2-step unification vs. interpreted 2-step unification: As already presented in Section 2, unifying a (passive item) FS with a rule argument FS may be seen as a two step/phase process: i. performing unification with the GR-restricted form of the rule argument FS, and if successful, ii.",
        "continuing unification with the GR-complementary rule argument substructure.",
        "The interesting thing here is that the second unification phase may be postponed.",
        "If parsing doesn't loop (and the allocated resources are not consumed), this second step is eventually needed only for full parses.9 Different strategies may be used to apply efficiently the unification's second phase.",
        "The simplest one is to emulate the second unification step as (on-line) type-checking via FS unfolding.10 (This is why this step may be called \"rule checking\".)",
        "Unfortunately, from the implementation point of view, rule/type checking doesn't commute with (further) rule application.",
        "This is why, when emulating the second unification step as type-checking, the parsing ambiguity engenders a lot of redundant work, namely retrieving the GR-values i.e., the values of the GR-paths in the FS to be checked, each time the second-unification step is applied on that FS.\" A simple solution that can be imagined to avoid this redundancy is to save those GR-values.",
        "But, if the GR-values have to be saved after each application of a rule i.e., the first unification step then it would be too much time-costly.",
        "This cost may simply exceed the cost for the redundant work that consists in retrieving the GR-values, because only a reduced percentage of items take usually part in full parses.",
        "Therefore we suggest the following trade-off: i. given a certain item eventually found on a full parse , perform the first application of the second unification step on that item as type checking; additionally, save the identified values of the GR-paths.",
        "12 ii.",
        "subsequent second-unification step operations performed on that item may be performed using the GR-complementary substructure of the rule, starting from the (previously) stored GR-values .13 B. Identifying exception FCs, and handling exception FCs typed-unification grammars: If for instance only successful unifications designate which rules must be checked during rule reduction, the number of eliminated FCs increases (ï¿½5% of all rule FCs in LinGO), but the parsing time with the GR form of the grammar might increase because the number of parse items produced may increase.",
        "Those FCs involved in the difference set \"successful\" unifications â€“ \"successful+failed\" unifications) may be seen as FC exceptions.",
        "We suggest the following handling of exception FCs in a two-step unification approach: if at least one parent such an \"exception\" FC in the GR form of the rule was passed in a successful unification, then trigger the application of the full form of the rule FS either immediately or at a certain higher phrase level.",
        "Exception FCs may thus constitute the object of a trade-off between over-parsing and parsing pruning, using the two-step unification strategy.",
        "GR would benefit if its application would be preceded by a procedure for automate detection of cycles in parsing with generalised forms of the input typed-unification grammar.",
        "Finally, integrating linguistics-specific knowledge and testing GR on other grammars and test-suites will provide additional insights into the use of this learning method.",
        "Conclusion: Generalised Reduction extends the view previously provided by the Quick-Check pre-unification technique [12] on feature paths inside rule argument FSs for large-scale typed-unification grammars.",
        "We showed that if the number of FCs in rule FSs may be highly reduced eventually through automate learning , then a simple technique called two-step unification can significantly 12 In compiled unification, those GR-values may be simply retrieved via the X variables which are indexing the nodes of the compiled FSs [1].",
        "13 The compiled form of the second unification step is obtainable by application of abstract program transformation techniques on the (non-SRC) compiled form of the rule FS.",
        "speed-up the parsing.",
        "We elaborated two GR algorithms for rule FSs, firstly a simple, non-incremental one, and then an optimised, incremental one.",
        "In the LIGHT system, to the 42% speed-up factor provided by QC on the LinGO grammar, GR may add a subsequent 23% reduction of the average parsing time.",
        "Acknowledgements: The LIGHT system was developed at the Language Technology Lab of The German Research Center for Artificial Intelligence (DFKI), Saarbrucken, Germany.",
        "The present work was done while the author was supported by an EP-SRC ROPA grant at the University of York."
      ]
    }
  ]
}
