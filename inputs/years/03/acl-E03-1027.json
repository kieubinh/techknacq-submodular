{
  "info": {
    "authors": [
      "Katrin Erk",
      "Joachim Niehren"
    ],
    "book": "Conference of the European Association for Computational Linguistics",
    "id": "acl-E03-1027",
    "title": "Well-Nested Parallelism Constraints for Ellipsis Resolution",
    "url": "https://aclweb.org/anthology/E03-1027",
    "year": 2003
  },
  "references": [
    "acl-C96-2116",
    "acl-P83-1020"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "The Constraint Language for Lambda Structures (CLLS) is an expressive tree description language.",
        "It provides a uniform framework for underspecified semantics, covering scope, ellipsis, and anaphora.",
        "Efficient algorithms exist for the sublanguage that models scope.",
        "But so far no terminating algorithm exists for sublanguages that model ellipsis.",
        "We introduce well-nested parallelism constraints and show that they solve this problem."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "Ellipsis phenomena are ubiquitous in natural language, e.g. in VP ellipsis, answers to questions, and corrections.",
        "They have been studied extensively (Sag, 1976; Williams, 1977; Fiengo and May, 1994; Dalrymple et al., 1991; Hardt, 1993; Kehler, 1995; Lappin and Shih, 1996) but remain difficult to handle.",
        "Among the problems to solve in connection with ellipsis are: determining the ellipsis antecedent, constructing a description of the ellipsis meaning, and resolving the ellipsis (i.e. actually determining its meaning).",
        "In this paper we focus on the problem of resolving ellipsis.",
        "We assume an analysis of its structure (source, target, and parallel elements) in the Constraint Language for Lambda Structures (CLLS) (Egg et al., 2001).",
        "CLLS is an expressive tree description language that provides a uniform framework for semantic underspecification covering scope, ellipsis, and anaphora.",
        "CLLS offers dominance constraints for modeling scope ambiguity in a similar way as previous approaches (Reyle, 1993; Pinkal, 1995; Bos, 1996), parallelism constraints for modeling ellipsis, and anaphoric links for modeling coreference.",
        "The interaction of ellipsis with scope (quantifier parallelism) is handled in a modular fashion.",
        "Enumerating scope readings becomes solving dominance constraints, while ellipsis resolution is reduced to solving parallelism constraints.",
        "Constraint solving subsumes satisfiability checking.",
        "Satisfiability of dominance constraints is NP-complete (Koller et al., 2001).",
        "But for modeling scope underspecification a sublanguage of constraints suffices.",
        "These constraints can be solved in low polynomial time (Althaus et al., 2002).",
        "Parallelism constraints are as expressive as the language of Context Unification, the satisfiability problem of which is prominent but still open (Comon, 1992).",
        "A lower bound is given by string unification (Makanin, 1977), for which the best known algorithm runs in PSPACE.",
        "So far, no terminating algorithm exists for sublanguages of CLLS that model ellipsis.",
        "The sound and complete semi-decision procedure for CLLS (Erk et al., 2002) can be used for this purpose but is slow in practice and not guaranteed to terminate.",
        "In the current paper we introduce well-nested parallelism constraints and so solve this problem for the first time.",
        "We argue that well-nested parallelism constraints are powerful enough to model ellipsis, in particular VP-ellipsis.",
        "We present a solver for well-nested parallelism constraints which decides satisfiability in nondeterministic polynomial time, and hence proves the NP-completeness of this problem, as dominance constraints are subsumed.",
        "We represent the meaning of sentences by lambda terms, which are seen as trees and then described by formulas of CLLS.",
        "The most basic formulas of CLLS are dominance constraints (Marcus et al., 1983).",
        "They model scope ambiguity in an underspecified way such that the solved forms of a constraint correspond precisely to the readings of a scopally ambiguous sentence.",
        "Next we look at a simple example to see how ellipsis is modeled in this setting.",
        "(1) Mary sleeps, and John does, too.",
        "Next we look at an idealized CLLS constraint that a syntax/semantics interface could produce for the above sentence.",
        "The graph of this constraint is given in Fig. 1 (b).",
        "The semantics of the source starts at node Xo, the semantics of the target at Yq.",
        "The source parallel element starts at X\\ and the target parallel element at Y\\.",
        "The graph contains an explicit description of the source semantics, but leaves the semantics of the target (mostly) unspecified.",
        "However the target semantics is described by the parallelism constraint Xq/X\\ ~ Yq/Y\\, which states that the tree segment Xq/X\\ has the same structure as the tree segment Yq/Yi.",
        "CLLS models coreference by anaphoric links.",
        "The interaction of ellipsis and anaphora (strict/sloppy ambiguity) is modeled by copying rules, which result in link chains equivalent to Kehler's (1995) analysis.",
        "For modeling more complex classes of ellipsis, generalizations of parallelism constraints are needed: parallelism segments with more than one hole, and jigsaw parallelism, (Erk and Koller, 2001), which is used for cases where the excluded semantic contributions are not subtrees, as in \"John went to the station, and every student did too, on a bike.\" The approach we describe in this paper extends canonically to segments with more than one hole.",
        "For jigsaw parallelism the extension remains a topic of further research."
      ]
    },
    {
      "heading": "3 Parallelism Constraints",
      "text": [
        "In the following sections we restrict ourself to the language of parallelism constraints: CLLS without anaphoric links.",
        "However our results extend to the whole language of CLLS.",
        "We comment on this further in Sec. 7.",
        "We first briefly recall the definition of parallelism constraints.",
        "Trees.",
        "We assume a signature £ = {/, g,...} of function symbols, each equipped with an arity ar(/) > 0.",
        "A tree is a ground term over S. A node of a tree can be identified with its path from the root down, expressed by a word over N. We use the letters u, v for paths.",
        "We write e for the empty path and uv for the concatenation of two paths u and v. A tree r consists of a finite set of nodes u E DT, each of which is labeled by a symbol LT(u) € S. Each node u has a sequence of children ul,... ,un EDT where n = ar(LT(u)) is the arity of the label of u.",
        "A single node s, the root of r, is not the child of any other node.",
        "A tree defines the following relations.",
        "The labeling relation u:f(u\\,... ,un) holds in t if LT(u) = / and Ui = ui for all 1 < i < n. The dominance relation u<*v holds iff there is a path v!",
        "such that uv!",
        "= v. Inequality ^ is simply inequality of nodes; disjointness u±.v holds iff neither u<*v nor v<*u.",
        "We combine dominance and inequality into strict dominance u<+v, which holds iff both u<*v and u^v.",
        "Parallelism.",
        "Intuitively, a segment is an occurrence of a subtree from which another subtree has been cut out.",
        "Definition 3.1 (Segments).",
        "A segment a of a tree t is a pair uq / u\\ of nodes in DT such that uq<*u\\ holds in r. The root of the segment is uq, and its The proper inner b~(a) = bT(a) – {ui} excludes the hole u\\.",
        "A segment a is empty iffuQ – u\\.",
        "A correspondence function is an isomorphism between two segments of some tree that have the same structure.",
        "Definition 3.2 (Correspondence function).",
        "A correspondence function between two segments a,/3 is a bijective mapping c : br(a) – > bT{(3) such that c maps the root of a to the root of (3 and the hole of a to the hole of (3, and for every u € b~(a) and every label f, u:f(ul,..., un) 45 c{u):f(c(ul),.",
        "..c(un)).",
        "Corresponding nodes bear the same labels and have corresponding children, except for the holes.",
        "Definition 3.3 (Parallelism relation).",
        "A parallelism relation in a tree t is a two-place relation a ~ (3 on segments of r such that a ~ f3 implies the existence of a correspondence function between a and (3.",
        "Constraint Language.",
        "We assume an infinite set of node variables X, Y, Z.",
        "Figure 2 shows the language of parallelism constraints.",
        "A constraint P is a conjunction of literals (for dominance, labeling, parallelism etc).",
        "We use the abbreviations X<+Y for X<*Y A X^Y and X – Y for X<*Y A Y<*X.",
        "For simplicity, we view inequality (^) and disjointness (_L) literals as symmetric.",
        "A segment term A is a pair of node variables XjY.",
        "A parallelism literal relates two segment terms.",
        "We write V(P) for the set of variables of P. The dominance part of P is P without its parallelism literals.",
        "A tuple (t, ~,<t) of a tree r, a parallelism relation ~ and a variable assignment a satisfies a constraint P iff it satisfies each literal, in the obvious way.",
        "In that case, (r, ~, a) is a solution, and (r, ~) a model of P. Dominance constraints can be drawn as constraint graphs, like in Fig. 1 (b).",
        "The nodes of the constraint graph are the variables of the constraint.",
        "Labels and solid lines indicate labeling literals, dotted lines represent dominance."
      ]
    },
    {
      "heading": "4 Well-Nested Parallelism",
      "text": [
        "Xq/X^Yo/Yx The idea behind well-nested parallelism constraints is to exclude overlap between all parallel segments in a solution.",
        "Definition 4.1 (inside, outside, overlap).",
        "Let a, outside(a,/3) holds in r iffb~(a) fl b~{(3) = 0.• or vq<*uq±-V\\.",
        "Otherwise, overlap(a, 0) holds in r. The image of a segment is its copy within another segment, as illustrated to the right: Definition 4.2 (Image).",
        "Let c : a – > (3 be a correspondence function and let 7 = u/v be inside a.",
        "Then c(j) = c(u)/c(v) is the image 0/7 under c. Parallelism constraints are very expressive - more expressive than is necessary for modeling ellipsis.",
        "In particular, overlapping parallel segments seem useless, but are difficult to resolve.",
        "Consider the example on the right.",
        "The parallel segments Xq/Xi and Yo/Y\\ must overlap but this is impossible.",
        "If one tries to build a solution, one quickly runs into an infinite repetition caused by the overlap.",
        "We have to prohibit overlap between images as well as \"original\" segments.",
        "Definition 4.3 (Image closure).",
        "A parallelism relation ~ is image-closed if for all correspondence functions c relating segments a ~ (5, and all 7 inside a: 7 ~ c(7).",
        "Definition 4.4 (Well-nested Models).",
        "Let ~ be an image-closed parallelism relation in the tree r. Then (r, ~) is a well-nested model iff for all segments a ~ /3 either inside(a,/3) or inside(/3, a) or outside (a, /?)",
        "holds in r. Definition 4.5 (Well-nested Constraints).",
        "A parallelism constraint is well-nested if it is unsatisfiable or permits a well-nested model.",
        "a sufficiently weak condition to ensure that we can still model ellipsis.",
        "We now show a few examples.",
        "In Fig. 1 (b), the two segments involved do not overlap, in fact, they have to lie in disjoint positions in any tree that matches the description.",
        "If we outline segments as boxes, the situation of Fig. 1 (b) can be sketched as the picture to the right.",
        "In a similar way, the following elliptical sentences can be modeled with CLLS constraints in which segment terms are properly nested:",
        "(2) John revised his paper before the teacher did, and so did Bill.",
        "(3) Mary can't go to Princeton in the fall, but she can in the spring, although if she does, those that expect her in fall will be very disappointed.",
        "(Sag, 1976)",
        "Sentence (2) is a famous many-pronouns puzzle.",
        "Figure 4 (a) shows a sketch of the two parallelisms that model the two ellipses.",
        "Both segments of the first parallelism are nested in the same segment of the second.",
        "The situation for sentence (3) is sketched in Fig. 4 (b).",
        "The right segment of the first parallelism is nested in the left segment of the second parallelism.",
        "So in both cases, the parallelism segments are either nonoverlapping or properly nested.",
        "These examples are typical of the constellations we found.",
        "It seems that many cases of ellipsis can be modeled without overlapping parallelism.",
        "Corrections may be problematic, although we have not yet managed to construct a definitive counterexample."
      ]
    },
    {
      "heading": "5 Solved Forms",
      "text": [
        "In this and the following section, we describe our algorithm for well-nested parallelism constraints.",
        "It makes a constraint dominance-solved, then solves one parallelism literal, then makes the constraint dominance-solved again, etc.",
        "In the current section we define the dominance solved forms that all dominance constraint solvers compute, and the well-nested solved forms that will be constructed by our solver.",
        "Dominance solved forms and constraint graphs.",
        "In Sec. 2 we have introduced constraint graphs informally.",
        "We now make this notion formal.",
        "The graph G(P) of a dominance constraint P is a directed graph (F(P),<*l±l<il+)<2l±|...).",
        "Its nodes are the variables of P, and it has two kinds of directed edges: We draw dominance edges (X, Y) G <* by dashed lines and children edges (X,Y) G <i by solid lines.",
        "(We leave out node labels as they are not essential here.)",
        "We write P h X<*Y if there exists a directed path from X to Y in the graph G(P).",
        "A dominance solved form is a dominance constraint P with the following properties for all X,Y G V(P):",
        "1.",
        "The constraint graph G(P) is a tree (no two incoming edges, acyclic, exactly one root).",
        "2.",
        "No variable is labeled twice in P. Well-nesting seems to be (b) in the spring \\m 3.",
        "Labeled variables in P don't have outgoing dominance edges in the graph G(P).",
        "4.",
        "If X1Y G P then neither P h X<*Y nor P h Y<*X.",
        "5.",
        "Not X^X G P and not X=Y G P. Proposition 5.1.",
        "A dominance solved form is satisfiable.",
        "Segment relations.",
        "Fig.",
        "5 defines the possible relationships between two tree segments.",
        "The formula seg(j4) that we use there states that the segment term A = X/X' denotes a segment: The inside and outside relations are nonproper so that the formulas mside(^4, B) Ainside(P, A) and inside(j4, B) A outside(j4, B) remain satisfiable.",
        "In the first case, equal(^4, B) follows, in the second case A must denote the empty segment.",
        "The overlap relation, however, is proper: We also use \"inside\" and \"outside\" to describe the relation between a segment term and a variable: inside(Z, A) =df inside(Z/Z, A) outside(Z, A) =df outside(Z/Z, A) Predecision.",
        "In a predecided constraint, the relative positions of segment terms are decided.",
        "(A dominance-solved form need not be predecided.)",
        "A constraint P is predecided if any two segment terms A,B in P satisfy the following conditions:",
        "Nesting graphs.",
        "In a predecided parallelism constraint, we can study the nesting of segment terms: The nesting graph N(P) of a constraint P is a directed graph whose nodes are the segment terms of P. The edges of N(P) are given by the relation < that we define recursively: Proposition 5.3.",
        "If P is satisfiable then the nesting graph N(P) is acyclic.",
        "Proof.",
        "Let (r, ~, a) \\= P be a solution of P. If A < B holds in N(P) then the inner bT(cr(^4)) has properly less nodes than bT(cr(P)).",
        "So if there existed a cycle A < ... < A in N(P) then bT(a(A)) would contain strictly less nodes than itself.",
        "□ The segment term A is outermost in P if A has no outgoing edges in the nesting graph N(P).",
        "Well-nested solved forms.",
        "Now we have all the notation we need to define well-nested solved forms, constraints from which a well-nested solution can be directly read off.",
        "We call P a well-nested solved form iff: 51 The dominance part of P is satisfiable.",
        "Proposition 5.4.",
        "Every well-nested solved form has a well-nested solution."
      ]
    },
    {
      "heading": "6 Constraint Solving",
      "text": [
        "In this section we present a constraint solver for well-nested parallelism constraints: Given a parallelism constraint P, it computes a finite set of well-nested solved forms with the same well-nested solutions as P. Dominance constraint solving and predecision.",
        "To compute predecide(P):",
        "• first compute dominance solved forms of P. • In each dominance solved form P', guess relative positions of variables with respect to the roots and holes of segment terms, unless they are implied by P' already.",
        "Discard P' if it contains overlapping segments.",
        "Substitute variables if necessary to fulfill condition Dl.",
        "• Again compute dominance solved forms to detect inconsistencies.",
        "Cut-and-paste simplification.",
        "Given a dominance solved and predecided constraint, we apply cut-and-paste to an outermost parallelism literal.",
        "The goal is to make one segment term blank.",
        "We need some notation.",
        "Given a constraint P with segment B let V(P, B) be the set of variables of B that must take their value inside B.",
        "The constraint cut(P, P) consists of all literals of P with variables in V(P, B), with the exception of constant labelings of the hole of B: Let para(P) be the conjunction of parallelism literals in P. Finally, we lift substitutions r : V' – > V with V' C V to a substitution s(r) on segment terms which only alters segment terms with variables solely in V'\\ The cut-and-paste simplification cap(P, B, A) is shown in Fig. 6.",
        "It requires that P A A^B is predecided.",
        "It first cuts out the contents of B, cut(P, P), from P and removes all parallelism literals.",
        "Then it makes B blank.",
        "In P3, two things happen: First, the contents of B are pasted over those of A.",
        "This is done by renaming the variables in cut(P, P) apart but mapping root and hole of B to those of A.",
        "Second, the parallelism literals are adapted by mapping segment terms inside B to segment terms inside A.",
        "Finally, the resulting constraint gets dominance-solved and predecided.",
        "Lemma 6.1.",
        "A predecided constraint P' – P A A^B where A, B are outermost in N(P') has the same models as A^B A V cap(P, B, A).",
        "solve(P) = solve the literal, and afterwards we only change % invariant: P is predecided parts of the constraint that are deeper nested than if P contains no parallelism literals then return {P}B.",
        "For the same reason, the acyclicity of the elseif N(P) is cyclic then return 0 else let P = A~B A P' with A outermost in N(P) This holds because parallel segments have the same structure, so in any model, the segment denoting A contains the structure described by A and the structure described by B.",
        "The complete algorithm.",
        "The solver for well-nested parallelism constraints is shown in Fig. 6.",
        "It applies cut-and-paste simplification exhaustively to parallel segment terms in P, always choosing an outermost parallelism literal next.",
        "Constraints with cyclic nesting graphs are discarded as they have no solution.",
        "Proposition 6.2 (Complexity).",
        "The computation of solve (P) terminates for all predecided P; emptiness of solve(P) can be checked in non-deterministic polynomial time.",
        "Recursive calls during solve(P) apply to constraints P' with properly fewer parallelism literals than P. All used subroutines terminate, and thus, the computation of solve(P) terminates.",
        "Emptiness of solve (P) can be decided by computing the elements of solve(P) non-deterministically: Whenever solve(P) works with sets of constraints, we choose a single element and continue it alone.",
        "The remaining deterministic steps require at most polynomial time.",
        "Proposition 6.3 (Correctness).",
        "IfP is predecided then solve(P) is a finite set of well-nested solved forms that has the same well-nested models as P. The dominance solver and predecision algorithm see to it that solve (P) is predecided and has a satisfiable dominance part.",
        "Cutting and pasting leaves the right segment term of a parallelism literal blank, and nothing can move into a blank segment term later because we work from the outside in: B is outermost at the point in time that we nesting graph is guaranteed.",
        "Well-nested models are preserved in spite of the changed parallelism literals because well-nestedness presumes image-closedness (Def.",
        "4.3).",
        "Theorem 6.4.",
        "Satisfiability of well-nested parallelism constraints is NP-complete.",
        "Propositions 6.2 and 6.3 prove satisfiability in nondeterministic polynomial time.",
        "NP-hardness already holds for dominance constraints (Koller et al., 2001) which are clearly well-nested."
      ]
    },
    {
      "heading": "7 An Example",
      "text": [
        "We demonstrate the algorithm on sentence (2), and we also show how ellipsis resolution and anaphora resolution may be integrated.",
        "Figure 8 shows the constraint for that sentence.",
        "The coreference is represented by the arrow from \"ana\" to \"john\".",
        "We have abbreviated \"revise\" and \"the teacher\" for better readability.",
        "bill lam Figure 8: \"John revised his teacher did, and so did Bill.\" paper before the Constructing a dominance-solved form includes resolving the scope of \"john\" and \"his paper\".",
        "We pursue the case where \"john\" takes wide scope.",
        "The resulting constraint is already predecided: It entails that the segment terms do not overlap, and it is clear for all variables whether they are inside the segment terms or outside.",
        "This is typical for constraints from the linguistic application.",
        "So although the problem is NP-hard in theory, in practice it is not necessary to guess relative positions.",
        "We first resolve the ellipses, ignoring the anaphora.",
        "We start by solving the outer parallelism X0/Xi~Y0/Yi by \"cut-and-paste\".",
        "The result is shown in Fig. 9 (a).",
        "For better readability we have abbreviated \"his paper\" to \"ana\".",
        "Now Zq/Xi^Wo/Wi is outermost.",
        "The result of applying \"cut-and-paste\" to it is shown in Fig. 9 (b).",
        "As no parallelism literals are left, solve(P) is this constraint plus Xq/X\\~Yq/Y\\ A Zq/Xi^Wq/Wi, a well-nested solved form.",
        "To read off a solution from the well-nested solved form, we take each parallelism literal and copy the contents of the left segment term to the right, this time working from the inside out.",
        "Finally we enumerate the anaphora readings, using the CLLS rules for the interaction of parallelism and anaphoric links.",
        "Figure 10 shows one of the 5 readings (Egg et al., 2001) that this yields.",
        "john lam John revised John's paper before the teacher revised John's paper, and Bill revised Bill's paper before the teacher revised Bill's paper."
      ]
    },
    {
      "heading": "8 Conclusion and Outlook",
      "text": [
        "We have introduced well-nested parallelism constraints, a fragment of CLLS for which satisfiability is decidable in nondeterministic polynomial time.",
        "We have presented an algorithm for computing well-nested solved forms, and we have shown how well-nested parallelism constraints can be used to model ellipsis.",
        "An interesting question to pursue is whether we can use an even less expressive fragment of parallelism constraints to model ellipsis."
      ]
    }
  ]
}
