{
  "info": {
    "authors": [
      "Anssi Yli-Jyra"
    ],
    "book": "Conference of the European Association for Computational Linguistics",
    "id": "acl-E03-1031",
    "title": "Describing Syntax With Star-Free Regular Expressions",
    "url": "https://aclweb.org/anthology/E03-1031",
    "year": 2003
  },
  "references": [
    "acl-C90-2040",
    "acl-C92-1027",
    "acl-J94-3001"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "Syntactic constraints in Koskenniemi's Finite-State Intersection Grammar (FSIG) are logically less complex than their formalism (Koskenniemi et al., 1992) would suggest:",
        "It turns out that although the constraints in Voutilainen's (1994) FSIG description of English make use of several extensions to regular expressions, the description as a whole reduces to a finite combination of union, complement and concatenation.",
        "This is an essential improvement to the descriptive complexity of ENGFSIG.",
        "The result opens a door for further analysis of logical properties and possible optimizations in the FSIG descriptions.",
        "The proof contains a new formula for compiling Koskenniemi's restriction operation without any marker symbols."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "For many years, various finite-state models of language (Roche and Schabes, 1997) have been used in surface-syntactic parsing.",
        "These models can process local syntactic ambiguity efficiently.",
        "However, because the formalism of Finite-State Intersection Grammar (Koskenniemi, 1990; Koskenniemi et al., 1992) allows full regular expressions, its parsing is sometimes inefficient (Tapanainen, 1997); many FSIG constraint automata can reduce ambiguity only after they have scanned the whole sentence.",
        "Regular expressions in FSIG can be viewed as a grammar-writing tool that should be as flexible as possible.",
        "This viewpoint has led to introduction of new features into the formalism (Koskenniemi et al., 1992).",
        "It is, however, very difficult to make any a priori generalizations of the structural properties of automata as long as we allow unrestricted use of regular expressions.",
        "A complementary view is to analyze the properties of languages described by FSIG regular expressions.",
        "We can carry out the analysis by checking whether the languages can be described with a restricted class of regular expressions.",
        "For many such classes of expressions, there also exists a group-theoretic characterization (Pin, 1986).",
        "Moreover, if the analyzed regular language has favorable properties, some problems, e.g. the string membership problem, can be solved faster by means of specialized algorithms.",
        "A language can be described with a star-free regular expression if it can be constructed from alphabet symbols by application of union (A U B), complementation (~A) and finite concatenation (AB), that is, without the Kleene closure (A*).",
        "The theoretical importance of this class of languages is supported by its characterization in terms of finite aperiodic syntactic monoids (Schiitzenberger, 1965) and by its definability in first-order logic over strings (McNaughton and Pa-pert, 1971).",
        "The class has also a lot of practical importance, because many languages in it admit extremely simple implementations (ibid.).",
        "The question of the star-freeness restriction on FSIG constraints has not been studied before, possibly because of the following observations:",
        "(i) An acyclic automaton representing readings of the sentence has a central role in FSIG parsing (Tapanainen, 1997).",
        "Star-freeness of the constraints is a minor restriction when compared to the finiteness of this language.",
        "(ii) If automata states are encoded as \"traces\" into strings, any regular language can be represented as a homomorphic image of a (local) star-free language (Medvedev, 1964).",
        "Such an encoding is possible in a two-level view of the FSIG framework (Koskenniemi, 1997), where the morphological reading of the sentence is a homomorphic image of a level representing syntactically annotated readings.",
        "(iii) Given a finite automaton or a regular expression, checking star-freeness of the described language is an intractable (see 2.2) problem.",
        "(iv) Automatical methods to derive star-free regular expressions from another representations procuce long and unintuitive expressions (Matz et al., 1995).",
        "From my point of view, these observations miss some important perspectives: Firstly (i), it is important to understand that a finite-state intersection grammar is also a description of a language with a structure of its own, independent of the acyclic sentence automaton.",
        "Secondly (ii), a realistic FSIG description is linguistically motivated and leaves little room for encoding of traces that could technically make the grammar star-free.",
        "Thirdly (iii) , heuristic methods can be used to solve many large star-freeness problems in practice.",
        "Fourthly (iv) , it is often possible to find star-free regular expressions that are short and illustrative, as it turns out in this paper.",
        "Any automaton recognizing a non-star-free language has a factor that induces a nontrivial permutation of the state space.",
        "For example, the parity language 0*(10*10*)* contains strings with an even number of occurrences of the factor \"1\".",
        "Intuitively, it seems improbable that similar counting constraints occur in natural language grammars.",
        "However, many regular expressions in Vouti-lainen's ENGFSIG (1994) involve the Kleene star.",
        "If we can explain why this does not affect the star-freeness of the language, we probably know more about the grammar itself.",
        "A significant contribution of this paper is the human-readable construction that rephrases ENGFSIG (Voutilainen, 1994) constraints without the Kleene star.",
        "To make the construction more systematic I first outline the framework of FSIG and define its star-freeness problem.",
        "After this I explore stars in the ENGFSIG description and reduce regular expressions in the description into their star-free equivalents.",
        "This approach extends to a closure property of the star-free regular languages under the restriction operator (of FSIG)."
      ]
    },
    {
      "heading": "2 Finite-State Intersection Grammar",
      "text": [
        "In this section I define a class of finite-state intersection grammars and explain the star-freeness problem specific to them.",
        "The FSIG framework developed here is based on the work of Koskenniemi, Tapanainen and Voutilainen (1992).",
        "I start by making my terminology on the strings described precise.",
        "In FSIG, a sentence is seen as a syntactically annotated string that is exemplified in the following string: This string of tags represents a possible syntactic structure for the sentence 'time flies like an arrow'.",
        "In the example, all the tags that start with an @-sign contribute to the syntactic analysis.",
        "In this example, the tags @@ and @ denote sentence and word boundaries, respectively.",
        "They delimit word analyses.",
        "For each word, the morphological analysis like \"time n nom sg\" precedes the tags that denote the syntactic function of the word.",
        "Syntactic tags specify, in this example, that the word 'time' functions as the subject (@subj), and the word 'arrow' is the complement for a preposition on the left (@p<<).",
        "An (unweighted) finite-state intersection grammar is a tuple G = Hp, B, W, F, C. d), in which• X^.X^/jXp-cX are disjoint alphabets,",
        "• B C Yjb is a set of delimiters that can appear before and after word analyses, • F C X^ is a finite set of tag strings that denote syntactic functions, and, • W C is a finite lexicon of morphological analyses, 1} is a set of finite-state constraints (regular languages) with the alphabet X, where • d G N is a finite bound for the maximum center-embedding depth in the constraints.",
        "The regular set D = B(WFB)+ is the domain of annotated strings.",
        "The language described by the grammar G is defined by the set L(G) = D n cf n cf • • • n cf, cf+1 • • • n c^.",
        "The first k constraints apply locally to each word, matching morphological analyses with potential syntactic functions.",
        "I call them local lexical constraints.",
        "All the constraints are expressed by means of FSIG regular expressions.",
        "Any symbol a G X, as well as any symbol set {ai, a,2,..., am}, ai, a2,..., am G X, are valid FSIG regular expressions.",
        "The language consisting of the empty string is denoted with e (or [ ] in the FSIG notation).",
        "In addition to the simple operators (Table 1) that combine expressions A and B, FSIG regular expressions make use of the restriction operator (Koskenniemi, 1983).",
        "It has the following syntax: The operands X, LC\\, RCn are FSIG regular expressions.",
        "The semantics of the whole expression is as follows: Whenever a substring i€l occurs in the string w, its context must match at least one of the patterns LCi _ RCi, i = l..n. When there are overlapping occurrences of the center X, the string w is rejected if any of the occurrences infringes the restriction (this is the strict interpretation of the operator).",
        "A center-embedded clause is an embedded clause that is not the leftmost neither the rightmost constituent in its matrix clause.",
        "In the ENGFSIG representation, a finite center-embedded clause is separated from its matrix clause with a pair of delimiters @<G B and 5>€ B. Sequential clause boundaries are denoted (ambiguously) with the delimiter @/€.£?.",
        "Special constants (Koskenniemi et al., 1992) are used to facilitate description of complex patterns involving the delimiter symbols Xb, XB d B,B = {@, @<, @>, @/, @@}.",
        "The intuitive meaning of the constants in Table 2 is as follows: The dot □ accepts tag sequences of T,\\y and Hp inside word analyses, the expression >••< accepts tag sequences of X^, X^ and @, and the constant @<> accepts a center-embedded clause with possible nested center-embeddings.",
        "The dot-dot^ differs from the expression >••< by accepting anything within the same clause, including center-embedded clauses.",
        "Finally, the dots ••• accepts anything at the same level of center-embedding.",
        "FSIG Current Semantics (explained in the text) The parameter d specifying the maximum depth of center-embedding is an essential element of the FSIG regular expressions.",
        "The bound is needed to compile constraints that contain the constant @<>, because the idealized language described by the constant @<> is context-free, in fact, a counter language in terms of Schiitzenberger (1962).",
        "In a practical implementation (Koskenniemi et al., 1992), the language @<> is approximated with a regular language.",
        "I denote the approximation using the parameterized expression @<>d (Figure 1).",
        "The generic expressions @<>\\ i G 1, 2, 3,..., as well as the constants EE] and are defined as follows: Finally, FSIG regular expressions may contain user-defined macros as subexpressions.",
        "They can have a constant value or take other expressions as arguments.",
        "• the language L is star-free, • there is a starfree regular expression, based on concatenation and the boolean operators, that describes the language L, • the syntactic monoid (McNaughton and Pa-pert, 1968) that is canonically assigned to the language L is aperiodic (Schiitzenberger, 1965), • the language L is definable in prepositional linear temporal logic (Kamp, 1968), and, • the language L is definable in a first-order logic that is interpreted over finite strings (McNaughton and Papert, 1971).",
        "Sometimes star-freeness of a language can be shown by means of closure properties of star-free languages.",
        "To start with, finite regular languages are star-free (especially 0, e, a, and T, where 0 denotes the empty set of strings, a € X, and V C X) The Kleene closure of any subset r C Sis also star-free, because T* = 0[X - T]0.",
        "If A and B are star-free languages, then we know that at least the following languages are star-free (McNaughton and Papert, 1971): It is also possible that the language of a regular expression is star-free although the expression contains the Kleene star operator.",
        "Therefore, the method based on the properties of the syntactic monoid of the language is important.",
        "The syntactic monoid is usually difficult to compute manually, and some programs, e.g. AMoRe (Matz et al., 1995) are designed to facilitate these computations and aperiodicity testing.",
        "The aperiodicity problem is, however, computationally intractable (PSPACE-complete) both for regular expressions (Bernatsky, 1997) and for deterministic automata (Cho and Huynh, 1991).",
        "It is often possible to heuristically prove the star-freeness property by inventing an equivalent star-free expression.",
        "Proposition 2.",
        "In order to show that a finite-state intersection grammar G is star-free, it is sufficient to show that:",
        "• the domain B{WFB)+ is star-free, • the local lexical constraints cf,cf,...,cf are star-free, • the constants □ ,ED ,1 ••• I .",
        "!>••< , @<> and other subexpressions in the constraints are star-free, and, • the star-free languages are closed under the operators that combine the subexpressions into the constraints cf+1, cf+2, ..., cf. 3 The reduction of ENGFSIG into star-free expressions",
        "Because the alphabets Tb.Tw and Tp are disjoint and the sets B, W and F do not contain an empty string, the set S – X^X^X^X^)\"\" can be expressed as [T^TWT*] n [X*XFX^] n ~$[XF[X – Tp – Tib]].",
        "The remaining question is, whether the sets B, W and F are star-free languages.",
        "In the case of ENGFSIG they are finite, and therefore, each of them is expressible with a star-free regular expression.",
        "Hence the iteration in B{WFB)+ translates to S n [BTWT*] n [T*TFB] n~$[TB[T*v-W]TF] n ~$[T^TF-F]TB] n -Sp^X^-SjX^] The relation between the morphological analyses and the allowed syntactic functions can be implemented either with one or two levels (Koskenniemi, 1997) in a practical FSIG parser.",
        "In the grammar G, this relation corresponds to a set of lexical constraints cf,cf,..., cf.",
        "In the case of ENGFSIG, the local lexical constraints reduce to a boolean combination of languages of the form $t, t € Y,\\y USj?, because the tag positions in the strings of W and F are fixed by a convention that partly reflects the simple morpheme structure of English words.",
        "Let the lexical constraints in conjunction with the domain D describe the set B {LwFB)+, Lwf C WF.",
        "The conformance to this property is enforced by the following star-free constraint: It is pretty easy to see that the expressions @<>° and go are star-free.",
        "I managed to find an inductive derivation for general case @<>l, i £ 1, 2, 3,....",
        "The following defines the dependent constants @<> \\ – I' and ED % as well as the constant >••< with star-free operators: The version of ENGFSIG studied contains 983 subexpressions (of 221 types) containing the Kleene star operator.",
        "Each iterated subexpression seems to have two components: (i) a domain of iteration which specifies what kind of unit is iterated, and (ii) a condition which specifies the necessary property for each unit.",
        "By unifying every left-oriented domain of iteration (e.g. □ @) with the corresponding right-oriented domain (e.g. @ □ ), I identified four variants of domains (Table 3).",
        "Domain Freq.",
        "Iterated unit (R) Conditions The domain and the condition are seldom separated in a ENGFSIG regular expression.",
        "Instead, the condition is usually inside the Kleene closure that specifies the domain.",
        "For example in the subexpression [@ □ @>aQ ]*, the domain is a word preceded by a word boundary (@ □), and the condition is that each word must be an adjective-pre-modifier.",
        "Iteration of the right-oriented domains corresponds to the following star-free regular expressions: $@<@/e* n e* @/$@> ]] ENGFSIG associates typically very simple conditions with the domain of iteration.",
        "In the star-free form of a starred expression, the domain of iteration and the associated condition are defined separately and then combined under the intersection operator.",
        "In the following, I give some examples of possible conditions and how they are represented in separation from the domain: @advl\" satisfies the constraint \"n □ @advl every □ @>n @ [□ @>nq @]* □ _ \".",
        "In [□ @>nE @]*, the domain of iteration is Lword> a reverse counterpart to -Rworu-The corresponding condition is as follows:",
        "~[ ${@, @>n} e e*] n~$[e $@>n @].",
        "• Conditions often specify the absence of a word (or a tag).",
        "The closure [[□ n $det] @>n[Q n $det] @]* can be simplified as follows: [□ @>nQ e]* n $det.",
        "• If the domain of iteration is the clause ^clause, then the condition may require that each clause contains a main verb (@mv).",
        "Such a condition translates as follows: ~[e* @/ ${@/;mv}] n~$[@/ $mv @/].",
        "• Sometimes the iterated clause i?ciause is not allowed to contain center-embeddings.",
        "This condition reads: ~${@<, @>}.",
        "ENGFSIG contains only 12 examples of nested Kleene stars.",
        "One example is in the following: In all these cases, the inner application of Kleene star can be expressed as a condition applying to the domain of the outer iteration level.",
        "In Section 3.2, I have described how the local lexical constraints can be represented without the Kleene star operator.",
        "In addition to these, there are 2657 more complicated constraints.",
        "The schematic equivalences presented in Sections 3.3 -3.4 can transform 1554 of these into a star-free form.",
        "However, there still remain 1103 constraints that use the restriction operator (=>).",
        "To complete the proof of the star-freeness of ENGFSIG, I show that star-free languages are closed under the restriction operation (as in FSIG).",
        "Compilation of the restriction operator (as in Two-Level Morphology) has been solved by means of marker symbols and transducers (Kart-tunen et al., 1987; Kaplan and Kay, 1994).",
        "To compile the restriction as in FSIG, Tapanainen (1992) used also a method that is perhaps most easily described with transducers.",
        "When there is only one context LC\\ _RC\\, the restriction operator (as in TWOL and in FSIG) reduces to the following star-free formula (Karttunen et al., 1987): E*LCi X 0n0 X RCiT* I generalize this special case in the following new formula for n contexts LCi _ RCi.",
        "i – l..n: S* if i e J; 0 otherwise; The above formula does not use markers, transducers, nor the Kleene star.",
        "Intuitively, it says that the string is rejected on the basis of the match of X, if each of the n contexts around a match of X fails at least on one side (cj>(i, S – T) ... T)).",
        "There are 2n different ways {T = {},{1},{2}, {1, 2}, ..{1, 2,..., n}) to choose a failing side for every member in the set of contexts LCi _ RCi, i – l..n."
      ]
    },
    {
      "heading": "4 Experiments",
      "text": [
        "I initially extracted the starry subexpressions from the ENGFSIG grammar and classified them using a Perl script.",
        "At a later stage, I developed a regular expression preprocessor that automated many tasks.",
        "The results were compared across different formulas in order to find possible differences.",
        "The preprocessor could output a script where operands for each restriction operator were defined (and compiled into automata) before the operator was applied.",
        "Every bunch of operand definitions was followed by a formula that implemented the restriction operator with a required number of contexts.",
        "In order to reduce the number of contexts, I gathered unilateral contexts with the preprocessor.",
        "I developed and tested the presented equivalences using the Xerox Finite-State Tool (v.7.4.0).",
        "My new formula for the restriction operator produced automata that were equivalent to the output of Tapanainen's rule compiler (Koskenniemi et al., 1992), which was actually used during the development of ENGFSIG.",
        "I also compared these automata to the ones that would result from using Kaplan and Kay's (1994) method and some variants of it.",
        "Some differences in the results suggest that they use another interpretation for the (compound) restriction operator.",
        "According to that interpretation, overlapping centers are not restricted conjunctively, sometimes resulting in a bigger language.",
        "Simple optimizations in the formula for an n-context restriction made a notable difference in compilation time.",
        "When I compiled a 7-context restriction (this was a striking exception in ENGFSIG), an unoptimized version of my formula was very slow (9 min.)",
        "compared to a transducer-based method (34.8 sec), while an optimized version was roughly as efficient (35.5 sec).",
        "In this example, the number of (outer) conjuncts in my formula was quite high (2).",
        "The new formula is at its best in the typical case when the number of contexts is smaller than seven.",
        "I did not make experiments with starry subexpressions because they are relatively small and fast to compile anyway."
      ]
    },
    {
      "heading": "5 Discussion",
      "text": [
        "The schematic equivalences presented suggest alternative ways to compile some special cases of Kleene star.",
        "The compilation of Kleene closures into deterministic automata involves determinization that is based on the subset construction.",
        "On the basis of the equivalences presented here it may be possible to identify more cases for which we can find specialized determinization algorithms (Mohri, 1995).",
        "The new formula for the restriction operator has one extra advantage over compilation methods that are based on marker symbols and transducers (Kaplan and Kay, 1994).",
        "In these methods, the markers have to be eliminated from the final language.",
        "Usually this requires determinization using the costly subset construction.",
        "The new formula does not involve markers and it therefore only needs to apply determinization at smaller sub-formulas.",
        "Methods that reduce the size of constraint automata can contribute to an efficient solution for the FSIG parsing problem (Koskenniemi, 1997) by producing a smaller representation for the grammar.",
        "Tapanainen (1992) has developed special optimizations that apply to automata during their construction.",
        "The current paper suggests manipulation of FSIG regular expressions before they are compiled into deterministic automata.",
        "The value of this approach is based on the fact that the construction of a deterministic automaton from a regular expression is, in the worst-case, exponential.",
        "The current paper provides the FSIG framework with a grammar semantics that is completely based on regular languages and a one-level representation.",
        "Our new formula for an n-context restriction operator does not make use of transducers (Tapanainen, 1992) nor markers.",
        "In the absence of such complications, axioms for regular expressions (Antimirov and Mosses, 1994) become much more usable and may lead to essential simplifications in the individual constraints (see Section 4) and in the grammar altogether.",
        "The new formula for the restriction operator enables us to split an n-context restriction into 2\" separate constraints (under intersection), each of which can be simplified, compiled and applied separately.",
        "It is also possible to compile the FSIG regular expressions directly into a single alternating finite automaton where intersection and complementation can occur inside the grammar automaton.",
        "Manipulation of alternating automata (Vardi, 1995) may help us to avoid the state explosion that is the main problem with deterministic automata in FSIG parsing (Tapanainen, 1997).",
        "Finally, the main contribution of this paper is to show that ENGFSIG describes a star-free set of strings.",
        "It seems probable that this narrowing could be added to the FSIG framework in general.",
        "The computational complexity of many important decision problems for the FSIG grammars remains intractable in spite of the star-freeness property (Sistla and Clarke, 1985).",
        "Nevertheless, the improved descriptive complexity allows us to simplify some algorithms; we can, for example, implement the grammar with the class of loop-free alternating automata (Salomaa and Yu, 2000).",
        "Moreover, the restriction also means that the grammar is definable in a first-order logic that is interpreted over finite strings (McNaughton and Papert, 1971).",
        "This simplification is relevant to reconstruction of FSIG and similar finite-state models with logical specifications (Vaillette, 2001; Lager and Nivre, 2001)."
      ]
    },
    {
      "heading": "6 Conclusion",
      "text": [
        "In this paper, the ENGFSIG description as a whole is shown to be a regular expression that reduces to a combination of union, complementation and finite concatenation.",
        "The current work has theoretical and practical consequences in processing of ENGFSIG (or similar) descriptions, context restrictions in the Two-Level Morphology, and Kleene closures in wider domains."
      ]
    },
    {
      "heading": "Acknowledgments",
      "text": []
    }
  ]
}
