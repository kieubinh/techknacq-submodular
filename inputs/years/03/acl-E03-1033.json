{
  "info": {
    "authors": [
      "Christophe Costa Florencio"
    ],
    "book": "Conference of the European Association for Computational Linguistics",
    "id": "acl-E03-1033",
    "title": "Rigid Grammars in the Associative-Commutative Lambek Calculus Are Not Learnable",
    "url": "https://aclweb.org/anthology/E03-1033",
    "year": 2003
  },
  "references": [
    "acl-C02-1111"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "In (Kanazawa, 1998) it was shown that rigid Classical Categorial Grammars are learnable (in the sense of (Gold, 1967)) from strings.",
        "Surprisingly there arc recent negative results for, among others, rigid associative Lambek (L) grammars.",
        "In this paper the non-learnability of the class of rigid grammars in LP (Associative-Commutative Lambek calculus) and LP0 (same, but allowing the empty sequent in derivations) will be shown."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "The question of learnability of categorial grammar (CG) was first taken up in (Kanazawa, 1998).",
        "Categorial grammar is an example of a radically lexicalized formalism, the details of which will be discussed in Section 2.",
        "Kanazawa studied only subclasses of Classical Categorial Grammar, results for subclasses of Lambek grammars can be found in (Foret and Nir, 2002a), (Foret and Nir, 2002b).",
        "The model of learnabilit}' used here is identification in the limit from positive data as introduced in (Gold, 1967).",
        "In order to show the non-learnability of rigid LP and LP0 we construct so-called limit points (to be defined in Section 3) for these classes."
      ]
    },
    {
      "heading": "2 The Lambek Calculus",
      "text": [
        "Categorial grammar originated in (Aj-dukiewicz, 1935) and was further developed in (Bar-Hillel, 1953) and (Lambek, 1958).",
        "This paper will only give a brief introduction in this field, (Casadio, 1988) or (Moortgat, 1997) offers a more comprehensive overview.",
        "A categorial grammar is a set of assignments of types to symbols from a fixed alphabet E, the types are either primitives or are composed from types with the binary connectives /, \\, •.",
        "Rules specify how types arc to be combined to form new types.",
        "A string is said to be in the language generated by grammar G (written as s £ L(G), L is known as a naming function) iff G assigns types to the symbols in the string such that these types can be combined to derive the distinguished type, normally written as s or t. Definition A domain subtype is a subtype that is in domain position, i.e. for the type ((A/B)/C) the domain subtypes are B and C. For the type (C\\(B\\A)) the domain subtypes are C and B.",
        "A range subtype is a subtype that is in range position, i.e. for the type ({A/B)/C) the range subtypes are (A/B) and A.",
        "For the type (C\\(B\\A)) the range subtypes are (B\\A) and A.",
        "In an application A/B,B h A or B,B\\A h A the type B is an argument and A/B and B\\A are known as functors.",
        "In (Foret and Nir, 2002a) it was shown that rigid grammars (grammars that assign only one type to any particular symbol) in L are not lcarnablc from strings.",
        "They made use of the fact that in L the axiom A/A, A/A ^ A/A (and in L0 the axiom B/(A/A) – > B) holds.",
        "These axioms cause contraction-like phenomena that allow the existence of limit points even in a class of rigid grammars.",
        "They defined rigid grammars Gn, n € N and G* such that L(Gn) = c{b*a*)n and L(G*) = c{a,b}*.",
        "For Gn the number of alternations between a sequence of a's and a sequence of b's, (both of unbounded length) is bounded.",
        "This approach is not readily applicable to either LP or LPq grammars, since commutativity removes the bound on the number of alterations in L(Gn).",
        "Instead we exploit an assymmetry inherent in the Lifting operation.",
        "As noted in (Lambek, 1988), Lifting is a closure operation as it enjoys the following properties (we write AB for both B/(A\\B) and (B/A)\\B): A – >AB, (AB)B - AB, if A -> G, then AB -> CB.",
        "Note that in general AB -/-> A, which implies that, during a derivation, once an atomic type is lifted it cannot be lowered anymore.",
        "The calculus LP was introduced in (van Benthem, 1986) because of its natural relation with a fragment of the lambda calculus, but there is also linguistic motivation for introducing commutativity.",
        "Also see (van Benthem, 1987) .",
        "All permutation closures of context-free languages are recognizable in LP (van Benthem, 1991).",
        "Also note that the languages expressible in L and NL are precisely the context-free languages (sec (Pcntus, 1993; Kandulski, 1988) , respectively).",
        "These formalisms do not have the necessary expressive power to capture natural languages (which require at least mild context-sensitivity).",
        "Therefore more expressive variants have been proposed, for example the multi-modal variant (MMCG) where applicability of postulates is controlled through the use of modal operators in the lexicon.",
        "This variant, without restrictions on postulates, is a Turing-complete system (Carpenter, 1999).",
        "Recently some restrictions on postulates have been proposed that restrict expressive power to (mild) context-sensitivity, see (Moot, 2002).",
        "The presentation of LP used here is due to (Kurtonina and Moortgat, 1997), it takes NL (Figure 1) as the 'base logic' and adds associativity and commutativity postulates (Figure 2).",
        "This facilitates some of the steps in our (syntactic) proofs, and makes the derivations more explicit."
      ]
    },
    {
      "heading": "3 The construction of a limit point",
      "text": [
        "Definition Existence Of A Limit Point A class C of languages is said to have a limit point if and only if there exists an infinite sequence (ijn)neN of languages in C such that I0cLiC...cL„C... and there exists another language L in C such TTie language L is called a limit point of C. Lemma 3 Ifh(Q) has a limit point, then Q is not (non-effectively) learnable.",
        "In other words, when a class has a limit point it is not learnable because the input to the learner can never provide enough information to justify convergence.",
        "Thus even allowing a non-computable learning function makes no difference in such a case, and establishing the existence of a limit point provides a very strong negative result.",
        "Definition 4 For n = 0, let Gn be defined as c i – ► a\\aaand let G+ be defined as c/c.",
        "A final word on notation: a,a',r... denote strings, and apenn is the function that yields the set of all permutations of a. Concatenation of strings will be denoted with +, and h will be taken to mean I~lp (or I~lp0 , depending on context).",
        "Lemma 5 The language generated by any Gn, n € N, is |J{(s, a, c*+1)perm |0 < i < n}.",
        "1.",
        "It is trivial to show that (s,a,c)perm C L(G0).",
        "a\\aa to c. With right-elimination we get s o c h s/a%fl°...a° (and by commutation cos h s/ a' • aa ... aa).",
        "Grammar Gn assigns a* a... a to a.",
        "Now, the derivation TreeLift – can be combined into derivation TreeLiftn through n times dot-introduction to yield hypox o... o hypo„ h aa • aa ... aa.",
        "Using TreeLiftn as an argument for right-elimination, with (s o c)perm h s/aa •aa^...aay as functor, we get (soc)permo(hypo1o.. .ohypon) h s. With n times dot-elimination, the last of which takes a h a • a ... a as argument, the hypotheses 1 through n can be eliminated, yielding (s o c)perm o a h s. Using commutation and association we also get a o (s o c)Perm |- S) ctc, so Grammar Gn assigns a\\aa to c, so the derivation TreeCElim = derives the same type as TreeLift docs.",
        "Since i (0 < i < n) TreeLift deductions can occur in a derivation for Gn, by replacing them with TreeCElim we get i+l times c in the yield of the complete deduction.",
        "With application of associativity and commutativity rules the resulting sequent can be rearranged so that all hypotheses occur in one minimal subsequent (for example, s o (((hypox o c) o hypo2) o ((c o hypo3) o c)) h s becomes s o ((hypo!",
        "o (hypo2 o hypo3)) o (c o (c o c))) h s), which can then be replaced through dot-elimination by a.",
        "Thus (so c)perm o c(i times) o a h s is obtained, and any permutation of this as well, by commutativity and associativity.",
        "Thus U{(s,a,ci+1)Perm |1 < i < n} C L(G„), for any n G N+.",
        "Together with the result for L(Gn), this shows that |J{{s, a, ci+1)perm 0 < i < n} C L(Gn), for any n G N. 2.",
        "It is trivial to show that L(Gn) C (s,a,c}pcrm.",
        "We prove that for any n G N+, L(Gn) C U{(s,a,cl+1)perm |0 < i < n}: For a string a to be included in a language generated by an LP grammar G, G must assign a type Tn to a symbol in a that has s as range subtype.",
        "For any n, Gn assigns such a type only to the symbol s. Furthermore, s occurs only once, as range subtype, in this type.",
        "Hence s must occur (only) once in every sentence in L(Gn).",
        "All derivations for a string in L(Gj>i) will start with ass, coram s Oct h s/TDl ass, comm.",
        "where a + a is some permutation of a\" + a'\" (either a\" or a'\" may be empty).",
        "Since Tn has as domain subtype TD\\ = a\\(aa), Treea must yield a\\(aa).",
        "This tree can begin with a sequence of applications of the ass and comm.",
        "rules (which only makes sense if a is not a single symbol), there are some possibilities after this: (b) use of This implies that the type aa is derived from the sequent one step up.",
        "This type is a range type only of TD out of all types in G„>i.",
        "Therefore this derivation can [hypo ha] cha\\(aa) end in hypo o c h aa , which, as far as string language is concerned, is equivalent to 2a.",
        "The type aa can be interpreted as either a/(a\\a) or (a/a)\\a, so more introduction rules can appear.",
        "All possibilities lead to some range subtype unique to TD\\ (with respect to the types found in Gn), therefore c h a\\(aa) must be in Treea.",
        "All the other types found in this tree must be introduced by hypotheses, and all the hypotheses introduced have to be eliminated within Treea, and all these cases are in fact equivalent to 2a.",
        "a , every sentence in L(G„) must contain at least one symbol to which Gn assigns a type with a as range subtype, the only symbols that qualify are a and c. Given that there arc no range subtypes TD\\ to be found in Gn, Tree0 must be of the form Tree2T2ha\" where a' – t\\ + ... + rn.",
        "Symbol a is assigned a • a ... a, using hypothetical reasoning and applying the Lifting rule n times this derives TD„, hence it can be BNote however that this derivation is not in normal form as defined in (Tiede, 1998).",
        "Since Tn has only one other domain subtype TD\\ = ass, comm.",
        "is a subset of the language.",
        "This case corresponds with all trees Tree\\... Treenbeing of the form TreeLift where the hypothesis hypo is cancelled (together with n – 1 other hypotheses) lower in the tree by n times application of [•/] where the last application has argument a h a • q^.",
        ".",
        ".a.",
        "Since aa = a/(a\\a) (the case aa = (a/a)\\a can be dealt with in similar fashion) , any Tree.i is cither of the form which given the type-assignment s in G„>i can only be a (non-normal form) variant of TreeLift, or which, given the type-assignments in Gn>i, is only compatible with the derivation TreeCElim,.",
        "Using hypothetical reasoning and applying the Right Elimination rule i < n times, we can obtain i times the type aa.",
        "All remaining a's can be lifted to obtain n aals.",
        "Thus, for any n G N+, U{(s, a, ci+1)pcrm I 0 < i < n} Ç L(Gn), and with the result for L(Gq), it follows that for any n G N, U{(s, a, ci+1)perm I 0 < i < n} Ç L(Gn).",
        "Lemma 6 The language generated by G+ is (s,a,c+)perm.",
        "and c/c to c. Since in LP the axiom A/A, A/A ->• A/A holds, it follows immediately that co... c h c/c, thus with right-elimination we get soc+ h s/a.",
        "Grammar G+ assigns a to a, thus (soc+)oa h s. By associativity and commutativity any permutation of this sequent will also derive s, thus any string in (s, a, c+)perm can be derived.",
        "2.",
        "We show that L(G+) C (s, a, c+)perm: For a string a to be included in a language generated by an LP grammar G, G must assign a type T+ to a symbol in a that has s as subtype.",
        "Grammar G+assigns such a type only to the S3anbol s. Furthermore, s occurs only once, as range subtype, in this type.",
        "Hence s must occur (only) once in every sentence in L(G+).",
        "Since T+ has only two domain subtypes TD+ – a and TD\\ – c/c, every sentence in L(G+) must contain at least one symbol to which G+ assigns a type with a as range subtype, the only symbol that qualifies is a.",
        "Thus all derivations for a string in this language must start with rr\" o s o a'\" h s where a' o a is some permutation of a\" + a'\" (a\" and a\" may be empty).",
        "Grammar G+ assigns TD\\ as range subtypes to c, so Tree+ can simply be c h c/c.",
        "Some reflection will show that other possibilities must be of the (normal) form: This shows that there must be one or more c's in every sentence in L(G+).",
        "Thus the language generated by G+ is (s, a, c+)perm.",
        "□ Theorem 12 The class of rigid LP0 grammars has a limit point.",
        "Proof: From Lemma 5 it follows that the languages L(Gn) C L(Gi) C ... form an infinite ascending chain.",
        "Corollary 14 The class of rigid MILL grammars is not (non-effectively) learnable from strings.",
        "In contrast to Foret and Le Nir's results, it is still an open question whether the class of unidirectional rigid LP grammars is learnable; the class under consideration is bi-directional, but only because lifting is necessary for the construction to work.",
        "Also note that the construction depends on the presence of introduction and elimination rules for the product, and cannot be (easily) adapted for a product-free version of LP.",
        "In the case of LP0, i.e. LP allowing empty sequents, things are slightly less complicated, since the axiom D/(A/A) – > D holds.",
        "Consider the following construction: Definition 9 For any fi£N, let Gn be defined as and let G* be defined as c 1 – > c/c.",
        "Lemma 10 The language generated by any Gn, n G N, is U{{s, a, c*)perm 0 < i < n}.",
        "The proof is very similar to the proof of Lemma 5.",
        "Lemma 11 The language generated by G* is (s,a,c*)perm.",
        "The proof is very similar to the proof of Lemma 6.",
        "The proof is similar to the proof of Theorem 7; Lemmas 10 and 11 imply the existence of a limit point.",
        "This corrolary gives an easy result for multiplicative intuitionistic linear logic (MILL), which is an alternative formulation of LPq:"
      ]
    },
    {
      "heading": "4 Conclusion",
      "text": [
        "We have shown that the classes of rigid LP and LP0 grammars have limit points and are thus not learnable from strings.",
        "These results, as well as the negative results from (Foret and Nir, 2002a) and (Foret and Nir, 2002b) arc quite surprising in the light of certain general results in learnability theory.",
        "To quote (Kanazawa, 1998), page 159: Placing a numerical bound on the complexity of a grammar can lead to a non-trivial learnable class.",
        "[... ] Together with Shinohara's ((Shinohara, 1990a), (Shinohara, 1990b)) earlier result [context-free grammars having at most k rules are learnable], this suggests that something like this may in fact turn out to be typical in learnability theory.",
        "The negative results for Lambek-like systems show that this is not the case.",
        "Even placing bounds on the complexity of the types appearing in the grammar may not help: rigid L is not even learnable when the order of types is bounded to 2.",
        "The most important (subclass of) L-variant for which the question of learnability is still open is (rigid) NL.",
        "Results on the strong generative capacity of NL can be found in (Tiede, 1999), where it is suggested that they may help in establishing learnability results.",
        "A final thought concerns the claim in (Foret and Nir, 2002a) and (Foret and Nir, 2002b) that these results demonstrate the paucity of 'flat' strings as input for a learner.",
        "They suggest that enriched input (i.e. some kind of bracketing or additional semantic information) may overcome this problem, which is certainly an interesting approach.",
        "However, one could also take another approach to constructing learnable classes within some Lam-bek(like) calculus by restricting the use of postulates.",
        "The multimodal approach (see for example (Moortgat and Morrill, 1991)) offers a way of doing this in the lexicon.",
        "The viability of this approach is of course dependent on the learnability of the class of rigid NL grammars.",
        "Even given a positive result for this class it may prove to be very hard to find characterizations of learnable classes of grammars within the multimodal paradigm."
      ]
    },
    {
      "heading": "5 Appendix: Derivations",
      "text": [
        "The following list of derivations was obtained using Grail, included to give a feel for the kind of derivations our construction allows.",
        "The list exhaustively enumerates all (normal form) derivations and corresponding lambda terms for the string sac given the grammar G2 and calculus LPa.",
        "Kasimir Ajdukiewicz.",
        "1935.",
        "Die syntaktische Konnexität.",
        "Stud.",
        "Philos., 1:1-27.",
        "Yehoshua Bar-Hillel.",
        "1953.",
        "A quasi-arithmetical notation for syntactic description.",
        "Language, 29:47-58."
      ]
    }
  ]
}
