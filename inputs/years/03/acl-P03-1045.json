{
  "info": {
    "authors": [
      "Denis Bechet",
      "Annie Foret"
    ],
    "book": "Annual Meeting of the Association for Computational Linguistics",
    "id": "acl-P03-1045",
    "title": "k-Valued Non-Associative Lambek Categorial Grammars Are Not Learnable from Strings",
    "url": "https://aclweb.org/anthology/P03-1045",
    "year": 2003
  },
  "references": [
    "acl-C02-1111"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "This paper is concerned with learning cat-egorial grammars in Gold’s model.",
        "In contrast to k-valued classical categorial grammars, k-valued Lambek grammars are not learnable from strings.",
        "This result was shown for several variants but the question was left open for the weakest one, the non-associative variant NL.",
        "We show that the class of rigid and k-valued NL grammars is unlearnable from strings, for each k; this result is obtained by a specific construction of a limit point in the considered class, that does not use product operator.",
        "Another interest of our construction is that it provides limit points for the whole hierarchy of Lambek grammars, including the recent pregroup grammars.",
        "Such a result aims at clarifying the possible directions for future learning algorithms: it expresses the difficulty of learning categorial grammars from strings and the need for an adequate structure on examples."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "Categorial grammars (Bar-Hillel, 1953) and Lambek grammars (Lambek, 1958; Lambek, 1961) have been studied in the field of natural language processing.",
        "They are well adapted to learning perspectives since they are completely lexicalized and an actual way of research is to determine the subclasses of such grammars that remain learnable in the sense of Gold (Gold, 1967).",
        "We recall that learning here consists to define an algorithm on a finite set of sentences that converge to obtain a grammar in the class that generates the examples.",
        "Let G be a class of grammars, that we wish to learn from positive examples.",
        "Formally, let L(G) denote the language associated with grammar G, and let V be a given alphabet, a learning algorithm is a function 0 from finite sets of words in V* to G, such that for all G E G with L(G) =< ei >iEN there exists a grammar G' E G and there exists no E N such that: bn > no O({ei, ... , en}) = G' E G with L(G') = L(G).",
        "After pessimistic unlearnability results in (Gold, 1967), learnability of non trivial classes has been proved in (Angluin, 1980) and (Shinohara, 1990).",
        "Recent works from (Kanazawa, 1998) and (Nicolas, 1999) following (Buszkowski and Penn, 1990) have answered the problem for different subclasses of classical categorial grammars (we recall that the whole class of classical categorial grammars is equivalent to context free grammars; the same holds for the class of Lambek grammars (Pentus, 1993) that is thus not learnable in Gold’s model).",
        "The extension of such results for Lambek grammars is an interesting challenge that is addressed by works on logic types from (Dudau-Sofronie et al., 2001) (these grammars enjoy a direct link with Montague semantics), learning from structures in (Re-tor and Bonato, september 2001), complexity results from (Florˆencio, 2002) or unlearnability results from (Foret and Le Nir, 2002a; Foret and Le Nir, 2002b); this result was shown for several variants but the question was left open for the basic variant, the non-associative variant NL.",
        "In this paper, we consider the following question: is the non-associative variant NL of k-valued Lambek grammars learnable from strings; we answer by constructing a limit point for this class.",
        "Our construction is in some sense more complex than those for the other systems since they do not directly translate as limit point in the more restricted system NL.",
        "The paper is organized as follows.",
        "Section 2 gives some background knowledge on three main aspects: Lambek categorial grammars ; learning in Gold’s model ; Lambek pregroup grammars that we use later as models in some proofs.",
        "Section 3 then presents our main result on NL (NL denotes non-associative Lambek grammars not allowing empty sequence): after a construction overview, we discuss some corollaries and then provide the details of proof.",
        "Section 4 concludes."
      ]
    },
    {
      "heading": "2 Background",
      "text": []
    },
    {
      "heading": "2.1 Categorial Grammars",
      "text": [
        "The reader not familiar with Lambek Calculus and its non-associative version will find nice presentation in the first ones written by Lambek (Lambek, 1958; Lambek, 1961) or more recently in (Kandul-ski, 1988; Aarts and Trautwein, 1995; Buszkowski, 1997; Moortgat, 1997; de Groote, 1999; de Groote and Lamarche, 2002).",
        "The types Tp, or formulas, are generated from a set of primitive types Pr, or atomic formulas by three binary connectives “ / ” (over), “\\” (under) and “•” (product): Tp ::= Pr |Tp \\ Tp |Tp / Tp |Tp •Tp.",
        "As a logical system, we use a Gentzen-style sequent presentation.",
        "A sequent F �- A is composed of a sequence of formulas I' which is the antecedent configuration and a succedent formula A.",
        "Let E be a fixed alphabet.",
        "A categorial grammar over E is a finite relation G between E and Tp.",
        "If < c, A > E G, we say that G assigns A to c, and we write G : c H A.",
        "The relation �_L is the smallest relation �- between Tp+ and Tp, such that for all F, I'' E Tp+, A, A' E Tp* and for all A, B, C E Tp:",
        "We write Lo for the Lambek calculus with empty antecedents (left part of the sequent).",
        "2.1.2 Non-associative Lambek Derivation �-NL In the Gentzen presentation, the derivability relation of NL holds between a term in S and a formula in Tp, where the term language is S ::= Tp |(S, S).",
        "Terms in S are also called G-terms.",
        "A sequent is a pair (I, A) E S × Tp.",
        "The notation F[] represents a G-term with a distinguished occurrence of A (with the same position in premise and conclusion of a rule).",
        "The relation �-NL is the smallest relation �- between S and Tp, such that for all F, A E S and for all A, B, C E Tp:",
        "A[(A, B)] C •L A[A • B] C We write NLO for the calculus with empty antecedents (left part of the sequent).",
        "Cut elimination.",
        "We recall that cut rule can be eliminated in �_L and �-NL: every derivable sequent has a cut-free derivation.",
        "Type order.",
        "The order ord(A) of a type A of L or NL is defined by:",
        "Let G be a categorial grammar over E. G generates a string c1 ... cn E E+ iff there are types A1,... , An E Tp such that: G : ci H Ai (1 < i < n) and A1,... ,An �_L S. The language of G, written LL (G) is the set of strings generated by G. We define similarly LLO (G), LNL (G) and LNLO (G) replacing �_L by �_Lo, �-NL and �-NLO in the sequent where the types are parenthesized in some way.",
        "2.1.5 Notation.",
        "In some sections, we may write simply �- instead of �_L, �_Lo, �_NL or �_NLO .",
        "We may simply write L(G) accordingly."
      ]
    },
    {
      "heading": "2.1.6 Rigid and k-valued Grammars.",
      "text": [
        "Categorial grammars that assign at most k types to each symbol in the alphabet are called k-valued grammars; 1-valued grammars are also called rigid grammars.",
        "Example 1 Let E1 = {John, Mary, likes} and let Pr = {S, N} for sentences and nouns respectively.",
        "Let G1 = {John H N, Mary H N, likes H N \\ (S / N)}.",
        "We get (John likes Mary) E LNL(G1) since ((N, N \\ (S / N)), N) �_NL S. G1 is a rigid (or 1-valued) grammar."
      ]
    },
    {
      "heading": "2.2 Learning and Limit Points",
      "text": [
        "We now recall some useful definitions and known properties on learning.",
        "A class CL of languages has a limit point iff there exists an infinite sequence < Ln >nEN of languages in CL and a language L E CL such that: L0CL1 ... C ... CLnC... and L=UnENLn (L is a limit point of CL).",
        "The following property is important for our purpose.",
        "If the languages of the grammars in a class G have a limit point then the class G is unlearnable.",
        "1"
      ]
    },
    {
      "heading": "2.3 Some Useful Models",
      "text": [
        "For ease of proof, in next section we use two kinds of models that we now recall: free groups and pre-groups introduced recently by (Lambek, 1999) as an alternative of existing type grammars."
      ]
    },
    {
      "heading": "2.3.1 Free Group Interpretation.",
      "text": [
        "Let FG denote the free group with generators Pr, operation · and with neutral element 1.",
        "We associate with each formula C of L or NL, an element in FG written [C] as follows:",
        "We extend the notation to sequents by: ¶ [C1, C2, ... , Cn]] = [C1]] · [C2]] · ··· · [Cn1 The following property states that FG is a model for L (hence for NL): if F �_L C then [F]] =FG [C]"
      ]
    },
    {
      "heading": "2.3.2 Free Pregroup Interpretation",
      "text": [
        "Pregroup.",
        "A pregroup is a structure (P, < , ·, l, r,1) such that (P,:5, ·,1) is a partially ordered monoid2 and l, r are two unary operations on P that satisfy for all a E P ala < 1 < aal and aar < 1 < ara.",
        "Free pregroup.",
        "Let (P,:5) be an ordered set of primitive types, P(Z) = {p(i) |p E P, i E Z} is the set of atomic types and T(P,<) = (P(Z)) * = {pii1) · · · pnn) |0<k<n,pkEP and ikEZ} is the set of types.",
        "For X and Y E T(P,<), X < Y iif this relation is deductible in the following system where p, q E P, n, k E Z and X, Y, Z E T(P,<): 1 This implies that the class has infinite elasticity.",
        "A class CL of languages has infinite elasticity iff 3 < ei >iEN sentences 3 < Li >iEN languages in CL iEN : ei V Li and {e1,... , en} C Ln+1 .",
        "2W e briefly recall that a monoid is a structure < M, ·, 1 >, such that · is associative and has a neutral element 1 (`dx E",
        "This construction, proposed by Buskowski, defines a pregroup that extends < on primitive types P to T(P,<)3.",
        "Cut elimination.",
        "As for L and NL, cut rule can be eliminated: every derivable inequality has a cut-free derivation.",
        "Simple free pregroup.",
        "A simple free pregroup is a free pregroup where the order on primitive type is equality.",
        "Free pregroup interpretation.",
        "Let FP denotes the simple free pregroup with Pr as primitive types.",
        "We associate with each formula C of L or NL, an element in FP written [C] as follows:",
        "We extend the notation to sequents by: [A1,... , An] = [A1] ··· [An] The following property states that FP is a model for L (hence for NL): if F �_L C then [I] <FP [C]."
      ]
    },
    {
      "heading": "3 Limit Point Construction",
      "text": []
    },
    {
      "heading": "3.1 Method overview and remarks",
      "text": [
        "Form of grammars.",
        "We define grammars Gn where A, B, Dn and En are complex types and S is the main type of each grammar:"
      ]
    },
    {
      "heading": "Gn={aHA/B; bHDn; cHEn\\S}",
      "text": []
    },
    {
      "heading": "Some key points.",
      "text": [
        "• We prove that {akbc |0 < k < n} C_ L(Gn) using the following properties: 3Left and right adjoints are defined by (p(n))l = p(n-1), (p (n))r = p(n+1), (XY)l = YlXl and (XY)r = YrXr.",
        "We write p for p(0).",
        "• The condition A V B is crucial for strictness of language inclusion.",
        "In particular: (A / B, A) I f A, where A = D0 • This construction is in some sense more complex than those for the other systems (Foret and Le Nir, 2002a; Foret and Le Nir, 2002b) since they do not directly translate as limit points in the more restricted system NL."
      ]
    },
    {
      "heading": "3.2 Definition and Main Results",
      "text": [
        "• L(Gn)={akbc|0<k<n} • L(G*) = {akbc |0 < k}.",
        "From this construction we get a limit point and the following result.",
        "Proposition 2 (NL-non-learnability) The class of languages of rigid (or k-valued for an arbitrary k) non-associative Lambek grammars (not allowing empty sequence and without product) admits a limit point; the class ofrigid (or k-valuedfor an arbitrary k) non-associative Lambek grammars (not allowing empty sequence and without product) is not learnable from strings."
      ]
    },
    {
      "heading": "3.3 Details of proof for Gn",
      "text": [
        "Lemma",
        "For the converse, (for technical reasons and to ease proofs) we use both free group and free pregroup models of NL since a sequent is valid in NL only if its interpretation is valid in both models.",
        "Translation in free groups The free group translation for the types of Gn is: [p]]=p,[q]]=q, [S]] =S",
        "Type-raising disappears by translation: [x/(y\\x)]]=[x]·([y]] 1 ·[x]])-1=[y]] Thus, we get:",
        "Translation in free pregroups The free pregroup translation for the types of Gn is:",
        "Proof: Let Tn denote the type assignment by the rigid grammar Gn.",
        "Suppose Tn(w) �- S, using free groups [Tn(w)]] = S; - This entails that w has exactly one occurrence of c (since [Tn(c)]] = p-1S and the other type images are either 1 or p) - Then, this entails that w has exactly one occurrence of b on the left of the occurrence of c (since",
        "Proof: Suppose 7-n(w) �- S, using pregroups [Tn(w)] < S. We can write w = akbak�cak\" for some k, k', k\", such that:",
        "and it yields p ppl prS ppl ���� ����< S. k' k\" We now discuss possible deductions (note that pplppl ··· ppl = pp l):",
        "• if k' and k\" =7� 0: ppplprSppl < S impossible.",
        "• if k' =7� 0 and k\" = 0: ppplprS < S impossible.",
        "• if k' = 0 and k\" =7� 0: pprSppl < S impossible.",
        "• ifk'=k\"=0:wE{akbc|0<k}■ (Final) Lemma L(Gn) 9 {akbc |0 < k < n} Proof: Suppose Tn(w) �- S, using pregroups [,rn(w)] < S. We can write w = akbc for some k, such that :",
        "We use the following property (its proof is in Appendix A) that entails that 0 < k < n.",
        "where nbalt counts the alternations of p’s and q’s sequences (forgetting/dropping their exponents).",
        "Proof: Like for w E Gn, due to free groups, a word of L(G*) has exactly one occurrence of c and one occurrence of b on the left of c (since [T* (c)]] = pP_'S, [T*(b)] = p and [7-* (a)] = 1).",
        "Suppose w = akbak�cak\" a similar discussion as for Gn in pregroups, gives kV = kV = 0, hence the result ■"
      ]
    },
    {
      "heading": "3.5 Non-learnability of a Hierarchy of Systems",
      "text": [
        "An interest point of this construction: It provides a limit point for the whole hierarchy of Lambek grammars, and pregroup grammars.",
        "Limit point for pregroups The translation [·] of Gn gives a limit point for the simple free pregroup since for i E {*, 0, 1, 2,... }: Ti (w) �-NL S iff w E LNL (Gi) by definition; 7-i (w) �-NL S implies [ri(w)] < S by models; [Ti(w)] < S implies w E LNL(Gi) from above.",
        "Limit point for NLO The same grammars and languages work since for",
        "Limit point for L and Lo The same grammars and languages work since for"
      ]
    },
    {
      "heading": "4 Conclusion and Remarks",
      "text": [
        "Lambek grammars.",
        "We have shown that without empty sequence, non-associative Lambek rigid grammars are not learnable from strings.",
        "With this result, the whole landscape of Lambek-like rigid grammars (or k-valued for an arbitrary k) is now described as for the learnability question (from strings, in Gold’s model).",
        "Non-learnability for subclasses.",
        "Our construct is of order 5 and does not use the product operator.",
        "Thus, we have the following corollaries:",
        "• Restricted connectives: k-valued NL, NLO, L and Lo grammars without product are not learnable from strings.",
        "• Restricted type order:",
        "- k-valued NL, NLO, L and Lo grammars (without product) with types not greater than order 5 are not learnable from strings4.",
        "- k-valued free pregroup grammars with types not greater than order 1 are not learnable from strings5.",
        "The learnability question may still be raised for NL grammars of order lower than 5.",
        "Special learnable subclasses.",
        "Note that however, we get specific learnable subclasses of k-valued grammars when we consider NL, NLO, L or Lo without product and we bind the order of types in grammars to be not greater than 1.",
        "This holds for all variants of Lambek grammars as a corollary of the equivalence between generation in classical categorial grammars and in Lambek systems for grammars with such product-free types (Buszkowski, 2001).",
        "Restriction on types.",
        "An interesting perspective for learnability results might be to introduce reasonable restrictions on types.",
        "From what we have seen, the order of type alone (order 1 excepted) does not seem to be an appropriate measure in that context.",
        "Structured examples.",
        "These results also indicate the necessity of using structured examples as input of learning algorithms.",
        "What intermediate structure should then be taken as a good alternative between insufficient structures (strings) and linguistic unrealistic structures (full proof tree structures) remains an interesting challenge."
      ]
    }
  ]
}
