{
  "info": {
    "authors": [
      "Jose M. Castano"
    ],
    "book": "Annual Meeting of the Association for Computational Linguistics – Student Research Workshop",
    "id": "acl-P03-2003",
    "title": "On the Applicability of Global Index Grammars",
    "url": "https://aclweb.org/anthology/P03-2003",
    "year": 2003
  },
  "references": [
    "acl-J87-1004",
    "acl-J94-2002",
    "acl-P87-1015",
    "acl-P95-1013"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "We investigate Global Index Grammars (GIGs), a grammar formalism that uses a stack of indices associated with productions and has restricted context-sensitive power.",
        "We discuss some of the structural descriptions that GIGs can generate compared with those generated by LIGs.",
        "We show also how GIGs can represent structural descriptions corresponding to HPSGs (Pollard and Sag, 1994) schemas."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "The notion of Mildly context-sensitivity was introduced in (Joshi, 1985) as a possible model to express the required properties of formalisms that might describe Natural Language (NL) phenomena.",
        "It requires three properties:1 a) constant growth property (or the stronger semi-linearity property); b) polynomial parsability; c) limited cross-serial dependencies, i.e. some limited context-sensitivity.",
        "The canonical NL problems which exceed context free power are: multiple agreements, reduplication, crossing dependencies.2 Mildly Context-sensitive Languages (MCSLs) have been characterized by a geometric hierarchy of grammar levels.",
        "A level-2 MCSL (eg.",
        "TALs/LILs) is able to capture up to 4 counting dependencies (includes L4 = {anbncndn |n ≥ 1} but not L5 = {anbncndnen |n ≥ 1}).",
        "They were proven to have recognition algorithms with time complexity O(n6) (Satta, 1994).",
        "In general for a level-k MCSL the recognition problem is in O(n3'2k−1) and the descriptive power regarding counting dependencies is 2k (Weir, 1988).",
        "Even the descriptive power of level-2 MCSLs (Tree Adjoining Grammars (TAGs), Linear Indexed Grammars (LIGs), Combinatory Categorial Grammars (CCGs) might be considered insufficient for some NL problems, therefore there have been many proposals3 to extend or modify them.",
        "On our view the possibility of modeling coordination phenomena is probably the most crucial in this respect.",
        "In (Casta˜no, 2003) we introduced Global Index Grammars (GIGs) - and GILs the corresponding languages - as an alternative grammar formalism that has a restricted context sensitive power.",
        "We showed that GIGs have enough descriptive power to capture the three phenomena mentioned above (reduplication, multiple agreements, crossed agreements) in their generalized forms.",
        "Recognition of the language generated by a GIG is in bounded polynomial time: O(n6).",
        "We presented a Chomsky-Sch¨utzenberger representation theorem for GILs.",
        "In (Casta˜no, 2003c) we presented the equivalent automaton model: LR-2PDA and provided a characterization the3 There are extensions or modifications of TAGs, CCGs, IGs, and many other proposals that would be impossible to mention here.",
        "orems of GILs in terms of the LR-2PDA and GIGs.",
        "The family of GILs is an Abstract Family of Language.",
        "The goal of this paper is to show the relevance of GIGs for NL modeling and processing.",
        "This should not be understood as claim to propose GIGs as a grammar model with “linguistic content” that competes with grammar models such as HPSG or LFG.",
        "It should be rather seen as a formal language resource which can be used to model and process NL phenomena beyond context free, or beyond the level-2 MCSLs (like those mentioned above) or to compile grammars created in other framework into GIGs.",
        "LIGs played a similar role to model the treatment of the SLASH feature in GPSGs and HPSGs, and to compile TAGs for parsing.",
        "GIGs offer additional descriptive power as compared to LIGs or TAGs regarding the canonical NL problems mentioned above, and the same computational cost in terms of asymptotic complexity.",
        "They also offer additional descriptive power in terms of the structural descriptions they can generate for the same set of string languages, being able to produce dependent paths.4 This paper is organized as follows: section 2 reviews Global Index Grammars and their properties and we give examples of its weak descriptive power.",
        "Section 3 discusses the relevance of the strong descriptive power of GIGs.",
        "We discuss the structural description for the palindrome, copy and the multiple copies languages {ww+|w ∈ Σ*}.",
        "Finally in section 4 we discuss how this descriptive power can be used to encode HPSGs schemata."
      ]
    },
    {
      "heading": "2 Global Index Grammars",
      "text": []
    },
    {
      "heading": "2.1 Linear Indexed Grammars",
      "text": [
        "Indexed grammars, (IGs) (Aho, 1968), and Linear Index Grammars, (LIGs;LILs) (Gazdar, 1988), have the capability to associate stacks of indices with symbols in the grammar rules.",
        "IGs are not semilinear.",
        "LIGs are Indexed Grammars with an additional constraint in the form of the productions: the stack of indices can be “trans",
        "mitted” only to one non-terminal.",
        "As a consequence they are semilinear and belong to the class of MCSGs.",
        "The class of LILs contains L4 but not L5 (see above).",
        "A Linear Indexed Grammar is a 5-tuple (V, T, I, P, S), where V is the set of variables, T the set of terminals, I the set of indices, S in V is the start symbol, and P is a finite set of productions of the form, where A, B ∈ V, α,γ∈(V∪T)*,i∈I:"
      ]
    },
    {
      "heading": "2.2 Global Indexed Grammars",
      "text": [
        "GIGs use the stack of indices as a global control structure.",
        "This formalism provides a global but restricted context that can be updated at any local point in the derivation.",
        "GIGs are a kind of regulated rewriting mechanisms (Dassow and P˘aun, 1989) with global context and history of the derivation (or ordered derivation) as the main characteristics of its regulating device.",
        "The introduction of indices in the derivation is restricted to rules that have terminals in the right-hand side.",
        "An additional constraint that is imposed on GIGs is strict leftmost derivation whenever indices are introduced or removed by the derivation.",
        "Note the difference between push (type b) and pop rules (type c): push rules require the right-hand side of the rule to contain a terminal in the first position.",
        "Pop rules do not require a terminal at all.",
        "That constraint on push rules is a crucial property of GIGs.",
        "Derivations in a GIG are similar to those in a CFG except that it is possible to modify a string of indices.",
        "We define the derives relation ⇒ on sentential forms, which are strings in I* # (N ∪ T) * as follows.",
        "Let βandγbein(N∪T)*,δbeinI*,xinI,wbe in T* and Xi in (N ∪ T).",
        "3.",
        "If A → X1 ... Xn is a production of type (c.)",
        "The reflexive and transitive closure of ⇒ is denoted, as usual by *⇒.",
        "We define the language of a GIG, G, L(G) to be: {w|#S *⇒ #w and w is in T*} The main difference between, IGs, LIGs and GIGs, corresponds to the interpretation of the derives relation relative to the behavior of the stack of indices.",
        "In IGs the stacks of indices are distributed over the non-terminals of the right-hand side of the rule.",
        "In LIGs, indices are associated with only one non-terminal at right-hand side of the rule.",
        "This produces the effect that there is only one stack affected at each derivation step, with the consequence of the semilinearity property of LILs.",
        "GIGs share this uniqueness of the stack with LIGs: there is only one stack to be considered.",
        "Unlike LIGs and IGs the stack of indices is independent of non-terminals in the GIG case.",
        "GIGs can have rules where the right-hand side of the rule is composed only of terminals and affect the stack of indices.",
        "Indeed push rules (type b) are constrained to start the right-hand side with a terminal as specified in (6.b) in the GIG definition.",
        "The derives definition requires a leftmost derivation for those rules ( push and pop rules) that affect the stack of indices.",
        "The constraint imposed on the push productions can be seen as constraining the context sensitive dependencies to the introduction of lexical information.",
        "This constraint prevents GIGs from being equivalent to a Turing Machine as is shown in (Casta˜no, 2003c).",
        "The following example shows that GILs contain a language not contained in LILs, nor in the family of MCSLs.",
        "This language is relevant for modeling coordination in NL.",
        "Gwwn = ({S, R, A, B, C, L}, {a, b}, {i, j}, S, #, P) and where Pis: S→ AS |BS |C C→ RC |L",
        "The derivation of ababab:",
        "The next example shows the MIX (or Bach) language.",
        "(Gazdar, 1988) conjectured the MIX language is not an IL.",
        "GILs are semilinear, (Casta˜no, 2003c) therefore ILs and GILs could be incomparable under set inclusion.",
        "The following example shows that the family of GILs contains languages which do not belong to the MCSL family.",
        "The derivation of the string aabbccbbcc shows five dependencies."
      ]
    },
    {
      "heading": "2.3 GILs Recognition",
      "text": [
        "The recognition algorithm for GILs we presented in (Casta˜no, 2003) is an extension of Earley’s algorithm (cf. (Earley, 1970)) for CFLs.",
        "It has to be modified to perform the computations of the stack of indices in a GIG.",
        "In (Casta˜no, 2003) a graph-structured stack (Tomita, 1987) was used to efficiently represent ambiguous index operations in a GIG stack.",
        "Earley items are modified adding three parameters δ, c, o: [δ, c, o, A → α • Aβ, i, j] The first two represent a pointer to an active node in the graph-structured stack ( δ ∈ I and c ≤ n).",
        "The third parameter (o ≤ n) is used to record the ordering of the rules affecting the stack.",
        "The O(n6) time-complexity of this algorithm reported in (Casta˜no, 2003) can be easily verified.",
        "The complete operation is typically the costly one in an Earley type algorithm.",
        "It can be verified that there are at most n6 instances of the indices (c1, c2, o, i, k, j) involved in this operation.",
        "The counter parameters c1 and c2, might be state bound, even for grammars with ambiguous indexing.",
        "In such cases the time complexity would be determined by the CFG backbone properties.",
        "The computation of the operations on the graph-structured stack of indices are performed at a constant time where the constant is determined by the size of the index vocabulary.",
        "O(n6) is the worst case; O(n3) holds for grammars with state-bound indexing (which includes unambiguous indexing)6; O(n2) holds for unambiguous context free backbone grammars with state-bound indexing and O(n) for bounded-state7 context free backbone grammars with state-bound indexing."
      ]
    },
    {
      "heading": "3 GIGs and structural description",
      "text": [
        "(Gazdar, 1988) introduces Linear Indexed Grammars and discusses its applicability to Natural Language problems.",
        "This discussion is addressed not in terms of weak generative capacity but in terms of strong-generative capacity.",
        "Similar approaches are also presented in (Vijay-Shanker et al., 1987) and (Joshi, 2000) (see (Miller, 1999) concerning weak and strong generative capacity).",
        "In this section we review some of the abstract configurations that are argued for in (Gazdar, 1988)."
      ]
    },
    {
      "heading": "3.1 The palindrome language",
      "text": [
        "CFGs can recognize the language {wwR|w ∈ Σ*} but they cannot generate the structural description depicted in figure 1 (we follow Gazdar’s notation: the leftmost element within the brackets corresponds to the top of the stack):",
        "unbounded dependencies.",
        "Such an structure can be obtained using a GIG (and of course a LIG).",
        "But the mirror image of that structure cannot be generated by a GIG because it would require to allow push productions with a non terminal in the first position of the right-hand side.",
        "However the English adjective constructions that Gazdar argues that can motivate the LIG derivation, can be obtained with the following GIG productions as shown in figure 2.",
        "It should be noted that the operations on indices follow the reverse order as in the LIG case.",
        "On the other hand, it can be noticed also that the introduction of indices is dependent on the presence of lexical information and its transmission is not carried through a top-down spine, as in the LIG or TAG cases.",
        "The arrows show the leftmost derivation order that is required by the operations on the stack."
      ]
    },
    {
      "heading": "3.2 The Copy Language",
      "text": [
        "Gazdar presents two possible LIG structural descriptions for the copy language.",
        "Similar structural descriptions can be obtained using GIGs.",
        "However he argues that another tree structure could be more appropriate for some Natural Language phenomenon that might be modeled with a copy language.",
        "Such structure cannot be generated by a LIG, and can by an IG (see (Casta˜no, 2003b) for a complete discussion and comparasion of GIG and LIG generated trees).",
        "GIGs cannot produce this structural description, but they can generate the one presented in figure 3, where the arrows depict the leftmost derivation order.",
        "GIGs can also produce similar structural descriptions for the language of multiple copies (the language {ww+ |w ∈ Σ*} as shown in figure 4, corresponding to the grammar shown in example 2."
      ]
    },
    {
      "heading": "4 GIGs and HPSGs",
      "text": [
        "We showed in the last section how GIGs can produce structural descriptions similar to those of LIGs, and others which are beyond LIGs and TAGs descriptive power.",
        "Those structural descriptions corresponding to figure 1 were correlated to the use of the SLASH feature in GPSGs and HPSGs.",
        "In this section we will show how",
        "the structural description power of GIGs, is not only able to capture those phenomena but also additional structural descriptions, compatible with those generated by HPSGs.",
        "This follows from the ability of GIGs to capture dependencies through different paths in the derivation.",
        "There has been some work compiling HPSGs into TAGs (cf. (Kasper et al., 1995), (Becker and Lopez, 2000)).",
        "One of the motivations was the potential to improve the processing efficiency of HPSG, performing HPSG derivations at compile time.",
        "Such compilation process allowed to identify significant parts of HPSG grammars that were mildly context-sensitive.",
        "We will introduce informally some slight modifications to the operations on the stacks performed by a GIG.",
        "We will allow the productions of a GIG to be annotated with finite strings in I U I¯ instead of single symbols.",
        "This does not change the power of the formalism.",
        "It is a standard change in PDAs (cf. (Harrison, 1978)) to allow to push/pop several symbols from the stack.",
        "Also the symbols will be interpreted relative to the elements in the top of the stack (as a Dyck set).",
        "Therefore different derivations might be produced using the same production according to what are the topmost elements of the stack.",
        "This is exemplified with the productions X – * x and X – * x, in particular in the ¯nv [n]v first three cases where different actions are taken (the actions are explained in the parenthesis) : nnδ#wXβ ¯nv vnδ#wxβ (pop n and push v) n¯vδ#wXβ δ#wxβ (pop n and ¯v)",
        "We exemplify how GIGs can generate similar structural descriptions as HPSGs do, in a very oversimplified and abstract way.",
        "We will ignore many details and try give an rough idea on how the transmission of features can be carried out from the lexical items by the GIG stack, obtaining very similar structural descriptions.",
        "Head-Subj-Schema Figure 5 depicts the tree structure corresponding to the Head-Subject Schema in HPSG (Pollard and Sag, 1994).",
        "Figure 6 shows an equivalent structural description corresponding to the GIG productions and derivation shown in the next example (which might correspond to an intransitive verb).",
        "The arrows indicate how the transmission of features is encoded in the leftmost derivation order, an how the elements contained in the stack can be correlated to constituents or lexical items (terminal symbols) in a constituent recognition process.",
        "Head-Comps-Schema Figure 7 shows the tree structure corresponding to the Head-Complement schema in HPSG.",
        "igure 7: Head-Comps Schema tree representation The following GIG productions generate the structural description corresponding to figure 8, where the initial configuration of the stack is assumed to be [n]:",
        "The productions of example 8 (which use some of the previous examples) generate the structural description represented in figure 9, corresponding to the derivation given in example 8.",
        "We show the contents of the stack when each lexical item is introduced in the derivation.",
        "Example 8 (SLASH in GIG format) .",
        "A derivation of ‘Kim we know Sandy claims Dana hates’:",
        "n¯vn#Kim we know Sandy XP ⇒ n¯vn#Kim we know Sandy X XP ⇒ ¯vn#Kim we know Sandy claims XP ⇒ ¯vn#Kim we know Sandy claims YP XP ⇒ n¯vn#Kim we know Sandy claims Dana XP ⇒ #Kim we know Sandy claims Dana hates Finally the last example and figure 10 show how coordination can be encoded.",
        "Example 9 (SLASH and Coordination)"
      ]
    },
    {
      "heading": "5 Conclusions",
      "text": [
        "We presented GIGs and GILs and showed the descriptive power of GIGs is beyond CFGs.",
        "CFLs are properly included in GILs by definition.",
        "We showed also that GIGs include",
        "some languages that are not in the LIL/TAL family.",
        "GILs do include those languages that are beyond context free and might be required for NL modelling.",
        "The similarity between GIGs and LIGs, suggests that LILs might be included in GILs.",
        "We presented a succinct comparison of the structural descriptions that can be generated both by LIGs and GIGs, we have shown that GIGs generate structural descriptions for the copy language which can not be generated by LIGs.",
        "We showed also that this is the case for other languages that can be generated by both LIGs and GIGs.",
        "This corresponds to the ability of GIGs to generate dependent paths without copying the stack.",
        "We have shown also that those non-local relationships that are usually encoded in HPSGs as feature transmission, can be encoded in GIGs using its stack, exploiting the ability of Global stacks to encode dependencies through dependent paths and not only through a spine."
      ]
    },
    {
      "heading": "Acknowledgments:",
      "text": [
        "Thanks to J. Pustejovsky for his continuous support and encouragement on this project.",
        "Many thanks also to the anonymous reviewers who provided many helpful comments.",
        "This work was partially supported by NLM Grant",
        "R01 LM06649-02."
      ]
    }
  ]
}
