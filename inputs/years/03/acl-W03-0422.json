{
  "info": {
    "authors": [
      "Xavier Carreras",
      "Lluís Màrquez",
      "Lluís Padró"
    ],
    "book": "Conference on Computational Natural Language Learning CoNLL",
    "id": "acl-W03-0422",
    "title": "Learning a Perceptron-Based Named Entity Chunker Via Online Recognition Feedback",
    "url": "https://aclweb.org/anthology/W03-0422",
    "year": 2003
  },
  "references": [
    "acl-W02-1001"
  ],
  "sections": [
    {
      "heading": "1 Introduction",
      "text": [
        "We present a novel approach for the problem of Named Entity Recognition and Classification (NERC), in the context of the CoNLL-2003 Shared Task.",
        "Our work is framed into the learning and inference paradigm for recognizing structures in Natural Language (Punyakanok and Roth, 2001; Carreras et al., 2002).",
        "We make use of several learned functions which, applied at local contexts, discriminatively select optimal partial structures.",
        "On the top of this local recognition, an inference layer explores the partial structures and builds the optimal global structure for the problem.",
        "For the NERC problem, the structures to be recognized are the named entity phrases (NE) of a sentence.",
        "First, we apply learning at word level to identify NE candidates by means of a Begin-Inside classification.",
        "Then, we make use of functions learned at phrase level – one for each NE category – to discriminate among competing NEs.",
        "We propose a simple online learning algorithm for training all the involved functions together.",
        "Each function is modeled as a voted perceptron (Freund and Schapire, 1999).",
        "The learning strategy works online at sentence level.",
        "When visiting a sentence, the functions being learned are first used to recognize the NE phrases, and then updated according to the correctness of their solution.",
        "We analyze the dependencies among the involved perceptrons and a global solution in order to design a global update rule based on the recognition of named-entities, which reflects to each individual perceptron its committed errors from a global perspective.",
        "The learning approach presented here is closely related to –and inspired by– some recent works in the area of NLP and Machine Learning.",
        "Collins (2002) adapted the perceptron learning algorithm to tagging tasks, via sentence-based global feedback.",
        "Crammer and Singer (2003) presented an online topic-ranking algorithm involving several perceptrons and ranking-based update rules for training them."
      ]
    },
    {
      "heading": "2 Named-Entity Phrase Chunking",
      "text": [
        "In this section we describe our NERC approach as a phrase chunking problem.",
        "First we formalize the problem of NERC, then we propose a NE-Chunker."
      ]
    },
    {
      "heading": "2.1 Problem Formalization",
      "text": [
        "Let x be a sentence belonging to the sentence space X, formed by n words xi with i ranging from 0 to n −1.",
        "Let 1C be the set of NE categories, which in the CoNLL-2003 setting is 1C = {LOC, PER, ORG, MISC}.",
        "ANEphrase, denoted as (s, e)k, is a phrase spanning from word xs to word xe, having s < e, with category k ∈ 1C.",
        "Let NE be the set of all potential NE phrases, expressed as NE = {(s, e)k I0 < s < e, k ∈ 1C} .",
        "We say that two different NE phrases ne1 = (s1, e1 )k1 and ne2 = (s2, e2) k. overlap, denoted as ne1 ∼ne2 iff e1 > s2 n e2 > s1.",
        "A solution for the NERC problem is a set y formed by NE phrases that do not overlap, also known as a chunking.",
        "We define the set Y as the set of all possible chunkings.",
        "Formally, it can be expressed as:",
        "The goal of the NE extraction problem is to identify the correct solution y ∈ Y for a given sentence x."
      ]
    },
    {
      "heading": "2.2 NE-Chunker",
      "text": [
        "The NE-Chunker recognizes NE phrases in two layers of processing.",
        "In the first layer, a set of NE candidates for a sentence is identified, out of all the potential phrases in NE.",
        "To do so, we apply learning at word level in order to perform a Begin-Inside classification.",
        "That is, we assume a function hB(w) which decides whether a word w begins a NE phrase or not, and a function hI (w) which decides whether a word is inside a NE phrase or not.",
        "Furthermore, we define the predicate BI*, which tests whether a certain phrase is formed by a starting begin word and subsequent inside words.",
        "Formally, BI* ((s,e)k) = (hB (s)∧ di : s < i < e : hI(i)).",
        "The recognition will only consider solutions formed by phases in NE which satisfy the BI* predicate.",
        "Thus, this layer is used to filter out candidates from NE and consequently reduce the size of the solution space Y.",
        "Formally, the solution space that is explored can be expressed as YBI* = {y ∈ Y I dne ∈ y BI* (ne) }.",
        "The second layer selects the best coherent set of NE phrases by applying learning at phrase level.",
        "We assume a number of scoring functions, which given a NE phrase produce a real-valued score indicating the plausibility of the phrase.",
        "In particular, for each category k ∈ 1C we assume a function scorek which produces a positive score if the phrase is likely to belong to category k, and a negative score otherwise.",
        "Given this, the NE-Chunker is a function which searches a NE chunking for a sentence x according to the following optimality criterion:",
        "That is, among the considered chunkings of the sentence, the optimal one is defined to be the one whose NE phrases maximize the summation of phrase scores.",
        "Practically, there is no need to explicitly enumerate each possible chunking in YBI..",
        "Instead, by using dynamic programming the optimal chunking can be found in quadratic time over the sentence length, performing a Viterby-style exploration from left to right (Punyakanok and Roth, 2001).",
        "Summarizing, the NE-Chunker recognizes the set of NE phrases of a sentence as follows: First, NE candidates are identified in linear time, applying a linear number of decisions.",
        "Then, the optimal coherent set of NE phrases is selected in quadratic time, applying a quadratic number of decisions."
      ]
    },
    {
      "heading": "3 Learning via Recognition Feedback",
      "text": [
        "We now present an online learning strategy for training the learning components of the NE-Chunker, namely the functions hB and hI and the functions scorek, for k ∈ 1C.",
        "Each function is implemented using a perceptron1 and a representation function.",
        "A perceptron is a linear discriminant function hw¯ : N' – > N parametrized by a weight vector 2U¯ in N'.",
        "Given an instance x¯ ∈ N', a perceptron outputs as prediction the inner product between vectors x¯ and ¯2U, h¯w(x)=2U¯·¯x.",
        "1Actually, we use a variant of the model called the voted perceptron, explained below.",
        "The representation function 4) : X – > N' codifies an instance x belonging to some space X into a vector in N' with which the perceptron can operate.",
        "The functions hB and hI predict whether a word begins or is inside a NE phrase, respectively.",
        "Each one consists of a perceptron weight vector, ¯2UB and ¯2UI, and a shared representation function 4) ,, explained in section 4.",
        "Each function is computed as hl = ¯2Ul · 4), (x), for l ∈ {B, I}, and the sign is taken as the binary classification.",
        "The functions scorek, for k ∈ 1C, compute a score for a phrase (s, e) being a NE phrase of category k. For each function there is a vector ¯2Uk, and a shared representation function 4)p, also explained in section 4.",
        "The score is given by the expression scorek (s, e) = ¯2Uk · 4)p (s, e)."
      ]
    },
    {
      "heading": "3.1 Learning Algorithm",
      "text": [
        "We propose a mistake-driven online learning algorithm for training the parameter vectors 2U¯ of each perceptron all in one go.",
        "The algorithm starts with all vectors initialized to ¯0, and then runs repeatedly in a number of epochs T through all the sentences in the training set.",
        "Given a sentence, it predicts its optimal chunking as specified above using the current vectors.",
        "If the predicted chunking is not perfect the vectors which are responsible of the incorrect predictions are updated additively.",
        "The sentence-based learning algorithm is as follows:",
        "• Input: {(x 1, y1), ... , (x-, y-)}.",
        "• Define: W = {¯2UB, ¯2UI} U {¯2UkIk ∈ 1C}.",
        "• Initialize: d2U¯ ∈ W 2U¯ = ¯0; • fort= 1 ... T,fori=1 ... m: 1. yˆ = NEchW (xi) 2. learning feedback(W, xi, yi, ˆy) • Output: the vectors in W.",
        "We now describe the learning feedback.",
        "Let y* be the gold set of NE phrases for a sentence x, and yˆ the set predicted by the NE-Chunker.",
        "Let goldB(i) and goldI(i) be respectively the perfect indicator functions for the begin and inside classifications, that is, they return 1 if word xi begins or is inside some phrase in y* and 0 otherwise.",
        "We differentiate three kinds of phrases in order to give feedback to the functions being learned:",
        "• Phrases correctly identified: d(s, e)k ∈ y* ∩ ˆy: – Do nothing, since they are correct.",
        "• Missed phrases: d(s, e)k ∈ y* \\ ˆy: 1.",
        "Update begin word, if misclassified: if (¯2UB · 4),(xs) < 0) then",
        "• Over-predicted phrases: V(s, e)k E yˆ \\ y*: 1.",
        "Update score function:",
        "This feedback models the interaction between the two layers of the recognition process.",
        "The Begin-Inside identification filters out phrase candidates for the scoring layer.",
        "Thus, misclassifying words of a correct phrase blocks the generation of the candidate and produces a missed phrase.",
        "Therefore, we move the begin or end prediction vectors toward the misclassified words of a missed phrase.",
        "When an incorrect phrase is predicted, we move away the prediction vectors of the begin and inside words, provided that they are not in the beginning or inside a phrase in the gold chunking.",
        "Note that we deliberately do not care about false positives begin or inside words which do not finally overproduce a phrase.",
        "Regarding the scoring layer, each category prediction vector is moved toward missed phrases and moved away from over-predicted phrases."
      ]
    },
    {
      "heading": "3.2 Voted Perceptron and Kernelization",
      "text": [
        "Although the analysis above concerns the perceptron algorithm, we use a modified version, the voted perceptron algorithm, introduced in (Freund and Schapire, 1999).",
        "The key point of the voted version is that, while training, it stores information in order to make better predictions on test data.",
        "Specifically, all the prediction vectors ¯wj generated after every mistake are stored, together with a weight cj, which corresponds to the number of decisions the vector ¯wj survives until the next mistake.",
        "Let J be the number of vector that a perceptron accumulates.",
        "The final hypothesis is an averaged vote over the predictions of each vector, computed with the expression h¯w(¯x) = EJj=1 cj(¯wj · ¯x) .",
        "Moreover, we work with the dual formulation of the vectors, which allows the use of kernel functions.",
        "It is shown in (Freund and Schapire, 1999) that a vector w can be expressed as the sum of instances xj that were added (s.,j = +1) or subtracted (s.,j = – 1) in order to create it, as w = EJj=1 s.,jxj.",
        "Given a kernel function K(x, x'), the final expression of a dual voted perceptron becomes:"
      ]
    },
    {
      "heading": "4 Feature-Vector Representation",
      "text": [
        "In this section we describe the representation functions 4)w and 4)p, which respectively map a word or a phrase and their local context into a feature vector in Rn, particularly, {0,1}n. First, we define a set of predicates which are computed on words and return one or more values:",
        "• Form(w), PoS(w): The form and PoS of word w. • Orthographic(w): Binary flags of word w with regard to how is it capitalized (initial-caps, all-caps), the kind of characters that form the word (contains-digits, all-digits, alphanumeric, Roman-number), the presence of punctuation marks (contains-dots, contains-hyphen, acronym), single character patterns (lonely-initial, punctuation-mark, single-char), or the membership of the word to a predefined class (functional-word2), or pattern (URL).",
        "• Affixes(w): The prefixes and suffixes of the word w (up to 4 characters).",
        "• Word Type Patterns(ws ... we): Type pattern of",
        "consecutive words ws ... we.",
        "The type of a word is either functional (f), capitalized (C), lowercased (l), punctuation mark (.",
        "), quote (’) or other (x).",
        "For instance, the word type pattern for the phrase “John Smith payed 3 euros” would be CClxl.",
        "For the function 4)w (xi) we compute the predicates in a window of words around xi, that is, words xi+l with l E [ – Lw, +Lw].",
        "Each predicate label, together with each relative position l and each returned value forms a final binary indicator feature.",
        "The word type patterns are evaluated in all sequences within the window which include the central word i.",
        "For the function 4)p (s, e) we represent the context of the phrase by evaluating a [ – Lp, 0] window of predicates at the s word and a separate [0, +Lp] window at the e word.",
        "At the s window, we also codify the named entities already recognized at the left context, capturing their category and relative position.",
        "Furthermore, we represent the (s, e) phrase by evaluating the predicates without capturing the relative position in the features.",
        "In particular,",
        "for the words within (s, e) we evaluate the form, affixes and type patterns of sizes 2, 3 and 4.",
        "We also evaluate the complete concatenated form of the phrase and the word type pattern spanning the whole phrase.",
        "Finally, we make use of a gazetteer to capture possible NE categories of the whole NE form and each single word within it."
      ]
    },
    {
      "heading": "5 Experiments and Results",
      "text": [
        "A list of functional words was automatically extracted from each language training set, selecting those lowercased words within NEs appearing 3 times or more.",
        "For each language, we also constructed a gazetteer with the NEs in the training set.",
        "When training, only a random 40% of the entries was considered.",
        "We performed parameter tuning on the English language.",
        "Concerning the features, we set the window sizes (Lw and Lp) to 3 (we tested 2 and 3) , and we did not considered features occurring less than 5 times in the data.",
        "When moving to German, we found better to work with lemmas instead of word forms.",
        "Concerning the learning algorithm, we evaluated kernel degrees from 1 to 5.",
        "Degrees 2 and 3 performed somewhat better than others, and we chose degree 2.",
        "We then ran the algorithm through the English training set for up to five epochs, and through the German training set for up to 3 epochs.",
        "3 On both languages, the performance was still slightly increasing while visiting more training sentences.",
        "Unfortunately, we were not able to run the algorithm until performance was stable.",
        "Table 1 summarizes the obtained results on all sets.",
        "Clearly, the NERC task on English is much easier than on German.",
        "Figures indicate that the moderate performance on German is mainly caused by the low recall, specially for ORG and MISC entities.",
        "It is interesting to note that while in English the performance is much better on the development set, in German we achieve better results on the test set.",
        "This seems to indicate that the difference in performance between development and test sets is due to irregularities in the NEs that appear in each set, rather than overfitting problems of our learning strategy.",
        "The general performance of phrase recognition system we present is fairly good, and we think it is competitive with state-of-the-art named entity extraction systems."
      ]
    },
    {
      "heading": "Acknowledgments",
      "text": [
        "This research has been partially funded by the European Commission (Meaning, IST-2001-34460) and the Spanish Research Dept.",
        "(Hermes, TIC2000-0335-C03-02; Petra - TIC2000-1735-C02-02).",
        "Xavier Carreras holds a grant by the Catalan Government Research Department."
      ]
    }
  ]
}
