{
  "info": {
    "authors": [
      "Akio Fujiyoshi"
    ],
    "book": "International Conference on Computational Linguistics",
    "id": "acl-C04-1012",
    "title": "Restrictions on Monadic Context-Free Tree Grammars",
    "url": "https://aclweb.org/anthology/C04-1012",
    "year": 2004
  },
  "references": [],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "In this paper, subclasses of monadic context-free tree grammars (CFTGs) are compared.",
        "Since linear, nondeleting, monadic CFTGs generate the same class of string languages as tree adjoining grammars (TAGs), it is examined whether the restrictions of linearity and non-deletion on monadic CFTGs are necessary to generate the same class of languages.",
        "Epsilon-freeness on linear, nondeleting, monadic CFTG is also examined."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "The context-free tree grammars (CFTGs) were introduced by W. C. Rounds (1970) as tree generating systems, the definition of which is a direct generalization of context-free grammars (CFGs) from strings to rooted, ordered, labeled trees.",
        "For the application of CFTGs to natural languages, many kinds of restrictions on CFTGs have been considered because the string languages generated by CFTGs are exactly indexed languages, whose emptiness problem and uniform membership problem are exponential time complete, i.e., nonrestricted CFTGs are formidable.",
        "One approach to define subclasses of CFTGs is to restrict the ranks of nonterminals.",
        "The rank of a nonterminal is a natural number assigned to each nonterminal by which the number of children of the node labeled by the nonterminal is fixed.",
        "Through this approach, the simplest model of CFTGs is regular tree grammars (RTGs) (Brainerd, 1969), where the ranks of nonterminals are all 0.",
        "The string languages generated by RTGs are the languages generated by context-free grammars (CFGs).",
        "Since recent research on natural languages has suggested that formalisms for natural languages need to generate a slightly larger class of languages than CFGs, this paper focuses on monadic CFTGs, where the ranks of nonterminals are either 0 or 1.",
        "Another formalism of tree generating systems is tree adjoining grammars (TAGs) (Joshi et al., 1975; Joshi and Schabes, 1996; Abeill´e and Rambow, 2000).",
        "TAGs have been widely studied relating them to natural languages, and it was shown that TAGs have the same generative power of string languages as other formalisms for natural languages developed independently such as head grammars, combinatory categorial grammars and linear indexed grammars (Vijay-Shanker and Weir, 1994).",
        "It is also noteworthy that there are recognition algorithms for the string languages generated by TAGs that run in O(n 6) and O(M(n2)) time (Ra-jasekaran, 1996; Rajasekaran and Yooseph, 1998).",
        "From the view point of CFTG, the languages generated by TAGs were examined (Fujiyoshi and Kasai, 2000; Fujiyoshi, 2004; M¨oennich, 1997), and it was shown that linear, nondeleting, monadic CFTGs generate the same class of string languages as TAGs and a strictly larger class of tree languages than TAGs.",
        "Linearity is a restriction on CFTGs that requires the number of occurrences of every variable in the right-hand side of a rule be no more than 1, and nondeletion requires all variables in the left-hand side of a rule occur at least once in the right-hand side.",
        "In other words, linear, nondeleting, monadic CFTGs are those with nonterminals of rank 0 and 1 only and with exactly one occurrence of a variable in every right-hand side of a rule for a nonterminal of rank 1.",
        "In this paper, the subclasses of monadic CFTGs are compared to examine whether the restrictions of linearity and nondeletion on monadic CFTGs are necessary to generate the same class of string languages as TAGs.",
        "It is shown that nondeletion is unnecessary since for any linear, monadic CFTG, there exists an equivalent linear, nondeleting, monadic CFTG.",
        "On the other hand, it is shown that linearity is necessary since there exists a non-linear, monadic CFTG which is not weakly equivalent to any linear, monadic CFTG.",
        "For the development of parsing algorithm, the property of epsilon-freeness is very important, and in this paper, epsilon-freeness on linear, monadic CTFGs is also considered.",
        "Epsilon-freeness is a restriction on grammars that requires no use of epsilon-rules, that is, rules defined with the empty string.",
        "It is shown that for any linear, monadic CFTG, there exists an epsilon-free, linear, nondeleting, monadic CFTG that generate the same string language."
      ]
    },
    {
      "heading": "2 Preliminaries",
      "text": [
        "In this section, some terms, definitions and former results which will be used in the rest of this paper are introduced."
      ]
    },
    {
      "heading": "2.1 Ranked Alphabets, Trees and Substitution",
      "text": [
        "A ranked alphabet is a finite set of symbols in which each symbol is associated with a natural number, called the rank of a symbol.",
        "Let E be a ranked alphabet.",
        "For n > 0, it is defined that En = {a E E |the rank of a is n}.",
        "The set TE (trees over E) is the smallest set of strings over E, parentheses and commas such that",
        "(1) E0 C TE and (2) if a1, a2,... , an E TE and a E En for some n > 1, then a(a1, a2, ... , an) E TE.",
        "Let A be the empty string.",
        "Let E be the special symbol that may be contained in E0.",
        "The yield of a tree is a function from TE into E* defined as follows.",
        "For a E TE, (1) if a = a E (E0 − {E}), yield(a) = a, (1’) if a = E, yield(a) = A, and (2) if a = a(a1, a2,.",
        ".",
        ".",
        ", an) for some a E En and a1, a2, ... , an E TE, yield(a) = yield(a1) · yield(a2) · · · yield(an).",
        "Let X be the fixed countable set of variables x1, x2,.",
        ".",
        "..",
        "It is defined that X0 = 0 and for n > 1, Xn = {x1, x2, .",
        ".",
        ".",
        ", xn}.",
        "x1 is situationally denoted by x. TE(Xn) is defined to be TEUXn taking the ranks of elements in X are all 0.",
        "For a E TE(Xn) and 01,02,...,On E TE(X), a[Q1,Q2,...,On] is defined to be the result of substituting each Qi (1 < i < n) for the occurences of the variable xi in a.",
        "A tree a E TE (Xn) is linear if no variable occurs more than once in a, and nondeleting if all variables in Xn occur at least once in a.",
        "The set of all linear trees and all nondeleting trees in TE (Xn) are denoted by TE (LXn]) and TE (LXn), respectively.",
        "In this papaer, the conventional way of illustrating trees is used.",
        "See Figure 1.",
        "The tree A(b(a), a, B(E, d)) is illustrated as (1).",
        "An arbitrary tree a E TE is illustrated as (2).",
        "When the variables of a tree Q E TE (X3) occur in the order of x1, x2, x3, x1, the tree is illustrated as (3)."
      ]
    },
    {
      "heading": "2.2 Context-Free Tree Grammars",
      "text": [
        "The context-free tree grammars (CFTGs) were introduced by W. C. Rounds (1970) as tree generating systems.",
        "The definition of CFTGs is a direct generalization of context-free grammars (CFGs).",
        "A context-free tree grammar (CFTG) is a four-tuple G = (N, E, P, S), where:",
        "• N and E are disjoint ranked alphabets of nonterminals and terminals, respectively.",
        "• P is a finite set of rules of the form A(x1, x2, ... , xn) – * a",
        "with n > 0, A E Nn and a E TNuE (Xn).",
        "For A E N0, rules are written as A – * a instead of A() – * a.",
        "• S, the initial nonterminal, is a distinguished symbol in N0.",
        "For a CFTG G, the one-step derivation is",
        "is an example of a one-step derivation where the rule A(x) – * Q is applied to the tree a = a'[A(a\")] and the tree a' [O [a\"] ] is obtained.",
        "An (n-step) derivation is a finite sequence of trees a0, a1, ... , an E TNuE such that n > 0 and a0 G* a1 G* · · · G* an.",
        "When there exists a derivation a0, a1, ... , an, it is writen that a0 G an or * a0 G an.",
        "The tree language generated by G is the set L(G) = {a E TE |S * a}.",
        "The string language generated by G is LS(G) = {yield(a) |a E L(G)}.",
        "Note that LS(G) 9 (E0 − {e})*.",
        "Figure 3: Strong normal form A x A > C (2) B A x B C (3) x b A x Figure 2: One-step derivation Let !g and !g' be CFTGs.",
        "!g and 9' are equivalent if L(!9) = L(9').",
        "9 and 9' are weakly equivalent if LS(9) = LS(9').",
        "2.3 Restrictions on CFTGs A CFTG !9 = (N, E, P, S) is monadic if the rank of any nonterminal is 0 or 1, i.e., N = N0 U N1 and Nn = 0 for n > 2.",
        "!g is linear if for any rule A(x1, x2,... , xn) – * a in P, a E TNUE (rXn] ), and nondeleting if for any rule A(x1, x2, ... , xn) – *a in P, a E TNUE (LXnl ).",
        "A CFTG !g = (N, E, P, S) is epsilon-free if for any rule A(x1, x2,... , xn) – * a in P, the symbol E doesn’t occur in a.",
        "When g is monadic, all rules are either of the form A(x) – * a with A E N1 and a E TNUE (X1) or of the form B – * Q with B E N0 and Q E TNUE.",
        "When g is monadic, linear and nondeleting, for any rule A(x) – * a with A E N1 in P, there exists exactly one occurrence of x in a.",
        "For linear, nondeleting, monadic CFTGs, the following results are known.",
        "Theorem 2.1 (Fujiyoshi and Kasai, 2000) The class of string languages generated by linear, nondeleting, monadic CFTGs coincides with the class of string languages generated by TAGs.",
        "Theorem 2.2 (Fujiyoshi and Kasai, 2000) For any linear, nondeleting, monadic CFTG, there exists a weakly equivalent linear, nondeleting, monadic CFTG !g = (N, E, P, S) that satisfies the following conditions: • For any a E E, the rank of a is either 0 or 2.",
        "• For each A E N0, if A – * a is in P, then either a= a with a E E0, or a= B(C) with B E N1 and C E N0.",
        "See (1) and (2) in Figure 3.",
        "• For each A E N1, if A(x) – * a is in P, then a is one of the following forms: a = B(C(x)) with B, C E N1, a = b(C, x) with b E E2 and C E N0, or a = b(x, C) with b E E2 and C E N0.",
        "See (3),(4) and (5) in Figure 3.",
        "If a linear, nondeleting, monadic CFTG satisfies the condition of Theorem 2.2, it is said that the grammar is in strong normal form1 .",
        "3 Linearity and Nondeletion on Monadic CFTGs Because linear, nondeleting, monadic CFTGs generate the same class of string languages as TAGs, the question is whether the restrictions of linearity and nondeletion on monadic CFTGs are necessary to generate the same class of languages.",
        "First, it will be shown that nondeletion is unnecessary.",
        "Theorem 3.1 For any linear, monadic CFTG !g, there exists an equivalent linear, nondeleting, monadic CFTG !9'.",
        "Proof.",
        "Let !9 = (N, E, P, S) be a linear, monadic CFTG.",
        "An equivalent linear, nondeleting, monadic CFTG !9' = (N', E, PP, S) can be constructed as follows.",
        "The set of nonterminal is N' = N0 U N1 such that N0 = N0 U {A A E N1l and N'1 = N1.",
        "For the preparation of the definition of P', for a E TNUE(X1) we define H(a) C TN�uE(X1) as the smallest set satisfying the following conditions: • a E II(a)D 1We say “strong” because a grammar in this normal form only preserves weak equivalence.",
        "*• β (3) Figure 4: The three different cases • If Q E 11(a) and Q = Q'[B(Q\")] for some B E N1, of E TN�uE (FX1 1) n TN�uE (LX1 l) and Q\" E TN,uE, then Q'[ B ] E 11(a).",
        "The set of rules is defined as follows.",
        "P'={A – *ˆ 1 AE N0, A – *aEP,ˆEr1(a)} U {A(x) – * ˆ 1 A E N1, A(x) – * a E P, ˆ E 11(a) nTN�uE(LX1)1 U {A – *ˆjAEN1,A(x) – *aEP, ˆ E 1-1 (a) n TN, uE} Because of the construction of N' and P', g' is monadic and nondeleting.",
        "To show the equivalence of !g and W, we prove the following statement holds for any a E TNuE and Q E TE by induction on the length of derivations: a Q if and only if there exitsts ˆ E G � H(a) such that ˆ G� Q.",
        "We start with proving “only-if” part.",
        "Let a k (i. G If k = 0, then clearly a = (i, a E H(a) and a (i.",
        "For k > 1, assume that the statement G� holds for any derivation of length less than k. If a rule of the form A – * y with A E N0 is used at the first step, the proof is rather simple, so we only prove the other case.",
        "Suppose that a rule A(x) – * y with A E N1 is used at the first step and a = a'[A(a\")] some a' E TNuE (rX1 i) n TNuE (LX1 l) and a\" E TNuE.",
        "By the induction hypothesis, there exist S E II (a' ['y [a\"] ]) such that S * Q.",
        "Here, we have to think of the three different cases: (1) S E 11(a'), (2) S can be written as S'[ˆry] for some S' E 11(a') and ˆ E II(-y), and (3) S can be written as S' [ˆry[S\"] ] for some S' E 11(a'), ˆ E II(-y) and S\" E 11(a\").",
        "See Figure 4.",
        "In the case (1), S E 11(a) and S G� Q.",
        "In the case (2), A ˆ is in P' and therefore, S'[ A ] E 11(a) and S'[ A ] S'[ry] * Q.",
        "And in the case (3), A(x) ˆ is in PP and therefore, Y[A(s\" )] E 11(a) and s'[A(s\" )] s'[ry[s\"]] * a.",
        "The “if” part is proved as follows.",
        "Let ˆ � Q for some ˆ E H(a).",
        "If k = 0, then clearly a = O, a = a and a * O.",
        "Fork > 1, assume that the statement holds for any derivation of length less than k. The rule used at the first step is one of the following forms: (1) A – * ˆ with A E N0, (2) A(x) – * ˆ with A E N1, or (3) A ˆ with A E N0 – N0.",
        "The proof of the case (1) is similar to the proofs of the other cases, so we start proving the case (2).",
        "In the case (2), a = a'[A(a\")] a'[ry[a\"]] * Q for some ˆa' E TN'UE (rX11) n TN�uE (LX1 J) and ˆa\" E TN�uE.",
        "By the definition of P', A(x) – * y is in P such that ˆ E 1-1(-y).",
        "By the induction hypothesis, for any S E TNuE such that ˆa' [ˆry[ˆa\"] ] E 1-1(S), S Q.",
        "By the definition of H, there exists a' E TNuE (X 1) and a\" E TNuE such that a = a'[A(a\")] G a'['y[a\"]], and ˆa'[ˆry[ˆa\"]] E II(a'[-[a\"]]).",
        "Therefore, a G (i.",
        "And in the case (3), ˆ = ˆ6z'[ A ] G� ˆa' [ˆry] G� (i for some ˆGY' E TN'UE (FX11) n TN�uE (LX1 ) .",
        "By the definition of P', A(x) – * y is in P such that ˆ E 1-1(-y).",
        "By the induction hypothesis, for any S E TNuE such that ˆa'[ˆry] E H(S), S G (i.",
        "By the definition of H, there exists a' E TNuE(X1) and a\" E TNuE such that a = a'[A(a\")] G a'['y[a\"]], and ˆa'[ˆry] E II(a'[-[a\"]]).",
        "Therefore, a Because H(S) = {S}, L(9) = L(91).",
        "Next, consideration will be given to whether the restriction of linearity can be removed from Π a' ['y [a\"]] G (i for G � �.",
        "G monadic CFTGs to generate the same class of languages.",
        "The answer is negative.",
        "The following example is a non-linear, monadic CFTG that generates a string language that no linear, monadic CFTG can generate.",
        "Example 3.2 The following is an example of a monadic CFTG that generates the string language L,,,4 = {wwww |w E {a, b}+}.",
        "G = (N, E, P, S) where N = {S, A}, the ranks of S and A are 0 and 1, respectively, E = {a, b, c, d}, the ranks of a, b, c and d are 0, 0, 2 and 4, respectively, and P consists of the following rules: S – * A(a), S – * A(b), A(x) d(xxxx), A(x) – * A(c(xa)), and A(x) A(c(xb)).",
        "Because G has the rule A(x) – * d(xxxx), G is not linear.",
        "Theorem 3.3 There exists a monadic CFTG which is not weakly equivalent to any linear, monadic CFTG.",
        "Proof.",
        "It is known that the string language L,,,4 in Example 3.2 cannot be generated by any TAG.",
        "It cannot be generated by any linear, monadic CFTG, neither.",
        "4 Epsilon-Freeness on Linear, Monadic CFTGs According to our definition of CFTGs, they are allowed to generate trees with the special symbol E, which is treated as the empty string while taking the yields of trees.",
        "In this section, it will be seen that for any linear, monadic CFTG, there exists a weakly equivalent epsilon-free, linear, nondeleting, monadic CFTG.",
        "Because any epsilon-free CFTG cannot generate a tree with E, it is clear that for a CFTG with epsilon-rules, there generally doesn’t exist an equivalent epsilon-free CFTG.",
        "Theorem 4.1 For any linear, monadic CFTG G = (N, E, P, S), if A V Ls(G), then there exists a weakly equivalent epsilon-free, linear, nondeleting, monadic CFTG G'.",
        "If A E Ls(G), then there exists G' whose epsilon-rule is only S – * E. Proof.",
        "Since it is enough to show the existence of a weakly equivalent grammar, without loss of generality, we may assume that G is in strong normal form.",
        "We may also assume that the initial nonterminal S doesn’t appear in the right-hand side of any rule in P. We first construct subsets of nonterminals E0 and E1 as follows.",
        "For initial values, we set E0 = {A E N0 |A – * E E P} and E1 = 0.",
        "We repeat the following operations to E0 and E1 until no more operations are possible: • If A – * B(C) with B E E1 and C E E0 is in P, then add A E N0 to E0.",
        "• If A(x) – * b(C, x) with C E E0 is in P, then add A E N1 to E1.",
        "• If A(x) – * b(x, C) with C E E0 is in P, then add A E N1 to E1.",
        "• If A(x) – * B(C(x)) with B, C E E1 is in P, then add A E N1 to E1.",
        "In the result, E0 satisfies the following.",
        "E0 = {A E N0 |]a E TE, A G a, yield(a) = a} We construct G' = (N', E', PP, S) as follows.",
        "The set of nonterminals is N' = N0 U N1 such that N0 = N0 U {A|A E N1} and N1 = N1.",
        "The set of terminal is E' = E U {c}, where c is a new symbol of rank 1.",
        "The set of rules PP is the smallest set satisfying following conditions: • P' contains all rules in P except rules of the form A – * E. • If S E E0, then S – * E is in P'.",
        "• If A – * B(C) is in P and C E E0, then A BisinP'.",
        "• If A(x) B(C(x)) is in P, then A – * B(C) is in PP.",
        "• If A(x) b(C, x) or A(x) – * b(x, C) is in P and C E E0, then A(x) – * c(x) is in PP.",
        "• If A(x) b(C, x) or A(x) – * b(x, C) is in P, then A c(C) is in PP.",
        "To show Ls(G') = Ls(G), we prove the following (i), (ii) and (iii) hold by induction on the length of derivations: (i) For A E N0, A * a' and a' E TE if and only if A a for some a E TE such that G yield(a) = yield(a') =7� A.",
        "(ii) For A E N1, A(x) *a' and a' E TE (X1) if and only A(x) G a for some a E TE (X1) such that yield(a) = yield(a').",
        "(iii) For A E No − N0, A * a' and a' E TE if and only if A(x) G a for some a E TE (X1) such that yield(a[E]) = yield(a') =7� A.",
        "We start with “only if” part.",
        "For 0-step derivations, (i), (ii) and (iii) clearly hold since there doesn’t exists a' E TE nor a' E TE (Xi) for each statement.",
        "We consider the cases for 1-step derivations.",
        "[Proof of (i)] If A G� a' and a' E TE, then a' = a for some a E Eo and the rule A – * a in PP has been used.",
        "Therefore, A – * a is in P and A a. G [Proof of (ii)] If A(x) G� a' and a' E TE(Xi), then a' = c(x) and the rule A(x) – * c(x) in PP has been used.",
        "By the definition of P', A(x) – * b(C, x) or A(x) – * b(x, C) is in P for some C E Eo.",
        "There exists y E TE such that � C y and yield(-y) = A.",
        "Therefore, A(x) G G � � b(C, x) G b(-y, x) or A(x) G b(x, C) G b(x, -y), and yield(b(xy, x)) = yield(b(x, -y)) = yield(c(x)).",
        "[Proof of (iii)] There doesn’t exists a' E TE such that A GZ a'.",
        "For k > 2, assume that (i), (ii) and (iii) holds for any derivation of length less than k. [Proof of (i)] If A k a', then the rule used at the first step is one of the follwoing form: (1) A – * B(C) or (2) A B.",
        "In the case (1), A Z B(C) * 0'[-y'] = a' for some Q' E TE (Xi) and 'y' E TE such that B (x) G� (i' and C 'y'.",
        "By the induction hypothesis of (ii), there G� � exists Q E TE (Xi) such that B (x) G Q and yield(Q) = yield(Q').",
        "By the induction hypothesis of (i), there exists y E TE such that C � ry and yield(-y) = yield(-y').",
        "By the definition of P', A – * B(C) is in P. Therefore, A G B(C) G (i[ry] and yield(Q[-y]) = yield(Q'[-y']).",
        "In the case (2), AB * a'.",
        "By the definition of P', A – * B(C) is in P for some C E Eo.",
        "There exists y E TE such that C * y and yield(-y) = A.",
        "By the induction hypothesis of (iii), there exists Q E TE (Xi) such that B(x) G Q and yield(Q[E]) = yield(a').",
        "Therefore, A G* B(C) * Q[-y] and yield(Q[ry]) = yield(a').",
        "[Proof of (ii)] If A(x) Gk a', then the rule used at the first step is one of the follwoing form: (1) A(x) B(C(x)), (2) A(x) – * b(C, x) or (3) A(x) b(x, C).",
        "Becasue these rule are in P, the proofs are direct from the induction hypothesis like the proof of the case (1) of (i).",
        "[Proof of (iii)] If A k a', then the rule used at the first step is one of the follwoing form: (1) A – * B(C) or (2) A – * c(C).",
        "In the case (1), A G� B(C) G� (i'[ry'] = a' for some (i' E TE(Xi) � and 'y' E TE such that B(x) G� (i' and C G� ry'.",
        "By the induction hypothesis of (ii), there exists Q E TE(Xi) such that B(x) G Q and yield(Q) = yield(Q').",
        "By the induction hypothesis of (iii), there exists 7 E TE(Xi) such that C(x) G ry and yield(-y[E]) = yield(-y').",
        "By the definition of P', A(x) – * B(C(x)) is in P. Therefore, A(x) G* B(C(x)) G Q[-y] and yield(O[-[E]]) = yield(O'[-y']).",
        "In the case (2), A GZ c(C) G� c(ry') = a' for some 'y' E TE such that C 'y'.",
        "By the in-G� duction hypothesis of (i), there exists y E TE such that C y and yield(-y) = yield(-y').",
        "By the def G inition of P', A(x) – * b(C, x) or A(x) – * b(x, C) is in P. Without loss of generality, we may assume that A(x) b(C, x) is in P. Therefore, A(x) G b(C, x) G b(-y, x) and yield(b(xy, x)[E]) = yield(c(-y')).",
        "The “if” part is similarly proved as follows.",
        "For 0-step derivations, (i), (ii) and (iii) clearly hold since there doesn’t exists a E TE nor a E TE (Xi) for each statement.",
        "The cases for 1-step derivations are proved.",
        "[Proof of (i)] If A a and a E TE, then a = a G for some a E Eo and the rule A – * a in P has been used.",
        "Therefore, A – * a is in P' and A GZ a.",
        "[Proof of (ii) and (iii)] There doesn’t exists a E TE such that A G* a.",
        "For k > 2, assume that (i), (ii) and (iii) holds for any derivation of length less than k. [Proof of (i)] If A k a, then the rule used at the first step must be of the form A – * B(C).",
        "Thus, A B(C) G (i[ry] = a for some Q E TE(Xi) G � � and y E TE such that B(x) G Q and C G ry.",
        "Here, we have to think of the two cases: (1) yield(-y) =7� A and (2) yield(-y) = A.",
        "In the case (1), by the induction hypothesis of (ii), there exists Q' E TE(Xi) such that B(x) 4 0' and yield(Q') = yield(Q), and by the induction hypothe� sis of (i), there exists 'y' E TE such that C 'y' and G� yield(-y') = yield(-y).",
        "By the definition of P', A � B(C) is in P. Therefore, A G� B(C) G (i'[ry'] and yield(Q'[ry']) = yield(Q[-y]).",
        "In the case (2), C E Eo.",
        "Thus, A B is in P'.",
        "By the induction hypothesis of (iii), there exists Q' E TE(Xi) such that B 0' and yield(O') = yield(O[E]).",
        "Therefore, A G� B G� Q' and yield(Q') = yield(Q[-y]).",
        "[Proof of (ii)] If A(x) Gk a, then the rule used at the first step is one of the follwoing form: (1) A(x) B(C(x)), (2) A(x) – * b(C, x) or (3) A(x) b(x, C).",
        "The proof of the case (1) is direct from the induction hypothesis.",
        "In the case (2), A(x) G b(C, x) G b(-y, x) = a for some y E TE such that C 'y.",
        "Here, we have to think of the two G cases: (a) yield(-y) =7� A and (b) yield(-y) = A.",
        "(a) If yield(-y) =7� A, then by the induction hypothesis of (i), there exists 'y' E TE such that C 'y' and yield(-y') = yield(-y).",
        "By the definition of P', A(x) – * b(C, x) is in P'.",
        "Therefore, A(x) b(C, x) * b(-y', x) and yield(b(-y', x)) = yield(b(-y, x)).",
        "(b) If yield(-y) = A, then C E E0 and A(x) – * c(x) is in P'.",
        "Therefore, A(x) GI c(x) and yield(c(x)) = yield(b(-y, x)).",
        "The proof of the case (3) is similar to that of the case (2).",
        "[Proof of (iii)] If A(x) G� a, then the rule used at the first step is one of the follwoing form: (1) A(x) – * B(C(x)), (2) A(x) – * b(C, x) or (3) A(x) – * b(x, C).",
        "In the case (1), A(x) G* B(C(x)) G (i[-y] = a for some 0,-y E TE(X1) such that B(x) Q and C(x) * 'y.",
        "By the definition of P', A B(C) is in P'.",
        "By the induction hypothesis of (ii), there exists Q' E TE(X1) such that B(x) G� Q' and yield(Q') = yield(Q).",
        "By the induction_hypothesis of (iii), there exists 'y' E TE such that C * 'y' and yield(-y') yield (-y [E]).",
        "Therefore, A GZ B(C) G� (i'[ry'] and yield (0' ['y']) = yield(o ['y [E] ]) .",
        "In the case (2), A(x) G b(C, x) G b(-y, x) = a for some y E TE such that C y and yield(-y) =7� A.",
        "By the definition of P', A – * c(C) is in PP.",
        "By the induction hypothesis of (i), there exists 'y' E TE such that C 'y' and yield(-y') = yield(-y).",
        "Therefore, A G� c(C) G� c(-y') and yield(c(xy')) = yield (b(-y, x)[E]).",
        "The proof of the case (3) is similar to that of the case (2).",
        "By (i), we have the result Ls(!g') = Ls(9).",
        "❑ 5 Conclusions In this paper, the desirable features of linear monadic CFTGs have been discovered: the restriction of nondeletion doesn’t affect their generative power of tree languages, and the restriction of epsilon-freeness can be assumed when their generation of string languages is considered.",
        "The key to the proofs of this paper was the simplicity of the definition of linear, monadic CFTGs and their normal form.",
        "Recently, the class of grammars called mildly context-sensitive grammars has been studied very actively, to which TAGs and other well-established formalisms for natural languages belong.",
        "Since it is not difficult to study formal properties of linear, monadic CFTGs, they are helpful tools for the study of mildly context-sensitive grammars.",
        "References Anne Abeill´e and Owen Rambow, editors.",
        "2000.",
        "Tree adjoining grammars: formalisms, linguistic analysis and processing.",
        "CSLI Publications, Stanford, California.",
        "Walter S. Brainerd.",
        "1969.",
        "Tree generating regular systems.",
        "Information & Control, 14(2):217–231.",
        "Akio Fujiyoshi and Takumi Kasai.",
        "2000.",
        "Spinal-formed context-free tree grammars.",
        "Theory of Computing Systems, 33(1):59–83.",
        "Akio Fujiyoshi.",
        "2004.",
        "Epsilon-free grammars and lexicalized grammars that generate the class of the mildly context-sensitive languages.",
        "In 7th International Workshop on Tree Adjoining Grammar and Related Formalisms: Proceedings of the Workshop, Vancouver, pages 16–23.",
        "Aravind K. Joshi and Yves Schabes, 1996.",
        "Handbook of Formal Languages, volume 3, chapter Tree-adjoining grammars, pages 69–124.",
        "Springer, Berlin.",
        "Aravind K. Joshi, Leon S. Levy, and Masako Taka-hashi.",
        "1975.",
        "Tree adjunct grammars.",
        "J.",
        "Computer & System Sciences, 10(1):136–163.",
        "Uwe M¨oennich.",
        "1997.",
        "Adjunction as substitution: an algebraic formulation of regular, context-free and tree adjoining languages.",
        "In G. V. Morrill G-J.",
        "Kruijff and R. T. Oehrle, editors, Formal Grammars 1997: Proceedings of the Conference, Aixen-Provence, pages 169–178.",
        "Sanguthevar Rajasekaran and Shibu Yooseph.",
        "1998.",
        "TAL recognition in O(M(n2)) time.",
        "J.",
        "Computer & System Sciences, 56(1):83–89.",
        "Sanguthevar Rajasekaran.",
        "1996.",
        "Tree-adjoining language parsing in O(n6) time.",
        "SIAMJ.",
        "Com-put., 25(4):862–873.",
        "William C. Rounds.",
        "1970.",
        "Mapping and grammars on trees.",
        "Mathematical Systems Theory, 4(3):257–287.",
        "K. Vijay-Shanker and David J. Weir.",
        "1994.",
        "The equivalence of four extensions of context-free grammars.",
        "Mathematical Systems Theory, 27(6):511–546.",
        "The tree language generated by G is the set L(G) = {a E TE |S * a}.",
        "The string language generated by G is LS(G) = {yield(a) |a E L(G)}.",
        "Note that LS(G) 9 (E0 − {e})*.",
        "Let !g and !g' be CFTGs.",
        "!g and 9' are equivalent if L(!9) = L(9').",
        "9 and 9' are weakly equivalent if LS(9) = LS(9')."
      ]
    },
    {
      "heading": "2.3 Restrictions on CFTGs",
      "text": [
        "A CFTG !9 = (N, E, P, S) is monadic if the rank of any nonterminal is 0 or 1, i.e., N = N0 U N1 and Nn = 0 for n > 2.",
        "!g is linear if for any rule A(x1, x2,... , xn) – * a in P, a E TNUE (rXn] ), and nondeleting if for any rule A(x1, x2, ... , xn) – *a in P, a E TNUE (LXnl ).",
        "A CFTG !g = (N, E, P, S) is epsilon-free if for any rule A(x1, x2,... , xn) – * a in P, the symbol E doesn’t occur in a.",
        "When g is monadic, all rules are either of the form A(x) – * a with A E N1 and a E TNUE (X1) or of the form B – * Q with B E N0 and Q E TNUE.",
        "When g is monadic, linear and nondeleting, for any rule A(x) – * a with A E N1 in P, there exists exactly one occurrence of x in a.",
        "For linear, nondeleting, monadic CFTGs, the following results are known.",
        "Theorem 2.1 (Fujiyoshi and Kasai, 2000) The class of string languages generated by linear, nondeleting, monadic CFTGs coincides with the class of string languages generated by TAGs.",
        "• For any a E E, the rank of a is either 0 or 2.",
        "• For each A E N0, if A – * a is in P, then either a= a with a E E0, or a= B(C) with B E N1 and C E N0.",
        "See (1) and (2) in Figure 3.",
        "• For each A E N1, if A(x) – * a is in P, then a is one of the following forms:",
        "If a linear, nondeleting, monadic CFTG satisfies the condition of Theorem 2.2, it is said that the grammar is in strong normal form1 ."
      ]
    },
    {
      "heading": "3 Linearity and Nondeletion on Monadic CFTGs",
      "text": [
        "Because linear, nondeleting, monadic CFTGs generate the same class of string languages as TAGs, the question is whether the restrictions of linearity and nondeletion on monadic CFTGs are necessary to generate the same class of languages.",
        "First, it will be shown that nondeletion is unnecessary.",
        "Theorem 3.1 For any linear, monadic CFTG !g, there exists an equivalent linear, nondeleting, monadic CFTG !9'.",
        "Proof.",
        "Let !9 = (N, E, P, S) be a linear, monadic CFTG.",
        "An equivalent linear, nondeleting, monadic CFTG !9' = (N', E, PP, S) can be constructed as follows.",
        "The set of nonterminal is N' = N0 U N1 such that N0 = N0 U {A A E N1l and N'1 = N1.",
        "For the preparation of the definition of P', for a E TNUE(X1) we define H(a) C TN�uE(X1) as the smallest set satisfying the following conditions:",
        "• a E II(a)D",
        "• If Q E 11(a) and Q = Q'[B(Q\")] for some B E",
        "N1, of E TN�uE (FX1 1) n TN�uE (LX1 l) and Q\" E TN,uE, then Q'[ B ] E 11(a).",
        "The set of rules is defined as follows.",
        "Because of the construction of N' and P', g' is monadic and nondeleting.",
        "To show the equivalence of !g and W, we prove the following statement holds for any a E TNuE and Q E TE by induction on the length of derivations: a Q if and only if there exitsts ˆ E",
        "H(a) such that ˆ G� Q.",
        "We start with proving “only-if” part.",
        "Let a k (i.",
        "holds for any derivation of length less than k. If a rule of the form A – * y with A E N0 is used at the first step, the proof is rather simple, so we only prove the other case.",
        "Suppose that a rule A(x) – * y with A E N1 is used at the first step and a = a'[A(a\")] some a' E TNuE (rX1 i) n TNuE (LX1 l) and a\" E TNuE.",
        "By the induction hypothesis, there exist S E II (a' ['y [a\"] ]) such that S * Q.",
        "Here, we have to",
        "In the case (2), A ˆ is in P' and therefore, S'[ A ] E 11(a) and S'[ A ] S'[ry] * Q.",
        "And in the case (3), A(x) ˆ is in PP and therefore,",
        "sume that the statement holds for any derivation of length less than k. The rule used at the first step is one of the following forms: (1) A – * ˆ with A E N0, (2) A(x) – * ˆ with A E N1, or (3) A ˆ with A E N0 – N0.",
        "The proof of the case (1) is similar to the proofs of the other cases, so we start proving the case (2).",
        "In the case (2), a = a'[A(a\")] a'[ry[a\"]] * Q for some ˆa' E TN'UE (rX11) n TN�uE (LX1 J) and ˆa\" E TN�uE.",
        "By the definition of P', A(x) – * y is in P such that ˆ E 1-1(-y).",
        "By the induction hypothesis, for any S E TNuE such that ˆa' [ˆry[ˆa\"] ] E 1-1(S), S Q.",
        "By the definition of H, there exists a' E TNuE (X 1) and a\" E TNuE such that a = a'[A(a\")] G a'['y[a\"]], and ˆa'[ˆry[ˆa\"]] E II(a'[-[a\"]]).",
        "Therefore, a G (i.",
        "And in the case (3), ˆ = ˆ6z'[ A ] G� ˆa' [ˆry] G� (i for some ˆGY' E TN'UE (FX11) n TN�uE (LX1 ) .",
        "By the definition of P', A(x) – * y is in P such that ˆ E 1-1(-y).",
        "By the induction hypothesis, for any S E TNuE such that ˆa'[ˆry] E H(S), S G (i.",
        "By the definition of H, there exists a' E TNuE(X1) and a\" E TNuE such that a = a'[A(a\")] G a'['y[a\"]], and ˆa'[ˆry] E II(a'[-[a\"]]).",
        "Therefore, a Because H(S) = {S}, L(9) = L(91).",
        "Next, consideration will be given to whether the restriction of linearity can be removed from",
        "monadic CFTGs to generate the same class of languages.",
        "The answer is negative.",
        "The following example is a non-linear, monadic CFTG that generates a string language that no linear, monadic CFTG can generate.",
        "Example 3.2 The following is an example of a monadic CFTG that generates the string language L,,,4 = {wwww |w E {a, b}+}.",
        "G = (N, E, P, S) where N = {S, A}, the ranks of S and A are 0 and 1, respectively, E = {a, b, c, d}, the ranks of a, b, c and d are 0, 0, 2 and 4, respectively, and P consists of the following rules:",
        "Theorem 3.3 There exists a monadic CFTG which is not weakly equivalent to any linear, monadic CFTG.",
        "Proof.",
        "It is known that the string language L,,,4 in Example 3.2 cannot be generated by any TAG.",
        "It cannot be generated by any linear, monadic CFTG, neither."
      ]
    },
    {
      "heading": "4 Epsilon-Freeness on Linear, Monadic CFTGs",
      "text": [
        "According to our definition of CFTGs, they are allowed to generate trees with the special symbol E, which is treated as the empty string while taking the yields of trees.",
        "In this section, it will be seen that for any linear, monadic CFTG, there exists a weakly equivalent epsilon-free, linear, nondeleting, monadic CFTG.",
        "Because any epsilon-free CFTG cannot generate a tree with E, it is clear that for a CFTG with epsilon-rules, there generally doesn’t exist an equivalent epsilon-free CFTG.",
        "Theorem 4.1 For any linear, monadic CFTG G = (N, E, P, S), if A V Ls(G), then there exists a weakly equivalent epsilon-free, linear, nondeleting, monadic CFTG G'.",
        "If A E Ls(G), then there exists G' whose epsilon-rule is only S – * E. Proof.",
        "Since it is enough to show the existence of a weakly equivalent grammar, without loss of generality, we may assume that G is in strong normal form.",
        "We may also assume that the initial nonterminal S doesn’t appear in the right-hand side of any rule in P. We first construct subsets of nonterminals E0 and E1 as follows.",
        "For initial values, we set E0 = {A E N0 |A – * E E P} and E1 = 0.",
        "We repeat the following operations to E0 and E1 until no more operations are possible:",
        "• If A – * B(C) with B E E1 and C E E0 is in P, then add A E N0 to E0.",
        "• If A(x) – * b(C, x) with C E E0 is in P, then add A E N1 to E1.",
        "• If A(x) – * b(x, C) with C E E0 is in P, then add A E N1 to E1.",
        "• If A(x) – * B(C(x)) with B, C E E1 is in P, then add A E N1 to E1.",
        "In the result, E0 satisfies the following.",
        "We construct G' = (N', E', PP, S) as follows.",
        "The set of nonterminals is N' = N0 U N1 such that N0 = N0 U {A|A E N1} and N1 = N1.",
        "The set of terminal is E' = E U {c}, where c is a new symbol of rank 1.",
        "The set of rules PP is the smallest set satisfying following conditions:",
        "• P' contains all rules in P except rules of the form A – * E. • If S E E0, then S – * E is in P'.",
        "• If A – * B(C) is in P and C E E0, then A BisinP'.",
        "• If A(x) B(C(x)) is in P, then A – * B(C) is in PP.",
        "• If A(x) b(C, x) or A(x) – * b(x, C) is in P and C E E0, then A(x) – * c(x) is in PP.",
        "• If A(x) b(C, x) or A(x) – * b(x, C) is in P, then A c(C) is in PP.",
        "To show Ls(G') = Ls(G), we prove the following (i), (ii) and (iii) hold by induction on the length of derivations: (i) For A E N0, A * a' and a' E TE if and only if A a for some a E TE such that",
        "(ii) For A E N1, A(x) *a' and a' E TE (X1) if and only A(x) G a for some a E TE (X1) such that yield(a) = yield(a').",
        "(iii) For A E No − N0, A * a' and a' E TE if and only if A(x) G a for some a E TE (X1) such that yield(a[E]) = yield(a') =7� A.",
        "We start with “only if” part.",
        "For 0-step derivations, (i), (ii) and (iii) clearly hold since there doesn’t exists a' E TE nor a' E TE (Xi) for each statement.",
        "We consider the cases for 1-step derivations.",
        "[Proof of (i)] If A G� a' and a' E TE, then a' = a for some a E Eo and the rule A – * a in PP has been used.",
        "Therefore, A – * a is in P and A a.",
        "b(C, x) G b(-y, x) or A(x) G b(x, C) G b(x, -y), and yield(b(xy, x)) = yield(b(x, -y)) = yield(c(x)).",
        "[Proof of (iii)] There doesn’t exists a' E TE such that A GZ a'.",
        "For k > 2, assume that (i), (ii) and (iii) holds for any derivation of length less than k.",
        "[Proof of (i)] If A k a', then the rule used at the first step is one of the follwoing form: (1) A – * B(C) or (2) A B.",
        "In the case (1), A Z B(C) * 0'[-y'] = a' for some Q' E TE (Xi) and 'y' E TE such that B (x) G� (i' and C 'y'.",
        "By the induction hypothesis of (ii), there",
        "yield(Q) = yield(Q').",
        "By the induction hypothesis of (i), there exists y E TE such that C � ry and yield(-y) = yield(-y').",
        "By the definition of P', A – * B(C) is in P. Therefore, A G B(C) G (i[ry] and yield(Q[-y]) = yield(Q'[-y']).",
        "In the case (2), AB * a'.",
        "By the definition of P', A – * B(C) is in P for some C E Eo.",
        "There exists y E TE such that C * y and yield(-y) = A.",
        "By the induction hypothesis of (iii), there exists Q E TE (Xi) such that B(x) G Q and yield(Q[E]) = yield(a').",
        "Therefore,",
        "A(x) b(x, C).",
        "Becasue these rule are in P, the proofs are direct from the induction hypothesis like the proof of the case (1) of (i).",
        "[Proof of (iii)] If A k a', then the rule used at the first step is one of the follwoing form: (1) A – * B(C) or (2) A – * c(C).",
        "In the case (1), A G� B(C) G� (i'[ry'] = a' for some (i' E TE(Xi) � and 'y' E TE such that B(x) G� (i' and C G� ry'.",
        "By the induction hypothesis of (ii), there exists Q E TE(Xi) such that B(x) G Q and yield(Q) = yield(Q').",
        "By the induction hypothesis of (iii), there exists 7 E TE(Xi) such that C(x) G ry and yield(-y[E]) = yield(-y').",
        "By the definition of P', A(x) – * B(C(x)) is in P. Therefore, A(x) G* B(C(x)) G Q[-y] and yield(O[-[E]]) = yield(O'[-y']).",
        "In the case (2), A GZ c(C) G� c(ry') = a' for some 'y' E TE such that C 'y'.",
        "By the in-G� duction hypothesis of (i), there exists y E TE such that C y and yield(-y) = yield(-y').",
        "By the def",
        "inition of P', A(x) – * b(C, x) or A(x) – * b(x, C) is in P. Without loss of generality, we may assume that A(x) b(C, x) is in P. Therefore, A(x) G b(C, x) G b(-y, x) and yield(b(xy, x)[E]) = yield(c(-y')).",
        "The “if” part is similarly proved as follows.",
        "For 0-step derivations, (i), (ii) and (iii) clearly hold since there doesn’t exists a E TE nor a E TE (Xi) for each statement.",
        "The cases for 1-step derivations are proved.",
        "[Proof of (i)] If A a and a E TE, then a = a",
        "for some a E Eo and the rule A – * a in P has been used.",
        "Therefore, A – * a is in P' and A GZ a.",
        "[Proof of (ii) and (iii)] There doesn’t exists a E TE such that A G* a.",
        "For k > 2, assume that (i), (ii) and (iii) holds for any derivation of length less than k. [Proof of (i)] If A k a, then the rule used at the first step must be of the form A – * B(C).",
        "Thus, A B(C) G (i[ry] = a for some Q E TE(Xi)",
        "and y E TE such that B(x) G Q and C G ry.",
        "Here, we have to think of the two cases: (1) yield(-y) =7� A and (2) yield(-y) = A.",
        "In the case (1), by the induction hypothesis of (ii), there exists Q' E TE(Xi) such that B(x) 4 0' and yield(Q') = yield(Q), and by the induction hypothe� sis of (i), there exists 'y' E TE such that C 'y' and",
        "and yield(Q'[ry']) = yield(Q[-y]).",
        "In the case (2), C E Eo.",
        "Thus, A B is in P'.",
        "By the induction hypothesis of (iii), there exists Q' E TE(Xi) such that B 0' and yield(O') = yield(O[E]).",
        "Therefore, A G� B G� Q' and yield(Q') = yield(Q[-y]).",
        "[Proof of (ii)] If A(x) Gk a, then the rule used at the first step is one of the follwoing form: (1) A(x) B(C(x)), (2) A(x) – * b(C, x) or (3) A(x) b(x, C).",
        "The proof of the case (1) is direct from the induction hypothesis.",
        "In the case (2), A(x) G b(C, x) G b(-y, x) = a for some y E TE such that C 'y.",
        "Here, we have to think of the two G cases: (a) yield(-y) =7� A and (b) yield(-y) = A.",
        "(a) If yield(-y) =7� A, then by the induction hypothesis of (i), there exists 'y' E TE such that C 'y' and yield(-y') = yield(-y).",
        "By the definition of P', A(x) – * b(C, x) is in P'.",
        "Therefore, A(x) b(C, x) * b(-y', x) and yield(b(-y', x)) = yield(b(-y, x)).",
        "(b) If yield(-y) = A, then C E E0 and A(x) – * c(x) is in P'.",
        "Therefore, A(x) GI c(x) and yield(c(x)) = yield(b(-y, x)).",
        "The proof of the case (3) is similar to that of the case (2).",
        "[Proof of (iii)] If A(x) G� a, then the rule used at the first step is one of the follwoing form: (1) A(x) – * B(C(x)), (2) A(x) – * b(C, x) or (3) A(x) – * b(x, C).",
        "In the case (1), A(x) G* B(C(x)) G (i[-y] = a for some 0,-y E TE(X1) such that B(x) Q and C(x) * 'y.",
        "By the definition of P', A B(C) is in P'.",
        "By the induction hypothesis of (ii), there exists Q' E TE(X1) such that B(x) G� Q' and yield(Q') = yield(Q).",
        "By the induction_hypothesis of (iii), there exists 'y' E TE such that C * 'y' and yield(-y') yield (-y [E]).",
        "Therefore, A GZ B(C) G� (i'[ry'] and yield (0' ['y']) = yield(o ['y [E] ]) .",
        "In the case (2),",
        "By the definition of P', A – * c(C) is in PP.",
        "By the induction hypothesis of (i), there exists 'y' E TE such that C 'y' and yield(-y') = yield(-y).",
        "Therefore, A G� c(C) G� c(-y') and yield(c(xy')) = yield (b(-y, x)[E]).",
        "The proof of the case (3) is similar to that of the case (2).",
        "By (i), we have the result Ls(!g') = Ls(9).",
        "❑"
      ]
    },
    {
      "heading": "5 Conclusions",
      "text": [
        "In this paper, the desirable features of linear monadic CFTGs have been discovered: the restriction of nondeletion doesn’t affect their generative power of tree languages, and the restriction of epsilon-freeness can be assumed when their generation of string languages is considered.",
        "The key to the proofs of this paper was the simplicity of the definition of linear, monadic CFTGs and their normal form.",
        "Recently, the class of grammars called mildly context-sensitive grammars has been studied very actively, to which TAGs and other well-established formalisms for natural languages belong.",
        "Since it is not difficult to study formal properties of linear, monadic CFTGs, they are helpful tools for the study of mildly context-sensitive grammars."
      ]
    }
  ]
}
