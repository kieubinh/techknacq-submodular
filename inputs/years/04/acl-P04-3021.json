{
  "info": {
    "authors": [
      "Srinivas Bangalore"
    ],
    "book": "Annual Meeting of the Association for Computational Linguistics – Interactive Poster and Demonstration Sessions",
    "id": "acl-P04-3021",
    "title": "Compiling Boostexter Rules into a Finite-State Transducer",
    "url": "https://aclweb.org/anthology/P04-3021",
    "year": 2004
  },
  "references": [
    "acl-J94-3001",
    "acl-J99-2004",
    "acl-P96-1029",
    "acl-P96-1031",
    "acl-P99-1033",
    "acl-W00-0508"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "A number of NLP tasks have been effectively modeled as classification tasks using a variety of classification techniques.",
        "Most of these tasks have been pursued in isolation with the classifier assuming unambiguous input.",
        "In order for these techniques to be more broadly applicable, they need to be extended to apply on weighted packed representations of ambiguous input.",
        "One approach for achieving this is to represent the classification model as a weighted finite-state transducer (WFST).",
        "In this paper, we present a compilation procedure to convert the rules resulting from an AdaBoost classifier into an WFST.",
        "We validate the compilation technique by applying the resulting WFST on a call-routing application."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "Many problems in Natural Language Processing (NLP) can be modeled as classification tasks either at the word or at the sentence level.",
        "For example, part-of-speech tagging, named-entity identification supertagging1, word sense disambiguation are tasks that have been modeled as classification problems at the word level.",
        "In addition, there are problems that classify the entire sentence or document into one of a set of categories.",
        "These problems are loosely characterized as semantic classification and have been used in many practical applications including call routing and text classification.",
        "Most of these problems have been addressed in isolation assuming unambiguous (one-best) input.",
        "Typically, however, in NLP applications these modules are chained together with each module introducing some amount of error.",
        "In order to alleviate the errors introduced by a module, it is typical for a module to provide multiple weighted solutions (ideally as a packed representation) that serve as input to the next module.",
        "For example, a speech recognizer provides a lattice of possible recognition outputs that is to be annotated with part-of-speech and 1associating each word with a label that represents the syntactic information of the word given the context of the sentence.",
        "named-entities.",
        "Thus classification approaches need to be extended to be applicable on weighted packed representations of ambiguous input represented as a weighted lattice.",
        "The research direction we adopt here is to compile the model of a classifier into a weighted finite-state transducer (WFST) so that it can compose with the input lattice.",
        "Finite state models have been extensively applied to many aspects of language processing including, speech recognition (Pereira and Riley, 1997), phonology (Kaplan and Kay, 1994), morphology (Koskenniemi, 1984), chunking (Abney, 1991; Bangalore and Joshi, 1999), parsing (Roche, 1999; Oflazer, 1999) and machine translation (Vilar et al., 1999; Bangalore and Riccardi, 2000).",
        "Finite-state models are attractive mechanisms for language processing since they (a) provide an efficient data structure for representing weighted ambiguous hypotheses (b) generally effective for decoding (c) associated with a calculus for composing models which allows for straightforward integration of constraints from various levels of speech and language processing.2 In this paper, we describe the compilation process for a particular classifier model into an WFST and validate the accuracy of the compilation process on a one-best input in a call-routing task.",
        "We view this as a first step toward using a classification model on a lattice input.",
        "The outline of the paper is as follows.",
        "In Section 2, we review the classification approach to resolving ambiguity in NLP tasks and in Section 3 we discuss the boosting approach to classification.",
        "In Section 4 we describe the compilation of the boosting model into an WFST and validate the result of this compilation using a call-routing task."
      ]
    },
    {
      "heading": "2 Resolving Ambiguity by Classification",
      "text": [
        "In general, we can characterize all these tagging problems as search problems formulated as shown",
        "in Equation (1).",
        "We notate E to be the input vocabulary, Y to be the vocabulary of n tags, an N word input sequence as W (C E+) and tag sequence as T (C Y+).",
        "We are interested in T*, the most likely tag sequence out of the possible tag sequences (T) that can be associated to W.",
        "Following the techniques of Hidden Markov Models (HMM) applied to speech recognition, these tagging problems have been previously modeled indirectly through the transformation of the Bayes rule as in Equation 2.",
        "The problem is then approximated for sequence classification by a kth-order Markov model as shown in Equation (3).",
        "Although the HMM approach to tagging can easily be represented as a WFST, it has a drawback in that the use of large contexts and richer features results in sparseness leading to unreliable estimation of the parameters of the model.",
        "An alternate approach to arriving at T* is to model Equation 1 directly.",
        "There are many examples in recent literature (Breiman et al., 1984; Freund and Schapire, 1996; Roth, 1998; Lafferty et al., 2001; McCallum et al., 2000) which take this approach and are well equipped to handle large number of features.",
        "The general framework for these approaches is to learn a model from pairs of associations of the form (xi, gi) where xi is a feature representation of W and gi (C Y) is one of the members of the tag set.",
        "Although these approaches have been more effective than HMMs, there have not been many attempts to represent these models as a WFST, with the exception of the work on compiling decision trees (Sproat and Riley, 1996).",
        "In this paper, we consider the boosting (Freund and Schapire, 1996) approach (which outperforms decision trees) to Equation 1 and present a technique for compiling the classifier model into a WFST."
      ]
    },
    {
      "heading": "3 Boostexter",
      "text": [
        "Boostexter is a machine learning tool which is based on the boosting family of algorithms first proposed in (Freund and Schapire, 1996).",
        "The basic idea of boosting is to build a highly accurate classifier by combining many “weak” or “simple” base learner, each one of which may only be moderately accurate.",
        "A weak learner or a rule h is a triple (p, a, g), which tests a predicate (p) of the input (x) and assigns a weight ai (i = 1 �... � n) for each member (g) of y if p is true in x and assigns a weight (�j) otherwise.",
        "It is assumed that a pool of such weak learners H = {h} can be constructed easily.",
        "From the pool of weak learners, the selection the weak learner to be combined is performed iteratively.",
        "At each iteration t, a weak learner ht is selected that minimizes a prediction error loss function on the training corpus which takes into account the weight wt assigned to each training example.",
        "Intuitively, the weights encode how important it is that ht correctly classifies each training example.",
        "Generally, the examples that were most often misclassified by the preceding base classifiers will be given the most weight so as to force the base learner to focus on the “hardest” examples.",
        "As described in (Schapire and Singer, 1999), Boostexter uses confidence rated classifiers ht that output a real number ht(x, g) whose sign (-1 or +1) is interpreted as a prediction, and whose magnitude I ht (x) is a measure of “confidence”.",
        "The iterative algorithm for combining weak learners stops after a pre-specified number of iterations or when the training set accuracy saturates."
      ]
    },
    {
      "heading": "3.1 Weak Learners",
      "text": [
        "In the case of text classification applications, the set of possible weak learners is instantiated from simple n-grams of the input text (W).",
        "Thus, if Xn is a function to produce all n-grams up to n of its argument, then the set of predicates for the weak learners is P = X n (W) .",
        "For word-level classification problems, which take into account the left and right context, we extend the set of weak learners created from the word features with those created from the left and right context features.",
        "Thus features of the left context (0L), features of the right context (0R) and the features of the word itself (��„i) constitute the features at position i.",
        "The predicates for the pool of weak learners are created from these set of features and are typically n-grams on the feature representations.",
        "Thus the set of predicates resulting from the word level features is HW = Uix,,,WWi), from left context features is HL = Uix,,,(0L) and from right context features is HR = Uix,,,(0R).",
        "The set of predicates for the weak learners for word level classification problems is: H = HW U HL U HR."
      ]
    },
    {
      "heading": "3.2 Decoding",
      "text": [
        "The result of training is a set of selected rules {hl, h2i ... , hN} (C H).",
        "The output of the final classifier is F(x, g) = EN 1 ht (x, g), i.e. the sum of confidence of all classifiers ht.",
        "The real-valued predictions of the final classifier F can be converted into probabilities by a logistic function transform; that is",
        "To date, decoding using the boosted rule sets is restricted to cases where the test input is unambiguous such as strings or words (not word graphs).",
        "By compiling these rule sets into WFSTs, we intend to extend their applicability to packed representations of ambiguous input such as word graphs."
      ]
    },
    {
      "heading": "4 Compilation",
      "text": [
        "We note that the weak learners selected at the end of the training process can be partitioned into one of three types based on the features that the learners test.",
        "• hW: test features of the word • hL: test features of the left context • hR: test features of the right context",
        "We use the representation of context-dependent rewrite rules (Johnson, 1972; Kaplan and Kay, 1994) and their weighted version (Mohri and Sproat, 1996) to represent these weak learners.",
        "The (weighted) context-dependent rewrite rules have the general form",
        "where , , y and b are regular expressions on the alphabet of the rules.",
        "The interpretation of these rules are as follows: Rewrite 0 by 0 when it is preceded by y and followed by b.",
        "Furthermore, 0 can be extended to a rational power series which are weighted regular expressions where the weights encode preferences over the paths in 0 (Mohri and Sproat, 1996).",
        "Each weak learner can then be viewed as a set of weighted rewrite rules mapping the input word into each member gi (E Y) with a weight ai when the predicate of the weak learner is true and with weight Qi when the predicate of the weak learner is false.",
        "The translation between the three types of weak learners and the weighted context-dependency rules is shown in Table 13.",
        "We note that these rules apply left to right on an input and do not repeatedly apply at the same point in an input since the output vocabulary Y would typically be disjoint from the input vocabulary E. We use the technique described in (Mohri and Sproat, 1996) to compile each weighted context-dependency rules into an WFST.",
        "The compilation is accomplished by the introduction of context symbols which are used as markers to identify locations for rewrites of 0 with 0.",
        "After the rewrites, the markers are deleted.",
        "The compilation process is represented as a composition of five transducers.",
        "The WFSTs resulting from the compilation of each selected weak learner (Ai) are unioned to create the WFST to be used for decoding.",
        "The weights of paths with the same input and output labels are added during the union operation.",
        "We note that the due to the difference in the nature of the learning algorithm, compiling decision trees results in a composition of WFSTs representing the rules on the path from the root to a leaf node (Sproat and Riley, 1996), while compiling boosted rules results in a union of WFSTs, which is expected to result in smaller transducers.",
        "In order to apply the WFST for decoding, we simply compose the model with the input represented as an WFST (a,) and search for the best path (if we are interested in the single best classification result).",
        "We have compiled the rules resulting from boos-texter trained on transcriptions of speech utterances from a call routing task with a vocabulary (I E 1) of 2912 and 40 classes (n = 40).",
        "There were a total of 1800 rules comprising of 900 positive rules and their negative counterparts.",
        "The WFST resulting from compiling these rules has a 14372 states and 5.7 million arcs.",
        "The accuracy of the WFST on a random set of 7013 sentences was the same (85% accuracy) as the accuracy with the decoder that accompanies the boostexter program.",
        "This validates the compilation procedure."
      ]
    },
    {
      "heading": "5 Conclusions",
      "text": [
        "Classification techniques have been used to effectively resolve ambiguity in many natural language 3 For ease of exposition, we show the positive and negative sides of a rule each resulting in a context dependency rule.",
        "However, we can represent them in the form of a single context dependency rule which is ommitted here due to space constraints.",
        "processing tasks.",
        "However, most of these tasks have been solved in isolation and hence assume an unambiguous input.",
        "In this paper, we extend the utility of the classification based techniques so as to be applicable on packed representations such as word graphs.",
        "We do this by compiling the rules resulting from an AdaBoost classifier into a finite-state transducer.",
        "The resulting finite-state transducer can then be used as one part of a finite-state decoding chain."
      ]
    }
  ]
}
