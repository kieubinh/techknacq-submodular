{
  "info": {
    "authors": [
      "Massimiliano Ciaramita",
      "Mark Johnson"
    ],
    "book": "SENSEVAL International Workshop on the Evaluation of Systems for the Semantic Analysis of Text",
    "id": "acl-W04-0824",
    "title": "Multi-Component Word Sense Disambiguation",
    "url": "https://aclweb.org/anthology/W04-0824",
    "year": 2004
  },
  "references": [
    "acl-A00-2018",
    "acl-W02-1001",
    "acl-W02-1006"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "This paper describes the system MC-WSD presented for the English Lexical Sample task.",
        "The system is based on a multicomponent architecture.",
        "It consists of one classifier with two components.",
        "One is trained on the data provided for the task.",
        "The second is trained on this data and, additionally, on an external training set extracted from the Wordnet glosses.",
        "The goal of the additional component is to lessen sparse data problems by exploiting the information encoded in the ontology."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "One of the main difficulties in word sense classification tasks stems from the fact that word senses, such as Wordnet’s synsets (Fellbaum, 1998), define very specific classes'.",
        "As a consequence training instances are often too few in number to capture extremely fine-grained semantic distinctions.",
        "Word senses, however, are not just independent entities but are connected by several semantic relations; e.g., the is-a, which specifies a relation of inclusion among classes such as “car is-a vehicle”.",
        "Based on the is-a relation Wordnet defines large and complex hierarchies for nouns and verbs.",
        "These hierarchical structures encode potentially useful world-knowledge that can be exploited for word sense classification purposes, by providing means for generalizing beyond the narrowest synset level.",
        "To disambiguate an instance of a noun like “bat” a system might be more successful if, instead of limiting itself to applying what it knows about the concepts “bat-mammal” and “bat-sport-implement”, it could use additional knowledge about other “animals” and “artifacts”.",
        "Our system implements this intuition in two steps.",
        "First, for each sense of an ambiguous word we generate an additional set of training instances We would like to thank Thomas Hofmann and our colleagues in the Brown Laboratory for Linguistic Information Processing (BLLIP).",
        "from the Wordnet glosses.",
        "This data is not limited to the specific synset that represents one of the senses of the word, but concerns also other synsets that are semantically similar, i.e., close in the hierarchy, to that synset.",
        "Then, we integrate the task-specific and the external training data with a multicomponent classifier that simplifies the system for hierarchical word sense disambiguation presented in (Ciaramita et al., 2003).",
        "The classifier consists of two components based on the averaged multiclass perceptron (Collins, 2002; Crammer and Singer, 2003).",
        "The first component is trained on the task-specific data while the second is trained on the former and on the external training data.",
        "When predicting a label for an instance the classifier combines the predictions of the two components.",
        "Cross-validation experiments on the training data show the advantages of the multicomponent architecture.",
        "In the following section we describe the features used by our system.",
        "In Section 3 we explain how we generated the additional training set.",
        "In Section 4 we describe the architecture of the classifier and in Section 5 we discuss the specifics of the final system and some experimental results."
      ]
    },
    {
      "heading": "2 Features",
      "text": [
        "We used a set of features similar to that which was extensively described and evaluated in (Yoong and Hwee, 2002).",
        "The sentence with POS annotation “A-DT newspaper-NN and-CC now-RB a-DT bank-NN have-AUX since-RB taken-VBN over-RB” serves as an example to illustrate them.",
        "The word to disambiguate is bank (or activate for (7)).",
        "1. part of speech of neighboring words , ; e.g., , , ... 2. words in the same sentence WS or passage WC; e.g., 3. n-grams:",
        "4. syntactically governing elements under a phrase ; e.g., 5. syntactically governed elements under a phrase ; e.g., , 6. coordinates ; e.g., 7. features for verbs, e.g, “... activate the pressureº: number of arguments ; e.g., syntactic type of arguments ; e.g., 8. morphology/spelling:",
        "The same features were extracted from the given test and training data, and the additional dataset.",
        "POS and other syntactic features were extracted from parse trees.",
        "Training and test data, and the Wordnet glosses, were parsed with Charniak’s parser (Charniak, 2000).",
        "Open class words were morphologically simplified with the “morph” function from the Wordnet library “wn.h”.",
        "When it was not possible to identify the noun or verb in the glosses 2 we only extracted a limited set of features: WS, WC, and morphological features.",
        "Each gloss provides one training instance per synset.",
        "Overall we found approximately 200,000 features."
      ]
    },
    {
      "heading": "3 External training data",
      "text": [
        "There are 57 different ambiguous words in the task: 32 verbs, 20 nouns, and 5 adjectives.",
        "For each word a training set of pairs , , is generated from the task-specific data; is a vector of features and is the set of possible senses for .",
        "Nouns are labeled with Wordnet 1.71 synset labels, while verbs and adjectives are annotated with the Wordsmyth’s dictionary labels.",
        "For nouns and verbs we used the hierarchies of Wordnet to generate the additional training data.",
        "We used the given sense map to map Wordsmyth senses to Wordnet synsets.",
        "For adjectives we simply used the task-specific data and a standard flat classifier.3 For each noun, or verb, synset we generated a fixed number of other semantically similar",
        "1: input , 2: repeat 5: for each do 6: if then 8: end if 9: end for 10: for each is a parent of do 11: ENQUE(Q,v) 12: end for 13: DEQUE(Q) 14: until or",
        "synsets.",
        "For each sense we start collecting synsets among the descendants of the sense itself and work our way up the hierarchy following the paths from the sense to the top until we found synsets.",
        "At each level we look for the closest descendants of the current synset as follows - this is the “closest descendants()” function of Algorithm 1 above.",
        "If there are or less descendants we collect them all.",
        "Otherwise, we take the closest around the synset exploiting the fact that when ordered, using the synset IDs as keys, similar synsets tend to be close to each other4.",
        "For example, synsets around “Rhode Islander” refer to other American states’ inhabitants’ names:"
      ]
    },
    {
      "heading": "South Carolinian",
      "text": [
        "Algorithm 1 presents a schematic description of the procedure.",
        "For each sense of a noun, or verb, we produced a set of similar neighbor synsets of .",
        "We label this set with , thus for each set of labels we induce a set of pseudo-labels .For each synset in we compiled a training instance from the Wordnet glosses.",
        "At the end of this process, for each noun or verb, there is an additional training set ."
      ]
    },
    {
      "heading": "4 Classifier",
      "text": []
    },
    {
      "heading": "4.1 Multiclass averaged perceptron",
      "text": [
        "Our base classifier is the multiclass averaged perceptron.",
        "The multiclass perceptron (Crammer and Singer, 2003) is an on-line learning algorithm which",
        "extends to the multiclass case the standard perceptron.",
        "It takes as input a training set , , and .",
        "In the multiclass perceptron, one introduces a weight vector for every , and defines by the so-called winner-take-all rule",
        "Here refers to the matrix of weights, with every column corresponding to one of the weight vectors .",
        "The algorithm is summarized in Algorithm 2.",
        "Training patterns are presented one at a time.",
        "Whenever an update step is performed; otherwise the weight vectors remain unchanged.",
        "To perform the update, one first computes the error set containing those class labels that have received a higher score than the correct class: (2) We use the simplest case of uniform update weights, .",
        "The perceptron algorithm defines a sequence of weight matrices , where is the weight matrix after the first training items have been processed.",
        "In the standard perceptron, the weight matrix is used to classify the unlabeled test examples.",
        "However, a variety of methods can be used for regularization or smoothing in order to reduce the effect of overtraining.",
        "Here we used the averaged perceptron (Collins, 2002), where the weight matrix used to classify the test data is the average of all of the matrices posited during training, i.e., ."
      ]
    },
    {
      "heading": "4.2 Multicomponent architecture",
      "text": [
        "Task specific and external training data are integrated with a two-component perceptron.",
        "The dis-Algorithm 3 Multicomponent Perceptron",
        "1: input , , , , 2: for do 3: train M on and 4: train V on 5: end for",
        "criminant function is defined as: The first component is trained on the task-specific data.",
        "The second component learns a separate weight matrix , where each column vector represents the set label , and is trained on both the task-specific and the additional training sets.",
        "Each component is weighted by a parameter ; here is simply equal to .",
        "We experimented with two values for , namely 1 and 0.5.",
        "In the former case only the first component is used, in the latter they are both used, and their contributions are equally weighted.",
        "The training procedure for the multicomponent classifier is described in Algorithm 3.",
        "This is a simplification of the algorithm presented in (Ciaramita et al., 2003).",
        "The two algorithms are similar except that convergence, if the data is separable, is clear in this case because the two components are trained individually with the standard multiclass perceptron procedure.",
        "Convergence is typically achieved in less than 50 iterations, but the value for to be used for evaluation on the unseen test data was chosen by cross-validation.",
        "With this version of the algorithm the implementation is simpler especially if several components are included."
      ]
    },
    {
      "heading": "4.3 Multilabel cases",
      "text": [
        "Often, several senses of an ambiguous word are very close in the hierarchy.",
        "Thus it can happen that a synset belongs to the neighbor set of more than one sense of the ambiguous word.",
        "When this is the case the training instance for that synset is treated as a multilabeled instance; i.e., is actually a set of labels for , that is, .",
        "Several methods can be used to deal with multilabeled instances, here we use a simple generalization of Algorithm 2.",
        "The error set for a multilabel training instance is defined as:",
        "which is equivalent to the definition in Equation 2 when .",
        "The positive update of Algorithm 2 (line 6) is also redefined.",
        "The update concerns a set",
        "of labels such that there are incorrect labels wich achieved a better score; i.e., .",
        "For each the update is equal to , which, again, reduces to the former case when ."
      ]
    },
    {
      "heading": "5 Results",
      "text": [
        "Table 1 presents results from a set of experiments performed by cross-validation on the training data, for several nouns and verbs.For 37 nouns and verbs, out of 52, the two-component model was more accurate than the flat model5.",
        "We used the results from these experiments to set, separately for each word, the parameters , which was equal to 13.9 on average, and .",
        "For adjectives we only set the parameter and used the standard “flat” perceptron.",
        "For each word in the task we separately trained one classifier.",
        "The system accuracy on the unseen test set is summarized in the following table:",
        "Overall the system has the following advantages over that of (Ciaramita et al., 2003).",
        "Selecting the external training data based on the most similar synsets has the advantage, over using supersenses, of generating an equivalent amount of additional data for each word sense.",
        "The additional data for each synset is also more homogeneous, thus the 5Since is an adjustable parameter it is possible that, with different values for , the multicomponent model would achieve even better performances.",
        "model should have less variance 6.",
        "The multicomponent architecture is simpler and has an obvious convergence proof.",
        "Convergence is faster and training is efficient.",
        "It takes less than one hour to build and train all final systems and generate the complete test results.",
        "We used the averaged version of the perceptron and introduced an adjustable parameter to weigh each component’s contribution separately."
      ]
    }
  ]
}
