{
  "info": {
    "authors": [
      "Tomasz Obrebski",
      "Filip Gralinski"
    ],
    "book": "Workshop on Recent Advances in Dependency Grammar",
    "id": "acl-W04-1508",
    "title": "Some Notes on Generative Capacity of Dependency Grammar",
    "url": "https://aclweb.org/anthology/W04-1508",
    "year": 2004
  },
  "references": [
    "acl-J90-4003",
    "acl-P01-1024",
    "acl-P90-1005",
    "acl-P98-2130"
  ],
  "sections": [
    {
      "text": [
        "between dependency grammars and context-free languages and some of its subclasses.",
        "Many of the facts and observations contained in this paper may well be known to a number of researchers in the field, though have been only fragmentarily articulated in the literature.",
        "Taking into consideration various types of grammatical systems we will attempt to formulate necessary and sufficient conditions for a dependency grammar to have at least CF generative capacity.",
        "The conditions will be stated in a way general enough to be applicable to a broad range of grammatical systems.",
        "We will enumerate the concepts which must be expressible in a grammatical system to ensure the CF capacity.",
        "Also, some cases when not all of the requirements are satisfied will be analysed.",
        "We will adopt the following general definition of dependency grammar which expresses, at least approximately, the essential feature shared by the above-mentioned systems: a dependency grammar is a formal system which, given two finite sets of symbols, defines a correspondence between sequences of symbols from the first set and trees whose nodes are labeled with symbols from the second set; tree nodes must be related one-to-one to sequence elements.",
        "Symbols from the first set are typically called terminal symbols or word forms, while the elements of the second set are referred to as syntactic or lexical categories.",
        "Tree arcs may or may not be labeled with dependency types.",
        "Only projective systems with atomic category symbols are considered in this paper.",
        "Some of the systems mentioned above go beyond our general definition together with these restrictions (those of Maruyama's, Duchier and De-busmann's, and Sleator and Temperley's).",
        "We are not interested, however, in examining the properties of these concrete systems as such, but only in the various ways the rules/constraints describing legal tree structures are formulated in different frameworks."
      ]
    },
    {
      "heading": "Abstract",
      "text": [
        "The aim of this paper is to gather and add to the dispersed knowledge concerning the relation between dependency grammars and context-free languages and some of its subclasses.",
        "Necessary and sufficient conditions for a dependency system to have context-free power are formulated in a way general enough to be applicable to a broad range of grammatical systems, based on rules or constraints.",
        "Certain cases when some of these requirements are not satisfied are also analysed.",
        "Formal implications of the presence of dependency types in grammatical systems are discussed."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "The notion of dependency grammar is somewhat vague.",
        "Formal systems introduced by Hays (1964) and Gaifman (1965), Maruyama (1990b), Covington (1990), Carroll and Char-niak (1992), Duchier and Debusmann (2001), Nivre (2003), Sleator and Temperley (1991)lare all called dependency grammars2, although they are significantly different and have different formal properties.",
        "A number of results concerning descriptive capacity of some types of dependency systems have been reported in the literature, mostly for Gaifman-style grammars (Gaifman, 1965; Nivre, 2002) and Maruyama's grammars (Maruyama, 1990a; White, 1995).",
        "Other kinds of systems, in particular the constraint-based systems other than Maruyama's one, have not been analysed in this respect.",
        "The goal of this paper is to gather and add to the dispersed knowledge concerning the relation 'The list is meant to show the variety of formal systems covered by the term 'dependency grammar', and is not exhaustive in any sense.",
        "2Sleator and Temperley's formalism is called Link Grammar but it is usually classified as a dependency system.",
        "In this respect the dependency systems may be divided into two broad classes.",
        "Into the first class fall systems which simply enumerate all possible branchings which may occur in a tree (Gaifman, 1965; Lombardo and Lesmo, 1998; Carroll and Charniak, 1992).",
        "We will call them rule-based systems.",
        "Into the second class – constraint-based systems – fall formalisms where the well-formedness conditions on acceptable tree structures are formulated by means of constraints stating e.g. what arcs are allowed or necessary in given contexts (Maruyama, 1990b; Covington, 1990; Duchier and Debusmann, 2001; Nivre, 2003).",
        "As a special kind of rule-based system we can classify Link Grammar with the word descriptions considered in disjunctive form (Sleator and Temperley, 1991, 8 – 9), see also remarks concerning Link Grammar in Section 6."
      ]
    },
    {
      "heading": "2 Minimal constraint-based formulation",
      "text": [
        "Our aim is to examine which conditions are necessary and sufficient for a dependency formalism to be capable of generating all CF languages.",
        "First, we will introduce a simple constraint-based formalism which has CF generative capacity and which is minimal in the sense that it cannot be simplified without affecting its descriptive power.",
        "This simple system, in our opinion, provides good intuitions as to what has to be expressible in a formal grammatical system to obtain CF power.",
        "It should be made clear, however, that the proposed formalism is unlikely to be of any direct practical value."
      ]
    },
    {
      "heading": "A Minimal Constraint-based Dependency",
      "text": [
        "• E – terminal alphabet, • C – set of categories, • Cm��� C C – set of root categories, • L C E x C – one-to-many relation (lexicon), • OL: C – � 2c'M – – for each category A C C,",
        "OL(A) is the set of categories allowed for the left dependent of a node labeled with A; a node of category A has at most one left dependent, which is not obligatory iff the special symbol E belongs to OL(A),",
        "• OR: C – � 2C'I'l – defined analogously as OL, but for the right dependent.",
        "(As it is evident from the above definition, MCDGs license only binary dependency trees.)",
        "For example, the following grammar describes the language anbn: E = {a, b}, C = {A, B}, Cmoot = {A}, L = {(a, A), (b, B)}, OL(A) = OR(B) = {E}, OR(A) = {B}, OL(B) = {E, A}.",
        "We are going to prove that MCDGs are weakly equivalent to CFGs.",
        "Our approach here is to some extent similar to the method used by Maruyama to prove the context-free power of his constraint dependency grammars (Maruyama, 1990a; White, 1995).",
        "First, let us give some auxiliary definitions: a dependency tree is defined recursively as (Dë,...,Ds,X,Ds+ë, ... ,Dl+m) , where 1,r > 0, X C C is the root of the tree, Di are dependency (sub)trees; the root of a tree D will be denoted by r(D), i.e.",
        "(In MCDGs 1,r C {0, Ü}, as only binary trees can be generated.)",
        "If D is a dependency tree and G a constraint-based dependency grammar, then G �- D is to stand for: \"D fulfils requirements expressed by G\" (i.e. by OL and OR).",
        "The derivation relation holds as follows: X ==>*� y iff 3D: G � D n r(D) = X n t(D) = y ,where X C C, y C C*, D is a dependency tree.",
        "Now we define the derivation relation for sequences of words:",
        "Given a dependency grammar G, L(G) is the language generated by G: L(G) ={ a C E* I X ==>*� a n X C Cm��� } .",
        "Proposition 1 For every context-free grammar G which does not generate the null string there exists a minimal constraint-based dependency grammar G' such that L(G') = L(G).",
        "Proof.",
        "We may assume that G = (V, E, P, S) is given in Greibach normal form, i.e. all production rules in P = {Pl, ... , P,,,,} are of the form: A – � aB1B2 ... Bn, where A, Bl, B2,.",
        ".",
        ".",
        ", Bn C V, a C E, n > 0.",
        "Let us index all the occurrences of nonterminal symbols in the right-hand sides of the rules: a production rule will be written as A aB11 BZ22 ... Bn , where B1, B2,.",
        ".",
        ".",
        ", Bn are non-terminal symbols and i1,i2,...,in :�k 0 are indices of the occurrences (index 0 will have a special meaning).",
        "By I(X) we denote the set of the indices of occurrences of ✌ in the right-hand sides.",
        "G', weakly equivalent to G, can be constructed in the following way:",
        "• C = { X✎Z I X – � wB11 BZ22 ... BZnn , i E I(X) ✏ {0}}, • C���� = { S✎0 �I S✎0 E C }, • L = { (w, X✎Z) I w E E, X✎Z E C}, • OL(X✎0) = {E}, • OL(X✎Z) = { � } if i � 0 and A ✓XZBZ22 ... Bn, • OL(X✎Z) = {Y✖✔ I Y✖✔ E C} if i z/ 0 and A � ✘B11 ... YZ✚✆1 XZ ... BZnn ' = a✜ j = i✜✄1 for some ✥ E {2, ... n} (the left",
        "dependent corresponds to the left-adjacent symbol in the right-hand side of a CFG rule),",
        "• OR(X✎Z) = ✧P✪✬✮✰✎ ... l(Pk), where I(Pk) if Pk = X – � w, or l(Pk)={Y✖✔ IY✖✔ EC}if Pk=X� wB11 B22 ... YZn j , = in (the right dependent corresponds to the last symbol in a",
        "CFG rule, in which the governor is the symbol in the left-hand side of the rule).",
        "In other words, the production A aBi1BZ22 ... BZnn will be represented in a dependency tree by a fragment shown in Figure 1.",
        "✸xample: let us convert the following CFG:",
        "• V ={S, A, B}, • E = {x, y,z}, • P = {S – � xAA, A – � y, A – � zB, B zB, B – � z}.",
        "After adding occurrence indices (P = {S xA1A2 A – � y, A – � zB', B – � zB2, B – � z}) we can construct an equivalent MCDG: • C = {S❀0, A0❁, A0❂, B❂0, A❁ë, A2❁, A❂ë, A2❂, B❂ë, B❂2}, • root C = {S❀0}, • L = { (x, S❀0), (y, A❁0), (z, A0❂), (z, BO), (y, A'), (y , Ay),(z,Az),(z,Az),(z,Bz), (z,Bz)} , • OL(S❀0) = OL(A0❁) = OL(A0❂) = OL(BO) =",
        "Let G' �_✄L D mean that either left dependent is not obligatory for r(D) (i.e. E E OL(r(D))) and G' �- D, or that this dependent is obligatory and a dependency tree D fulfils the requirements of G' with the exception of r(D) not being connected to a left dependent.",
        "The relations X=**L G❈ y and X =** L G❈ a (where y E C*, a E E*) are defined analogously to X =*�❈ *-y and X =**❈ a respectively.",
        "Now it is rather straighforward to prove (by induction on the length of a) that",
        "based dependency grammar G there exists a CF",
        "Proof.",
        "Let G = (E, C, Craat, L, OL, OR).",
        "The context-free grammar G' = (C ✏ {S}, E, P, S) is weakly equivalent to G where S C and P={S � AxB I X E Croot,(x, X) E L, A E OL(X), B E OR (X) } ✏{ X – � AxB I X E C, (x, X) E L, A E OL(X), B E OR (X) }.",
        "C���llP�◗ 1 ❙very context-free grammar which does not generate the null string can be transformed into an eUuivalent grammar in which all production rules are of the formV X – �YaXZX – �YaZX – �aYZX – �a.",
        "Taking into consideration the way the MCDG system is constructed, let us discuss in less formal manner what is needed for a dependency-based grammatical system to have at least context-free descriptive capacity (the components of MCDG implementing the respective concepts are given in parentheses):",
        "(1) lexicon expressing one-to-many (or many-to-many) correspondence between terminal symbols and category symbols (L), (2) distinguished subset of category symbols allowed for tree roots (G.t), (3) at least two dependents must be allowed (two O's), (4) the ability to indicate the relative position of the dependent with respect to its head (OL vs. OR), (5) the ability to express that a specific dependent (i.e. of category belonging to a certain class) must be present (6) the ability to express that a specific depen",
        "dent (see above) cannot be repeated.",
        "In MCDG (5) and (6) are conjointly implemented by OL and OR.",
        "From the equivalence of MCDGs and CFGs follows that the above conditions are sufficient for a dependency system to have (at least) CF power.",
        "We will now show that they are also necessary.",
        "Concepts (2), (4), (5) and (6) are needed to generate the simple language L = {ab}.",
        "Without (2) or (5), ab C L implies either a C L or b C L. Without (4), ab C L implies ba C L. Without (6), ab C L implies either aab C L or abb C L. The constraints given in (5) and (6) must refer to sets of categories and not to single categories.",
        "An informal argument goes as follows: let us consider the language anbcn, assuming that a is the root, a must have c as its right dependent, c, in turn, requires either a or b as its left dependent.",
        "The concepts (1) and (3) will be discussed in the next two sections.",
        "Finally, it can be noted that the following concepts, frequently met in formal descriptions of language, are not needed for CF capacity:",
        "• ability to express any kind of interrelationship among dependents (e.g. their relative order) other than their mutual exclusion, • repeatable dependencies (in whatever meaning) .",
        "4 No lexical ambiguity"
      ]
    },
    {
      "heading": "Context-Free Dependency Grammar3 and ✸is",
      "text": [
        "ner's (2000) ✡ilexical Dependency Grammar – was analysed by Nivre (2002).",
        "He shows that the sets of languages these systems generate are not equal and are both proper subsets of context-free languages (and are neither subsets nor supersets of regular languages)5, which supports the claim (1) from Section 3.",
        "In the following, the grammatical systems with a one-to-one (or many-to-one) lexicon will be called word-level grammars, whereas the systems with a one-to-many (or many-to-many)",
        "Two comments to Nivre's observations are in order.",
        "Firstly, what is clear but not stated explicitly by Nivre, the reason for the weakness of these grammars is the 'lack' of a lexicon – it is exclusively the one-to-one restriction imposed on the lexicon that makes Carroll and Charniak's system different from Gaifman's one, which has context-free power.",
        "Secondly, the descriptive capacity of word-level grammars (unlike that of category-level ones) is very sensitive to the format in which the rules/constraints are formulated, since transfor"
      ]
    },
    {
      "heading": "3To each terminal symbol x corresponds one nonter",
      "text": [
        "minal symbol noted Y, rules have the CFG-like form – � ax/ , where a and / are sequences of non-terminals.",
        "generated by MCDGs with *-to-one lexicon is still different from the two (it is actually a proper subset of their common part).",
        "mations from one format (normal form) to another, similar to those which can be done for category-level systems, are not possible, as they usually entail multiplication of category symbols, which is not feasible in word-level systems."
      ]
    },
    {
      "heading": "5 No branchings",
      "text": [
        "If we do not allow the tree structure to branch, we obtain the power of regular grammars.",
        "This fairly obvious fact can be shown by referring once again to our MCDG.",
        "After removing one O (e.g. O�) from the definition of MCDG (with one-to-many lexicon), we get a system equivalent to finite automata over, (constructing an automaton from a one-branch MCDG: Q= C U {qo}, QF = {c E C I",
        "This corresponds to a Gaifman-style grammar with only *(X), X(*) and X(*,Y) rules (cf.",
        "Section 6).",
        "To complete the puzzle, we may finally consider the class of languages defined by word-level regular grammars.",
        "This small class is defined by a restricted subclass of finite automata in which all transitions through a given symbol a always go to the same destination state, regardless of the source state (cf. the construction of an automaton from an MCDG) – thus, states may be identified with symbols."
      ]
    },
    {
      "heading": "6 Rule-based grammars",
      "text": [
        "We will restrict ourselves here to two remarks concerning possible minimal normal forms for rule-based grammars.",
        "In Gaifman's original formulation (Gaifman, 1965), the rules take the forms: X (Yl, ... , Y�, *, Y�+ë, ... , Y1z) (a node of category X may have dependents of categories Yl, ... , Y1z in this order and the position of X is indicated by *), X(*) (a node of category X may be a leaf), and *(X) (the root node may be of category X).",
        "For context-free power it is enough to have the rules of the following five types: *(X), X (*),",
        "not contain the empty string.",
        "Another normal form for Gaifman grammars, where at most two dependents are allowed, can be derived straightforwardly from 2-Greibach Normal Form7, namely: *(X), X(*), X(*,Y),",
        "Let us note that Gaifman's system in the latter form can be obtained (minor details ignored) from Link Grammar by allowing at most one left (�) connector for each word.",
        "The left connector would serve for linking the word to its governor, while right (+) connectors would link the word to its dependents; connector names would play the role equivalent to that of category symbols."
      ]
    },
    {
      "heading": "7 Maruyama's grammars",
      "text": [
        "In this section some properties of the grammatical system called Constraint Dependency Grammar (CFG) will be discussed.",
        "This system, introduced by Maruyama (1990a), differs in many respects from other dependency systems and, in general, does not fall into the definition of dependency grammar as adopted in Introduction.",
        "CDG does not relate a sequence of terminal symbols (words) to a tree, but rather to a set of directed graphs with outdegree limited to 1.",
        "These graphs are defined by role values – roles can be seen as variables, each terminal has k roles, where k is the parameter of the grammar called degree.",
        "Each role defines one graph.",
        "Role value is a pair composed of a label and an index of a terminal symbol (mod-ifiee) and can be viewed as a labeled arc pointing from one terminal to another.",
        "The constraints in CDGs are expressed by means of logical formulae over assignments of role values to roles.",
        "We will take into consideration only the subclass of CDGs restricted to systems in which (1) roles determine the dependency relation between terminal symbols and (2) projectivity of this relation is ensured (No-Crossover constraints are imposed (White, 1995, p. 12)).",
        "It was shown (Maruyama, 1990a) that any context-free language can be generated by a CDG with two roles$.",
        "In the proof constraints containing only one or two variables were used (unary/binary constraints).",
        "as well.",
        "Now, let us discuss why two variables and two roles are necessary.",
        "Two variables are necessary and sufficient to express non-repeatability constraint of the type: mod(x) = mod(y) n label(x) C K n label(y) C Kn pos(x) = Pos(y), which means that no two distinct terminals can be connected to their modifee through labels both belonging to K, where K is a set of labels.",
        "As was demonstrated in Section 3 the necessary requirements for CF power of a dependency system include the capability of expressing both obligatoriness and non-repeatability.",
        "One role makes it possible to express either one or the other type of constraint but not both of them: for non-repeatability the role \"arc\" must point from the dependent to the head (the head plays the role of the modifee), whereas for obligatoriness the arc must go in the opposite direction (the dependent is the modifee).",
        "Hence, in order to express obligatoriness and non-repeatability at least two CDG roles are needed (cf. the use of the roles governor and needs in (White, 1995) or head-role and body-role in (Maruyama, 1990a)).",
        "Note that an MCDG can be straightforwardly expressed by a CDG with three roles: governor, needs-left, needs-right.",
        "8 Dependency types We start our discussion of dependency types with some observations regarding the use of the label function in Maruyama's grammars.",
        "In the examples given in (Maruyama, 1990b), the label plays the role similar to that of a dependency type (some of the labels appearing in the examples: DET, SUBJ, OBJ, ���T�).",
        "On the one hand, thus, the system may be perceived as a word-level system with typed dependencies.",
        "On the other hand, in the proof showing the context-free power of Maruyama's grammar (Maruyama, 1990a), the label function values \"store\" nonterminal symbols – the category of a label'ed node.",
        "In this case the label function plays in fact the role of the lexicon and the system appears more as a category-level system with untyped dependencies.",
        "These observations concerning the dual potential functionality of label may suggest that the function of a lexicon in a grammatical system may be implemented with the use of dependency types and vice versa.",
        "From this perspective, let us consider Gaif-man's dependency system.",
        "The transformation between this system and its typed word-level equivalent can be performed according to the scheme shown in Figure 2.",
        "In order to retain equivalence, the tree context covered by the word-level rule has to be extended with the arc leading to the head node.",
        "The rules in the typed word-level version of Gaifman's system could take the following form: (u, x) (Tl, ... , Ti, *, Ti+i , ... , Tn), where u, TI, ... , Tn are dependency types and x – a terminal symbol (x, which is linked to its head by u, can govern n nodes linked via dependencies of types Tl, ... , Tn).",
        "To sum up, both dependency types and categories may be seen as providing terminal symbols with additional information giving the same syntactic potential."
      ]
    },
    {
      "heading": "9 Minimal constraint-based formulation wit✁ types",
      "text": [
        "Let us consider here a simple dependency formalism with constraints related to dependency types.",
        "Such an approach may be regarded as more elegant and is more in the spirit of linguistic descriptions (Mel'c�uk, 1988; Hudson, 1990).",
        "Thus, let us define herein a typed version of dependency grammar as a 9-tuple (E, C, L, T, Tsgl , Tobl , Tle f t, Tright, D) , where E, C and L have the same meaning as in an MCDG, T is a set of dependency types, Tsgl , Tobl , Tle f t, Tright C T, Tsgl contains non-repeatable types, Tobl – obligatory types, Tieft – leftward types, and Tright – rightward types, and finally D C C x T x C ((c, T, c') C D means that c may govern c' via dependency T).",
        "If T C Tobl then dependency T must occur for each node with category c C C such that there exists at least one c' C C, (c, T, c') C D. Note that no restriction is imposed on the relative order of dependents.",
        "(This kind of formalism forms the basis of the dependency system for Polish described in (Obre�bski, 2003).)",
        "The typed dependency grammars of the form given above have CF power since any MCDG can be easily transformed into such a typed grammar: for each c E C one leftward type Te ,s and one rightward typeTe,r are introduced, now",
        "This form of typed grammar can be seen as its minimal formulation.",
        "For alternative ways of expressing the obligatoriness and non-repeatability (exclusion) constraints based on types or categories, see (Duchier and Debusmann, 2001) and (Bes and Blache, 1999) respectively."
      ]
    },
    {
      "heading": "10 Conclusion",
      "text": [
        "The minimal requirements for a dependency grammar formalism to have context-free power have been identified.",
        "These are: the capability of expressing lexical ambiguity, \"rootness\", dependency direction, non-repeatability (exclusivity), obligatoriness (related to types or sets of categories), branching structure.",
        "A formalism called Minimal Constraint-based Dependency Grammar has been introduced.",
        "Although this grammatical system is not likely to have any practical value, it could be useful for determining the descriptive power of simple dependency systems of various kinds, since transformations between MCDGs and such different systems as Maruyama's and Gaifman's are straightforward.",
        "Certain functional interchangeability of categories and dependency types has been shown.",
        "Both types and categories may be seen as providing terminal symbols with additional information giving the same syntactic potential.",
        "Types does not affect the power in case of category-level systems."
      ]
    }
  ]
}
