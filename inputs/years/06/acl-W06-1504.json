{
  "info": {
    "authors": [
      "David Chiang"
    ],
    "book": "International Workshop on Tree Adjoining Grammar and Related Formalisms",
    "id": "acl-W06-1504",
    "title": "The Weak Generative Capacity of Linear Tree-Adjoining Grammars",
    "url": "https://aclweb.org/anthology/W06-1504",
    "year": 2006
  },
  "references": [
    "acl-J95-4002",
    "acl-J97-3002",
    "acl-P94-1022",
    "acl-P98-2192"
  ],
  "sections": [
    {
      "heading": "1 Introduction",
      "text": [
        "Linear tree-adjoining grammars (TAGs), by analogy with linear context-free grammars, are tree-adjoining grammars in which at most one symbol in each elementary tree can be rewritten (adjoined or substituted at).",
        "Uemura et al.",
        "(1999), calling these grammars simple linear TAGs (SL-TAGs), show that they generate a class of languages incommensurate with the context-free languages, and can be recognized in O(n4) time.",
        "Working within the application domain of modeling of RNA secondary structures, they find that SL-TAGs are too restrictive – they can model RNA pseudoknots but because they cannot generate all the context-free languages, they cannot model even some very simple RNA secondary structures.",
        "Therefore they propose a more powerful version of linear TAGs, extended simple linear TAGs (ESL-TAGs), which generate a class of languages that include the context-free languages and can be recognized in O(n5) time.",
        "Satta and Schuler (1998), working within the application domain of natural language syntax, define another restriction on TAG which is also recognizable in O(n5) time.",
        "Despite being less powerful than full TAG, it is still able to generate languages like the copy language {ww} and Dutch cross-serial dependencies (Joshi, 1985).",
        "Kato et al.",
        "(2004) conjecture that this restricted TAG is in fact equivalent to ESL-TAG.",
        "In this paper we prove their conjecture, and also prove that adding substitution to ESL-TAG does not increase its weak generative capacity, whereas adding substitution to SL-TAG makes it weakly equivalent to ESL-TAG.",
        "Thus these four for-*This research was primarily carried out while the author was at the University of Pennsylvania.",
        "malisms converge to the same weak-equivalence class, the intuition being that the “hardest” operation in TAG, namely, adjunction of a wrapping auxiliary tree in the middle of the spine of another wrapping auxiliary tree, is subjected to the linearity constraint, but most other operations are unrestricted.' Kato et al.",
        "(2004) show that these formalisms are more powerful than SL-TAG or general CFG or their union and conjecture, on the other hand, that they are less powerful than TAG.",
        "We prove this conjecture as well."
      ]
    },
    {
      "heading": "2 Definitions",
      "text": [
        "We assume a standard definition of TAG, with or without substitution, in which adjunction is not allowed at foot nodes, and other nodes can have no-adjunction (NA) constraints, obligatory-adjunction (OA), or selective-adjunction constraints.",
        "We use the symbols q, q1, q2, etc.",
        "to range over nodes of elementary trees or derived trees, although sometimes we use the label of a node to refer to the node itself.",
        "The spine of an auxiliary tree is the path from its root node to its foot node, inclusive.",
        "The subtree of a node q is the set of all nodes dominated by q, including q itself.",
        "The segment of a tree from q1 to q2 (where q1 dominates q2) is the set of all nodes in the subtree of q1 but not in the subtree of q2.",
        "A segment can be excised, which means removing the nodes of the segment and making q2 replace q1 as the child of its parent.",
        "We also assume a standard definition of TAG derivation trees.",
        "We use the symbols h, h1, h2, etc.",
        "to range over nodes of derivation trees.",
        "The sub"
      ]
    },
    {
      "heading": "'Adjunction at root and foot nodes is another operation",
      "text": [
        "that by itself will not take a formalism beyond context-free power, a fact which is exploited in Rogers’ regular-form TAG (Rogers, 1994).",
        "But allowing this in a linear TAG would circumvent the linearity constraint.",
        "Sydney, July 2006. c�2006 Association for Computational Linguistics derivation of h is the subtree of h in the derivation tree.",
        "When we cut up derivations into sub-derivations or segments and recombine them, the edge labels (indicating addresses of adjunctions and substitutions) stay with the node above, not the node below.",
        "Now we define various versions of linear TAG.",
        "Definition 1.",
        "A right (left) auxiliary tree is one in which the leftmost (rightmost) frontier node is the foot node, and the spine contains only the root and foot nodes.",
        "A wrapping auxiliary tree is one which is neither a left or a right auxiliary tree.",
        "Definition 2.",
        "We say that a node of an elementary tree is active if adjunction is allowed to occur at it, and that a node is w-active if adjunction of a wrapping auxiliary tree is allowed to occur at it.",
        "Definition 3.",
        "A Satta-Schuler linear tree-adjoining grammar (SSL-TAG) is a TAG with substitution in which: 1.",
        "In the spine of each wrapping auxiliary tree, there is at most one w-active node.",
        "2.",
        "In the spine of each left or right auxiliary tree, there are no w-active nodes, nor are there any other adjoining constraints.",
        "Definition 4.",
        "A simple linear tree-adjoining grammar (SL-TAG), with or without substitution, is a TAG, with or without substitution, respec",
        "tively, in which every initial tree has exactly one active node, and every auxiliary tree has exactly one active node on its spine and no active nodes elsewhere.",
        "Definition 5.",
        "An extended simple linear tree-adjoining grammar (ESL-TAG), with or without substitution, is a TAG, with or without substitution, respectively, in which every initial tree has exactly one active node, and every auxiliary tree has exactly one active node on its spine and at most one active node elsewhere."
      ]
    },
    {
      "heading": "3 Properties",
      "text": [
        "We now review several old results and prove a few new results relating the weak generative capacity of these formalisms to one another and to (linear) CFG and TAG.",
        "These results are summarized in Figure 1."
      ]
    },
    {
      "heading": "3.1 Previous results",
      "text": [
        "Proposition 1 (Uemura et al.",
        "1999)."
      ]
    },
    {
      "heading": "3.2 Weak equivalence",
      "text": [
        "Proposition 5.",
        "The following formalisms are weakly equivalent: (i) ESL-TAG (ii) SL-TAG with substitution (iii) ESL-TAG with substitution (iv) SSL-TAG Proof.",
        "We prove this by proving four inclusions.",
        "deal first with the left and right auxiliary trees, and then with off-spine adjunction.",
        "First, we eliminate the left and right auxiliary trees.",
        "Since these only insert material to the left or right of a node, just as in tree-insertion grammars (TIGs), we may apply the conversion from TIGs to tree-substitution grammars (Schabes and Waters, 1995), used in the proof of the context-freeness of",
        "TIG.2 (Step 1a) For each active node X that is not the root of a left or right auxiliary tree, we create four copies of the containing elementary tree with X altered in the following ways: first, leave X unchanged; then, add a copy of X above it, making both nodes no-adjunction nodes, and add a new left sister substitution node labeled LX or a new right sister substitution node labeled RX, or both.",
        "See Figure 2.",
        "(Step 1b) For each Q that was originally a left (right) auxiliary tree with root/foot label X, relabel the root node as LX (RX) and delete the foot node, and create two copies of the containing elementary tree, one unchanged, and one with a new left (right) sister substitution node.",
        "See Figure 2.",
        "When the modified Q substitutes at one of the new children of an q, the substitution clearly results in the same string that would have resulted from adjoining the original Q to q.",
        "This construction might appear incorrect in two ways.",
        "First, the new grammar has trees with both an LX and an RX node corresponding to the same original node, which would correspond to adjunction of two auxiliary trees QL and QR at the same node X in the original grammar.",
        "But this new derivation generates a string that was generable in the original grammar, namely by adjoining QL at 2 This corresponds to Steps 1–4 of that proof (Schabes and Waters, 1995, p. 486).",
        "Since that proof uses a more relaxed definition of left and right auxiliary trees, it is probable that SSL-TAG could also be relaxed in the same way.",
        "X, then adjoining QR at the root of QL, which is allowed because the definition of SSL-TAG prohibits adjunction constraints at the root of QL.",
        "Thus the first apparent problem is really the solution to the second problem: in the original grammar, a left auxiliary tree QL could adjoin at the root of a right auxiliary tree QR, which in turn adjoined at a node q, whereas in the new grammar, QR does not have an LX substitution node to allow this possibility.",
        "But the same string can be generated by substituting both trees under q in the new grammar.",
        "In the case of a whole chain of adjunctions of left/right auxiliary trees at the root of left/right auxiliary trees, we can generate the same string by rearranging the chain into a chain of left auxiliary trees and a chain of right auxiliary trees (which is allowed because adjunction constraints are prohibited at all the roots), and substituting both at q.",
        "(Step 2) Next, we eliminate the case of a wrapping auxiliary tree Q that can adjoin at an off-spine node q.",
        "(Step 2a) For each active off-spine node q, we relabel q with a unique identifier q� and split the containing elementary tree at q:",
        "(Step 2b) After step 2a has been completed for all nodes q, we revisit each q, and for every wrapping Q that could adjoin at q, create a copy of Q with root relabeled to T� and foot relabeled to B�.",
        "Then the original Q is discarded.",
        "Substituting one of these copies of Q at a T� node and then substituting a B� tree at the former foot node has the same effect as adjoining Q at q.",
        "Finally, unless q had an obligatory-adjunction constraint, simulate the lack of adjunction at q by adding the initial tree",
        "L(SL-TAG + substitution) C_ L(ESL-TAG): This construction is related to Lang’s normal form which ensures binary-branching derivation trees (Lang, 1994), but guarantees that one adjunction site is on the spine and one is off the spine.",
        "(Step 0a) Ensure that the elementary trees are binary-branching.",
        "(Step 0b) Add a new root and foot node to every elementary tree: If Y has another child, call it Z2; let V2 be a fresh nonterminal symbol and insert a V2 node above Z2, and break off the subtree rooted in V2, leaving behind a substitution node.",
        "See Figure 3.",
        "This transformation reduces the spine of the auxiliary tree by one node, and creates two new trees that satisfy the desired form.",
        "We repeat this until the entire grammar is in the desired form.",
        "(Step 2) Next, we transform the grammar so that no initial tree has more than one substitution node, while maintaining the form acquired in step 1.",
        "For any initial tree with height greater than three nodes, we apply the same transformation as in step 1, except that Y is the child of the root node, Z1 is its left child, and Z2 is its other child if it exists and is not already a substitution node.",
        "See Figure 3.",
        "This transformation replaces an initial tree with at most two shorter initial trees, and one auxiliary tree in the desired form.",
        "Again we repeat this until the entire grammar is in the desired form.",
        "(Step 3) Finally, we convert each substitution node into an adjunction node (Schabes, 1990).",
        "For each substitution node q, let X be the label of q. Relabel q to SX with obligatory adjunction and place an empty terminal beneath q.",
        "For each initial tree with root label X, convert it into an auxiliary tree by adding a new root node labeled SX whose children are the old root node and a new foot node.",
        "(Step 1) We transform the grammar so that no auxiliary tree has more than one substitution node.",
        "For any auxiliary tree with spine longer than four nodes, we apply the following transformation: target either the active node or its parent, and call it Y.",
        "Let Z1 be the child that dominates the foot node; let V1 be a fresh nonterminal symbol and insert V1 nodes above Y and below Z1, and excise the segment between the two V nodes, leaving behind an active obligatory-adjunction node."
      ]
    },
    {
      "heading": "3.3 Relation to tree-adjoining languages",
      "text": [
        "Our second result, also conjectured by Kato et al., is that the weak equivalence class established above is a proper subset of TAL.",
        "Proposition 6.",
        "The language",
        "Before proceeding to the other half of the proof, we define a few useful notions.",
        "A marked string (as in Ogden’s Lemma) over an alphabet E is a string over E x 10, 11, where a symbol (Q, 1) is marked and a symbol (Q, 0) is not.",
        "Marked strings over E can be projected into E* in the obvious way and we will talk about marked strings and their projections interchangeably.",
        "A decomposed string over E is a sequence of strings over E, which can be projected into E* by concatenating their members in order, and again we will talk about decomposed strings and their projections interchangeably.",
        "In particular, we will often simply write a decomposed string (w1, ... , w,,,) as w1 • • • w,,,.",
        "Moreover, we may use the symbol wz to refer to the occurrence of the ith member of the decomposition in w; for example, if w is a marked string, we may say that a symbol in wz is marked, or if w is generated by a TAG derivation, we may say that wz is generated by some set of nodes in the derivation tree.",
        "The second half of the proof requires a double-decker pumping lemma.",
        "Condition 1 (cf. Vijay-Shanker (1987), Theorem 4.7).",
        "Given a language L and a decomposed string x1zx2 E L with some symbols in z marked, there exists a decomposition of z into u1v1w1v2u2v3w2v4u3 such that one of the vz contains a mark, and L contains, for all k > 1,",
        "1).",
        "Given a language L and a decomposed string x1z1z2x2z3z4x3 E L with some symbols in one of the zi marked, there exist decompositions of the zi into uiviwi such that one of the vi contains a mark, and L contains, for all k > 1,",
        "Lemma 7.",
        "If L is an ESL-TAL, then there exists a constant n such that for any z E L with n symbols marked, Condition 1 holds of E • z • E. Moreover, it holds such that the w1 and w2 it provides can be further decomposed into z1 z2 and z3z4, respectively, such that for any marking of n symbols of any of the zj, either Condition 1 holds of z = x1zjx2 (where x1 and x2 are the surrounding context of zj) or Condition 2 holds of z = x1z1z2x2z3z4x3 (where x1, x2, and x3 are the surrounding context of z1 z2 and z3z4).",
        "Proof.",
        "Since L is an ESL-TAL, it is generated by some ESL-TAG G. Let k be the number of elementary trees in G and t be the maximum number of terminal symbols in any elementary tree of G. Then set n = 2k+1 t. The first invocation of Condition 1 is the TAG version of Ogden’s lemma (Hopcroft and Ullman, 1979).",
        "To show that it holds, we need to find a path P in the derivation tree of z that has a cycle that generates at least one marked symbol.",
        "Define a branch point to be a node h in the derivation tree such that the marked nodes generated by the subderivation of h are not all generated by the subderivation of a single child of h. We seek a P that has at least k + 1 branch points.",
        "Start by adding the root of the derivation tree to P. Thereafter let h be the last node in P. If h is a leaf, stop; otherwise, add to P the child of h whose subderivation generates the most marked symbols.",
        "Note that if a branch point in P generates m marked symbols, the next branch point generates at least ��� 2 .",
        "Our choice of n then guarantees that P has at least k+1 branch points, at least two of which must correspond to the same auxiliary tree.",
        "Call these nodes h1 and h2.",
        "These two nodes divide the derivation up into three phases: first, the derivation segment from the root to h1, which we call a (because it can be thought of as the derived initial tree it generates); then the segment from h1 to h2, which we call 01 (because it can be thought of as the derived auxiliary tree it generates); then subderivation of h2, which we call 02.",
        "Note that we can form new valid derivations of G by repeating 02: that is, in terms of derivation trees, stacking a on top of one or more copies of 01, on top of 02 – or in terms of derived trees, repeatedly adjoining 01 into a and then adjoining 02.",
        "If 02 adjoins into the spine of 01, then let (u1, u2, u3) be the parts of z generated by a, (v1, v2, v3, v4) the parts generated by 01, and (w1, w2) the parts generated by 02 (see Figure 4a).",
        "Then these new derivations generate the strings",
        "But if 02 adjoins at a node to the left of the spine of 01, then let (u1, v42, u3) be the parts of the z generated by a, (v1, u2, v41, v43) the parts generated by 01, and (w1, w2) the parts generated by 02 (see Figure 4b).",
        "Then let v2 = v3 = E and v4 = v41v42v43; the new derivations will generate the strings u1vk1w1vk2u2vk3w2vk4u3.",
        "The case where 02 adjoins to the right of the spine.",
        "Now we focus attention on 02.",
        "Let 5 be the longest path of the derivation of 02 containing the root of the derivation and auxiliary trees adjoined at spine nodes.",
        "This 5 is unique because each spine can only have one active node.",
        "Let h3 be the last node in 5, which divides the derivation of 02 into two phases: the segment from the root to h3, which we call 021, and the subderivation of h3, which we call 022.",
        "This gives a decomposition (w1, w2) = (z1z21z22, z31z32z4), where 022 generates z21 and z32 (see Figure 5).",
        "Note that the derivation nodes in 5 are the only ones that can generate symbols in z1, z22, z31, and z4 at once; the other derivation nodes only generate symbols in a single zi.",
        "We let z2 = z21z22 and z3 = z31 z32 and hand off the decomposition (w1, w2) = (z1z2, z3z4) to our adversary, who may choose a zj and mark n symbols in it.",
        "Then we recapitulate the reasoning above to get a path P0 starting from the root of the derivation of 02 and containing at least k + 1 branch points, two of which correspond to the same auxiliary tree.",
        "Call these nodes h4 and h5 and the segment between them 03, and let (v1, v2, v3, v4) now stand for the parts of (w1, w2) generated by 03.",
        "Once again, we are going to repeat 03 to generate new derivations, pumping copies of the vi into (w1, w2).",
        "But the location of the vi depends on h5: if h5 is in 5, then the vi will appear inside each of the zi, satisfying Condition 2.",
        "Otherwise, they will all appear inside zj .",
        "Finally we complete the proof of Proposition 6.",
        "Proof ofProposition 6 (L V ESL-TAL).",
        "Suppose L is an ESL-TAL.",
        "Let z be the string obtained by setting p = q = r = n, and mark the a 1s.",
        "Then Lemma 7 must hold.",
        "The first invocation of Condition 1 must give a w1 of the form a*1 b�1 b�2 c�1 c�2 a*2 and a w2 of the form a* ac�a c4 b�a b4 a*�.",
        "Lemma 7 must further decompose w1 into z1z2.",
        "Obviously, either z1 contains all the bi s or z2 contains all the ci s. Supposing the former, we can obtain a contradiction by marking the b1s: Condition 2 is impossible because it would give unequal numbers of b1s and b2s; Condition 1 is impossible because it would give unequal numbers of b 1 s and bas.",
        "On the other hand, if z2 contains all the cis, we mark the c1s, and both Conditions are again rendered impossible."
      ]
    },
    {
      "heading": "4 Conclusion",
      "text": [
        "The weak equivalence of the previously proposed ESL-TAG and SSL-TAG, along with the fact that SL-TAG with substitution and ESL-TAG with substitution belong to the same class, suggests that they represent a useful compromise between CFGs and TAGs.",
        "In the two-dimensional language hierarchy of Rambow and Satta (1999), where the two dimensions are rank (how many substructures does a rule combine) and fanout (how many discontinuous spans of the input does a substructure cover), CFGs comprise the fanout-1 grammars and TAGs are a subset of the the fanout-2 grammars; both have arbitrary rank, whereas linear CFGs and linear TAGs are rank-1.",
        "The grammars discussed here are mixed: a rule can combine one fanout-2 substructure and an arbitrary number of fanout-1 substructures.",
        "A related example would be a version of synchronous CFG that allows only one pair of linked nonterminals and any number of unlinked nonterminals, which could be bitext-parsed in 0(n5) time, whereas inversion transduction grammar (Wu, 1997) takes 0(n6).",
        "It may be of interest to make a more general exploration of other formalisms that are mixed in this sense."
      ]
    },
    {
      "heading": "Acknowledgements",
      "text": [
        "Thanks to Hiroyuki Seki for discussions that led to this paper, and to Anoop Sarkar, Giorgio Satta, and William Schuler.",
        "This research was partially supported by NSF grant ITR EIA-02-05456.",
        "S. D. G."
      ]
    }
  ]
}
