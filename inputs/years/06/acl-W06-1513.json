{
  "info": {
    "authors": [
      "Claire Gardent",
      "Eric Kow"
    ],
    "book": "International Workshop on Tree Adjoining Grammar and Related Formalisms",
    "id": "acl-W06-1513",
    "title": "Three Reasons to Adopt TAG-Based Surface Realisation",
    "url": "https://aclweb.org/anthology/W06-1513",
    "year": 2006
  },
  "references": [
    "acl-C92-2092",
    "acl-P02-1003",
    "acl-P96-1027",
    "acl-W05-1605"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "Surface realisation from flat semantic formulae is known to be exponential in the length of the input.",
        "In this paper, we argue that TAG naturally supports the integration of three main ways of reducing complexity: polarity filtering, delayed adjunction and empty semantic items elimination.",
        "We support these claims by presenting some preliminary results of the TAG-based surface realiser Gen I."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "Surface realisation consists in producing all the sentences associated by a grammar with a given semantic formula.",
        "For lexicalist grammars such as LTAG (Lexicalised Tree Adjoining Grammar), surface realisation usually proceeds bottom-up from a set of flat semantic literals1.",
        "However, surface realisation from flat semantic formulae is known to be exponential in the length of the input (Kay96; Bre92; KS02).",
        "In this paper, we abstract from the TAG based surface realiser for French Gen I, (GK05) and argue that TAG naturally supports the integration of various proposals made to help reduce either surface realisation or parsing complexity into a TAG based, lexically driven surface realiser.",
        "Specifically, we show: 1. that TAG elementary trees naturally support the implementation of a technique called polarity filtering used to reduce the exponential factor introduced by lexical ambiguity (Per03),",
        "2. that TAG two operations of substitution and adjunction provides a natural framework for implementing a delayed adjunction mechanism capable of reducing the complexity due to the lack of ordering information and 3. that TAG extended domain of locality helps reduce the potential complexity increment introduced by semantically empty items such as infinitival “to” or complementiser “that”."
      ]
    },
    {
      "heading": "2 Surface realisation, flat semantics and computational complexity",
      "text": [
        "Why is surface realisation exponential in the length of the input?",
        "As shown in (Kay96), one reason for this is the lack of ordering information.",
        "Contrary to parsing where the input is a string i.e., an ordered list of words, the input to surface realisation is a set of literals.",
        "Supposing each literal selects exactly one constituent in the lexicon, then the number of possible combinations between these constituents will be 2n (the number of subsets obtainable from a set of size n).",
        "In practice of course, there are possible restrictions on constituent combination.",
        "In particular, most existing realisers impose the constraint that only constituents with non overlapping semantics and compatible indices can be combined.",
        "Because of this restriction, the core of the complexity stems in practice from intersective modifiers (Bre92; Kay96).",
        "Given a set of n modifiers all modifying the same structure, all possible intermediate structures will be constructed i.e. 2n+1.",
        "A second reason for the exponential complexity of surface realisation is lexical ambiguity.",
        "As for bottom-up parsing, in surface realisation from flat semantics, the input is used to select a set of lexical entries namely all lexical entries whose seman",
        "Sydney, July 2006. c�2006 Association for Computational Linguistics tics subsumes one or more of the input literals.",
        "In a realistic grammar, one literal will be associated with more than one lexical entries.",
        "So if Lexi is the number of lexical entries associated with literal li, then for an input semantics comprising n literals, the number of sets of lexical constituents covering the input semantics is: �i=n",
        "The two sources of complexity interact by multiplying out so that the potential number of combinations of constituents is:",
        "In what follows, we show that TAG naturally supports various optimisations that have been proposed to reduce the search space."
      ]
    },
    {
      "heading": "3 Polarity filtering",
      "text": [
        "To restrict the impact of lexical ambiguity on parsing efficiency, (Per03) introduces a method called Polarity filtering.",
        "This method is based on the observation that many of the combinations of lexical entries which cover the input semantics are in fact syntactically invalid either because a syntactic requirement is not fulfilled or because a syntactic resource is not used.",
        "Accordingly, polarity based filtering eliminates such combinations by:",
        "• assigning each lexical entry with a set of polarities reflecting its syntactic requirements and resources, • computing for each possible combination of lexical entries the sum of its polarities and • only allowing surface realisation on combinations which have a net sum of zero (all requirements are satisfied and all resources are used).",
        "By filtering the initial search space before the tree combination phase, polarity filtering in effect reduces the impact of lexical ambiguity i.e. de",
        "The definitory properties of TAG elementary trees provide a natural way to assign polarities to a TAG lexical entries: each elementary tree can be associated with a polarity +C, where C is the category of its root node and each substitution or foot node in that tree, a polarity −C is added, where C is the category of that node.",
        "We implemented polarity filtering in GenI based on this way of associating lexical entries with polarities2.",
        "We then measured the impact of this filtering on the initial search space (the number of sets of lexical items actually explored by the realiser), on space (measured by the number of chart items created) and on time.",
        "Table 1 summarises the impact of polarity filtering on the initial search space3.",
        "possible indicates the number of combinations of lexical entries which cover the input semantics and thus can potentially lead to a valid syntactic tree realising the input semantics and explored gives the number of combinations actually explored by the surface realiser after polarity filtering has ruled out combinations which cannot possibly lead to a valid syntactic tree).",
        "As is to be expected, the impact increases with the number of input literals so that while polarity filtering divides the initial search space by 35.6 for an input ranging between 1 and 6 literals, it divides it by 441.6 for an input size ranging between 14 and 16 literals",
        "(Sets of initial trees covering the input semantics) Table 2 gives the impact of polarity filtering on space as measured by the number of created chart items (or constituents).",
        "The first column (w/o pol.)",
        "gives the number of created charted items when polarity filtering is switched off and the second, (with pol.)",
        "when polarity filtering is on.",
        "As can be seen, the effect is particularly pronounced when the input exceeds 10 literals.",
        "Finally, Figure 3 shows that the overhead introduced by the construction of the polarity automaton means that formulae under 10 literals are realised in roughly the same time with or without polarity filtering.",
        "However, for larger sentences, polarity filtering is increasingly important in keeping realisation times reasonable.",
        "For instance, given an input ranging between 14 and 16 literals, polar",
        "ity filtering divides realisation time by 5, that is, yields a realisation time of 2.21 seconds instead of 11.61."
      ]
    },
    {
      "heading": "4 Substitution/adjunction distinction",
      "text": [
        "One important specificity of TAG is that it includes two combination operations namely, adjunction and substitution.",
        "We now show that this feature of TAG is particularly useful in improving surface realisation performance."
      ]
    },
    {
      "heading": "4.1 Reducing the impact of intersective modifiers",
      "text": [
        "To restrict the combinatorics induced by modifiers, (CCFP99; CO05) proposes either to handle modifiers after a complete syntactic tree is built (i.e., after all syntactic requirements are fulfilled) or before the modifiee is combined with other items (e.g., before the head noun has combined with a determiner).",
        "Although the number of intermediate structures generated is still 2n for n modifiers, both strategies have the effect of blocking these 2n structures from multiplying out with other structures in the chart.",
        "More precisely, given an input semantics of size n where k of its literals are to be realised as modifiers, the number of intermediate structures possible in the two phase approach is 2k + 2n-k, which can be considerably smaller than 2n, depending on the size of k. In TAG, we can make use of the fact that substitution and adjunction apply independently of each other to implement a two-phase generation strategy where modifiers are handled only after a complete syntactic tree is built.",
        "In the first phase, only substitutions are performed and in the second, only adjunctions.",
        "Additionally, before adjunction starts, all unsaturated trees (trees with unfilled substitution sites) are discarded from the chart thereby ensuring that modifiers do not combine with structures that cannot possibly lead to a valid result (since no constituent could be found to fill the unsaturated substitution sites).",
        "Since in TAG, modifiers always involve the use of adjunction, modifiers will always be handled by the second phase of the algorithm and thereby adjoined into “saturated trees” i.e., trees devoid of unfilled substitutions sites.",
        "In this way, the proliferation of structures induced by the modifiers can be restricted.",
        "The substitution-before-adjunction strategy was integrated in Gen I yielding the improvements indicated in Figures 4 and 5.",
        "As table 4 shows, when there is more than 7 literals in the input, the one-phase algorithm times out.",
        "More in general, for the data shown, the two phase strategy leads to an average decrease in time ranging between 1 and 3.3% and a decrease in space varying between 1.1% and 3% respectively.",
        "Although the poor performance of the 1 phase algorithm is in part due to a very large and strongly overgenerating grammar4 , the data clearly shows that SBA is essential in supporting large scale TAG based surface realisation."
      ]
    },
    {
      "heading": "4.2 Substitution-before-adjunction combined with Polarity Filtering",
      "text": [
        "The substitution-before-adjunction strategy limits the impact of intersective modifiers by restricting the number of constituents the modifiers can combine with within one set of lexical items.",
        "Because polarity filtering reduces the number of sets of lexical items to be considered, it trivially also reduces the number of sets of lexical items involving ad-junctions.",
        "The space improvement provided by combining the substitution-before-adjunction (SBA) strategy with polarity filtering is illustrated in Figures 6 and 7 which show the space reduction associated with cases ordered either according to their number of literals or according to their number of foot nodes (i.e., adjunction cases).",
        "As should be expected, the number of foot nodes is more highly correlated with a space reduction.",
        "Specifically, a combined SBA/polarity strategy divides by 3.4 the space used for cases involving between 1 and 12 auxiliary trees; and by 18.8 the space used for cases involving between 14 and 16 auxiliary trees."
      ]
    },
    {
      "heading": "4.3 Filtering out unusable trees",
      "text": [
        "Another interesting aspect of TAG’s use of two combination operations and more specifically of the substitution-before-adjunction strategy is that it naturally supports the inclusion of a third phase to filter out unusable trees that is, trees which can be determined not to be integrable in any valid derivation.",
        "Specifically, this third phase occurs between substitution and adjunction and filters out:",
        "• all trees with an unfilled substitution site • all saturated trees whose root node is not labelled with an S category",
        "The first filter (elimination of unsaturated trees) is required, as indicated above, to restrict the impact of intersective modifiers: by discarding them, we restrict adjunction to saturated trees.",
        "The second, makes use of the property of auxiliary trees which insists that root and foot node be labelled with the same category.",
        "Because of this property, adjunction cannot affect the category of the tree it adjoins to.",
        "In particular, a tree which after all possible substitutions have been performed, has root label C with C 7� S can never lead to the creation by adjunction of a tree with root label S. Hence it can be discarded (provided of course, the generator is seeking to build sentences).",
        "Figures 8 and 9 illustrate the impact of this second filter (called the Root Node Filter, RNF) on the chart size when polarity filtering is switched off.",
        "As for SAB, the figures show a higher correlation between the RNF and the number of adjunction nodes than with the number of literals.",
        "Intriguingly, the impact of the filter is proportionally higher on sentences with fewer foot nodes.",
        "Although this needs to be checked more thoroughly, the explanation for this could be the following.",
        "The trees removed by the Root Node Filter are saturated tree not rooted in S hence essentially saturated NP trees.",
        "Examination of the data reveals that the number of these trees removed by the RNF remains almost constant (though this might be an ad hoc property of the specific testsuite used).",
        "Hence in proportion, the effect of the RNF diminishes.",
        "Note however that in absolute terms, the number of trees whose derivation is avoided by the RNF remains quite high thus contributing to an overall better performance.",
        "As Figures 10 and 11 show, combining the Root Node Filter with polarity filtering simply reinforces the biases noted above: Root Node Filtering is proportionally more effective for short input but can remain useful in absolute terms.",
        "A more thor",
        "ough investigation of the data and further experiments are needed however to determine whether such behaviour is not tied to some ad hoc property of our (still too limited) testsuite."
      ]
    },
    {
      "heading": "5 TAG extended domain of locality",
      "text": [
        "Arguably there are words such as complementiser that or infinitival to whose semantics is empty.",
        "These words are to surface realisation what gaps (or empty categories) are to parsing.",
        "In a naive approach, they require that all trees with an empty semantics be considered as potential constituent candidate at each combining step.",
        "In terms of efficiency, this roughly means increasing the size of the input n (just like postulating gaps at all position in an input string increases the size of that string).",
        "To avoid this shortcoming, a common practice (CCFP99) consists in specifying a set of rules which selects empty semantic items on the basis of the input literals.",
        "However these rules fail to reflect the fact that empty semantic items are usually functional words and hence governed by syntactic rather than semantic constraints.",
        "By contrast, in a TAG based surface realiser, TAG elementary trees provide a natural way to specify the syntactic environment in which empty semantic items can occur.",
        "For instance, complementiser that occurs with verbs taking a sentential argument which is generally captured by including the complementiser as a co-anchor in the trees of these verbs.",
        "More in general, the extended domain of locality provided by TAG elementary trees, together with the possibility of specifying co-anchors means that empty semantic items can be avoided altogether.",
        "Hence they do not require specific treatment and have no impact on efficiency."
      ]
    },
    {
      "heading": "6 Discussion",
      "text": [
        "We have argued that TAG presents several features that makes it particularly amenable to the development of an optimised surface realiser.",
        "We now summarise these features and briefly compare TAG with CCG (Combinatory Categorial Grammar) and HPSG (Head Driven Phrase Structure Grammar) based surface realisation."
      ]
    },
    {
      "heading": "6.1 Using tree node types",
      "text": [
        "The different types oftree nodes identified by TAG can be used to support polarity filtering whereby substitution nodes can be associated with negative polarities (requirements) and root nodes with positive polarities (resources).",
        "As our preliminary experiments show, polarity filtering has a significant impact on the initial search space, on the space used and on CPU times.",
        "So far, this particular type of global filtering on the initial search space has been used neither in the HPSG (CCFP99; CO05) nor in the CCG (Whi04) approach.",
        "Although it could presumably be adapted to fit these grammars, such an adaptation is in essence less straightforward than in TAG.",
        "In CCG, the several combination rules mean that a subcategory can function either as a resource or as a requirement depending on the rule that applies.",
        "For instance, in the verbal category (5\\NP)/NP, the subcategory 5\\NP functions as a resource when NPs are type raised (it satisfies the requirement of a type raised NP with category 5/(5\\NP)).",
        "However it will need to be further decomposed into a resource and a requirement if they are not.",
        "More in general, polarity specification in CCG would need to take into account the several combination rules in addition to the category structure.",
        "In HPSG, it is the interaction of lexical categories with lexical and phrasal rules that will need to be taken into consideration."
      ]
    },
    {
      "heading": "6.2 Using rule types",
      "text": [
        "The two types of tree combining operations permitted by TAG can be used to structure the surface realisation algorithm.",
        "As we’ve shown, performing all substitutions before allowing for adjunction greatly reduces the exponential impact of intersective modifiers.",
        "Moreover, combining such a substitution-before-adjunction strategy with polarity filtering further improves performance.",
        "In comparison, the HPSG and the CCG approach do not support such a natural structuring of the algorithm and intersective modifiers induce either a pre or a post-processing.",
        "In HPSG, intersective modifiers are discarded during the chart generation phase and adjoined into the generated structures at a later stage.",
        "This is inelegant in that (i) intersective modifiers are artificially treated separately and (ii) structures subject to adjunction have to be non monotonically recomputed to reflect the impact of the adjunction in that part of the tree dominating the adjunction.",
        "In CCG, the input logical form is chunked into subtrees each corresponding to a separate generation subproblem to be solved independently.",
        "Again the approach is ad hoc in that it does not rely on a given grammatical or linguistic property.",
        "As a result, e.g., negation needs special treatment to avoid incompleteness (if the heuristic applies, negated sentences cannot be generated).",
        "Similarly, it is unclear how long distance dependencies involving modifiers (e.g., Which office did you say that Peter work in ?)",
        "are handled."
      ]
    },
    {
      "heading": "6.3 Using TAG extended domain of locality",
      "text": [
        "TAG extended domain of locality means that empty semantic items need no special treatment.",
        "In contrast, both the HPSG and the CCG approach resort to ad hoc filtering rules which, based on a scan of the input semantics, add semantically empty items to the chart."
      ]
    },
    {
      "heading": "7 Further research",
      "text": [
        "Although the results presented give strong evidence for the claim that TAG naturally supports the development of an optimised surface based realiser, they are based on a limited testsuite and on a core grammar for French that heavily overgen-erates.",
        "Hence they do not truly reflect the potential of the proposed optimisations on the performance of a large scale surface realiser.",
        "Current work concentrates on remedying these shortcomings.",
        "In particular, we are working on developing a structured test suite which permits a precise measure of the impact of different factors both on complexity and on the optimisations used.",
        "In this testsuite for instance, each item is associated with a series of indicators concerning its potential complexity: number of literals in the corresponding input semantics, number of trees, number of nodes, number of substitutions nodes and number of foot nodes in the corresponding selection of initial trees.",
        "Further work also includes restricting overgen-eration and exploring in how far, polarity filtering can be used to select one among the many paraphrases"
      ]
    }
  ]
}
