{
  "info": {
    "authors": [
      "Sylvain Salvati"
    ],
    "book": "International Workshop on Tree Adjoining Grammar and Related Formalisms",
    "id": "acl-W06-1521",
    "title": "Parsing TAG With Abstract Categorial Grammar",
    "url": "https://aclweb.org/anthology/W06-1521",
    "year": 2006
  },
  "references": [
    "acl-P01-1033",
    "acl-P88-1032"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "This paper presents informally an Earley algorithm for TAG which behaves as the algorithm given by (Schabes and Joshi, 1988).",
        "This algorithm is a specialization to TAG of a more general algorithm dedicated to second order ACGs.",
        "As second order ACGs allows to encode Linear Context Free Rewriting Systems (LCFRS) (de Groote and Pogodalla, 2004), the presentation of this algorithm gives a rough presentation of the formal tools which can be used to design efficient algorithms for LCFRS.",
        "Furthermore, as these tools allow to parse linear A-terms, they can be used as a basis for developping algorithms for generation."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "The algorithm we present is a specialization to TAGs of a more general one dedicated to second order Abstract Categorial Grammars (ACGs) (de Groote, 2001).",
        "Our aim is to give here an informal presentation of tools that can be used to design efficient parsing algorithms for formalisms more expressive than TAG.",
        "Therefore, we only give a representation of TAGs with linear A-terms together with simple derivation rules; we do not give in complete details the technical relation with ACGs.",
        "For some more information about ACGs and their relation to TAGs, one may read (de Groote, 2001) and (de Groote, 2002).",
        "The advantage of using ACG is that they are defined with very few primitives, but can encode many formalisms.",
        "Thus they are well suited to study from a general perspective a full class of formalisms.",
        "In particular, a special class of ACGs (second order ACGs) embeds LCFRS (de Groote and Pogodalla, 2004), i.e. mildly context sensitive languages.",
        "Therefore, the study of second order ACGs leads to insights on mildly context sensitive languages.",
        "Having a general framework to describe parsing algorithms for mildly context sensitive languages may give some help to transfer some interesting parsing technique from one formalism to another.",
        "It can be, for example, a good mean to obtain prefix-valid algorithms, LC algorithms, LR algorithms... for the full class of mildly context sensitive languages.",
        "The class of languages described by second order ACGs is wider than mildly context sensitive languages.",
        "They can encode tree languages, and more generally languages of linear A-terms.",
        "As Montague style semantics (Montague, 1974) is based on A-calculus, being able to parse linear A-term is a first step towards generation algorithms seen as parsing algorithm.",
        "Furthermore, since this parsing algorithm is a generalization of algorithms a` la Earley for CFGs and TAGs, the more general algorithm that can be used for generation (when semantic formulae are linear) can be considered as efficient.",
        "The paper is organized as follows: section two gives basic defintions and tools concerning the linear A-calculus.",
        "Section three explains how the indices usually used by parsers are represented for the linear A-calculus.",
        "Section four gives a rough explaination of the encoding of TAGs within a compiled representation of second order ACGs.",
        "Section five explains the parsing algorithm and we conclude with section six."
      ]
    },
    {
      "heading": "2 The linear A-calculus",
      "text": [
        "We begin by giving a brief definition of linear types and linear A-terms together with some stan",
        "Proceedings of the 8th International Workshop on Tree Adjoining Grammar and Related Formalisms, pages 141–146, Sydney, July 2006. c�2006 Association for Computational Linguistics dard notations.",
        "We assume that the reader is familiar with the usual notions related to A-calculus (0- conversion, free variables, capture-avoiding substitutions... ); for more details about A-calculus, one may consult (Barendregt, 1984).",
        "1. xEX==>.xaEAa 2. tEAaAx,3EFV(t)==>.Ax,3.tEA,3 – Oa 3. a E E ==>.",
        "a E A* – O* 4. t1 E A,3 – OaAt2 E A,3 AFV(t1)nFV(t2) ==>.",
        "(t1t2) E Aa",
        "In general, we write Ax1 ... x,,,.t for Ax1.... Ax,,,.t and we write t0t1 ... t,,, for (... (t0t1) ... t,,,).",
        "Strings are represented by closed linear A-terms of type str = * – *.",
        "Given a string abcde, it is represented by the following linear A-term: Ay*.a(b(c(d(ey*)))) /w/ represents the set of terms which are 0-convertible to the A-term representing the string w. Concatenation is represented by + = Ax1trx2try* x1tr(x2try*), and (+w1)w2 will be written w1 + w112.",
        "The concatenation is moreover associative, we may thus write w1 + ... + w,,,.",
        "For the description of our algorithm, we rely on contexts:",
        "The insertion of a term within a context is done the obvious way.",
        "One has nevertheless to remark that when a term t is inserted in a context C[], the context C[] can bind variables free in t. For example, if C[] = Ax.",
        "[] and t = x then C[t] = Ax.x and x which was free in t is not free anymore in C[t]."
      ]
    },
    {
      "heading": "3 Indices as syntactic descriptions",
      "text": [
        "Usually the items of Earley algorithms use indices to represent positions in the input string.",
        "The algorithm we describe is a particular instance of a more general one which parses linear A-terms rather than strings.",
        "In that case, one cannot describe in a simple way positions by means of indices.",
        "Instead of indices, positions in a term t will be represented with zippers ((Huet, 1997)), i.e. a pair (C[], v) of a context and a term such that C[v] = t. Figure 1 explicits the correspondence between indices and zippers via an example.",
        "The items of Earley algorithms for TAGs use pairs of indices to describe portions of the input string.",
        "In our algorithm, this role is played by linear types built upon zippers; the parsing process can be seen as a type-checking process in a particular type system.",
        "We will not present this system here, but we will give a flavor of the meaning of those types called syntactic descriptions (Salvati, 2006).",
        "In order to represent the portion of a string between the indices i and j, we use the zippers (CZ[], vZ) and (Cl [], vl) which respectively represent the position i and j in the string.",
        "The portion of string is represented by the syntactic description (Cl [], vl) – (CZ [], vZ); this syntactic description can be used to type functions which take vl as argument and return vZ as a result.",
        "For example, given the syntactic description: (Ax.a(b(c[])), d(e x)) – (Ax.a[], b(c(d(e x)))), it represents the set of functions that result in terms that are 0-convertible to b(c(d(e x))) when they take d(e x) as an argument; this set is exactly /bc/.",
        "Our algorithm uses representations of string contexts with syntactic descriptions such as d = ((C1 [], v1) – (C2 [], v2)) – (C3[], v3) – (C4[], v4) (in the following we write ((C1 [], v1) – (C2 [], v2), (C3 [], v3)) – (C4 [], v4) for such syntactic descriptions).",
        "Assume that (C1 [], v1) – (C2 [], v2) represents /bc/ and that (C3[], v3) – (C4[], v4) represents /abcde/, then d describes the terms which give a result in /abcde/ when they are applied to an element of /bc/.",
        "Thus, d describes the set of terms 0 convertible to A f y.a(f (d(e y))), the set of terms representing the string context a[ ]de.",
        "Some of the syntactic descriptions we use may contain variables denoting non-specified syntactic descriptions that may be instanciated during parsing.",
        "In particular, the syntactic description variable F will always be used as a non-specified syn;",
        "tactic description representing strings (i.e. F may only be substituted by a syntactic description of the form (C1 [], v1) – (C2 [], v2)), such syntactic descriptions will represent the foot of an auxiliary tree.",
        "We will also use Y to represent a non-specifed point in the input sentence (i.e. Y may only be substituted by syntactic descriptions of the form (C[], v)), such syntactic descriptions will represent the end of an elementary tree.",
        "As syntactic desccriptions are types for the linear A-calculus, we introduce the notion of typing context for syntactic descriptions.",
        "contexts may declare at most two variables."
      ]
    },
    {
      "heading": "4 Representing TAG with second order ACGs",
      "text": [
        "We cannot give here a detailed definition of second order ACGs here.",
        "We therefore directly explain how to transform TAGs into lexical entries representing a second order ACG that can be directly used by the algorithm.",
        "We represent a TAG G by a set of lexical entries LG.",
        "Lexical entries are triples (F, t, α) where F is a typing context, t is a linear A-term and α is either Na, N3 or Na.1 if N is a non-terminal of the considered TAG.",
        "Without loss of generality, we consider that the adjunction at an interior node of an elementary tree is either mandatory or forbidden1.",
        "We adopt the convention of rep",
        "resenting adjunction nodes labeled with N by the variable xNa,tr, the substitution nodes labeled with N ↓ by the variable xstrN3, the foot node of an auxiliary tree labeled with N* by the variable fNa 1 and the variable y* will represent the end of strings.",
        "When necessary, in order to respect the linearity constraints of the A-terms, indices are used to distinguish those variables.",
        "This convention being settled, the type annotation on variables is not necessary anymore, thus we will write xN., xN3, fN..1 and y.",
        "To translate the TAG, we use the function O defined by figure 2.",
        "Given an initial tree T whose root is labeled by N and t the normal form of O(T), ( , t, N3)2 is the lexical entry associated to T; if T is an auxiliary tree whose root is labeled by N and t is the normal form of O(T) then ( , AfN..1.t, Na )2is the lexical entry associated to T. A TAG G is represented by LG the smallest set verifying:",
        "1. if T is an elementary tree of G then the lexical entry associated to T is in LG.",
        "2. if ( , t, α) E LG, with α equals to Na or Ns,",
        "and t = C[xN.t1t2] then (F, t1, Na.1) E LG where F = fm..1 : F if fm..1 E FV(t1) otherwise F is the empty typing context.",
        "Given a term t such that xa E FV (t), and (F, t', α) E LG, then we say that t is rewritten as t[xa := t'], t ⇒ t[xa := t'].",
        "Furthermore if xa is the leftmost variable we write t ⇒l t[xa := t'].",
        "It is easy to check that if t ⇒* t' with FV (t') = ∅, then t *⇒l t'.",
        "A string w is generated by a LG whenever xS3 =*=>.",
        "t and t E /w/ (S being the start symbol of G).",
        "Straightforwardly, the set of strings generated by LG is exactly the language of G."
      ]
    },
    {
      "heading": "5 The algorithm",
      "text": [
        "As we want to emphasize the fact that the algorithm we propose borrows much to type checking, we use sequents in the items the algorithm manipulates.",
        "Sequents are objects of the form F �- t : d",
        "where F is a typing context, t is a linear A-term, and d is a syntactic description.",
        "The algorithm uses two kinds of items; either items of the form (α; F t : d; L) (where L is a list of sequents, the subgoals, here L contains either zero or one element) or items of the form [Na.",
        "1; F; t; (C1 [], v1) – (C2 [], v2)].",
        "All the possible instances of the items are given by figure 3.",
        "The algorithm is a recognizer but can easily be extended into a parser3 .",
        "It fills iteratively a chart until a fixed-point is reached.",
        "Elements are added to the chart by means of inference rules given by figure 4, in a deductive parsing fashion (Shieber et al., 1995).",
        "Inference rules contain two parts: the first part is a set of premises which state conditions on elements that are already in the chart.",
        "The second part gives the new element to add to the chart if it is not already present.",
        "For the more general algorithm, the rules are not much more numerous as they can be abstracted into more general schemes.",
        "An item of the form (α; F1 t1 : d; F2 t2 : (C1 [], v1)) verifies:",
        "1.",
        "(F'1, t1, α) EGG where F'1 = fN..1 : F if F1 = fN..1 : e or F'1 = F1 otherwise.",
        "2. there is a context C[] such that t1 = C[t2] and",
        "if d is of the form (d1, ... , dn) – (C2 [], v2) (n must be 1, or 2) then C[y] *⇒l t' so that t' is described by (C1 [], v1) – (C2 [], v2).",
        "3Actually, if it is extended into a parser, it will ouput the shared forest of the derivation trees; (de Groote, 2002) explains how to obtain the derived trees from the derivation trees in the framework of ACGs",
        "An item of the form (α; F t : d; ) verifies:",
        "1.",
        "(F', t, α) EGG where F' = fN..1 : F if F = fN..1 : e or F' = F otherwise 2. d does not contain non-specified syntactic descriptions4.",
        "3. t *⇒l t' and t' is described by d (d may either represent a string context or a string).",
        "the chart.",
        "An input Ay.C[y] is recognized iff when the fixed-point is reached, the chart contains an item of the form (5s; t : (Ay.C[], y) – (Ay.",
        "[], C[y]); ) (where 5 is the start symbol of the TAG G."
      ]
    },
    {
      "heading": "General items",
      "text": []
    },
    {
      "heading": "6 Conclusion and perspective",
      "text": [
        "In this paper, we have illustrated the use for TAGs of general and abstract tools, syntactic descriptions, which can be used to parse linear A-terms.",
        "Even though ACGs are very general in their definition, the algorithm we describe shows that this generality is not a source of unefficiency.",
        "Indeed, this algorithm, a special instance of a general one which can parse any second order ACG and it behaves exactly the same way as the algorithm given by (Schabes and Joshi, 1988) so that it parses a second order ACG encoding a TAG in 0(n6).",
        "The technique used enables to see generation as parsing.",
        "In the framework of second order ACG, the logical formulae on which generation is performed are bound to be obtained from semantic re-cipies coded with linear A-terms and are therefore not really adapted to Montague semantics.",
        "Nevertheless, syntactic descriptions can be extended with intersection types (Dezani-Ciancaglini et al., 2005) in order to cope with simply typed A-calculus.",
        "With this extension, it seems possible to extend the algorithm for second order ACGs so that it can deal with simply typed A-terms and without loosing its efficiency in the linear case."
      ]
    }
  ]
}
