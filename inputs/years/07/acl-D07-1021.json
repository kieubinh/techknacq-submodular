{
  "info": {
    "authors": [
      "Kenneth Ward Church",
      "Ted Hart",
      "Jianfeng Gao"
    ],
    "book": "2007 Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural Language Learning (EMNLP-CoNLL)",
    "id": "acl-D07-1021",
    "title": "Compressing Trigram Language Models With Golomb Coding",
    "url": "https://aclweb.org/anthology/D07-1021",
    "year": 2007
  },
  "references": [
    "acl-P02-1023",
    "acl-P96-1010"
  ],
  "sections": [
    {
      "text": [
        "Ken Church Ted Hart Jianfeng Gao",
        "Microsoft Microsoft Microsoft",
        "Redmond, WA, USA Redmond, WA, USA Redmond, WA, USA",
        "Trigram language models are compressed using a Golomb coding method inspired by the original Unix spell program.",
        "Compression methods trade off space, time and accuracy (loss).",
        "The proposed HashTBO method optimizes space at the expense of time and accuracy.",
        "Trigram language models are normally considered memory hogs, but with HashTBO, it is possible to squeeze a trigram language model into a few megabytes or less.",
        "HashTBO made it possible to ship a trigram contextual speller in Microsoft Office 2007."
      ]
    },
    {
      "heading": "1. Introduction",
      "text": [
        "This paper will describe two methods of compressing trigram language models: HashTBO and ZipTBO.",
        "ZipTBO is a baseline compression method that is commonly used in many applications such as the Microsoft IME (Input Method Editor) systems that convert Pinyin to Chinese and Kana to Japanese.",
        "Trigram language models have been so successful that they are beginning to be rolled out to applications with millions and millions of users: speech recognition, handwriting recognition, spelling correction, IME, machine translation and more.",
        "The EMNLP community should be excited to see their technology having so much influence and visibility with so many people.",
        "Walter Mossberg of the Wall Street Journal called out the contextual speller (the blue squiggles) as one of the most notable features in Office 2007:",
        "There are other nice additions.",
        "In Word, Outlook and PowerPoint, there is now contextual spell checking, which points to a wrong word, even if the spelling is in the dictionary.",
        "For example, if you type \"their\" instead of \"they're,\" Office catches the mistake.",
        "It really works.",
        "The use of contextual language models in spelling correction has been discussed elsewhere: (Church and Gale, 1991), (Mays et al., 1991), (Ku-kich, 1992) and (Golding and Schabes, 1996).",
        "This paper will focus on how to deploy such methods to millions and millions of users.",
        "Depending on the particular application and requirements, we need to make different tradeoffs among:"
      ]
    },
    {
      "heading": "1.. Space (for compressed language model),",
      "text": []
    },
    {
      "heading": "2.. Runtime (for n-gram lookup), and",
      "text": [
        "3.",
        "Accuracy (losses for n-gram estimates).",
        "HashTBO optimizes space at the expense of the other two.",
        "We recommend HashTBO when space concerns dominate the other concerns; otherwise, use ZipTBO.",
        "There are many applications where space is extremely tight, especially on cell phones.",
        "HashTBO was developed for contextual spelling in Microsoft Office 2007, where space was the key challenge.",
        "The contextual speller probably would not have shipped without HashTBO compression.",
        "We normally think of trigram language models as memory hogs, but with HashTBO, a few megabytes are more than enough to do interesting things with trigrams.",
        "Of course, more memory is always better, but it is surprising how much can be done with so little.",
        "For English, the Office contextual speller started with a predefined vocabulary of 311k word types and a corpus of 6 billion word tokens.",
        "(About a T8UUTIl2bl0DaWllusf4NasZTYI 200S0l03.html?m od=tff main tff top third of the words in the vocabulary do not appear in the corpus.)",
        "The vocabularies for other languages tend to be larger, and the corpora tend to be smaller.",
        "Initially, the trigram language model is very large.",
        "We prune out small counts (8 or less) to produce a starting point of 51 million trigrams, 14 million bigrams and 311k unigrams (for English).",
        "With extreme Stolcke, we cut the 51+14+0.3 million n-grams down to a couple million.",
        "Using a Golomb code, each n-gram consumes about 3 bytes on average.",
        "With so much Stolcke pruning and lossy compression, there will be losses in precision and recall.",
        "Our evaluation finds, not surprisingly, that compression matters most when space is tight.",
        "Although HashTBO outperforms ZipTBO on the spelling task over a wide range of memory sizes, the difference in recall (at 80% precision) is most noticeable at the low end (under 10MBs), and least noticeable at the high end (over 100 MBs).",
        "When there is plenty of memory (100+ MBs), the difference vanishes, as both methods asymptote to the upper bound (the performance of an uncompressed trigram language model with unlimited memory)."
      ]
    },
    {
      "heading": "2. Preliminaries",
      "text": [
        "Both methods start with a TBO (trigrams with backoff) LM (language model) in the standard ARPA format.",
        "The ARPA format is used by many toolkits such as the CMU-Cambridge Statistical Language Modeling Toolkit.",
        "No matter how much data we have, we never have enough.",
        "Nothing has zero probability.",
        "We will see n-grams in the test set that did not appear in the training set.",
        "To deal with this reality, Katz (1987) proposed backing off from trigrams to bi-grams (and from bigrams to unigrams) when we don't have enough training data.",
        "Backoff doesn't have to do much for trigrams that were observed during training.",
        "In that case, the backoff estimate of P(wt\\wi-2wi-1) is simply a discounted probability (wt\\wi-2 wi-1).",
        "The discounted probabilities steal from the rich and give to the poor.",
        "They take some probability mass from the rich n-grams that have been seen in training and give it to poor unseen n-grams that might appear in test.",
        "There are many ways to discount probabilities.",
        "Katz used Good-Turing smoothing, but other smoothing methods such as Kneser-Ney are more popular today.",
        "Backoff is more interesting for unseen trigrams.",
        "In that case, the backoff estimate is:",
        "The backoff alphas (a) are a normalization factor that accounts for the discounted mass.",
        "That is, where C(wi-2wi-1 wt) > 0 simply says that the trigram was seen in training data."
      ]
    },
    {
      "heading": "3. Stolcke Pruning",
      "text": [
        "Both ZipTBO and HashTBO start with Stolcke pruning (1998).",
        "We will refer to the trigram language model after backoff and pruning as a pruned TBO LM.",
        "Stolcke pruning looks for n-grams that would receive nearly the same estimates via Katz backoff if they were removed.",
        "In a practical system, there will never be enough memory to explicitly materialize all n-grams that we encounter during training.",
        "In this work, we need to compress a large set of n-grams (that appear in a large corpus of 6 billion words) down to a relatively small language model of just a couple of megabytes.",
        "We prune as much as necessary to make the model fit into the memory allocation (after subsequent Hash-TBO/ZipTBO compression).",
        "Pruning saves space by removing n-grams subject to a loss consideration:",
        "1.",
        "Select a threshold 9.",
        "2.",
        "Compute the performance loss due to pruning each trigram and bigram individually using the pruning criterion."
      ]
    },
    {
      "heading": "3.. Remove all trigrams with performance loss less than 9",
      "text": [
        "4.",
        "Remove all bigrams with no child nodes (tri-gram nodes) and with performance loss less than 9 5.",
        "Re-compute backoff weights.",
        "http://www.nist.gov/speech/publications/darpa98/html/l m20/lm20.htm",
        "Stolcke pruning uses a loss function based on relative entropy.",
        "Formally, let P denote the tri-gram probabilities assigned by the original un-pruned model, and let P' denote the probabilities in the pruned model.",
        "Then the relative entropy D(P||P') between the two models is where h is the history.",
        "For trigrams, the history is the previous two words.",
        "Stolcke showed that this reduces to -P(h)[P(w\\h) where a (h) is the revised backoff weight after pruning and h' is the revised history after dropping the first word.",
        "The summation is over all the tri-grams that were seen in training: C(h, w) > 0.",
        "Stolcke pruning will remove n-grams as necessary, minimizing this loss.",
        "After Stolcke pruning, we apply additional compression (either ZipTBO or HashTBO).",
        "ZipTBO uses a fairly straightforward data structure, which introduces relatively few additional losses on top of the pruned TBO model.",
        "A few small losses are introduced by quantizing the log likelihoods and the backoff alphas, but those losses probably don't matter much.",
        "More serious losses are introduced by restricting the vocabulary size, V, to the 64k most-frequent words.",
        "It is convenient to use byte aligned pointers.",
        "The actual vocabulary of more than 300,000 words for English (and more for other languages) would require 19-bit pointers (or more) without pruning.",
        "Byte operations are faster than bit operations.",
        "There are other implementations of ZipTBO that make different tradeoffs, and allow for larger V without pruning losses.",
        "HashTBO is more heroic.",
        "It uses a method inspired by McIlroy (1982) in the original Unix Spell Program, which squeezed a word list of VV=32,000 words into a PDP-11 address space (64k bytes).",
        "That was just 2 bytes per word!",
        "HashTBO uses similar methods to compress a couple million n-grams into half a dozen megabytes, or about 3 bytes per n-gram on average (including log likelihoods and alphas for backing off).",
        "ZipTBO is faster, but takes more space (about 4 bytes per n-gram on average, as opposed to 3 bytes per n-gram).",
        "Given a fixed memory budget, ZipTBO has to make up the difference with more aggressive Stolcke pruning.",
        "More pruning leads to larger losses, as we will see, for the spelling application.",
        "Losses will be reported in terms of performance on the spelling task.",
        "It would be nice if losses could be reported in terms of cross entropy, but the values output by the compressed language models cannot be interpreted as probabilities due to quantization losses and other compression losses."
      ]
    },
    {
      "heading": "4. McIlroy's Spell Program",
      "text": [
        "McIlroy's spell program started with a hash table.",
        "Normally, we store the clear text in the hash table, but he didn't have space for that, so he didn't.",
        "Hash collisions introduce losses.",
        "McIlroy then sorted the hash codes and stored just the interarrivals of the hash codes instead of the hash codes themselves.",
        "If the hash codes, h, are distributed by a Poisson process, then the inte-rarrivals, t, are exponentially distributed:",
        "where A = j.",
        "Recall that the dictionary contains V =32,000 words.",
        "P is the one free parameter, the range of the hash function.",
        "McIlroy hashed words into a large integer mod P, where P is a large prime that trades off space and accuracy.",
        "Increasing P consumes more space, but also reduces losses (hash collisions).",
        "McIlroy used a Golomb (1966) code to store the interarrivals.",
        "A Golomb code is an optimal Huffman code for an infinite alphabet of symbols with exponential probabilities.",
        "The space requirement (in bits per lexical entry) is close to the entropy of the exponential.",
        "The ceiling operator \\ ] is introduced because Huffman codes use an integer number of bits to encode each symbol.",
        "We could get rid of the ceiling operation if we replaced the Huffman code with an Arithmetic code, but it is probably not worth the effort.",
        "Lookup time is relatively slow.",
        "Technically, lookup time is O(V ), because one has to start at the beginning and add up the interarrivals to reconstruct the hash codes.",
        "McIlroy actually introduced a small table on the side with hash codes and offsets so one could seek to these offsets and avoid starting at the beginning every time.",
        "Even so, our experiments will show that HashTBO is an order of magnitude slower than ZipTBO.",
        "Accuracy is also an issue.",
        "Fortunately, we don't have a problem with dropouts.",
        "If a word is in the dictionary, we aren't going to misplace it.",
        "But two words in the dictionary could hash to the same value.",
        "In addition, a word that is not in the dictionary could hash to the same value as a word that is in the dictionary.",
        "For Mcllroy's application (detecting spelling errors), the only concern is the last possibility.",
        "McIlroy did what he could do to mitigate false positive errors by increasing P as much as he could, subject to the memory constraint (the PDP-11 address space of 64k bytes).",
        "We recommend these heroics when space dominates other concerns (time and accuracy)."
      ]
    },
    {
      "heading": "5. Golomb Coding",
      "text": [
        "Golomb coding takes advantage of the sparseness in the interarrivals between hash codes.",
        "Let's start with a simple recipe.",
        "Let t be an interarrival.",
        "We will decompose t into a pair of a quotient (tq) and a remainder (tr).",
        "That is, let t = tqm + tr where tq = [t/m\\ and tr = t mod m. We choose m to be a power of two near m « = 2~n , where E[t] is the expected value of the interarrivals, defined below.",
        "Store tq in unary and tr in binary.",
        "Binary codes are standard, but unary is not.",
        "To encode a number z in unary, simply write out a sequence of z-1 zeros followed by a 1.",
        "Thus, it takes z bits to encode the number z in unary, as opposed to log2 z bits in binary.",
        "This recipe consumes tq + log2 m bits.",
        "The first term is for the unary piece and the second term is for the binary piece.",
        "Why does this recipe make sense?",
        "As mentioned above, a Golomb code is a Huffman code for an infinite alphabet with exponential probabilities.",
        "We illustrate Huffman codes for infinite alphabets by starting with a simple example of a small (very finite) alphabet with just three symbols: {a, b, c}.",
        "Assume that half of the time, we see a, and the rest of the time we see b or c, with equal probabilities:",
        "The Huffman code in the table above can be read off the binary tree below.",
        "We write out a 0 whenever we take a left branch and a 1 whenever we take a right branch.",
        "The Huffman tree is constructed so that the two branches are equally likely (or at least as close as possible to equally likely).",
        "Now, let's consider an infinite alphabet where Pr(a) =- , Pr(b) =- and the probability of the t+1st symbol is Pv(t) = (1 - p)pt where 0 =^.",
        "In this case, we have the following code, which is simply t in unary.",
        "That is, we write out t 1 zeros followed by a 1.",
        "Symbol Code Length Pr",
        "Symbol",
        "Code",
        "Length",
        "Pr",
        "A",
        "0",
        "1",
        "50%",
        "B",
        "10",
        "2",
        "25%",
        "C",
        "11",
        "2",
        "25%",
        "The Huffman code reduces to unary when the Huffman tree is left branching:",
        "Recall that the recipe above calls for expressing t as m tq + tr where tq = [-^\\ and tr = t mod m. We encode tq in unary and tr in binary.",
        "(The binary piece consumes log2 m bits, since trranges from 0 to m.)",
        "How do we pick m?",
        "For convenience, let m be a power of 2.",
        "The unary encoding makes sense as a Huffman code if pm ~ -.",
        "Thus, a reasonable choice is m « .",
        "If B = J¥L then Bm = E[t]m « 1 – – Setting [>m « means m « ^-p."
      ]
    },
    {
      "heading": "6. HashTBO Format",
      "text": [
        "The HashTBO format is basically the same as Mcl-lroy's format, except that Mcllroy was storing words and we are storing «-grams.",
        "One could store all of the n-grams in a single table, though we actually store unigrams in a separate table.",
        "An n-gram is represented as a key of n integers (offsets into the vocabulary) and two values, a log likelihood and, if appropriate, an alpha for backing off.",
        "We'll address the keys first.",
        "Trigrams consist of three integers (offsets into the Vocabulary): w1 w2w3.",
        "These three integers are mapped into a single hash between 0 and P - 1 in the obvious way:",
        "where V is vocabulary size.",
        "Bigrams are hashed the same way, except that the vocabulary is padded with an extra symbol for NA (not applicable).",
        "In the bigram case, w3 is NA.",
        "We then follow a simple recipe for bigrams and trigrams:"
      ]
    },
    {
      "heading": "1.. Stolcke prune appropriately",
      "text": []
    },
    {
      "heading": "2.. Let N be the number of n-grams",
      "text": []
    },
    {
      "heading": "3.. Choose an appropriate P (hash range)",
      "text": []
    },
    {
      "heading": "4.. Hash the V n-grams",
      "text": []
    },
    {
      "heading": "5.. Sort the hash codes",
      "text": [
        "6.",
        "Take the first differences (which are modeled as interarrivals of a Poisson process)"
      ]
    },
    {
      "heading": "7.. Golomb code the first differences",
      "text": [
        "We did not use this method for unigrams, since we assumed (perhaps incorrectly) that we will have explicit likelihoods for most of them and therefore there is little opportunity to take advantage of sparseness.",
        "Most of the recipe can be fully automated with a turnkey process, but two steps require appropriate hand intervention to meet the memory allocation for a particular application:"
      ]
    },
    {
      "heading": "1.. Stolcke prune appropriately, and",
      "text": []
    },
    {
      "heading": "2.. Choose an appropriate P",
      "text": [
        "1999) and http://en.wikipedia.org/wiki/Golomb coding, for similar discussion, though with slightly different notation.",
        "The primary reference is (Golomb, 1966).",
        "2 < P < 1 and t> 0. p depends on E[t], the expected value of the interarrivals:",
        "Ideally, we'd like to do as little pruning as possible and we'd like to use as large a P as possible, subject to the memory allocation.",
        "We don't have a principled argument for how to balance Stolcke pruning losses with hashing losses; this can be arrived at empirically on an application-specific basis.",
        "For example, to fix the storage per n-gram at around 13 bits:",
        "If we solve for X, we obtain A*> 1/ 20,0000.",
        "In other words, set P to a prime near 20,000N and then do as much Stolcke pruning as necessary to meet the memory constraint.",
        "Then measure your application's accuracy, and adjust accordingly.",
        "There are N log likelihood values, one for each key.",
        "These N values are quantized into a small number of distinct bins.",
        "They are written out as a sequence of N Huffman codes.",
        "If there are Katz backoff alphas, then they are also written out as a sequence of N Huffman codes.",
        "(Unigrams and bigrams have alphas, but trigrams don't.)",
        "The lookup process is given an n-gram, Wj_2 Wj_!",
        "Wj, and is asked to estimate a log likelihood, logPr(Wj | wi-2 wj_1).",
        "Using the standard backoff model, this depends on the likelihoods for the unigrams, bigrams and trigrams, as well as the alphas.",
        "The lookup routine not only determines if the n-gram is in the table, but also determines the offset within that table.",
        "Using that offset, we can find the appropriate log likelihood and alpha.",
        "Side tables are maintained to speed up random access."
      ]
    },
    {
      "heading": "7. ZipTBO Format",
      "text": [
        "ZipTBO is a well-established representation of trigrams.",
        "Detailed descriptions can be found in (Clarkson and Rosenfeld 1997; Whittaker and Raj 2001).",
        "ZipTBO consumes 8 bytes per unigram, 5 bytes per bigram and 2.5 bytes per trigram.",
        "In practice, this comes to about 4 bytes per n-gram on average.",
        "Note that there are some important interactions between ZipTBO and Stolcke pruning.",
        "ZipTBO is relatively efficient for trigrams, compared to bi-grams.",
        "Unfortunately, aggressive Stolcke pruning generates bigram-heavy models, which don't compress well with ZipTBO.",
        "Figure 1.",
        "Tree structure of n-grams in ZipTBO format, following Whittaker and Ray (2001)",
        "The tree structure of the trigram model is implemented using three arrays.",
        "As shown in Figure 1, from left to right, the first array (called unigram array) stores unigram nodes, each of which branches out into bigram nodes in the second array (bigram array).",
        "Each bigram node then branches out into trigram nodes in the third array (trigram array).",
        "The length of the unigram array is determined by the vocabulary size (V).",
        "The lengths of the other two arrays depend on the number of bigrams and the number of trigrams, which depends on how aggressively they were pruned.",
        "(We do not prune unigrams.)",
        "We store a 2-byte word id for each unigram, bigram and trigram.",
        "The unigram nodes point to blocks of bigram nodes, and the bigram nodes point to blocks of tri-gram nodes.",
        "There are boundary symbols between blocks (denoted by the pointers in Figure 1).",
        "The boundary symbols consume 4 bytes for each unigram and 2 bytes for each bigram.",
        "In each block, nodes are sorted by their word ids.",
        "Blocks are consecutive, so the boundary value of an n 1-gram node together with the boundary value of its previous n 1-gram node specifies, in the n-gram array, the location of the block containing all its child nodes.",
        "To locate a particular child node, a binary search of word ids is performed within the block.",
        "Figure 2.",
        "When there is plenty of memory, performance (recall @ 80% precision) asymptotes to the performance of baseline system with no compression (StdTBO).",
        "When memory is tight, HashTBO >> ZipTBO >> StdTBO.",
        "Figure 3.",
        "The differences between the methods in Figure 2 vanish if we adjust for prune size.",
        "Like HashTBO, the log likelihood values and backoff alphas are quantized to a small number of quantization levels (256 levels for unigrams and 16 levels for bigrams and trigrams).",
        "Unigrams use a full byte for the log likelihoods, plus another full byte for the alphas.",
        "Bigrams use a half byte for the log likelihood, plus another half byte for the alphas.",
        "Trigrams use a half byte for the log likelihood.",
        "(There are no alphas for trigrams.)"
      ]
    },
    {
      "heading": "1.. 8 bytes for each unigram:",
      "text": [
        "b.",
        "4 bytes for two boundary symbols + c. 1 byte for a log likelihood + d. 1 byte for an alpha"
      ]
    },
    {
      "heading": "2.. 5 bytes for each bigram:",
      "text": [
        "b.",
        "2 bytes for a boundary symbol + c. xa bytes for a log likelihood + d. xa bytes for an alpha"
      ]
    },
    {
      "heading": "3.. 2.5 bytes for each trigram:",
      "text": [
        "b. xa bytes for a log likelihood",
        "in aj >.",
        "♦ HashTBO ■ ZipTBO",
        "Figure 4.",
        "On average, HashTBO consumes about 3 bytes per n-gram, whereas ZipTBO consumes 4.",
        "Evaluation",
        "We normally think of trigram language models as memory hogs, but Figure 2 shows that trigrams can be squeezed down to a megabyte in a pinch.",
        "Of course, more memory is always better, but it is surprising how much can be done (27% recall at 80% precision) with so little memory.",
        "Given a fixed memory budget, HashTBO outperforms ZipTBO which outperforms StdTBO, a baseline system with no compression.",
        "Compression matters more when memory is tight.",
        "The gap between methods is more noticeable at the low end (under 10 megabytes) and less noticeable at the high end (over 100 megabytes), where both methods asymptote to the performance of the StdTBO baseline.",
        "All methods start with Stolcke pruning.",
        "Figure 3 shows that the losses are largely due to pruning.",
        "All three methods perform about equally well, assuming the same amount of pruning.",
        "The difference is that HashTBO can store more «-grams in the same memory and therefore it doesn't have to do as much pruning.",
        "Figure 4 shows that HashTBO consumes 3 bytes per «-gram whereas ZipTBO consumes 4.",
        "Figure 4 combines unigrams, bigrams and trigrams into a single «-gram variable.",
        "Figure 5 drills down into this variable, distinguishing bigrams from trigrams.",
        "The axes here have been reversed so we can see that HashTBO can store more of both kinds in less space.",
        "Note that both HashTBO lines are above both ZipTBO lines.",
        "-X- HashTBO Bigrams A HashTBO Trigrams -X-ZipTBO Bigrams A ZipTBO Trigrams",
        "Figure 5.",
        "HashTBO stores more bigrams and tri-grams than ZipTBO in less space.",
        "In addition, note that both bigram lines are above both trigram lines (triangles).",
        "Aggressively pruned models have more bigrams than trigrams!",
        "Linear regression on this data shows that Hash-TBO is no better than ZipTBO on trigrams (with the particular settings that we used), but there is a big difference on bigrams.",
        "The regressions below model M (memory in bytes) as a function of bi and tri, the number of bigrams and trigrams, respectively.",
        "(Unigrams are modeled as part of the intercept since all models have the same number of un-igrams.)",
        "As a sanity check, it is reassuring that ZipTBO's coefficients of 4.9 and 2.6 are close to the true values of 5 bytes per bigram and 2.5 bytes per tri-gram, as reported in Section 7.3.",
        "According to the regression, HashTBO is no better than ZipTBO for trigrams.",
        "Both models use roughly 2.6 bytes per trigram.",
        "When trigram models have relatively few trigrams, the other coefficients matter.",
        "HashTBO uses less space for bi-grams (3.4 bytes/bigram << 4.9 bytes/bigram) and it has a better intercept (0.S << 2.6).",
        "We recommend HashTBO if space is so tight that it dominates other concerns.",
        "However, if there is plenty of space, or time is an issue, then the tradeoffs work out differently.",
        "Figure 6 shows that ZipTBO is an order of magnitude faster than HashTBO.",
        "The times are reported in microseconds per n-gram lookup on a dual Xeon PC with a 3.6 ghz clock and plenty of RAM (4GB).",
        "These times were averaged over a test set of 4 million lookups.",
        "The test process uses a cache.",
        "Turning off the cache increases the difference in lookup times.",
        "Memory (MB)",
        "H-HashTBO ZipTBO",
        "Figure 6.",
        "HashTBO is slower than ZipTBO."
      ]
    },
    {
      "heading": "9. Conclusion",
      "text": [
        "Trigram language models were compressed using HashTBO, a Golomb coding method inspired by McIlroy's original spell program for Unix.",
        "McIlroy used the method to compress a dictionary of 32,000 words into a PDP-11 address space of 64k bytes.",
        "That is just 2 bytes per word!",
        "We started with a large corpus of 6 billion words of English.",
        "With HashTBO, we could compress the trigram language model into just a couple of megabytes using about 3 bytes per n-gram (compared to 4 bytes per n-gram for the ZipTBO baseline).",
        "The proposed HashTBO method is not fast, and it is not accurate (not lossless), but it is hard to beat if space is tight, which was the case for the contextual speller in Microsoft Office 2007."
      ]
    },
    {
      "heading": "Acknowledgments",
      "text": [
        "We would like to thank Dong-Hui Zhang for his contributions to ZipTBO."
      ]
    }
  ]
}
