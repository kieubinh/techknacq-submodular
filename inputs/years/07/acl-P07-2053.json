{
  "info": {
    "authors": [
      "Péter Halácsy",
      "András Kornai",
      "Csaba Oravecz"
    ],
    "book": "45th Annual Meeting of the Association for Computational Linguistics Companion Volume Proceedings of the Demo and Poster Sessions",
    "id": "acl-P07-2053",
    "title": "Poster paper: HunPos -- an open source trigram tagger",
    "url": "https://aclweb.org/anthology/P07-2053",
    "year": 2007
  },
  "references": [
    "acl-A00-1031",
    "acl-A88-1019",
    "acl-C00-1042",
    "acl-C04-1080",
    "acl-H05-1060",
    "acl-J88-1003",
    "acl-N03-1033",
    "acl-P01-1035",
    "acl-W04-1903",
    "acl-W96-0213"
  ],
  "sections": [
    {
      "text": [
        "HunPos - an open source trigram tagger",
        "Peter Haiacsy",
        "Andras Kornai Csaba Oravecz",
        "MetaCarta Inc. Hungarian Academy of Sciences",
        "350 Massachusetts Ave. Institute of Linguistics",
        "Cambridge MA 02139 H-1068 Budapest, Benczur u.",
        "33.",
        "andras@kornai.com oravecz@nytud.hu",
        "In the world of non-proprietary NLP software the standard, and perhaps the best, HMM-based POS tagger is TnT (Brants, 2000).",
        "We argue here that some of the criticism aimed at HMM performance on languages with rich morphology should more properly be directed at TnT's peculiar license, free but not open source, since it is those details of the implementation which are hidden from the user that hold the key for improved POS tagging across a wider variety of languages.",
        "We present HunPos, a free and open source (LGPL-licensed) alternative, which can be tuned by the user to fully utilize the potential of HMM architectures, offering performance comparable to more complex models, but preserving the ease and speed of the training and tagging process."
      ]
    },
    {
      "heading": "0. Introduction",
      "text": [
        "Even without a formal survey it is clear that TnT (Brants, 2000) is used widely in research labs throughout the world: Google Scholar shows over 400 citations.",
        "For research purposes TnT is freely available, but only in executable form (closed source).",
        "Its greatest advantage is its speed, important both for a fast tuning cycle and when dealing with large corpora, especially when the POS tagger is but one component in a larger information retrieval, information extraction, or question answering system.",
        "Though taggers based on dependency networks (Toutanova et al., 2003), SVM (Gimenez and Marquez, 2003), MaxEnt (Ratnaparkhi, 1996), CRF (Smith et al., 2005), and other methods may reach slightly better results, their train/test cycle is orders of magnitude longer.",
        "A ubiquitous problem in HMM tagging originates from the standard way of calculating lexical probabilities by means of a lexicon generated during training.",
        "In highly inflecting languages considerably more unseen words will be present in the test data than in more isolating languages, which largely accounts for the drop in the performance of n-gram taggers when moving away from English.",
        "To mitigate the effect one needs a morphological dictionary (Hajic et al., 2001) or a morphological analyzer (Hakkani-Tur et al., 2000), but if the implementation source is closed there is no handy way to incorporate morphological knowledge in the tagger.",
        "The paper is structured as follows.",
        "In Section 1 we present our own system, HunPos, while in Section 2 we describe some of the implementation details of TnT that we believe influence the performance of a HMM based tagging system.",
        "We evaluate the system and compare it to TnT on a variety of tasks in Section 3.",
        "We don't necessarily consider HunPos to be significantly better than TnT, but we argue that we could reach better results, and so could others coming after us, because the system is open to explore all kinds of fine-tuning strategies.",
        "Some concluding remarks close the paper in Section 4."
      ]
    },
    {
      "heading": "1. Main features of HunPos",
      "text": [
        "HunPos has been implemented in OCaml, a highlevel language which supports a succinct, well-maintainable coding style.",
        "OCaml has a highperformance native-code compiler (Doligez et al., 2004) that can produce a C library with the speed of a C/C++ implementation.",
        "On the whole HunPos is a straightforward trigram system estimating the probabilities for a given sequence of words w1... wT (the additional tags t-1,t0, and tT+1 are for sentence boundary markers).",
        "Notice that unlike traditional HMM models, we estimate emission/lexicon probabilities based on the current tag and the previous tag as well.",
        "As we shall see in the next Section, using tag bi-grams to condition the emissions can lead to as much as 10% reduction in the error rate.",
        "(In fact, HunPos can handle a context window of any size, but on the limited training sets available to us increasing this parameter beyond 2 gives no further improvement.)",
        "As for contextualized lexical probabilities, our extension is very similar to Banko and Moore (2004) who use P(wi\\ti-1,ti,ti+1) lexical probabilities and found, on the Penn Treebank, that \"incorporating more context into an HMM when estimating lexical probabilities improved accuracy from 95.87% to 96.59%\".",
        "One difficulty with their approach, noted by Banko and Moore (2004), is the treatment of unseen words: their method requires a full dictionary that lists what tags are possible for each word.",
        "To be sure, for isolating languages such information is generally available from machine readable dictionaries which are often large enough to make the out of vocabulary problem negligible.",
        "But in our situation this amounts to idealized morphological analyzers (MA) that have their stem list extended so as to have no OOV on the test set.",
        "The strong side of TnT is its suffix guessing algorithm that is triggered by unseen words.",
        "From the training set TnT builds a trie from the endings of words appearing less than n times in the corpus, and memorizes the tag distribution for each suffix.",
        "A clear advantage of this approach is the probabilistic weighting of each label, however, under default settings the algorithm proposes a lot more possible tags than a morphological analyzer would.",
        "To facilitate the use of MA, HunPos has hooks to work with a morphological analyzer (lexicon), which might still leave some OOV items.",
        "As we shall see in Section 3, the key issue is that for unseen words the HMM search space may be narrowed down to the alternatives proposed by this module, which not only speeds up search but also very significantly improves precision.",
        "That is, for unseen words the MA will generate the possible labels, to which the weights are assigned by the suffix guessing algorithm."
      ]
    },
    {
      "heading": "2. Inside TnT",
      "text": [
        "Here we describe, following the lead of (Jurish, 2003), some non-trivial features of TnT sometimes only hinted at in the user guide, but clearly evident from its behavior on real and experimentally adjusted corpora.",
        "For the most part, these features are clever hacks, and it is unfortunate that neither Brants (2000) nor the standard HMM textbooks mention them, especially as they often yield more significant error reduction than the move from HMM to other architectures.",
        "Naturally, these features are also available in HunPos.",
        "For the following regular expressions TnT learns the tag distribution of the training corpus separately to give more reliable estimates for open class items like numbers unseen during training:",
        "(The regexps are only inferred - we haven't attempted to trace the execution.)",
        "After this, at test time, if the word is not found in the lexicon (numerals are added to the lexicon like all other items) TnT checks whether the unseen word matches some of the regexps, and uses the distribution learned for this regexp to guess the tag.",
        "The case of individual words may carry relevant information for tagging, so it is well worth preserving the uppercase feature for items seen as such in training.",
        "For unseen words TnT builds two suffix tries: if the word begins with uppercase one trie is used, for lowercase words the other trie is applied.",
        "The undocumented trick is to try to lookup the word in sentence initial position from the training lexicon in its lowercase variant, which contributes noticeably to the better performance of the system."
      ]
    },
    {
      "heading": "3. Evaluation",
      "text": [
        "English For the English evaluation we used the WSJ data from Penn Treebank II.",
        "We extracted sentences from the parse trees.",
        "We split data into training and test set in the standard way (Table 1).",
        "As Table 2 shows HunPos achieves performance comparable to TnT for English.",
        "The increase in the emission order clearly improves this performance.",
        "that the difference between systems can only be appreciated once the small (and scantily documented) tricks are factored out.",
        "The reason why Banko and Moore (2004) get less than HunPos is not because their system is inherently worse, but rather because it lacks the engineering hacks built into TnT and HunPos.",
        "Hungarian We evaluated the different models by tenfold cross-validation on the Szeged Corpus (Csendes et al., 2004), with the relevant data in presented Table 3.",
        "Note that the proportion of unseen words, nearly 10%, is more than three times higher than in English.",
        "Most of these words were covered by the morphological analyzer (Troon et al., 2006) but still 28% of unseen words were only guessed.",
        "However, this is just 2.86% of the whole corpus, in the magnitude similar to English.",
        "If we follow Banko and Moore (2004) and construct a full (no OOV) morphological lexicon from the tagged version of the test corpus, we obtain 96.95% precision where theirs was 96.59%.",
        "For words seen, precision improves by an entirely negligible 0.01%, but for unseen words it improves by 10%, from 86.13% to 98.82%.",
        "This surprising result arises from the fact that there are a plenty of unambiguous tokens (especially the proper names that are usually unseen) in the test corpus.",
        "What this shows is not just that morphology matters (this is actually not that visible for English), but",
        "Table 4: Tagging accuracy for Hungarian of HunPos with and without morphological lexicon and with first and second order emission/lexicon probabilities.",
        "On the same corpus TnT had 97.42% and Halacsy et al.",
        "(2006) reached 98.17% with a MaxEnt tagger that used the TnT output as a feature.",
        "HunPos gets as good performance in one minute as this MaxEnt model which took three hours to go through the train/test cycle."
      ]
    },
    {
      "heading": "4. Concluding remarks",
      "text": [
        "Though there can be little doubt that the ruling system of bakeoffs actively encourages a degree of one-upmanship, our paper and our software are not offered in a competitive spirit.",
        "As we said at the outset, we don't necessarily believe HunPos to be in any way better than TnT, and certainly the main ideas have been pioneered by DeRose (1988), Church (1988), and others long before this generation of HMM work.",
        "But to improve the results beyond what a basic HMM can achieve one needs to tune the system, and progress can only be made if the experiments are end to end replicable.",
        "Set",
        "Sent.",
        "Tokens",
        "Unseens",
        "oov",
        "Train",
        "63,075",
        "1,044,914",
        "0",
        "N.A",
        "Test",
        "7,008",
        "116,101",
        "9.59%",
        "5.64%",
        "Set",
        "Sect'ns",
        "Sent.",
        "Tokens",
        "Unseen",
        "Train",
        "0-18",
        "38,219",
        "912,344",
        "0",
        "Test",
        "22-24",
        "5,462",
        "129,654",
        "2.81%",
        "morph",
        "lex order",
        "seen",
        "unseen",
        "overall",
        "no",
        "1",
        "2",
        "98.34% 98.58%",
        "88.96% 87.97%",
        "97.27% 97.40%",
        "yes",
        "1",
        "98.32%",
        "96.01%",
        "98.03%",
        "2",
        "98.56%",
        "95.96%",
        "98.24%",
        "seen",
        "unseen",
        "overall",
        "TnT",
        "96.77%",
        "85.91%",
        "96.46%",
        "HunPos 1",
        "96.76%",
        "86.90%",
        "96.49%",
        "HunPos 2",
        "96.88%",
        "86.13%",
        "96.58%",
        "There is no doubt many other systems could be tweaked further and improve on our results - what matters is that anybody could now also tweak Hun-Pos without any restriction to improve the state of the art.",
        "Such tweaking can bring surprising results, e.g. the conclusion, strongly supported by the results presented here, that HMM tagging is actually quite competitive with, and orders of magnitude faster than, the current generation of learning algorithms including SVM and MaxEnt.",
        "No matter how good TnT was to begin with, the closed source has hindered its progress to the point that inherently clumsier, but better tweakable algorithms could overtake HMMs, a situation that HunPos has now hopefully changed at least for languages with more complex morphologies.",
        "Acknowledgement",
        "We thank Thorsten Brants for TnT, and Gyorgy Gyepesi for constant help and encouragement."
      ]
    }
  ]
}
