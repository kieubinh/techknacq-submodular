{
  "info": {
    "authors": [
      "Adrien Lardilleux",
      "Yves Lepage"
    ],
    "book": "COLING – Posters",
    "id": "acl-C08-2014",
    "title": "Multilingual Alignments by Monolingual String Differences",
    "url": "https://aclweb.org/anthology/C08-2014",
    "year": 2008
  },
  "references": [
    "acl-H05-1011",
    "acl-J03-1002",
    "acl-W98-1006",
    "acl-W99-0602"
  ],
  "sections": [
    {
      "text": [
        "We propose a method to obtain subsenten-tial alignments from several languages simultaneously.",
        "The method handles several languages at once, and avoids the complexity explosion due to the usual pair-by-pair processing.",
        "It can be used for different units (characters, morphemes, words, chunks).",
        "An evaluation of word alignments with a trilingual machine translation corpus has been conducted.",
        "A comparison of the results with those obtained by state of the art alignment software is reported."
      ]
    },
    {
      "heading": "1. Introduction",
      "text": [
        "Several tools are available nowadays for alignment of pairs of languages.",
        "Among them, the bilingual word aligner GIZA++ (Och and Ney, 2003) can perform high quality alignments based on words statistics and is considered the most efficient tool.",
        "Three main criticisms may be addressed to this kind of tool.",
        "Firstly, as denoted by Moore (2005), one needs to tune numerous parameters in order to optimize the results for a particular alignment task, which can be very time consuming.",
        "This is all the more important when multilingual alignment is concerned, since every language pair will require its own set of parameter values.",
        "Secondly, the best methods available nowadays can only work on language pairs, which results in a complexity explosion when multilingual alignments are needed.",
        "Simard (1999) showed how to adapt a bilingual method to align more than two versions of a text at the sentence level, but languages have to be processed by pairs to identify which ones are the most similar.",
        "Thirdly, these approaches are also designed to align specific units of texts (almost always words).",
        "The same method cannot be applied indifferently on different units.",
        "Fanguages which do not separate words by spaces require to be first segmented into words, while a character-based approach could be a worthy alternative.",
        "To deal with all these issues, we propose a method which is primarily intended to align many languages simultaneously from sentence-aligned parallel corpora, whatever the segmentation unit."
      ]
    },
    {
      "heading": "2. Alignment by string differences 2.1 String differences",
      "text": [
        "In order to introduce the operation we use, let us start with a well-known similar technique, the Fongest Common Subsequence (FCS) (Hirschberg, 1975).",
        "Given two strings A and B, it is always possible to find their longest subsequence.",
        "Such a subsequence is a sequence of non necessarily contiguous characters.",
        "For instance, assume we have the following short English sentences (space characters are marked by an underscore and have the same status as any other character):",
        "A = LwouldJike^a^donut^please.",
        "B = Regular^size,^please.",
        "In this case, the FCS for A and B would be:",
        "LCS(A,£) = ulJe^please.",
        "which is 14 characters long.",
        "It is then possible to form their string difference:",
        "!For purpose of simplicity, we do not mention that the LCS operation, as well as the difference operation, may deliver a plurality of strings.",
        "AQB = Lwodlk^donut B Q A = Regarsz where we define A Q B = A - LCS(A, B).",
        "Because several isolated characters are discarded, this results in a malformed string that is of limited interest.",
        "To avoid misinformed strings, we rather resort to Longest Common Substrings (LCSubstr), that are contiguous.",
        "On the previous example, the LCSubstr is:",
        "LCSubstr(A, B) = ^please.",
        "which is 9 characters long and by far more meaningful.",
        "By removing this substring from A and B, we obtain: A Q B = I^would Jike^a^donut B 0 A = Regularize",
        "String differences are monolingual.",
        "They serve as a starting point to compute alignments.",
        "It suffices to apply them in parallel on the source text and all aligned target texts.",
        "Let us consider anew the previous English sentences and their translations into Japanese (A stands for \"A's translation\"):",
        "Idonatu wo kudasai.l Ihutuu saizu wo kudasai.l",
        "BQA = ^ffl+MX",
        "By performing simultaneously the difference between A and B and between A and B, their aligned translations, we obtain:",
        "Regular^size <-> IfiS+f -\\ X",
        "The method assumes that the three strings computed in the source language are translations of their corresponding strings in the target language That is:",
        "LCSubsti^B) = LCSubstr(2, B) AQ~B = AQB 'BQA = BQA",
        "Assume we want to extract the translation equivalent of \"Chicago\" in Japanese from the following pairs of sentences:",
        "Aq = IsJWs^aJrainJbrXhicago?",
        "Ikono ressya ha sikago yuki desu ka.l",
        "B = IsJhis^pricea;orrect?",
        "Ikono nedan de tadasii desu ka.l",
        "C = WhatJrack^doesJheJrainJor^Boston^starLfrom?",
        "Ibosuton yuki no ressya ha nani ban kara syutu masu ka.l",
        "A direct application of the method described above does not ensure that \"Chicago\" will correspond to a string difference.",
        "A way to solve the problem is to apply the method iteratively.",
        "String differences are applied on the sentence where \"Chicago\" appears {i.e., A), in order to gradually cut it down to \"Chicago\" only.",
        "By applying the same process in parallel on all target sentences, strings are expected to reduce to the translation of \"Chicago\" as well.",
        "Also, we add the constraint that the string to be aligned must not be altered during the iterative process, i.e., it should not be included in any LCSubstr.",
        "Thus, starting with Ao containing \"Chicago\", we perform at each step:",
        "An-\\-\\ = An 0 SnAn-\\-\\ = An 0 Snwhere Sn is the first sentence S in the list of all source sentences sorted by the length of LCSubstr(Ara, S).",
        "In other words, amongst the available English sentences S, select the one that shares the longest substring with An, and remove this substring from An.",
        "The corresponding differences are applied in the target languages simultaneously.",
        "Table 1 gives the details of an execution of the iterative process.",
        "On a large amount of data, the method may yield a plurality results; each of them may be obtained a certain number of times.",
        "We shall judge the quality of alignments based on these frequencies.",
        "In practice, it is not possible to perform all the differences between sentences that would lead to the alignment of a particular string.",
        "This complexity explosion, where most of the LCSubstr's would be very short, would result in non reliable alignments.",
        "Table 1: Details of the steps necessary to extract one alignment for \"Chicago\" in Japanese.",
        "\"Chicago\" may not be modified during the iterative process and is not used to compute the LCSubstr's.",
        "The resulting alignment is At = v yt] rf isikagoi, which is correct.",
        "We cut down the complexity by examining only the c first longest LCSubstr's longer than a predefined threshold.",
        "The threshold was set to half of the longest LCSubstr.",
        "Different values of c were tested for in the experiments reported in Section 3.3.",
        "This parameter is used in the source language only.",
        "Well-formedness of strings is also tested by checking the presence of all their n-sequences of characters in the initial data.",
        "This is performed in the target languages.",
        "Eventually, each alignment is scored by its frequency divided by the number of sentences that were required to obtain it.",
        "The reason for doing so is that, in practice, the less sentences required, the longer and the safer the LCSubstr's used."
      ]
    },
    {
      "heading": "3. Evaluation",
      "text": [
        "We used the English, Japanese and Arabic training parts of the IWSLT 2007 machine translation campaign corpus (Fordyce, 2007) to conduct our experiments.",
        "It is made of nearly 20,000 triples of aligned sentences from the BTEC corpus (Takezawa et al., 2002).",
        "As mentioned earlier, one advantage of our method is that it can align any string of text, providing the data is sufficient.",
        "Table 2 shows a sample of alignments obtained using English as the source language.",
        "The strings requested to be aligned can be anything, from one character (see the first lines of the table) to entire sentences (see last line).",
        "Most alignments, if not perfect, differ from the expected meaning by slight differences only, even in Arabic.",
        "We compared our system to the state of the art device, GIZA++, in the particular case of bilingual word alignments on two pairs of languages: English to Arabic and English to Japanese.",
        "Our system aligned the three languages simultaneously, using English words as input.",
        "For each target language, the target unit with the best score (see Section 2.4) was kept.",
        "Different values of c were tested.",
        "GIZA++ was used to compute IBM model 4.",
        "The default set of parameter values, which typically produces good results, was used.",
        "For each source word, the most probable pair of words (source, target) was kept.",
        "Note that the output of IBM model 4 produces word to word alignments, while there is no guaranty that our system would output a single target word as the unit of processing is the character.",
        "For an objective assessment, we resort to two bilingual dictionaries: English-Japanese, and English-Arabic.",
        "As for English-Japanese, the best results were obtained for c = 40, and are as good as those of GIZA++ (628 alignments found in the reference dictionary vs. 629, see Table 3).",
        "As for English-Arabic, the best results were obtained for c = 20, but only 37% of GIZA++'s results could be achieved (63 alignments found in the reference dictionary vs. 170).",
        "Those alignments output by the two systems that do not belong to the reference dictionaries are not necessarily erroneous, since we relied on exact matching.",
        "Specifically, for our method, one extra character only may be responsible for an alignment to be considered wrong.",
        "n",
        "5\"n",
        "LCSubstr(A„,Sn)",
        "LCSubstr(A„,5„)",
        "0",
        "IsJMs„a„train„for„Chicago?",
        "C",
        "„train„for„",
        "C (7)^0$:It:v =3tf §?t*\\",
        "oonmt",
        "1",
        "IsJMs^aChicago?",
        "B",
        "IsJhis^",
        "2",
        "aChicago?",
        "B",
        "?",
        "Z",
        "3",
        "aChicago",
        "C",
        "a",
        "4",
        "Chicago",
        "Table 2: A sample of alignments obtained using English as the source language.",
        "The Arabic and Japanese strings were generated in parallel by aligning the three languages at once.",
        "Parameter c was set to 20 in this experiment.",
        "Table 3: Comparison of our system against GIZA++.",
        "Each cell gives the number of alignments found in the reference dictionary over the number of alignments obtained."
      ]
    },
    {
      "heading": "4. Conclusion",
      "text": [
        "We introduced a simple method to obtain subsen-tential alignments from several languages simultaneously.",
        "Its focus is on contexts rather than on units to be aligned.",
        "It avoids the complexity explosion due to the usual pair-by-pair processing by relying on the simultaneous application of a monolingual operation.",
        "The method comes close to GIZA++'s results in some word alignment task, while being by far much simpler.",
        "English",
        "Arabic",
        "Japanese",
        "/./",
        "/./",
        "?",
        "?",
        "/?/ '?'",
        "fy'- „ /*«./ '?'",
        "Wh",
        "jjI I'ayni 'where'",
        "jnj Incinil, /nan/ 'what', 'wh.",
        ".",
        ". '",
        "here",
        "La iknai 'here'",
        "C C ikokoi 'here'",
        "I'd like",
        "Jujl I'arydl 'I'd like'",
        "T<?V^ ikudasaii 'please'",
        "Thank you",
        "1^^Li Mra/ 'thank you'",
        "tlil't') larigatoul 'thank you'",
        "Ice",
        "^ J\" ^\\ imyskrymi 'ice cream'",
        "if, l£ Ikoori wo/ 'ice'",
        "I have to get",
        "isL.",
        "Jl JJiLaJtS",
        "liyslqbl dl sd'-hl",
        "* malformed string *",
        "Inyuusyu si nakerebanarimasenl",
        "T have to get'",
        "At seven o'clock",
        "<L*jL» Jl isL.",
        "Jl",
        "//y a/ sd'-h dl sdb'-hl",
        "'at seven o'clock'",
        "Isitizi nil",
        "'at seven o'clock'",
        "GIZA++",
        "Our system",
        "c = 1",
        "c= 10",
        "c= 20",
        "c = 30",
        "c = 40",
        "c = 50",
        "English-Japanese",
        "629 / 4,268",
        "369/1,569",
        "573 / 2,629",
        "603/3,038",
        "598/3,165",
        "628/3,219",
        "615/3,248",
        "English-Arabic",
        "170/ 1,569",
        "36 / 540",
        "57 / 863",
        "63 / 982",
        "57/1,017",
        "51/1,025",
        "51/1,029"
      ]
    }
  ]
}
