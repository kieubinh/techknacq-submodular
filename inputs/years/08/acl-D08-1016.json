{
  "info": {
    "authors": [
      "David A. Smith",
      "Jason M. Eisner"
    ],
    "book": "Conference on Empirical Methods in Natural Language Processing",
    "id": "acl-D08-1016",
    "title": "Dependency Parsing by Belief Propagation",
    "url": "https://aclweb.org/anthology/D08-1016",
    "year": 2008
  },
  "references": [
    "acl-C96-1058",
    "acl-D07-1014",
    "acl-D07-1015",
    "acl-D07-1096",
    "acl-D07-1104",
    "acl-E06-1011",
    "acl-H05-1036",
    "acl-J97-3002",
    "acl-J99-4004",
    "acl-N06-1054",
    "acl-P04-1056",
    "acl-P05-1010",
    "acl-P05-1012",
    "acl-P05-1022",
    "acl-P08-1067",
    "acl-P08-1108",
    "acl-P96-1024",
    "acl-P99-1059",
    "acl-W06-1616"
  ],
  "sections": [
    {
      "text": [
        "Dependency Parsing by Belief Propagation*",
        "David A. Smith and Jason Eisner",
        "of Computer Science, Johns Hopkins University Balitmore, MD 21218, USA",
        "We formulate dependency parsing as a graphical model with the novel ingredient of global constraints.",
        "We show how to apply loopy belief propagation (BP), a simple and effective tool for approximate learning and inference.",
        "As a parsing algorithm, BP is both asymptotically and empirically efficient.",
        "Even with second-order features or latent variables, which would make exact parsing considerably slower or NP-hard, BP needs only O(n) time with a small constant factor.",
        "Furthermore, such features significantly improve parse accuracy over exact first-order methods.",
        "Incorporating additional features would increase the runtime additively rather than multiplicatively."
      ]
    },
    {
      "heading": "1. Introduction",
      "text": [
        "Computational linguists worry constantly about runtime.",
        "Sometimes we oversimplify our models, trading linguistic nuance for fast dynamic programming.",
        "Alternatively, we write down a better but intractable model and then use approximations.",
        "The CL community has often approximated using heavy pruning or reranking, but is beginning to adopt other methods from the machine learning community, such as Gibbs sampling, rejection sampling, and certain variational approximations.",
        "We propose borrowing a different approximation technique from machine learning, namely, loopy belief propagation (BP).",
        "In this paper, we show that BP can be used to train and decode complex parsing models.",
        "Our approach calls a simpler parser as a subroutine, so it still exploits the useful, well-studied combinatorial structure of the parsing problem."
      ]
    },
    {
      "heading": "2. Overview and Related Work",
      "text": [
        "We wish to make a dependency parse's score depend on higher-order features, which consider ar-",
        "*This work was supported by the Human Language Technology Center of Excellence.",
        "bitrary interactions among two or more edges in the parse (and perhaps also other latent variables such as part-of-speech tags or edge labels).",
        "Such features can help accuracy – as we show.",
        "Alas, they raise the polynomial runtime of projective parsing, and render non-projective parsing NP-hard.",
        "Hence we seek approximations.",
        "We will show how BP's \"message-passing\" discipline offers a principled way for higher-order features to incrementally adjust the numerical edge weights that are fed to a fast first-order parser.",
        "Thus the first-order parser is influenced by higher-order interactions among edges – but not asymptotically slowed down by considering the interactions itself.",
        "BP's behavior in our setup can be understood intuitively as follows.",
        "Inasmuch as the first-order parser finds that edge e is probable, the higher-order features will kick in and discourage other edges e' to the extent that they prefer not to coexist with e. Thus, the next call to the first-order parser assigns lower probabilities to parses that contain these e'.",
        "(The method is approximate because a first-order parser must equally penalize all parses containing e', even those that do not in fact contain e.)",
        "This behavior is somewhat similar to parser stacking (Nivre and McDonald, 2008; Martins et al., 2008), in which a first-order parser derives some of its input features from the full 1-best output of another parser.",
        "In our method, a first-order parser derives such input features from its own previous full output (but probabilistic output rather than just 1-best).",
        "This circular process is iterated to convergence.",
        "Our method also permits the parse to interact cheaply with other variables.",
        "Thus first-order parsing, part-of-speech tagging, and other tasks on a common input could mutually influence one another.",
        "Our method and its numerical details emerge naturally as an instance of the well-studied loopy BP algorithm, suggesting several potential future im-",
        "Proceedings of the 2008 Conference on Empirical Methods in Natural Language Processing, pages 145-156, Honolulu, October 2008.",
        "©2008 Association for Computational Linguistics",
        "provements to accuracy (Yedidia et al., 2004; Braunstein et al., 2005) and efficiency (Sutton and McCal-lum, 2007).",
        "Loopy BP has occasionally been used before in NLP, with good results, to handle non-local features (Sutton and McCallum, 2004) or joint decoding (Sutton et al., 2004).",
        "However, our application to parsing requires an innovation to BP that we explain in §5 – a global constraint to enforce that the parse is a tree.",
        "The tractability of some such global constraints points the way toward applying BP to other computationally intensive NLP problems, such as syntax-based alignment of parallel text."
      ]
    },
    {
      "heading": "3. Graphical Models of Dependency Trees",
      "text": [
        "To apply BP, we must formulate dependency parsing as a search for an optimal assignment to the variables of a graphical model.",
        "We encode a parse using the following variables:",
        "Sentence.",
        "The n-word input sentence W is fully observed (not a lattice).",
        "Let W = W°W\\ • • • Wn, where Wo is always the special symbol root.",
        "Tags.",
        "If desired, the variables T = TXT2 ••• Tn may specify tags on the n words, drawn from some tagset T (e.g., parts of speech).",
        "These variables are needed iff the tags are to be inferred jointly with the parse.",
        "Links.",
        "The O(n) boolean variables {Lij : 0 < i < n, 1 < j < n,i = j} correspond to the possible links in the dependency parse.",
        "Lij = true is interpreted as meaning that there exists a dependency link from parent i – child j.Link roles, etc.",
        "It would be straightforward to add other variables, such as a binary variable Lirj that is true iff there is a link i – j labeled with role r (e.g.,",
        "AGENT, PATIENT, TEMPORAL ADJUNCT).",
        "We wish to define a probability distribution over all configurations, i.e., all joint assignments A to these variables.",
        "Our distribution is simply an undirected graphical model, or Markov random field (MRF): specified by the collection of factors Fm : A – R-0.",
        "Each factor is a function that consults only a subset of A.",
        "We say that the factor has degree d if it depends on the values of d variables in A, and that it is unary, binary, ternary, or global if d is respectively 1, 2, 3, or unbounded (grows with n).",
        "A factor function Fm(A) may also depend freely on the observed variables – the input sentence W and a known (learned) parameter vector 6.",
        "For notational simplicity, we suppress these extra arguments when writing and drawing factor functions, and when computing their degree.",
        "In this treatment, these observed variables are not specified by A, but instead are absorbed into the very definition of Fm.",
        "In defining a factor Fm, we often define the circumstances under which it fires.",
        "These are the only circumstances that allow Fm(A) = 1.",
        "When Fmdoes not fire, Fm(A) = 1 and does not affect the product in equation (1).",
        "A hard factor Fm fires only on parses A that violate some specified condition.",
        "It has value 0 on those parses, acting as a hard constraint to rule them out.",
        "TREE.",
        "A hard global constraint on all the Lij variables at once.",
        "It requires that exactly n of these variables be true, and that the corresponding links form a directed tree rooted at position 0.",
        "PTREE.",
        "This stronger version of TREE requires further that the tree be projective.",
        "That is, it prohibits Lij and Lke from both being true if i – j crosses k – l. (These links are said to cross if one of k,l is strictly between i and j while the other is strictly outside that range.)",
        "Exactly1.",
        "A family of O(n) hard global constraints, indexed by 1 < j < n. Exactly 1j requires that j have exactly one parent, i.e., exactly one of the Lij variables must be true.",
        "Note that Ex-ACTLY1 is implied by TREE or PTREE.",
        "ATMOST1.",
        "A weaker version.",
        "ATMOST1j requires j to have one or zero parents.",
        "NAND.",
        "A family of hard binary constraints.",
        "NANDj^ requires that Lij and Lk£ may not both be true.",
        "We will be interested in certain subfamilies.",
        "NOT2.",
        "Shorthand for the family of O(n) binary constraints {NANDij)kj}.",
        "These are collectively equivalent to AtMost1, but expressed via a larger number of simpler constraints, which can make the BP approximation less effective (footnote 30).",
        "NO2CYCLE.",
        "Shorthand for the family of O(n) binary constraints {NANDij ji}.",
        "A soft factor Fm acts as a soft constraint that prefers some parses to others.",
        "In our experiments, it is always a log-linear function returning positive values:",
        "hGfeatures(Fm)",
        "where 6 is a learned, finite collection of weights and f is a corresponding collection of feature functions, some of which are used by Fm.",
        "(Note that fh is permitted to consult the observed input W. It also sees which factor Fm it is scoring, to support reuse of a single feature function fh and its weight 6h by unboundedly many factors in a model.)",
        "LINK.",
        "A family of unary soft factors that judge the links in a parse A individually.",
        "LINKij fires iff Lij = true, and then its value depends on (i, j), W, and 6.",
        "Our experiments use the same features as",
        "McDonald et al.",
        "(2005).",
        "A first-order (or \"edge-factored\") parsing model (McDonald et al., 2005) contains only LINK factors, along with a global TREE or PTREE factor.",
        "Though there are O(n) link factors (one per Lij), only n of them fire on any particular parse, since the global factor ensures that exactly n are true.",
        "We'll consider various higher-order soft factors:",
        "PAIR.",
        "The binary factor PAIRj^ fires with some value iff Lij and Lke are both true.",
        "Thus, it penalizes or rewards a pair of links for being simultaneously present.",
        "This is a soft version of NAND.",
        "GRAND.",
        "Shorthand for the family of O(n) binary factors {PAIRjjfc}, which evaluate grandparent-parent-child configurations, i – j – k. For example, whether preposition j attaches to verb i might depend on its object k. In non-projective parsing, we might prefer (but not require) that a parent and child be on the same side of the grandparent.",
        "Sib.",
        "Shorthand for the family of O(n) binary factors {PAIRij)ik}, which judge whether two children of the same parent are compatible.",
        "E.g., a given verb may not like to have two noun children both to its left.",
        "The children do not need to be adjacent.",
        "ChildSeq.",
        "A family of O(n) global factors.",
        "CHILDSEQi scores i's sequence of children; hence it consults all variables of the form Lij.",
        "The scoring follows the parametrization of a weighted split head-automaton grammar (Eisner and Satta, 1999).",
        "If 5 has children 2, 7, 9 under A, then CHILDSEQiis a product of subfactors of the form pair5#;57, PAIR57 59, PAIR59)5# (right child sequence) and pair5#;52, pair52 5# (left child sequence).",
        "NOCROSS.",
        "A family of O(n) global constraints.",
        "If the parent-to-j link crosses the parent-to-l link, then NoCROSSj^ fires with a value that depends only on j and l. (If j and l do not each have exactly one parent, NoCROSS^ fires with value 0; i.e., it incorporates EXACTLY 1j and EXACTLY^.)",
        "TAGi is a unary factor that evaluates whether Ti's value is consistent with W (especially Wi).",
        "TAGLlNKj is a ternary version of the LlNKij factor whose value depends on Lij, Ti and Tj (i.e., its feature functions consult the tag variables to decide whether a link is likely).",
        "One could similarly enrich the other features above to depend on tags and/or link roles; TAGLINK is just an illustrative example.",
        "T RI GR AM is a global factor that evaluates the tag sequence T according to a trigram model.",
        "It is a product of subfactors, each of which scores a tri-gram of adjacent tags Ti_2,Ti_i,Ti, possibly also considering the word sequence W (as in CRFs)."
      ]
    },
    {
      "heading": "4. A Sketch of Belief Propagation",
      "text": [
        "MacKay (2003, chapters 16 and 26) provides an excellent introduction to belief propagation, a gen-",
        "Figure 1: A fragment of a factor graph, illustrating a few of the unary, binary, and global factors that affect variables L25 and L56.",
        "The Grand factor induces a loop.",
        "eralization of the forward-backward algorithm that is deeply studied in the graphical models literature (Yedidia et al., 2004, for example).",
        "We briefly sketch the method in terms of our parsing task.",
        "The basic BP idea is simple.",
        "Variable L34 maintains a distribution over values true and false – a \"belief\" – that is periodically recalculated based on the current distributions at other variables.",
        "Readers familiar with Gibbs sampling can regard this as a kind of deterministic approximation.",
        "In Gibbs sampling, L34's value is periodically resam-pled based on the current values of other variables.",
        "Loopy BP works not with random samples but their expectations.",
        "Hence it is approximate but tends to converge much faster than Gibbs sampling will mix.",
        "It is convenient to visualize an undirected factor graph (Fig.",
        "1), in which each factor is connected to the variables it depends on.",
        "Many factors may connect to – and hence influence – a given variable such as L34.",
        "If X is a variable or a factor, N(X) denotes its set of neighbors.",
        "Given an input sentence W and a parameter vector 9, the collection of factors Fm defines a probability distribution (1).",
        "The parser should determine the values of the individual variables.",
        "In other words, we would like to marginalize equation (1) to obtain the distribution p(L34) over L34 = true vs. false, the distribution p(T4) over tags, etc.",
        "If the factor graph is acyclic, then BP computes these marginal distributions exactly.",
        "Given an HMM, for example, BP reduces to the forward-backward algorithm.",
        "BP's estimates of these distributions are called beliefs about the variables.",
        "BP also computes beliefs about the factors, which are useful in learning 9 (see §7).",
        "E.g., if the model includes the factor TAGLINKj, which is connected to variables Lij, Ti, Tj, then BP will estimate the marginal joint distribution p(Lij,Ti, Tj) over (boolean, tag, tag) triples.",
        "When the factor graph has loops, BP s beliefs are usually not the true marginals of equation (1) (which are in general intractable to compute).",
        "Indeed, BP s beliefs may not be the true marginals of any distribution p(A) over assignments, i.e., they may be globally inconsistent.",
        "All BP does is to incrementally adjust the beliefs till they are at least locally consistent: e.g., the beliefs at factors TAGLINKij and TAGLINKik must both imply the same belief about variable Ti, their common neighbor.",
        "This iterated negotiation among the factors is handled by message passing along the edges of the factor graph.",
        "A message to or from a variable is a (possibly unnormalized) probability distribution over the values of that variable.",
        "The variable V sends a message to factor F, saying \"My other neighboring factors G jointly suggest that I have posterior distribution qv_F (assuming that they are sending me independent evidence).\"",
        "Meanwhile, factor F sends messages to V, saying, \"Based on my factor function and the messages received from my other neighboring variables U about their values (and assuming that those messages are independent), I suggest you have posterior distribution rF_v over your values.\"",
        "To be more precise, BP at each iteration k (until convergence) updates two kinds of messages:",
        "from variables to factors, and from factors to variables.",
        "Each message is a probability distribution over values v of V, normalized by a scaling constant k. Alternatively, messages may be left as unnormalized distributions, choosing k = 1 only as needed to prevent over-or underflow.",
        "Messages are initialized to uniform distributions.",
        "Q",
        "I",
        "l[5,6]",
        "link",
        "grand",
        "link",
        "Whenever we wish, we may compute the beliefs at V and F:",
        "These beliefs do not truly characterize the expected behavior of Gibbs sampling (§4.1), since the products in (5)-(6) make conditional independence assumptions that are valid only if the factor graph is acyclic.",
        "Furthermore, on cyclic (\"loopy\") graphs, BP might only converge to a local optimum (Weiss and Freedman, 2001), or it might not converge at all.",
        "Still, BP often leads to good, fast approximations."
      ]
    },
    {
      "heading": "5. Achieving Low Asymptotic Runtime",
      "text": [
        "One iteration of standard BP simply updates all the messages as in equations (3)-(4): one message per edge of the factor graph.",
        "Therefore, adding new factors to the model increases the runtime per iteration additively, by increasing the number of messages to update.",
        "We believe this is a compelling advantage over dynamic programming – in which new factors usually increase the runtime and space multiplicatively by exploding the number of distinct items.",
        "But how long does updating each message take?",
        "The runtime of summing over all assignments in",
        "6 Satta 1999).",
        "Adding Trigram, which is string-local rather than tree-local, will increase this only to O(n + ng + ng), compared to O(ng) for dynamic programming.",
        "Even more dramatic, adding the SIB family of O(n) PAiRij,ik factors will add only O(n) to the runtime of BP (Table 1).",
        "By contrast, the runtime of dynamic programming becomes exponential, because each item must record its headword s full set of current children.",
        "equation (4) may appear prohibitive.",
        "Crucially, however, F (A) only depends on the values in A of F 's its neighboring variables N(F).",
        "So this sum is proportional to a sum over restricted assignments to just those variables.",
        "For example, computing a message from TAGLlNKj – Ti only requires iterating over all (boolean, tag, tag) triples.",
        "The runtime to update that message is therefore O(2 • |T| • |T|).",
        "The above may be tolerable for a ternary factor.",
        "But how about global factors?",
        "Exactly 1 j has n neighboring boolean variables: surely we cannot iterate over all 2n assignments to these!",
        "Tree is even worse, with 2O(n ) assignments to consider.",
        "We will give specialized algorithms for handling these summations more efficiently.",
        "A historical note is in order.",
        "Traditional constraint satisfaction corresponds to the special case of (1) where all factors Fm are hard constraints (with values in {0,1}).",
        "In that case, loopy BP reduces to an algorithm for generalized arc consistency (Mackworth, 1977; Bessiere and Regin, 1997; Dechter, 2003), and updating a factor s outgoing messages is known as constraint propagation.",
        "Regin (1994) famously introduced an efficient propagator for a global constraint, AllDifferent, by adapting combinatorial bipartite matching algorithms.",
        "In the same spirit, we will demonstrate efficient propagators for our global constraints, e.g. by adapting combinatorial algorithms for weighted parsing.",
        "We are unaware of any previous work on global factors in sum-product BP, although for max-product BP, Duchi et al.",
        "(2007) independently showed that a global 1-to-1 alignment constraint – a kind of weighted AllDifferent – permits an efficient propagator based on weighted bipartite matching.",
        "Table 1 shows our asymptotic runtimes for all factors in §§3.3-3.4.",
        "Remember that if several of these",
        "Note that the marginal belief and both messages are unnormalized distributions over values v of V. F and k are clear from context below, so we simplify the notation so that (7)-(8) become",
        "T RIGRAM must sum over assignments to the tag sequence T. The belief (6) in a given assignment is a product of trigram scores (which play the role of transition weights) and incoming messages qTj(playing the role of emission weights).",
        "The marginal belief (7) needed above, b(T = t), is found by summing over assignments where Ti = t. All marginal beliefs are computed together in O(ng) total time by the forward-backward algorithm.",
        "EXACTLY1j is a sparse hard constraint.",
        "Even though there are 2n assignments to its n neighboring variables {Lij }, the factor function returns 1 on only n assignments and 0 on the rest.",
        "In fact, for a given i, b(Lij = true) in (7) is defined by (6) to have exactly one non-zero summand, in which A puts Lij = true and all other Li/j = false.",
        "We compute the marginal beliefs for all i together in O(n) total time:",
        "2.",
        "For each i, compute the marginal belief b(Lij = true) as n • qLij, where qLij G R denotes the odds ratio qLij (true)/qLij (false).",
        "3.",
        "The partition function b() denotes b(A); compute it in this case as i b(Lij = true).",
        "4.",
        "For each i, compute b(Lij = false) by subtraction, as b() - b(Lij = true).",
        "T REE and PTREE must sum over assignments to the O(n) neighboring variables {Lij}.",
        "There are now exponentially many non-zero summands, those in which A corresponds to a valid tree.",
        "Nonetheless,",
        "Table 1: Asymptotic runtimes of the propagators for various factors (where n is the sentence length and g is the size of the tag set T).",
        "An iteration of standard BP propagates through each factor once.",
        "Running a factor s propagator will update all of its outgoing messages, based on its current incoming messages.",
        "factors are included, the total runtime is additive.Propagating the local factors is straightforward (§5.1).",
        "We now explain how to handle the global factors.",
        "Our main trick is to work backwards from marginal beliefs.",
        "Let F be a factor and V be one of its neighboring variables.",
        "At any time, F has a marginal belief about V (see footnote 9), a sum over (6) s products ofincoming messages.",
        "By the definition of rF_v in (4), and distributivity, we can also express the marginal belief (7) as a point-wise product of outgoing and incoming messages up to a constant.",
        "If we can quickly sum up the marginal belief (7), then (8) says we can divide out each particular incoming message qv F to obtain its corresponding outgoing message rF+y.",
        "factor",
        "degree",
        "runtime",
        "count",
        "runtime",
        "family",
        "(each)",
        "(each)",
        "(total)",
        "Tree",
        "O(n)",
        "O(n)",
        "1",
        "O(n)",
        "ptree",
        "O(n)",
        "O(n)",
        "1",
        "O(n)",
        "Exactly1",
        "O(n)",
        "O(n)",
        "n",
        "O(n)",
        "AtMost1",
        "O(n)",
        "O(n)",
        "n",
        "O(n)",
        "Not2",
        "2",
        "O(1)",
        "O(n)",
        "O(n)",
        "No2Cycle",
        "2",
        "O(1)",
        "O(n)",
        "O(n)",
        "Link",
        "1",
        "O(1)",
        "O(n)",
        "O(n)",
        "Grand",
        "2",
        "O(1)",
        "O(n)",
        "O(n)",
        "Sib",
        "2",
        "O(1)",
        "O(n)",
        "O(n)",
        "ChildSeq",
        "O(n)",
        "O(n)",
        "O(n)",
        "O(n)",
        "NoCross",
        "O(n)",
        "O(n)",
        "O(n)",
        "O(n)",
        "Tag",
        "1",
        "O(g)",
        "O(n)",
        "O(ng)",
        "taglink",
        "3",
        "O(g)",
        "O(n)",
        "O(ng)",
        "trigram",
        "O(n)",
        "O(ng)",
        "1",
        "O(ng)",
        "we can follow the same approach as for Exactly 1.",
        "Steps 1 and 4 are modified to iterate over all i, j such that Lij is a variable.",
        "In step 3, the partition function J2a b( A) is now n times the total weight of all trees, where the weight of a given tree is the product of the qLij values of its n edges.",
        "In step 2, the marginal belief b(Lij = true) is now n times the total weight of all trees having edge i – j.",
        "We perform these combinatorial sums by calling a first-order parsing algorithm, with edge weights qj.",
        "Thus, as outlined in §2, a first-order parser is called each time we propagate through the global Tree or PTREE constraint, using edge weights that include the first-order LINK factors but also multiply in any current messages from higher-order factors.",
        "The parsing algorithm simultaneously computes the partition function b(), and all O(n) marginal beliefs b(Lij = true).",
        "For PTREE (projective), it is the inside-outside version of a dynamic programming algorithm (Eisner, 1996).",
        "For TREE (non-projective), Koo et al.",
        "(2007) and Smith and Smith (2007) show how to employ the matrix-tree theorem.",
        "In both cases, the total time is O(n).",
        "NOCROSSj^ must sum over assignments to O(n) neighboring variables {Lij } and {LThe nonzero summands are assignments where j and £ each have exactly one parent.",
        "At step 1, n =",
        "rii qLij(false) ^ nfcqLfc£ (false).",
        "At step the",
        "marginal belief b(Lij = true) sums over the n nonzero assignments containing i – j.",
        "It is n • qLij • Ek qifc£ • PAlRij, fc^, where PAIRj^ is x j if i – j crosses k – £ and is 1 otherwise.",
        "is some factor value defined by equation (2) to penalize or reward the crossing.",
        "Steps 3-4 are just as in Exactly 1j.",
        "The question is how to compute b(Lij = true) for each i in only O(1) time, so that we can propagate each of the O(n) NoCross^ in O(n) time.",
        "This is why we allowed a j to depend only on j, £.",
        "We can rewrite the sum b(Lij = true) as",
        "crossing fc noncrossing fc",
        "To find this in O(1) time, we precompute for each £ an array of partial sums Q^[s, t] = Yls<k<t qLfc£.",
        "Since Q^[s, t] = Q^[s, t – 1] + qLt£, we can compute each entry in O(1) time.",
        "The total precomputation time over all £, s, t is then O(n), with the array shared across all factors NoCROSSj/^.",
        "The crossing sum is respectively Q^[0, i – 1] + [j + 1, n], Q^[i + 1, j – 1], or 0 according to whether £ G (i, j), £ G [i, j], or £ = i.",
        "The non-crossing sum is [0, n] minus the crossing sum.",
        "CHILDSEQi , like Trigram, is propagated by a forward-backward algorithm.",
        "In this case, the algorithm is easiest to describe by replacing CHILD5 EQi in the factor graph by a collection of local subfactors, which pass messages in the ordinary way.",
        "Roughly speaking, at each j [1, n], we introduce a new variable Cij – a hidden state whose value is the position of i s previous child, if any (so 0 < Cij < j).",
        "So the ternary sub-factor on ,Lij ,Ci;j+1) has value 1 if Lij- = false and = Ci;j ; a sibling-bigram score (PAlRiCij,iCi,j+i) if Lij = true and Cij+i = j; and 0 otherwise.",
        "The sparsity of this factor, which is 0 almost everywhere, is what gives CHILDSEQi atotal runtime of O(n) rather than O(n).",
        "It is equivalent to forward-backward on an HMM with n observations (the Lij) and n states per observation (the Cj), with a deterministic (thus sparse) transition function."
      ]
    },
    {
      "heading": "6. Decoding Trees",
      "text": [
        "BP computes local beliefs, e.g. the conditional probability that a link Lij is present.",
        "But if we wish to output a single well-formed dependency tree, we need to find a single assignment to all the {Lij} that satisfies the TREE (or PTREE) constraint.",
        "Our final belief about the Tree factor is a distribution over such assignments, in which a tree's probability is proportional to the probability of its edge weights qLij (incoming messages).",
        "We could simply return the mode of this distribution (found by using a 1-best first-order parser) or the k-best trees, or take samples.",
        "In our experiments, we actually take the edge weights to be not the messages qLij from the links, but the full beliefs bLij at the links (where bLij =flog bLij (true)/bLij (false)).",
        "These are passed into a ast algorithm or maximum spanning tree (Tarjan, 1977) or maximum projective spanning tree (Eisner, 1996).",
        "This procedure is equivalent to minimum Bayes risk (MBR) parsing (Goodman, 1996) with a dependency accuracy loss unction.",
        "Notice that the above decoding approaches do not enforce any hard constraints other than TREE in the final output.",
        "In addition, they only recover values of the Lij variables.",
        "They marginalize over other variables such as tags and link roles.",
        "This solves the problem of \"nuisance\" variables (which merely fragment probability mass among refinements of a parse).",
        "On the other hand, it may be undesirable for variables whose values we desire to recover."
      ]
    },
    {
      "heading": "7. Training",
      "text": [
        "Our training method also uses beliefs computed by BP, but at the factors.",
        "We choose the weight vector 9 by maximizing the log-probability of training data",
        "We can indeed build max-product propagators for our global constraints.",
        "PTree still propagates in O(n) time: simply change the first-order parser's semiring (Goodman, 1999) to use max instead of sum.",
        "Tree requires O(n) time: it seems that the O(n) max marginals must be computed separately, each requiring a separate call to an O(n) maximum spanning tree algorithm (Tarjan, 1977).",
        "If max-product BP converges, we may simply output each variable's favorite value (according to its belief), if unique.",
        "However, max-product BP tends to be unstable on loopy graphs, and we may not wish to wait for full convergence in any case.",
        "A more robust technique for extracting an assignment is to mimic Viterbi decoding, and \"follow backpointers\" of the max-product computation along some spanning subtree of the factor graph.",
        "A slower but potentially more stable alternative is deterministic annealing.",
        "Replace each factor Fm(A) with Fm(A)1/T, where T > 0 is a temperature.",
        "As T – 0 (\"quenches\"), the distribution (1) retains the same mode (the MAP assignment), but becomes more sharply peaked at the mode, and sum-product BP approaches max-product BP.",
        "Deterministic annealing runs sum-product BP while gradually reducing T toward 0 as it iterates.",
        "By starting at a high T and reducing T slowly, it often manages in practice to find a good local optimum.",
        "We may then extract an assignment just as we do for max-product.",
        "under equation (1), regularizing only by early stopping.",
        "If all variables are observed in training, this objective function is convex (as for any log-linear model).",
        "The difficult step in computing the gradient of our objective is finding V log Z, where Z in equation (1) is the normalizing constant (partition function) that sums over all assignments A.",
        "(Recall that Z, like each Fm, depends implicitly on W and 9.)",
        "As usual for log-linear models,",
        "Since V Fm(A) only depends on the assignment A's values for variables that are connected to Fm in the factor graph, its expectation under p(A) depends only on the marginalization of p(A) to those variables jointly.",
        "Fortunately, BP provides an estimate of that marginal distribution, namely, its belief about the factor Fm, given W and 9 (§4.2).",
        "Note that the hard constraints do not depend on 9 at all; so their summands in equation (10) will be 0.",
        "We employ stochastic gradient descent (Bottou, 2003), since this does not require us to compute the objective function itself but only to (approximately) estimate its gradient as explained above.",
        "Alternatively, given any of the MAP decoding procedures from §6, we could use an error-driven learning method such as the perceptron or MIRA."
      ]
    },
    {
      "heading": "8. Experiments",
      "text": [
        "We asked: (1) For projective parsing, where higherorder factors have traditionally been incorporated into slow but exact dynamic programming (DP), what are the comparative speed and quality of the BP approximation?",
        "(2) How helpful are such higherorder factors – particularly for non-projective parsing, where BP is needed to make them tractable?",
        "(3) Do our global constraints (e.g., TREE) contribute to the goodness of BP's approximation?"
      ]
    },
    {
      "heading": "2. iterations of BP",
      "text": [
        "Sentence length",
        "We trained and tested on three languages from the CoNLL Dependency Parsing Shared Task (Nivre et al., 2007).",
        "The English data for that task were converted from the Penn Treebank to dependencies using a trace-recovery algorithm that induced some very slight non-projectivity – about 1% of links crossed other links.",
        "Danish is a slightly more non-projective language (3% crossing links).",
        "Dutch is the most non-projective language in the corpus (11%).",
        "In all cases, the test input W consists of part-of-speech-tagged words, so T variables were not used.",
        "Although BP makes it cheap to incorporate many non-local features and latent variables at once, we kept our models relatively simple in this paper.",
        "Our first-order LlNKij factors replicate McDonald et al.",
        "(2005).",
        "Following equation (2), they are defined using binary features that look at words i and j, the distance j – i, and the tags (provided in W) of words at, around, and between i and j.",
        "Our second-order features are similar.",
        "In the GRAND factors, features fire for particular triples of tags and of coarse tags.",
        "A feature also fires if the grandparent falls between the child and parent, inducing crossing dependency links.",
        "The CHILD-Seq factors included features for tags, and likewise coarse tags, on adjacent sibling pairs and",
        "MBR by DP Viterbi DP"
      ]
    },
    {
      "heading": "3. iterations of BP 5 iterations of BP 10 iterations of BP",
      "text": [
        "9.",
        "Figure 3: Runtime of BP parser on various sentence lengths compared to O(n) dynamic programming.",
        "DP is so slow for length > 45 that we do not even show it.",
        "parent-sibling-sibling triples.",
        "Each of these features also have versions that were conjoined with link direction – pairs of directions in the grandparent case – or with signed link length of the child or farther sibling.",
        "Lengths were binned per McDonald et al.",
        "(2005).",
        "The NoCross^ factors consider the tag and coarse tag attributes of the two child words j and £, separately or jointly.",
        "We trained all models using stochastic gradient descent (§7).",
        "SGD initialized 0 = 0 and ran for 10 consecutive passes over the data; we picked the stopping point that performed best on held-out data.",
        "When comparing runtimes for projective parsers, we took care to produce comparable implementations.",
        "All beliefs and dynamic programming items were stored and indexed using the high-level Dyna language, while all inference and propagation was written in C++.",
        "The BP parser averaged 1.8 seconds per sentence for non-projective parsing and 1.5 seconds per sentence for projective parsing (1.2 and 0.9 seconds/sentence for < 40 words), using our standard setup, which included five iterations of BP and the final MBR tree decoding pass.",
        "In our tables, we boldface the best result in each column along with any results that are not significantly worse (paired permutation test, p < .05).",
        "A",
        "o",
        "CO",
        "/",
        "A",
        "MBR by DP",
        "//",
        "O",
        "Viterbi DP",
        "/ /",
        "o",
        "+",
        "2 iterations of BP",
        "//",
        "X",
        "3 iterations of BP ,'",
        "y Â",
        "0",
        "5 iterations of BP //'",
        "V",
        "10 iterations of BP",
        "/",
        "o",
        "CN",
        "(y",
        "O -",
        "0-♦-*-",
        "Parsing time in seconds",
        "Figure 4: Runtime vs. search error after different numbers of BP iterations.",
        "This shows the simpler model of Fig. 2, where DP is still relatively fast.",
        "We built a first-order projective parser – one that uses only factors PTree and Link – and then compared the cost of incorporating second-order factors, Grand and ChildSeq, by BP versus DP.",
        "Under DP, the first-order runtime of O(n) is increased to O(n) with Grand, and to O(n) when we add ChildSeq as well.",
        "BP keeps runtime down to O(n) – although with a higher constant factor, since it takes several rounds to converge, and since it computes more than just the best parse.",
        "Figures 2-3 compare the empirical runtimes for various input sentence lengths.",
        "With only the Grand factor, exact DP can still find the Viterbi parse (though not the MBR parse) faster than ten iterations of the asymptotically better BP (Fig.",
        "2), at least for sentences with n < 75.",
        "However, once we add the ChildSeq factor, BP is always faster – dramatically so for longer sentences (Fig.",
        "3).",
        "More complex models would widen BP's advantage.",
        "Fig.",
        "4 shows the tradeoff between runtime and search error of BP in the former case (Grand only).",
        "To determine BP's search error at finding the MBR parse, we measured its dependency accuracy not",
        "Table 2: (a) Percent unlabeled dependency accuracy for various non-projective BP parsers (5 iterations only), showing the cumulative contribution ofdifferentfeatures.",
        "(b) AccuracyforanprojectiveDP parserwithallfeatures.",
        "Forrelatively non-projective languages (Danish andespe-cially Dutch), the exact projective parses can be improved by non-projective hill-climbing – but in those cases, just running our non-projective BP is better and faster.",
        "against the gold standard, but against the optimal MBR parse under the model, which DP is able to find.",
        "After 10 iterations, the overall macro-averaged search error compared to O(n) DP MBR is 0.4%; compared to O(n) (not shown), 2.4%.",
        "More BP iterations may help accuracy.",
        "In future work, we plan to compare BP's speed-accuracy curve on more complex projective models with the speed-accuracy curve of pruned or reranked DP.",
        "The BP approximation can be used to improve the accuracy of non-projective parsing by adding higher-order features.",
        "These would be NP-hard to incorporate exactly; DP cannot be used.",
        "We used BP with a non-projective Tree factor to train conditional log-linear parsing models of two highly non-projective languages, Danish and Dutch, as well as slightly non-projective English (§8.1).",
        "In all three languages, the first-order non-projective parser greatly overpredicts the number of crossing links.",
        "We thus added NoCross factors, as well as Grand and ChildSeq as before.",
        "All of these significantly improve the first-order baseline, though not necessarily cumulatively (Table 2).",
        "Finally, Table 2 compares loopy BP to a previously proposed \"hill-climbing\" method for approximate inference in non-projective parsing McDonald and Pereira (2006).",
        "Hill-climbing decodes our richest non-projective model by finding the best projective parse under that model – using slow, higherorder DP – and then greedily modifies words' parents until the parse score (1) stops improving.",
        "A",
        "2 iterations of BP",
        "A",
        "\\",
        "+",
        "3 iterations of BP",
        "A",
        "X",
        "5 iterations of BP",
        "1 \\",
        "O",
        "10 iterations of BP",
        "A",
        "1 \\",
        "o",
        "MBR DP",
        "i",
        "» \\",
        "Input length",
        "i",
        "1 \\",
        "40 words",
        "l \\ 1 \\",
        "50 words",
        "i",
        "1 \\",
        "-",
        "60 words",
        "i",
        "-",
        " – 70 words",
        "i",
        "_L",
        "+ \\",
        "l",
        " – o",
        "0",
        "1",
        "20",
        "1",
        "40",
        "1",
        "60",
        "Danish",
        "Dutch",
        "English",
        "tree+link",
        "85.5",
        "87.3",
        "88.6",
        "+NoCross",
        "86.1",
        "88.3",
        "89.1",
        "+Grand",
        "86.1",
        "88.6",
        "89.4",
        "+ChildSeq",
        "86.5",
        "88.5",
        "90.1",
        "Proj.",
        "DP",
        "86.0",
        "84.5",
        "90.2",
        "+hill-climbing",
        "86.1",
        "87.6",
        "90.2",
        "Table 3: After training a non-projective first-order model with Tree, decoding it with weaker constraints is asymptotically faster (except for Not2) but usually harmful.",
        "(Parenthetical numbers show that the harm is compounded if the weaker constraints are used in training as well; even though this matches training to test conditions, it may suffer more from BP's approximate gradients.)",
        "Decoding the Tree model with the even stronger PTree constraint can actually be helpful for a more projective language.",
        "All results use 5 iterations of BP.",
        "BP for non-projective languages is much faster and more accurate than the hill-climbing method.",
        "Also, hill-climbing only produces an (approximate) 1-best parse, but BP also obtains (approximate) marginals of the distribution over all parses.",
        "Given the BP architecture, do we even need the hard Tree constraint?",
        "Or would it suffice for more local hard constraints to negotiate locally via BP?",
        "We investigated this for non-projective first-order parsing.",
        "Table 3 shows that global constraints are indeed important, and that it is essential to use Tree during training.",
        "At test time, the weaker but still global Exactly 1 may suffice (followed by MBR decoding to eliminate cycles), for total time O(n).",
        "Table 3 includes Not2, which takes O(n) time, merely to demonstrate how the BP approximation becomes more accurate for training and decoding when we join the simple Not2 constraints into more global AtMost1 constraints.",
        "This does not change the distribution (1), but makes BP enforce stronger local consistency requirements at the factors, relying less on independence assumptions.",
        "In general, one can get better BP approximations by replacing a group of factors Fm(A) with their product.",
        "The above experiments concern gold-standard accuracy under a given first-order, non-projective model.",
        "Flipping all three of these parameters for Danish, we confirmed the pattern by instead measuring search error under a higher-order, projective model (PTree+Link+Grand), when PTree was weakened during decoding.",
        "Compared to the MBR parse under that model, the search errors from decoding with weaker hard constraints were 2.2% for Not2, 2.1% for Exactly 1, 1.7% for Exactly 1 + No2Cycle, and 0.0% for PTree."
      ]
    },
    {
      "heading": "9. Conclusions and Future Work",
      "text": [
        "Belief propagation improves non-projective dependency parsing with features that would make exact inference intractable.",
        "For projective parsing, it is significantly faster than exact dynamic programming, at the cost of small amounts of search error,",
        "We are interested in extending these ideas to phrase-structure and lattice parsing, and in trying other higher-order features, such as those used in parse reranking (Charniak and Johnson, 2005; Huang, 2008) and history-based parsing (Nivre and McDonald, 2008).",
        "We could also introduce new variables, e.g., nonterminal refinements (Matsuzaki et al., 2005), or secondary links Mij (not constrained by Tree/PTree) that augment the parse with representations of control, binding, etc.",
        "(Sleator and Tem-perley, 1993; Buch-Kromann, 2006).",
        "Other parsing-like problems that could be attacked with BP appear in syntax-based machine translation.",
        "Decoding is very expensive with a synchronous grammar composed with an n-gram language model (Chiang, 2007) – but our footnote 10 suggests that BP might incorporate a language model rapidly.",
        "String alignment with synchronous grammars is quite expensive even for simple synchronous formalisms like ITG (Wu, 1997) – but Duchi et al.",
        "(2007) show how to incorporate bipartite matching into max-product BP.",
        "Finally, we can take advantage of improvements to BP proposed in the context of other applications.",
        "For example, instead of updating all messages in parallel at every iteration, it is empirically faster to serialize updates using a priority queue (Elidan et",
        "Decoding",
        "Danish Dutch English",
        "Not2",
        "AtMost1",
        "Exactly1 + No2Cycle Tree",
        "81.8 (76.7) 83.3 (75.0) 87.5 (66.4)",
        "85.4 (82.2) 87.3 (86.3) 88.5 (84.6) 85.7 (85.0) 87.0 (86.7) 88.6 (86.0) 85.0 (85.2) 86.2 (86.7) 88.5 (86.2)",
        "85.5 (85.5) 87.3 (87.3) 88.6 (88.6)",
        "PTree",
        "85.8 83.9 88.8"
      ]
    }
  ]
}
