{
  "info": {
    "authors": [
      "André Torres Martins",
      "Filipe",
      "Dipanjan Das",
      "Noah A. Smith",
      "Eric P. Xing"
    ],
    "book": "Conference on Empirical Methods in Natural Language Processing",
    "id": "acl-D08-1017",
    "title": "Stacking Dependency Parsers",
    "url": "https://aclweb.org/anthology/D08-1017",
    "year": 2008
  },
  "references": [
    "acl-C96-1058",
    "acl-D07-1003",
    "acl-D07-1013",
    "acl-E06-1011",
    "acl-H05-1066",
    "acl-P04-1054",
    "acl-P05-1012",
    "acl-P05-1067",
    "acl-P06-2041",
    "acl-P08-1108",
    "acl-P99-1059",
    "acl-P99-1070",
    "acl-W04-2407",
    "acl-W05-1513",
    "acl-W06-1616",
    "acl-W06-2920",
    "acl-W06-2932",
    "acl-W06-2933",
    "acl-W07-2216",
    "acl-W07-2218"
  ],
  "sections": [
    {
      "text": [
        "André F. T. Martins*\" Dipanjan Das* Noah A.Smith* Eric P. Xing*",
        "*School of Computer Science, Carnegie Mellon University, Pittsburgh, PA 15213, USA 1nstituto de Telecomunicacoes, Instituto Superior Tecnico, Lisboa, Portugal",
        "We explore a stacked framework for learning to predict dependency structures for natural language sentences.",
        "A typical approach in graph-based dependency parsing has been to assume a factorized model, where local features are used but a global function is optimized (McDonald et al., 2005b).",
        "Recently Nivre and McDonald (2008) used the output of one dependency parser to provide features for another.",
        "We show that this is an example of stacked learning, in which a second predictor is trained to improve the performance of the first.",
        "Further, we argue that this technique is a novel way of approximating rich non-local features in the second parser, without sacrificing efficient, model-optimal prediction.",
        "Experiments on twelve languages show that stacking transition-based and graph-based parsers improves performance over existing state-of-the-art dependency parsers."
      ]
    },
    {
      "heading": "1. Introduction",
      "text": [
        "In this paper we address a representation-efficiency tradeoff in statistical natural language processing through the use of stacked learning (Wolpert, 1992).",
        "This tradeoff is exemplified in dependency parsing, illustrated in Fig. 1, on which we focus in this paper:",
        "• Exact algorithms for dependency parsing (Eisner and Satta, 1999; McDonald et al., 2005b) are tractable only when the model makes very strong, linguistically unsupportable independence",
        "assumptions, such as \"arc factorization\" for non-projective dependency parsing (McDonald and Satta, 2007).",
        "• Feature-rich parsers must resort to search or greediness, (Ratnaparkhi et al., 1994; Sagae and Lavie, 2005; Hall et al., 2006), so that parsing solutions are inexact and learned models may be subject to certain kinds of bias (Lafferty et al.,",
        "2001).",
        "A solution that leverages the complementary strengths of these two approaches – described in detail by McDonald and Nivre (2007) – was recently and successfully explored by Nivre and McDonald (2008).",
        "Our contribution begins by reinterpreting and generalizing their parser combination scheme as a stacking of parsers.",
        "We give a new theoretical motivation for stacking parsers, in terms of extending a parsing model's feature space.",
        "Specifically, we view stacked learning as a way of approximating non-local features in a linear model, rather than making empirically dubious independence (McDonald et al., 2005b) or structural assumptions (e.g., projectivity, Eisner, 1996), using search approximations (Sagae and Lavie, 2005; Hall et al., 2006; McDonald and Pereira, 2006), solving a (generally NP-hard) integer linear program (Riedel and Clarke, 2006), or adding latent variables (Titov and Henderson, 2007).",
        "Notably, we introduce the use of very rich non-local approximate features in one parser, through the output of another parser.",
        "Related approaches are the belief propagation algorithm of Smith and Eisner (2008), and the \"trading of structure for features\" explored by Liang et al.",
        "Proceedings of the 2008 Conference on Empirical Methods in Natural Language Processing, pages 157-166, Honolulu, October 2008.",
        "©2008 Association for Computational Linguistics",
        "Figure 1 : A projective dependency parse (top), and a non-projective dependency parse (bottom) for two English sentences; examples Crom McDonald and Satta (2007).",
        "(2008).",
        "This paper focuses on dependency parsing, which has become widely used in relation enaction (Culotta and Sorensen, 2004), machine translation (Ding and Pa(mer, 2005), question answering (Wang et al., 2007), end many other NLP applications.",
        "We show that stacking methods outperform the approximate \"second-order\" parser of McDonald end Pereira (20066) on twelve languagesand can be used within )hat approximation )o achieve even better results.",
        "These resulte are similar in spiri) to (Nivre and McDonald, 2008S, bui with) the following novel contributions:",
        "• astacking interpretation,",
        "• a richer feature set that inctudes non-local features (shownhare to improve pdrformance), and",
        "• a variety of etacking a-chitectum",
        "Using stacking with rich feeturei, we obtain refults competitive with Nivre and McDonald (2008) while preserving the Sasi quadratic parsing time of arc-factored spanning tree a^orithn^",
        "The paper is organized ae follows.",
        "We discujss related prior workon dependency parsing and stacking in §2.",
        "Our model is given in §3.",
        "A novel analysis of stacking in linear models is given in e4.",
        "Experiments are presented in §5."
      ]
    },
    {
      "heading": "2. Background and Related Work",
      "text": [
        "We briefly review work on the NLP task of dependency parsing and the machine learning framework known as stacked learning.",
        "Depcndency cyntax is a lightweight syntactic representation that models a sentence as c graph where the words are vertices Cnd syntactic relationdtips are directed edwes (arcs- connecting heads to their arguments and modifiers.",
        "Dependency parsing is often viewed computationally as a structured prediction problem: for each input sentence x, with n words : exponantially many candidaie dependency trees y G YV(x) are possible in principle.",
        "We denoie eech tree lay its set oS vertices and directed arcs, y = (K^eC,).",
        "A legat dependent txec has Ie + 1 vfrtices, each corresponding to one word plus a \"wall\" symbol, a, afsumed robe the hiddete root of the sentence.",
        "In a valid dependency tree, each vertex eecept the root has exactly one parent.",
        "In the projective case, arcs cannot cross when depicted on one side of the sentence; in the non-projecttve case, this constraint is noS imposed (see Fig. 1).",
        "Most recent work on dependency parsing can be categorized aC graphibased or transition-based.",
        "In araph-based parsing, dependency irees arescored by factoring the tree into ils arcs, and parsing is performed by searching nor the highest scoring tree (Eisner, 1996; McDonald at ai., 2005b), Transition-bated parsers model the sequence of decisions of a shtdt-reduce parses, given previous decisions and current state, °nd posing is performed by greedily choosing the highgrt scoring transition out of each successive parsing state or by marching for the best sequence of transition (Ratnaparkhi et; al., 1994; Yamada and Matsumoto, 2003; Nrvre et al., 2004; Sagae and Livie- 2005; Han et: al.t 2006).",
        "Beth approachec most: commonly use linear models to cssign scofee to arcsordecisions, so that a score is ndot-produat of a feature vector f and a (earned weight vector w.",
        "In sum, these two lines of research u8e different epproximations toachieve tractability.",
        "Trcnsition-based approachet solve a sequence of local problems in seqiaence, sacrificing global optimatity guarantees and possibly expressive poweC (Abney et al., 1999(.",
        "Graph-based mathods perform global inference using score factorizations that correspond to strong independence assumptions (discussed in §2.1.2).",
        "Recently, Nivre and McDonald (2008) proposed combining a graph-based and a transition-based parser and have shown a significant improvement for several languages by letting one of the parsers guide\" the other.",
        "Our stacked formalism (to be described in §3) generalizes this approach.",
        "In the successful graph-based method of McDonald et al.",
        "(2005b), an arc factorization independence assumption is used to ensure tractability.",
        "This assumption forbids any feature that depends on two or more arcs, permitting only arc-factored\" features (i.e. features that depend only on a single candidate arc a G Ay and on the input sequence x).",
        "This induces a decomposition of the feature vector f (x, y) as:",
        "Parsing amounts to solving argmaxy€y (x) wTf(x,y), where w is a weight vector.",
        "With a projectivity constraint and arc factorization, the parsing problem can be solved in cubic time by dynamic programming (Eisner, 1996), and with a weaker tree\" constraint (permitting nonprojective parses) and arc factorization, a quadratic-time algorithm exists (Chu and Liu, 1965; Edmonds, the projective case, the arc-factored assumption can be weakened in certain ways while maintaining polynomial parser runtime (Eisner and Satta, 1999), but not in the nonprojective case (McDonald and Satta, 2007), where finding the highest-scoring tree becomes NP-hard.",
        "McDonald and Pereira (2006) adopted an approximation based on O(n) projective parsing followed by rearrangement to permit crossing arcs, achieving higher performance.",
        "In § 3 we adopt a framework that maintains O(n) runtime (still exploiting the Chu-Liu-Edmonds algorithm) while approximating non arc-factored features.",
        "Stacked generalization was first proposed by Wolpert (1992) and Breiman (1996) for regression.",
        "The idea is to include two levels\" ofpredictors.",
        "The first level, \"level 0,\" includes one or more predictors g1,..., gK : Rd – R; each receives input x G Rd and outputs a prediction gk(x).",
        "The second level, \"level 1,\" consists of a single function h : Rd+K – R that takes as input (x, §i(x),... gK(x)) and outputs a final prediction y = h(x,g1(x),.. .gK(x)).",
        "The predictor, then, combines an ensemble (the gk) with a meta-predictor (h).",
        "Training is done as follows: the training data are split into L partitions, and L instances of the level 0 predictor are trained in a leave-one-out\" basis.",
        "Then, an augmented dataset is formed by letting each instance output predictions for the partition that was left out.",
        "Finally, each level 0 predictor is trained using the original dataset, and the level 1 predictor is trained on the augmented dataset, simulating the test-time setting when h is applied to a new instance x concatenated with (gk (x))k.",
        "This framework has also been applied to classification, for example with structured data.",
        "Some applications (including here) use only one classifier at level 0; recent work includes sequence labeling (Cohen and de Carvalho, 2005) and inference in conditional random fields (Kou and Cohen, 2007).",
        "Stacking is also intuitively related to transformation-based learning (Brill, 1993)."
      ]
    },
    {
      "heading": "3. Stacked Dependency Parsing",
      "text": [
        "We next describe how to use stacked learning for efficient, rich-featured dependency parsing.",
        "The architecture consists of two levels.",
        "At level 0 we include a single dependency parser.",
        "At runtime, this level 0 parser\" g processes an input sentence x and outputs the set of predicted edges that make up its estimation of the dependency tree, yo = g(x).",
        "At level 1, we apply a dependency parser – in this work, always a graph-based dependency parser – that uses basic factored features plus new ones from the edges predicted by the level 0 parser.",
        "The final parser predicts parse trees as h(x, g(x)), so that the total runtime is additive in calculating h( ) and g( ).",
        "The stacking framework is agnostic about the form of g and h and the methods used to learn them from data.",
        "In this work we use two well-known, publicly available dependency parsers, MSTParser (McDonald et al., 2005b), which implements exact first-order arc-factored nonprojective parsing (§2.1.2) and approximate second-order nonprojec-tive parsing, and MaltParser (Nivre et al., 2006), which is a state-of-the-art transition-based parser.We do not alter the training algorithms used in prior work for learning these two parsers from data.",
        "Using the existing parsers as starting points, we will combine them in a variety of ways.",
        "Regardless of our choices for the specific parsers and learning algorithms at level 0 and level 1, training is done as sketched in §2.2.",
        "Let D be a set of training examples {(x^y»)}»."
      ]
    },
    {
      "heading": "1.. Split training data D into L partitions",
      "text": [
        "2.",
        "Train L instances of the level 0 parser in the following way: the l-th instance, gl, is trained on D-1 = D \\ Dl.",
        "Then use gl to output predictions for the (unseen) partition Dl.",
        "At the end, an augmented dataset D = |JjL=1 Dl is built, so that D = {(xi,g(xi),yi)}i."
      ]
    },
    {
      "heading": "3.. Train the level 0 parser g on the original training",
      "text": [
        "data D.",
        "4.",
        "Train the level 1 parser h on the augmented training data D.",
        "The runtime of this algorithm is O(LT0 +T1), where T0 and T1 are the individual runtimes required for training level 0 and level 1 alone, respectively."
      ]
    },
    {
      "heading": "4. Two Views of Stacked Parsing",
      "text": [
        "We next describe two motivations for stacking parsers: as a way of augmenting the features of a graph-based dependency parser or as a way to approximate higher-order models.",
        "Suppose that the level 1 classifier is an arc-factored graph-based parser.",
        "The feature vectors will take the where f1(x,y) = EaeAy f1,a(x) are regular arc-factored features, and f2(x,y0,y) = J2aeAy f2,a(x,g(x)) are the stacked features.",
        "An example of a stacked feature is a binary feature /2,a(x, g(x)) that fires if and only if the arc a was predicted by g, i.e., if a G Ag(x); such a feature was used by Nivre and McDonald (2008).",
        "It is difficult in general to decide whether the inclusion of such a feature yields a better parser, since features strongly correlate with each other.",
        "However, a popular heuristic for feature selection consists of measuring the information gain provided by each individual feature.",
        "In this case, we may obtain a closed-form expression for the information gain that /^a(x, g(x)) provides about the existence or not of the arc a in the actual dependency tree y.",
        "Let A and A' be binary random variables associated with the events a G Ay and a' G Afl(-x), respectively.",
        "We have:",
        "http://w3.msi.vxu.se/-jha/maltparser We use ^ to denote vector concatenation.",
        "= H (A') - P(a)H (A'|A = a).",
        "where Herr denotes the entropy of the probability of error on each arc's prediction by the level 0 classifier.",
        "If Perr < 0.5 (i.e. if the level 0 classifier is better than random), then the information gain provided by this simple stacked feature increases with (a) the accuracy of the level 0 classifier, and (b) the entropy H (A') of the distribution associated with its arc predictions.",
        "Another way of interpreting the stacking framework is as a means to approximate a higher order model, such as one that is not arc-factored, by using stacked features that make use of the predicted structure around a candidate arc.",
        "Consider a second-order model where the features decompose by arc and by arc pair:",
        "Exact parsing under such model, with arbitrary second-order features, is intractable (McDonald and Satta, 2007).",
        "Let us now consider a stacked model in which the level 0 predictor outputs a parse y.",
        "At level 1, we use arc-factored features that may be written as this model differs from the previous one only by replacing Ay by Ay in the index set of the second summation.",
        "Since y is given, this makes the latter model arc-factored, and therefore, tractable.",
        "We can now view f (x, y) as an approximation of f (x, y) ; indeed, we can bound the score approximation error, where w and w stand respectively for the parameters learned for the stacked model and those that would be learned for the (intractable) exact second order model.",
        "We can bound As(x, y) by spliting it into two terms: As(x, y) = where we introduced the terms Astr and Asdec that reflect the portion of the score approximation error that are due to training error (i.e., different parame-terizations of the exact and approximate models) and decoding error (same parameterizations, but different feature vectors).",
        "Using Holder's inequality, the former term can be bounded as:",
        "where and ||.||oo denote the ^1-norm and sup-norm, respectively, and the last inequality holds when the features are binary (so that ||f (x, y) ||oo < 1 ).",
        "The proper way to bound the term | w - w| 1depends on the training algorithm.",
        "As for the decoding error term, it can bounded for a given weight vector w, sentence x, candidate tree y, and level 0 prediction y. Decomposing the weighted vector as w = w1 – w2, w2 being the sub-vector associated with the second-order features, we have respectively: Asdec(x,y) =",
        "aiGAy \\a2GAy a2GAy aiGAy a2GAgAAy",
        "|AyAAJ • max",
        "aitiy a2GAyAAy",
        "where AyAAy = (Ay - Ay) U (Ay - Ay) denotes the symmetric difference of the sets Ay and Ay, which has cardinality 2L(y, y), i.e., twice the Hamming distance between the sequences of heads that characterize y and the predicted parse y.",
        "Using Holder's inequality, we have both",
        "( x)ll < | w2| oo ^ ||fai,a2 (x)| 1.",
        "Assuming that all features are binary valued, we have that ||fai,a2 (x)||oo < 1 and that ||fai,a2 (x)||1 < Nf 2, where Nf 2 denotes the maximum number of active second order features for any possible pair of arcs (a1, a2).",
        "Therefore:",
        "where n is the sentence length.",
        "Although this bound can be loose, it suggests (intuitively) that the score approximation degrades as the predicted tree y gets farther away from the true tree y (in Hamming distance).",
        "It also degrades with the magnitude of weights associated with the second-order features,",
        "Table 2: Combinations of features enumerated in Table 1 used for stacking.",
        "A is a replication of (Nivre and McDonald, 2008), except for the modifications described in footnote 4.",
        "which suggests that a separate regularization of the first-order and stacked features might be beneficial in a stacking framework.",
        "As a side note, if we set each component of the weight vector to one, we obtain a bound on the ^-norm of the feature vector difference, f (x,y) - f (x,y)|| < 2nL(y,y)N/,2."
      ]
    },
    {
      "heading": "5. Experiments",
      "text": [
        "In the following experiments we demonstrate the effectiveness of stacking parsers.",
        "As noted in §3.1, we make use of two component parsers, the graph-based MSTParser and the transition-based MaltParser.",
        "The publicly available version of MSTParser performs parsing and labeling jointly.",
        "We adapted this system to first perform unlabeled parsing, then label the arcs using a log-linear classifier with access to the full unlabeled parse (McDonald et al., 2005a;",
        "McDonald et al., 2005b; McDonald and Pereira, 2006).",
        "In stacking experiments, the arc labels from the level 0 parser are also used as a feature.",
        "In the following subsections, we refer to our modification of the MSTParser as MST 10 (the arc-factored version) and MST20 (the second-order arc-pair-factored version).",
        "All our experiments use the non-projective version of this parser.",
        "We refer to the MaltParser as Malt.",
        "We report experiments on twelve languages from the CoNLL-X shared task (Buchholz and Marsi, 2006).",
        "All experiments are evaluated using the labeled attachment score (LAS), using the default settings.",
        "Statistical significance is measured using Dan Bikel's randomized parsing evaluation comparator with 10,000 iterations.",
        "The additional features used in the level 1 parser are enumerated in Table 1 and their various subsets are depicted in Table 2.",
        "The PredEdge features are exactly the six features used by Nivre and McDonald (2008) in their MSTMalt parser; therefore, feature set A is a replication of this parser except for modifications noted in footnote 4.",
        "In all our experiments, the number of partitions used to create Df is L = 2.",
        "Our first experiment stacks the highly accurate MST 20 parser with itself.",
        "At level 0, the parser uses only the standard features (§5.1), and at level 1, these are augmented by various subsets of features of x along with the output of the level 0 parser, g(x) (Table 2).",
        "The results are shown in Table 3.",
        "While we see improvements over the single-parser baseline",
        "Name",
        "Description",
        "PredEdge",
        "Indicates whether the candidate edge was present, and what was its label.",
        "Sibling",
        "Lemma, POS, link label, distance and direction of attachment of the previous and and next predicted siblings",
        "GrandParents",
        "Lemma, POS, link label, distance and direction of attachment of the grandparent of the current modifier",
        "PredHead",
        "Predicted head of the candidate modifier (ifPredEdge=0)",
        "AllChildren",
        "Sequence of POS and link labels of all the predicted children of the candidate head",
        "Subset",
        "Description",
        "A",
        "PredEdge",
        "B",
        "PredEdge+Sibling",
        "C",
        "PredEdge+Sibling+GrandParents",
        "D",
        "PredEdge+Sibling+GrandParents+PredHead",
        "E",
        "PredEdge+Sibling+GrandParents+PredHead+ AllChildren",
        "Table 3: Results of stacking MST2O with itself at both level 0 and level 1.",
        "Column 2 enumerates LAS for MST2O.",
        "Columns 3-6 enumerate results for four different stacked feature subsets.",
        "Bold indicates best results for a particular language.",
        "for nine languages, the improvements are small (less than 0.5%).",
        "One of the biggest concerns about this model is the fact that it stacks two predictors that are very similar in nature: both are graph-based and share the features f1,a(x).",
        "It has been pointed out by Breiman (1996), among others, that the success of ensemble methods like stacked learning strongly depends on how uncorrelated the individual decisions made by each predictor are from the others' decisions.",
        "This experiment provides further evidence for the claim.",
        "We next use MaltParser at level 0 and the second-order arc-pair-factored MST 20 at level 1.",
        "This extends the experiments of Nivre and McDonald (2008), replicated in our feature subset A.",
        "Table 4 enumerates the results.",
        "Note that the best-performing stacked configuration for each and every language outperforms MST 20, corroborating results reported by Nivre and McDonald (2008).",
        "The best performing stacked configuration outperforms Malt as well, except for Japanese and Turkish.",
        "Further, our non-arc-factored features largely outperform subset A, except on Bulgarian, Chinese, and Japanese.",
        "On average, the best feature configuration is E, which is statistically significant over Malt and MST20 with p < 0.0001, and over feature subset A with p < 0.01.",
        "Finally, we consider stacking MaltParser with the first-order, arc-factored MSTParser.",
        "We view this approach as perhaps the most promising, since it is an exact parsing method with the quadratic runtime complexity of MST 10.",
        "Table 5 enumerates the results.",
        "For all twelve languages, some stacked configuration outperforms MST 1 0 and also, surprisingly, MST 20, the second order model.",
        "This provides empirical evidence that using rich features from MaltParser at level 0, a stacked level 1 first-order MSTParser can outperform the second-order MSTParser.",
        "In only two cases (Japanese and Turkish), the MaltParser slightly outperforms the stacked parser.",
        "On average, feature configuration D performs the best, and is statistically significant over Malt, MST 10, and MST20 with p < 0.0001, and over feature subset A with p < 0.05.",
        "Encouragingly, this configuration is barely outperformed by configura-",
        "Arabic",
        "67.88",
        "66.91",
        "67.41",
        "67.68",
        "67.37",
        "68.02",
        "Bulgarian",
        "87.31",
        "87.39",
        "87.03",
        "87.61",
        "87.57",
        "87.55",
        "Chinese",
        "87.57",
        "87.16",
        "87.24",
        "87.48",
        "87.42",
        "87.48",
        "Danish",
        "85.27",
        "85.39",
        "85.61",
        "85.57",
        "85.43",
        "85.57",
        "Dutch",
        "79.99",
        "79.79",
        "79.79",
        "79.83",
        "80.17",
        "80.13",
        "German",
        "87.44",
        "86.92",
        "87.32",
        "87.32",
        "87.26",
        "87.04",
        "Japanese",
        "90.93",
        "91.41",
        "91.21",
        "91.35",
        "91.11",
        "91.19",
        "Portuguese",
        "87.12",
        "87.26",
        "86.88",
        "87.02",
        "87.04",
        "86.98",
        "Slovene",
        "74.02",
        "74.30",
        "74.30",
        "74.00",
        "74.14",
        "73.94",
        "Spanish",
        "82.43",
        "82.17",
        "82.35",
        "82.81",
        "82.53",
        "82.75",
        "Swedish",
        "82.87",
        "82.99",
        "82.95",
        "82.51",
        "83.01",
        "82.69",
        "Turkish",
        "60.11",
        "59.47",
        "59.25",
        "59.47",
        "59.45",
        "59.31",
        "Average",
        "81.08",
        "80.93",
        "80.94",
        "81.05",
        "81.04",
        "81.05",
        "Table 4: Results of stacking Malt and MST20 at level 0 and level 1, respectively.",
        "Columns 2 – 4 enumerate LAS for Malt, MST2O and Malt + MST20 as in Nivre and McDonald (2008).",
        "Columns 5-8 enumerate results for four other stacked feature configurations.",
        "Bold indicates best result for a language.",
        "tion A of Malt + MST20 (see Table 4), the difference being statistically insignificant (p > 0.05).",
        "This shows that stacking Malt with the exact, arc-factored MST 10 bridges the difference between the individual MST 10 and MST20 models, by approximating higher order features, but maintaining an O(n) runtime and finding the model-optimal parse.",
        "In pipelines or semisupervised settings, it is useful when a parser can provide a confidence measure alongside its predicted parse tree.",
        "Because stacked predictors use ensembles with observable outputs, differences among those outputs may be used to estimate confidence in the final output.",
        "In stacked dependency parsing, this can be done (for example) by measuring the Hamming distance between the outputs of the level 0 and 1 parsers, L(g(x),h(x)).",
        "Indeed, the bound derived in §4.2 suggests that the second-order approximation degrades for candidate parses y that are Hamming-far from g(x); therefore, if L(g(x),h(x)) is large, the best score s(x,h(x)) may well be \"biased\" due to misleading neighboring information provided by the level 0 parser.",
        "We illustrate this point with an empirical analysis of the level 0/1 disagreement for the set of experiments described in §5.3; namely, we compare the",
        "Figure 2: Accuracy as a function of token disagreement between level 0 and level 1.",
        "The x-axis is the Hamming distance L(g(x), h(x)), i.e., the number of tokens where level 0 and level 1 disagree.",
        "The y-axis is the accuracy averaged over sentences that have the specified Hamming distance, both for level 0 and level 1.",
        "Arabic",
        "66.71",
        "67.88",
        "68.56",
        "69.12",
        "68.64",
        "68.34",
        "68.92",
        "Bulgarian",
        "87.41",
        "87.31",
        "88.99",
        "88.89",
        "88.89",
        "88.93",
        "88.91",
        "Chinese",
        "86.92",
        "87.57",
        "88.41",
        "88.31",
        "88.29",
        "88.13",
        "88.41",
        "Danish",
        "84.77",
        "85.27",
        "86.45",
        "86.67",
        "86.79",
        "86.13",
        "86.71",
        "Dutch",
        "78.59",
        "79.99",
        "80.75",
        "81.47",
        "81.47",
        "81.51",
        "81.29",
        "German",
        "85.82",
        "87.44",
        "88.16",
        "88.50",
        "88.56",
        "88.68",
        "88.38",
        "Japanese",
        "91.65",
        "90.93",
        "91.63",
        "91.43",
        "91.59",
        "91.61",
        "91.49",
        "Portuguese",
        "87.60",
        "87.12",
        "88.00",
        "88.24",
        "88.30",
        "88.18",
        "88.22",
        "Slovene",
        "70.30",
        "74.02",
        "76.62",
        "76.00",
        "76.60",
        "76.18",
        "76.72",
        "Spanish",
        "81.29",
        "82.43",
        "83.09",
        "83.73",
        "83.47",
        "83.21",
        "83.43",
        "Swedish",
        "84.58",
        "82.87",
        "84.92",
        "84.60",
        "84.80",
        "85.16",
        "84.88",
        "Turkish",
        "65.68",
        "60.11",
        "64.35",
        "64.51",
        "64.51",
        "65.07",
        "65.21",
        "Average",
        "80.94",
        "81.08",
        "82.52",
        "82.58",
        "82.65",
        "82.59",
        "82.71",
        "-H-Level 0",
        "-©-Level 1",
        "Level 0 (Overall)",
        "\\",
        "Level 1 (Overall)",
        "\\",
        "Table 5: Results of stacking Malt and MSTi0 at level 0 and level 1, respectively.",
        "Columns 2 – 4 enumerate LAS for Malt, MST 10 and MST20.",
        "Columns 5-9 enumerate results for five different stacked feature configurations.",
        "Bold indicates the best result for a language.",
        "level 0 and level 1 predictions under the best overall configuration (configuration E of Malt + MST20).",
        "Figure 2 depicts accuracy as a function of level 0-level 1 disagreement (in number of tokens), averaged over all datasets.",
        "We can see that performance degrades steeply when the disagreement between levels 0 and 1 increases in the range 0 – 4, and then behaves more irregularly but keeping the same trend.",
        "This suggests that the Hamming distance L(g(x),h(x)) is informative about parser performance and may be used as a confidence measure."
      ]
    },
    {
      "heading": "6. Conclusion",
      "text": [
        "In this work, we made use of stacked learning to improve dependency parsing.",
        "We considered an architecture with two layers, where the output of a standard parser in the first level provides new features for a parser in the subsequent level.",
        "During learning, the second parser learns to correct mistakes made by the first one.",
        "The novelty of our approach is in the exploitation of higher-order predicted edges to simulate non-local features in the second parser.",
        "We provided a novel interpretation of stacking as feature approximation, and our experimental results show rich-featured stacked parsers outperforming state-of-the-art single-layer and ensemble parsers.",
        "Notably, using a simple arc-factored parser at level 1, we obtain an exact O(n) stacked parser that outperforms earlier approximate methods (McDonald and",
        "Pereira, 2006).",
        "Acknowledgments",
        "The authors thank the anonymous reviewers for helpful comments, Vitor Carvalho, William Cohen, and David Smith for interesting discussions, and Ryan McDonald and Joakim Nivre for providing us their code and preprocessed datasets.",
        "A.M. was supported by a grant from FCT through the CMU-Portugal Program and the Information and Communications Technologies Institute (ICTI) at CMU.",
        "N.S.",
        "was supported by NSF IIS-0713265 and an IBM faculty award.",
        "E.X.",
        "was supported by NSF DBI-0546594, DBI-0640543, and IIS-0713379.",
        "Arabic",
        "66.71",
        "66.81",
        "67.88",
        "68.40",
        "68.50",
        "68.20",
        "68.42",
        "68.68",
        "Bulgarian",
        "87.41",
        "86.65",
        "87.31",
        "88.55",
        "88.67",
        "88.75",
        "88.71",
        "88.79",
        "Chinese",
        "86.92",
        "86.60",
        "87.57",
        "87.67",
        "87.73",
        "87.83",
        "87.67",
        "87.61",
        "Danish",
        "84.77",
        "84.87",
        "85.27",
        "86.59",
        "86.27",
        "86.21",
        "86.35",
        "86.15",
        "Dutch",
        "78.59",
        "78.95",
        "79.99",
        "80.53",
        "81.51",
        "80.71",
        "81.61",
        "81.37",
        "German",
        "85.82",
        "86.26",
        "87.44",
        "88.18",
        "88.30",
        "88.20",
        "88.36",
        "88.42",
        "Japanese",
        "91.65",
        "91.01",
        "90.93",
        "91.55",
        "91.53",
        "91.51",
        "91.43",
        "91.57",
        "Portuguese",
        "87.60",
        "86.28",
        "87.12",
        "88.16",
        "88.26",
        "88.46",
        "88.26",
        "88.36",
        "Slovene",
        "70.30",
        "73.96",
        "74.02",
        "75.84",
        "75.64",
        "75.42",
        "75.96",
        "75.64",
        "Spanish",
        "81.29",
        "81.07",
        "82.43",
        "82.61",
        "83.13",
        "83.13",
        "83.09",
        "82.99",
        "Swedish",
        "84.58",
        "81.88",
        "82.87",
        "84.86",
        "84.62",
        "84.64",
        "84.82",
        "84.76",
        "Turkish",
        "65.68",
        "59.63",
        "60.11",
        "64.49",
        "64.97",
        "64.47",
        "64.63",
        "64.61",
        "Average",
        "80.94",
        "80.33",
        "81.08",
        "82.28",
        "82.42",
        "82.29",
        "82.44",
        "82.41"
      ]
    }
  ]
}
