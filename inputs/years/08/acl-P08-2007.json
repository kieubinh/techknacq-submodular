{
  "info": {
    "authors": [
      "John DeNero",
      "Dan Klein"
    ],
    "book": "Annual Meeting of the Association for Computational Linguistics",
    "id": "acl-P08-2007",
    "title": "The Complexity of Phrase Alignment Problems",
    "url": "https://aclweb.org/anthology/P08-2007",
    "year": 2008
  },
  "references": [
    "acl-N03-1017",
    "acl-N04-1033",
    "acl-P06-1096",
    "acl-P07-2045",
    "acl-W02-1018",
    "acl-W06-3105",
    "acl-W07-0403"
  ],
  "sections": [
    {
      "text": [
        "John DeNero and Dan Klein",
        "Computer Science Division, EECS Department University of California at Berkeley",
        "Many phrase alignment models operate over the combinatorial space of bijective phrase alignments.",
        "We prove that finding an optimal alignment in this space is NP-hard, while computing alignment expectations is #P-hard.",
        "On the other hand, we show that the problem of finding an optimal alignment can be cast as an integer linear program, which provides a simple, declarative approach to Viterbi inference for phrase alignment models that is empirically quite efficient."
      ]
    },
    {
      "heading": "1. Introduction",
      "text": [
        "Learning in phrase alignment models generally requires computing either Viterbi phrase alignments or expectations of alignment links.",
        "For some restricted combinatorial spaces of alignments – those that arise in ITG-based phrase models (Cherry and Lin, 2007) or local distortion models (Zens et al., 2004) – inference can be accomplished using polynomial time dynamic programs.",
        "However, for more permissive models such as Marcu and Wong (2002) and DeNero et al.",
        "(2006), which operate over the full space of bijective phrase alignments (see below), no polynomial time algorithms for exact inference have been exhibited.",
        "Indeed, Marcu and Wong (2002) conjectures that none exist.",
        "In this paper, we show that Viterbi inference in this full space is NP-hard, while computing expectations is #P-hard.",
        "On the other hand, we give a compact formulation of Viterbi inference as an integer linear program (ILP).",
        "Using this formulation, exact solutions to the Viterbi search problem can be found by highly optimized, general purpose ILP solvers.",
        "While ILP is of course also NP-hard, we show that, empirically, exact solutions are found very quickly for most problem instances.",
        "In an experiment intended to illustrate the practicality of the ILP approach, we show speed and search accuracy results for aligning phrases under a standard phrase translation model."
      ]
    },
    {
      "heading": "2. Phrase Alignment Problems",
      "text": [
        "Rather than focus on a particular model, we describe four problems that arise in training phrase alignment models.",
        "A sentence pair consists of two word sequences, e and f. A set of phrases {e^ } contains all spans from between-word positions i to j of e. A link is an aligned pair of phrases, denoted (e^ , fki)-",
        "Let a weighted sentence pair additionally include a real-valued function <fi : {e^} x {fki} – >■ K, which scores links.",
        "<fi(eij, fki) can be sentence-specific, for example encoding the product of a translation model and a distortion model for (e^, fki).",
        "We impose no additional restrictions on <fi for our analysis.",
        "An alignment is a set of links.",
        "Given a weighted sentence pair, we will consider the space of bijective phrase alignments A: those a c {e^} x {fki} that use each word token in exactly one link.",
        "We first define the notion of a partition: = T means Si are pairwise disjoint and cover T. Then, we can formally define the set of bijective phrase alignments:",
        "!As in parsing, the position between each word is assigned an index, where 0 is to the left of the first word.",
        "In this paper, we assume all phrases have length at least one: and",
        "Both the conditional model of DeNero et al.",
        "(2006) and the joint model of Marcu and Wong (2002) operate in A, as does the phrase-based decoding framework of Koehn et al.",
        "(2003).",
        "For a weighted sentence pair (e,f, <fi), let the score of an alignment be the product of its link scores:",
        "Four related problems involving scored alignments arise when training phrase alignment models.",
        "Optimization, O: Given (e,f, (/>), find the highest scoring alignment a.",
        "Decision, V: Given (e, f, (/>), decide if there is an alignment a with 0(a) > 1.",
        "O arises in the popular Viterbi approximation to EM (Hard EM) that assumes probability mass is concentrated at the mode of the posterior distribution over alignments.",
        "V is the corresponding decision problem for O, useful in analysis.",
        "Expectation, £: Given a weighted sentence pair (e, f, 4>) and indices i, j, k, I, compute ^a 0(a) over all a e A such that (e^, fki) € a.",
        "£ arises in computing sufficient statistics for re-estimating phrase translation probabilities (E-step) when training models.",
        "The existence of a polynomial time algorithm for £ implies a polynomial time algorithm for S, because A =",
        "Ujli Ulto Ulifc+i {a : K, /«) £ a, a £ .A} ."
      ]
    },
    {
      "heading": "3. Complexity of Inference in A",
      "text": [
        "For the space A of bijective alignments, problems £ and O have long been suspected of being NP-hard, first asserted but not proven in Marcu and Wong (2002).",
        "We give a novel proof that O is NP-hard, showing that V is NP-complete by reduction from SAT, the boolean satisfiability problem.",
        "This result holds despite the fact that the related problem of finding an optimal matching in a weighted bipartite graph (the ASSIGNMENT problem) is polynomial-time solvable using the Hungarian algorithm.",
        "A reduction proof of NP-completeness gives a construction by which a known NP-complete problem can be solved via a newly proposed problem.",
        "From a SAT instance, we construct a weighted sentence pair for which alignments with positive score correspond exactly to the SAT solutions.",
        "Since SAT is NP-complete and our construction requires only polynomial time, we conclude that V is NP-complete.",
        "SAT: Given vectors of boolean variables v = (v) and propositional clauses C = (C), decide whether there exists an assignment to v that simultaneously satisfies each clause in C.",
        "For a SAT instance (v, C), we construct f to contain one word for each clause, and e to contain several copies of the literals that appear in those clauses.",
        "0 scores only alignments from clauses to literals that satisfy the clauses.",
        "The crux of the construction lies in ensuring that no variable is assigned both true and false.",
        "The details of constructing such a weighted sentence pair wsp(v, C) = (e, f, 0), described below, are also depicted in figure 1.",
        "1. f contains a word for each C, followed by an assignment word for each variable, assign(v).",
        "2. e contains c{£) consecutive words for each literal £, where c{£) is the number of times that I appears in the clauses.",
        "3.",
        "For all clauses C and each satisfying literal £, and each one-word phrase e in e containing £, <Xe> fc) = 1 fc is the one-word phrase containing C in f.",
        "4.",
        "The assign(v) words in f align to longer phrases of literals and serve to consistently assign each variable by using up inconsistent literals.",
        "They also align to unused literals to yield a bijection.",
        "Let e^j be the phrase in e containing all literals £ and k negations of £.",
        "/aSsign(» is the one-word phrase for assign(v).",
        "Then, 0(efq, Assign^)) = 1 for £ G {v, v} and all applicable k.",
        "vi true V2 false «3 false",
        "Figure 1: (a) The clauses of an example SAT instance with v = («1,^2, V3).",
        "(b) The weighted sentence pair wsp(v, C) constructed from the SAT instance.",
        "All links that have </> = 1 are marked with a blue horizontal stripe.",
        "Stripes in the last three rows demarcate the alignment options for each assign(v„), which consume all words for some literal, (c) A bijective alignment with score 1.",
        "(d) The corresponding satisfying assignment for the original SAT instance.",
        "Claim 1.",
        "If wsp(v, C) has an alignment a with 0(a) > 1» then (v, C) is satisfiable.",
        "Proof The score implies that f aligns using all one-word phrases and Ve^ e a, 0(a») = 1.",
        "By condition 4, each /assign(» aligns to all v or all v in e. Then, assign each v to true if /aSsign(» aligns to all v, and false otherwise.",
        "By condition 3, each C must align to a satisfying literal, while condition 4 assures that all available literals are consistent with this assignment to v, which therefore satisfies C. □ Claim 2.",
        "If{v, C) is satisfiable, then wsp(-v, C) has an alignment a with 0(a) = 1.",
        "Proof.",
        "We construct such an alignment a from the satisfying assignment v. For each C, we choose a satisfying literal I consistent with the assignment.",
        "Align fc to the first available I token in e if the corresponding v is true, or the last if v is false.",
        "Align each /assign^) to all remaining literals for v. □",
        "Claims 1 and 2 together show that V is NP-complete, and therefore that O is NP-hard.",
        "With another construction, we can show that S is #P-hard, meaning that it is at least as hard as any #P-complete problem.",
        "#P is a class of counting problems related to NP, and #P-hard problems are NP-hard as well.",
        "Counting Perfect Matchings, CPM",
        "Given a bipartite graph G with 2n vertices, count the number of matchings of size n.",
        "For a bipartite graph G with edge set E = {(vj,vi)}, we construct e and f with n words each, and set 0(ej_i j, fi-\\ 1) = 1 and 0 otherwise.",
        "The number of perfect matchings in G is the sum S for this weighted sentence pair.",
        "CPM is #P-complete (Valiant, 1979), so S (and hence £) is #P-hard."
      ]
    },
    {
      "heading": "4. Solving the Optimization Problem",
      "text": [
        "Although O is NP-hard, we present an approach to solving it using integer linear programming (ILP).",
        "Marcu and Wong (2002) describes an approximation to O.",
        "Given a weighted sentence pair, high scoring phrases are linked together greedily to reach an initial alignment.",
        "Then, local operators are applied to hill-climb A in search of the maximum a.",
        "This procedure also approximates £ by collecting weighted counts as the space is traversed.",
        "DeNero et al.",
        "(2006) instead proposes an exponential-time dynamic program to systematically explore A, which can in principle solve either O or £.",
        "In practice, however, the space of alignments has to be pruned severely using word alignments to control the running time of EM.",
        "Notably, neither of these inference approaches offers any test to know if the optimal alignment is ever found.",
        "Furthermore, they both require small data sets due to computational expense.",
        "We cast O as an ILP problem, for which many optimization techniques are well known.",
        "First, we introduce binary indicator variables (ii,j,k,i denoting whether (e^, fki) G a.",
        "Furthermore, we introduce binary indicators aj and fk,i that denote whether some (eij, •) or (•, fki) appears in a, respectively.",
        "Finally, we represent the weight function 0 as a weight vector in the program: wi}j}k,i = log <p(eij, fki).",
        "V2",
        "V3",
        "------>",
        "Vl",
        "V2",
        "V3",
        "------>",
        "Vl",
        "V2",
        "V3",
        "------>",
        "Vl",
        "V2",
        "V3",
        "------>",
        "Now, we can express an integer program that, when optimized, will yield the optimal alignment of our weighted sentence pair.",
        "with the following constraints on index variables:",
        "0 < i < |e|, 0 < j < |e|, i < j 0 < k < |f|, 0 < I < |f|, k < I .",
        "The objective function is log 0(a) for a implied by {a%,j,k,i = !",
        "}• Constraint equation 1 ensures that the English phrases form a partition of e - each word in e appears in exactly one phrase - as does equation 2 for f. Constraint equation 3 ensures that each phrase in the chosen partition of e appears in exactly one link, and that phrases not in the partition are not aligned (and likewise constraint 4 for f)."
      ]
    },
    {
      "heading": "5. Applications",
      "text": [
        "The need to find an optimal phrase alignment for a weighted sentence pair arises in at least two applications.",
        "First, a generative phrase alignment model can be trained with Viterbi EM by finding optimal phrase alignments of a training corpus (approximate E-step), then re-estimating phrase translation parameters from those alignments (M-step).",
        "Second, this is an algorithm for forced decoding: finding the optimal phrase-based derivation of a particular target sentence.",
        "Forced decoding arises in online discriminative training, where model updates are made toward the most likely derivation of a gold translation (Liang et al., 2006).",
        "Sentences per hour on a four-core server Frequency of optimal solutions found Frequency of e-optimal solutions found",
        "Using an off-the-shelf ILP solver, we were able to quickly and reliably find the globally optimal phrase alignment under <fi(eij, fki) derived from the Moses pipeline (Koehn et al., 2007).",
        "Table 1 shows that finding the optimal phrase alignment is accurate and efficient.",
        "Hence, this simple search technique effectively addresses the intractability challenges inherent in evaluating new phrase alignment ideas."
      ]
    }
  ]
}
