{
  "info": {
    "authors": [
      "Gabriele Musillo",
      "Paola Merlo"
    ],
    "book": "Annual Meeting of the Association for Computational Linguistics",
    "id": "acl-P08-2054",
    "title": "Unlexicalised Hidden Variable Models of Split Dependency Grammars",
    "url": "https://aclweb.org/anthology/P08-2054",
    "year": 2008
  },
  "references": [
    "acl-A00-2018",
    "acl-J03-4003",
    "acl-N03-1014",
    "acl-P03-1054",
    "acl-P05-1010",
    "acl-P07-1022",
    "acl-P92-1017",
    "acl-W05-1504",
    "acl-W05-1512"
  ],
  "sections": [
    {
      "text": [
        "Unlexicalised Hidden Variable Models of Split Dependency Grammars*",
        "Gabriele Antonio Musillo",
        "musillo4@etu.unige.ch",
        "merlo@lettres.unige.ch",
        "This paper investigates transforms of split dependency grammars into unlexicalised context-free grammars annotated with hidden symbols.",
        "Our best unlexicalised grammar achieves an accuracy of 88% on the Penn Treebank data set, that represents a 50% reduction in error over previously published results on unlexicalised dependency parsing."
      ]
    },
    {
      "heading": "1. Introduction",
      "text": [
        "Recent research in natural language parsing has extensively investigated probabilistic models of phrase-structure parse trees.",
        "As well as being the most commonly used probabilistic models of parse trees, probabilistic context-free grammars (PCFGs) are the best understood.",
        "As shown in (Klein and Manning, 2003), the ability of PCFG models to disambiguate phrases crucially depends on the expressiveness of the symbolic backbone they use.",
        "Treebank-specific heuristics have commonly been used both to alleviate inadequate independence assumptions stipulated by naive PCFGs (Collins, 1999; Charniak, 2000).",
        "Such methods stand in sharp contrast to partially supervised techniques that have recently been proposed to induce hidden grammatical representations that are finer-grained than those that can be read off the parsed sentences in treebanks (Henderson, 2003; Matsuzaki et al., 2005; Prescher, 2005; Petrov et al., 2006).",
        "*Part of this work was done when Gabriele Musillo was visiting the MIT Computer Science and Artificial Intelligence Laboratory, funded by a grant from the Swiss NSF (PBGE2-117146).",
        "Many thanks to Michael Collins and Xavier Carreras for their insightful comments on the work presented here.",
        "This paper presents extensions of such grammar induction techniques to dependency grammars.",
        "Our extensions rely on transformations of dependency grammars into efficiently parsable context-free grammars (CFG) annotated with hidden symbols.",
        "Because dependency grammars are reduced to CFGs, any learning algorithm developed for PCFGs can be applied to them.",
        "Specifically, we use the Inside-Outside algorithm defined in (Pereira and Schabes, 1992) to learn transformed dependency grammars annotated with hidden symbols.",
        "What distinguishes our work from most previous work on dependency parsing is that our models are not lexi-calised.",
        "Our models are instead decorated with hidden symbols that are designed to capture both lexical and structural information relevant to accurate dependency parsing without having to rely on any explicit supervision."
      ]
    },
    {
      "heading": "2. Transforms of Dependency Grammars",
      "text": [
        "Contrary to phrase-structure grammars that stipulate the existence of phrasal nodes, dependency grammars assume that syntactic structures are connected acyclic graphs consisting of vertices representing terminal tokens related by directed edges representing dependency relations.",
        "Such terminal symbols are most commonly assumed to be words.",
        "In our un-lexicalised models reported below, they are instead assumed to be part-of-speech (PoS) tags.",
        "A typical dependency graph is illustrated in Figure 1 below.",
        "Various projective dependency grammars exemplify the concept of split bilexical dependency grammar (SBG) defined in (Eisner, 2000).",
        "SBGs are",
        "' R root RVBDB",
        "RVbDb/ Rl ND",
        "lVbDb VBDb lVbdb \\lNnpa",
        "rVbdb ^Nnpc",
        "hit.",
        "Miles with",
        "lNnf \\lDte",
        "Figure 1: A projective dependency graph for the sentence Nica hit Miles with the trumpet paired with its second-order unlexicalised derivation tree annotated with hidden variables.",
        "closely related to CFGs as they both define structures that are rooted ordered projective trees.",
        "Such a close relationship is clarified in this section.",
        "It follows from the equivalence of finite automata and regular grammars that any SBG can be transformed into an equivalent CFG.",
        "Let D = (V, W, L, R) be a SBG and G = (N, W, P, S) a CFG.",
        "To transform D into G we to define the set P of productions, the set N of non-terminals, and the start symbol S as follows:",
        "• For each v in W, transform the automaton Lvinto a right-linear grammar GLv whose start symbol is Cl ; by construction, GLv consists of rules such as Cp – u Cl or Cp – e, where terminal symbols such as u belong to W and nonterminals such as Cl correspond to the states of the Ll automaton; include all e-productions in P, and, if a rule such as Cp – u Cl is in GLv, include the rule Cp – 2lu Cl in P.",
        "• For each v in V, transform the automaton Rvinto a left-linear grammar GRv whose start symbol is R ; by construction, GRv consists",
        "• V is a set of terminal symbols which include a distinguished element jroot;",
        "• L is a function that, for any v e W(= V – {.root}), returns a finite automaton that recognises the well-formed sequences in W * of left dependents of v;",
        "• R is a function that, for each v e V, returns a finite automaton that recognises the well-formed sequences of right dependents in W* for v.",
        "of rules such as Rp – Rl u or Rp – e, where terminal symbols such as u belongs to W and non-terminals such as Rp correspond to the states of the R automaton; include all e-productions in P, and, if a rule such as Rp – Rl u is in Gr, , include the rule Rl – Rl 2U in P.",
        "• For each symbol 2U occurring in P, include the productions 2U – CU lU, lU – 0U RU, and 0U – u in P ; for each symbol 2U in P, include the productions 2U – 1U RU, 1U – CU 0u, and 0U – u in P.",
        "• Set the start symbol S to Rl_root.",
        "Parsing CFGs resulting from such transforms runs in O(n).",
        "The head index v decorating nonterminals such as ll, ll, 0v, Cl and Rl can be computed in O(1) given the left and right indices of the sub-string they cover.",
        "Observe, however, that if 2l or 2l derives , then v does not functionally depend on either i or j.",
        "Because it is possible for the head index v of 2l or 2l to vary from i to j, v has to be tracked by the parser, resulting in an overall O(n) time complexity.",
        "In the following, we show how to transform our O(n) CFGs into O(n) grammars by applying transformations, closely related to those in (McAllester, 1999) and (Johnson, 2007), that eliminate the 2j, and 2V symbols.",
        "We only detail the elimination of the symbols 2V.",
        "The elimination of the 2J, symbols can be derived symmetrically.",
        "By construction, a 2V symbol is the right successor of a non-terminal RU.",
        "Consequently, 2V can only occur in a derivation such as",
        "a RU P h a RU 2; P h a RU 1£ RV P. To substitute for the problematic 2V non-terminal in the above derivation, we derive the form RU 1£ RV from RU/RV RV where RU/RV is a new nonterminal whose right-hand side is RU 1£.",
        "We thus transform the above derivation into the derivation a RU P h a RU^ RV P h a RU 1£ RV P.",
        "Because u = i – 1 and v = j if RU/RV derives Wjj, and u = j + 1 and v = i if L^L; derives Wjj, the parsing algorithm does not have to track any head indices and can consequently parse strings in O(n) time.",
        "The grammars described above can be further transformed to capture linear second-order dependencies involving three distinct head indices.",
        "A second-order dependency structure is illustrated in Figure 1 that involves two adjacent dependents, Miles and with, of a single head, hit.",
        "To see how linear second-order dependencies can be captured, consider the following derivation of a sequence of right dependents of a head u:",
        "a RU/RV P h a RU 1£ P h a RU/RW RW 1V P. The form RU/RW RW 1v mentions three heads: u is the the head that governs both v and w, and w precedes v. To encode the linear relationship between w and v, we redefine the right-hand side of RU/RV as RU/RW <RW, 1V) and include the production (RW, 1V) – RW 1V in the productions.",
        "The relationship between the dependents w and v of the head u is captured, because RU/RV jointly generates RW and 1V.",
        "Any second-order grammar resulting from transforming the derivations of right and left dependents in the way described above can be parsed in O(n), because the head indices decorating its symbols can be computed in O(1).",
        "In the following section, we show how to enrich both our first-order and second-order grammars with hidden variables."
      ]
    },
    {
      "heading": "3. Hidden Variable Models",
      "text": [
        "Because they do not stipulate the existence of phrasal nodes, commonly used unlabelled dependency models are not sufficiently expressive to discriminate between distinct projections of a given head.",
        "Both our first-order and second-order grammars conflate distributionally distinct projections if they are projected from the same head.",
        "To capture various distinct projections of a head, we annotate each of the symbols that refers to it with a unique hidden variable.",
        "We thus constrain the distribution of the possible values of the hidden variables in a linguistically meaningful way.",
        "Figure 1 illustrates such constraints: the same hidden variable B decorates each occurrence of the PoS tag VBD of the head hit.",
        "Enforcing such agreement constraints between hidden variables provides a principled way to capture not only phrasal information but also lexical information.",
        "Lexical pieces of information conveyed by a minimal projection such as 0VbDb in Figure 1 will consistently be propagated through the derivation tree and will condition the generation of the right and left dependents of hit.",
        "In addition, states such as p and q that decorate non-terminal symbols such as RU or LU can also capture structural information, because they can encode the most recent steps in the derivation history.",
        "In the models reported in the next section, these states are assumed to be hidden and a distribution over their possible values is automatically induced."
      ]
    },
    {
      "heading": "4. Empirical Work and Discussion",
      "text": [
        "The models reported below were trained, validated, and tested on the commonly used sections from the Penn Treebank.",
        "Projective dependency trees, ob-",
        "Table 1: Accuracy results on the development and test data set, where q denotes the number of hidden states and h the number of hidden values annotating a PoS tag involved in our first-order (FOM) and second-order (SOM) models.",
        "tained using the rules stated in (Yamada and Matsumoto, 2003), were transformed into first-order and second-order structures.",
        "CFGs extracted from such structures were then annotated with hidden variables encoding the constraints described in the previous section and trained until convergence by means of the Inside-Outside algorithm defined in (Pereira and Schabes, 1992) and applied in (Matsuzaki et al., 2005).",
        "To efficiently decode our hidden variable models, we pruned the search space as in (Petrov et al., 2006).",
        "To evaluate the performance of our models, we report two of the standard measures: the per word and per sentence accuracy (McDonald, 2006).",
        "Figures reported in the upper section of Table 1 measure the effect on accuracy of the transforms we designed.",
        "Our baseline first-order model (q = 1, h = 1) reaches a poor per word accuracy that suggests that information conveyed by bare PoS tags is not fine-grained enough to accurately predict dependencies.",
        "Results reported in the second line shows that modelling adjacency relations between dependents as second-order models do is relevant to accuracy.",
        "The third line indicates that annotating both the states and the PoS tags of a first-order model with two hidden values is sufficient to reach a performance comparable to the one achieved by a naive second-order model.",
        "However, comparing the results obtained by our best first-order models to the accuracy achieved by our best second-order model conclusively shows that first-order models exploit such dependencies to a much lesser extent.",
        "Overall, such results provide a first solution to the problem left open in (Johnson, 2007) as to whether secondorder transforms are relevant to parsing accuracy or not.",
        "The lower section of Table 1 reports the results achieved by our best model on the test data set and compare them both to those obtained by the only un-lexicalised dependency model we know of (Eisner and Smith, 2005) and to those achieved by the state-of-the-art dependency parser in (McDonald, 2006).",
        "While clearly not state-of-the-art, the performance achieved by our best model suggests that massive lexicalisation of dependency models might not be necessary to achieve competitive performance.",
        "Future work will lie in investigating the issue of lexicalisation in the context of dependency parsing by weakly lexicalising our hidden variable models.",
        "Development Data - section 24",
        "per word",
        "per sentence",
        "FOM: q = l,h = 1",
        "75.7",
        "9.9",
        "SOM: q = l,h = 1",
        "80.5",
        "16.2",
        "FOM: q = 2, h = 2",
        "81.9",
        "17.4",
        "FOM: q = 2, h = 4",
        "84.7",
        "22.0",
        "SOM: q = 2, h = 2",
        "84.3",
        "21.5",
        "SOM: q = l,h = 4",
        "87.0",
        "25.8",
        "Test Data - section 23",
        "per word",
        "per sentence",
        "(Eisner and Smith, 2005)",
        "75.6",
        "NA",
        "SOM: q = l,h = 4",
        "88.0",
        "30.6",
        "(McDonald, 2006)",
        "91.5",
        "36.7"
      ]
    }
  ]
}
