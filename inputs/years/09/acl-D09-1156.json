{
  "info": {
    "authors": [
      "Richard C. Wang",
      "William W. Cohen"
    ],
    "book": "EMNLP",
    "id": "acl-D09-1156",
    "title": "Character-level Analysis of Semi-Structured Documents for Set Expansion",
    "url": "https://aclweb.org/anthology/D09-1156",
    "year": 2009
  },
  "references": [
    "acl-P06-1015",
    "acl-P06-1101",
    "acl-W06-2919"
  ],
  "sections": [
    {
      "text": [
        "William W Cohen",
        "Set expansion refers to expanding a partial set of \"seed\" objects into a more complete set.",
        "One system that does set expansion is SEAL (Set Expander for Any Language), which expands entities automatically by utilizing resources from the Web in a language-independent fashion.",
        "In this paper, we illustrated in detail the construction of character-level wrappers for set expansion implemented in SEAL.",
        "We also evaluated several kinds of wrappers for set expansion and showed that character-based wrappers perform better than HTML-based wrappers.",
        "In addition, we demonstrated a technique that extends SEAL to learn binary relational concepts (e.g., \"x is the mayor of the city y\") from only two seeds.",
        "We also show that the extended SEAL has good performance on our evaluation datasets, which includes English and Chinese, thus demonstrating language-independence."
      ]
    },
    {
      "heading": "1. Introduction",
      "text": [
        "SEAL (Set Expander for Any Language) is a set expansions system that accepts input elements (seeds) of some target set S and automatically finds other probable elements of S in semi-structured documents such as web pages.",
        "SEAL is a research system that has shown good performance in previously published results (Wang and Cohen, 2007).",
        "By using only three seeds and top one hundred documents returned by Google, SEAL achieved 90% in mean average precision (MAP), averaged over 36 datasets from three languages: English, Chinese, and lapanese.",
        "Unlike other published research work (Etzioni et al., 2005), SEAL focuses on finding small closed sets",
        "!http://rcwang.com/seal",
        "of items (e.g., Disney movies) rather than large and more open sets (e.g., scientists).",
        "In this paper, we explore the impact on performance of one of the innovations in SEAL, specifically, the use of character-level techniques to detect candidate regular structures, or wrappers, in web pages.",
        "Although some early systems for web-page analysis induce rules at character-level (e.g., such as WIEN (Kushmerick et al., 1997) and DIPRE (Brin, 1998)), most recent approaches for set expansion have used either tokenized and/or parsed free-text (Carlson et al., 2009; Talukdar et al., 2006; Snow et al., 2006; Pantel and Pennac-chiotti, 2006), or have incorporated heuristics for exploiting HTML structures that are likely to encode lists and fables (Nadeau et al., 2006; Etzioni et al., 2005).",
        "In this paper, we experimentally evaluate SEAL'S performance under two settings: 1) using the character-level page analysis techniques of the original SEAL, and 2) using page analysis techniques constrained to identify only HTML-related wrappers.",
        "Our conjecture is that the less constrained character-level methods will produce more candidate wrappers than HTML-based techniques.",
        "We also conjecture that a larger number of candidate wrappers will lead to better performance overall, due to SEAL'S robust methods for ranking candidate wrappers.",
        "The experiments in this paper largely validate this conjecture.",
        "We show that the HTML-restricted version of SEAL performs less well, losing 13 points in MAP on a dozen Chinese-language benchmark problems, 8 points in MAP on a dozen English-language problems, and 2 points in MAP on a dozen lapanese-language problems.",
        "SEAL currently only handles unary relationships (e.g., \"x\" is a mayor).",
        "In this paper, we show that SEAL's character-level analysis techniques can, like HTML-based methods, be read-",
        "Proceedings of the 2009 Conference on Empirical Methods in Natural Language Processing, pages 1503-1512, Singapore, 6-7 August 2009.",
        "©2009 ACL and AFNLP",
        "ily extended to handle binary relationships.",
        "We then demonstrate that this extension of SEAL can learn binary concepts (e.g., \"x is the mayor of the city y\") from a small number of seeds, and show that, as with unary relationships, MAP performance is 26 points lower when wrappers are restricted to be HTML-related.",
        "Furthermore, we also illustrate that the learning of binary concepts can be bootstrapped to improve its performance.",
        "Section 2.1 explains how SEAL constructs wrappers and rank candidate items for unary relations.",
        "Section 3 describes the experiments and results for unary relations.",
        "Section 4 presents the method for extending SEAL to handle binary relationships, as well as their experimental results.",
        "Related work is discussed in Section 5, and the paper concludes in Section 6.",
        "When SEAL performs set expansion, it accepts a small number of seeds from the user (e.g., \"Ford\", \"Nissan\", and \"Toyota\").",
        "It then uses a web search engine to retrieve some documents that contain these instances, and then analyzes these documents to find candidate wrappers (i.e., regular structures on a page that contain the seed instances).",
        "Strings that are extracted by a candidate wrapper (but are not equivalent to any seed) are called candidate instances.",
        "SEAL then statistically ranks the candidate instances (and wrappers), using the techniques outlined below, and outputs a ranked list of instances to the user.",
        "One key step in this process is identifying candidate wrappers.",
        "In SEAL, a candidate wrapper is defined by a pair of left and right character strings, £ and r. A wrapper \"extracts\" items from a particular document by locating all strings in the document that are bracketed by the wrapper's left and right strings, but do not contain either of the two strings.",
        "In SEAL, wrappers are always learned from, and applied to, a single document.",
        "Table 1 illustrates some candidate wrappers learned by SEAL.",
        "(Here, a wrapper is written as at, with the [... ] to be filled by an extracted string.)",
        "Notice that the instances extracted by wrappers can and do appear in surprising places, such as embedded in URLs or in HTML tag attributes.",
        "Our experience with these character-based wrappers lead us to conjecture that existing heuristics for identifying structure in HTML are fundamentally limited, in that many potentially useful structures will not be identified by analyzing HTML structure only.",
        "SEAL uses these rules to find wrappers.",
        "Each candidate wrapper £, r is a maximally long pair of strings that bracket at least one occurrence of every seed in a document: in other words, for each pair £,r,the set of strings C extracted by £, r has the properties that:",
        "1.",
        "For every seed s, there exists some c e C that is equivalent to s; and",
        "2.",
        "There are no strings £', r' that satisfy property (1) above such that £ is a proper suffix of £' and r is a proper prefix of r'.",
        "SEAL's wrappers can be found quite efficiently.",
        "The algorithm we use has been described previously (Wang and Cohen, 2007), but will be explained again here for completeness.",
        "As an example, below shows a mock document, written in an unknown mark-up language, that has the seeds: Ford, Nissan, and Toyota located (and boldfaced).",
        "There are two other car makers hidden inside this document (can you spot them?).",
        "In this section, we will show you how to automatically construct wrappers that reveal them.",
        "GtpKxHnlsSaNxjHJglekuDialcLBxKHforDxkrpW NaCMwAAHOFoRduohdEXocUvaGKxHaCuRAxjHjnOx oTOyOTazxKHAUdlxkrOyQKxHToYotAxjHCRdmLxa puRAPprtqOVKxHfoRdxjHaJAScRFrlaFoRDofwNL WxKHtOYotaxkrHxQKlacXIGEKtxKHNisSanxkrEq",
        "Given a set of seeds and a semi-structured document, the wrapper construction algorithm starts by locating all strings equivalent to a seed in the document; these strings are called seed instances below.",
        "(In SEAL, we always use case-insensitive string matching, so a string is \"equivalent to\" any case variant of itself.)",
        "The algorithm then inserts all the instances into a list and assigns a unique id to each of them by its index in the list (i.e., the id of an instance is its position in the list.)",
        "For every seed instance in the document, its immediate left character string (starting from the first character of the document) and right character string (ending at the last character of the document) are extracted and inserted into a left-context trie and a right-context trie respectively, where the left context is inserted in reversed character order.",
        "(Here, we implemented a compact trie called",
        "URL: http ://www.shopcarparts.com/",
        "Content: acura, audi, bmw, buick, Cadillac, Chevrolet, chevy, Chrysler, daewoo, daihatsu, dodge, eagle, ford, ...",
        "URL: http ://www.allautoreviews.com/",
        "Content: acura, audi, bmw, buick, Cadillac, Chevrolet, Chrysler, dodge, ford, gmc, honda, hyundai, inflniti, isuzu, ...",
        "URL: http://www.hertrichs.com/",
        "Content: buick, Chevrolet, Chrysler, dodge, ford, gmc, isuzu, jeep, lincoln, mazda, mercury, nissan, pontiac, scion, ...",
        "Content: avalon, cars, carscom, driving, ford, maxima, nissan, performance, speed, toyota",
        "URL: http ://www.worldstyling.com/",
        "Content: chevy, ford, isuzu, mitsubishi, nissan, pickup, stainless steel, suv, toyota",
        "Patricia trie where every node stores a substring.)",
        "Every node in the left-context trie maintains a list of ids for keeping track of the seed instances that follow the string associated with that node.",
        "Same thing applies to the right-context trie symmetrically.",
        "Figure 1 shows the two context tries and the list of seed instances when provided the mock document with the seeds: Ford, Nissan, and Toyota.",
        "Provided that the left and right context tries are populated with all the contextual strings of every seed instance, the algorithm then finds maximally long contextual strings that bracket at least one seed instance of every seed.",
        "The pseudo-code for finding these strings for building wrappers is illustrated in Table 2, where Seeds is the set of input seeds and I is the minimum length of the strings.",
        "We observed that longer strings produce higher precision but lower recall.",
        "This is an interesting parameter that is worth exploring, but for this paper, we consider and use only a minimum length of one throughout the experiments.",
        "The basic idea behind the pseudo-code is to first find all the longest possible strings from one trie given some constraints, then for every such string s, find the longest possible string s' from another trie such that s and s' bracket at least one occurrence of every given seed in a document.",
        "The wrappers constructed as well as the items extracted given the mock document and the example seeds are shown below.",
        "Notice that Audi and Acura are uncovered (did you spot them?",
        ").",
        "Content: audi, ford, nissan, toyota",
        "Content: acura, ford, nissan, toyota Wrappers MakeWrappers(Trie £, Trie r)",
        "Return Wraps(7, r) U Wraps(r, I)",
        "Wrappers Wraps(Trie t\\, Trie t^) For each n\\ e TopNodes(ii, £)",
        "For each «2 € BottomNodes(i2, ni) For each n\\ e BottomNodes(ii, n2)",
        "Construct a new Wrapper(Text(ni), Text(«,2)) Return a union of all wrappers constructed",
        "Nodes BottomNodes(Trie t\\, Node n') Find node ngti such that:",
        "(2) All children nodes of n (if exist) fail on (1) Return a union of all nodes found",
        "Nodes TopNodes(Trie t, int £) Find node net such that:",
        "(2) Parent node of n (if exist) fails on (1) Return a union of all nodes found",
        "String Text(Node n) Return the textual string represented by the path from root to n in the trie containing n",
        "Integer NumCommonSeeds(Node m, Node n^) For each index i e Intersect(ni, n^):",
        "Find the seed at index i of seed instance list Return the size of the union of all seeds found",
        "Integers Intersect(Node n\\, Node n2) Return ni.indexes n «2-indexes",
        "Table 1 shows examples of wrappers constructed from real web documents.",
        "We have also observed items extracted from plain text (.txt), comma/fab-separated text (.csv/.tsv), latex (.tex), and even Word documents (.doc) of which the wrappers have binary character strings.",
        "These observations support our claim that the algorithm is independent of mark-up language.",
        "In our experimental results, we will show that it is independent of human language as well.",
        "Left Context Trie",
        "Right Context Trie",
        "Figure 1 : The context tries and the seed instance list constructed given the mock document presented in Section 2.1 and the seeds: Ford, Nissan and Toyota.",
        "In previous work (Wang and Cohen, 2007), we presented a graph-walk based technique that is effective for ranking sets and wrappers.",
        "This model encapsulates the relations between documents, wrappers, and extracted instances (entity mentions).",
        "Similarly, our graph also consists of a set of nodes and a set of labeled directed edges.",
        "Figure 2 shows an example graph where each node di represents a document, Wi a wrapper, and rrii an extracted entity mention.",
        "A directed edge connects a node di to a Wi if di contains Wi, a Wi to a rrii if Wi extracts rrii, and a di to a rrii if di contains rrii.",
        "Although not shown in the figure, every edge from node x to y actually has an inverse relation edge from node ytox (e.g., rrii is extracted by Wi) to ensure that the graph is cyclic.",
        "We will use letters such as x, y, and z to denote nodes, and x – ^ y to denote an edge from x to y with labeled relation r. Each node represents an object (document, wrapper, or mention), and each edge x – ^ y asserts that a binary relation r(x,y) holds.",
        "We want to find entity mention nodes that are similar to the seed nodes.",
        "We define the similarity between two nodes by random walk with restart (Tong et al., 2006).",
        "In this algorithm, to walk away from a source node x, one first chooses an edge relation r; then given r, one picks a target node y such that x – ^ y.",
        "When given a source node x, we assume that the probability of picking an edge relation r is uniformly distributed among the set of all r, where there exist a target node y such that x – ^ y.",
        "More specifically,",
        "We also assume that once an edge relation r is chosen, a target node y is picked uniformly from the set of all y such that x – ^ y.",
        "More specifically,",
        "In order to perform random walk, we will build a transition matrix M where each entry at (x, y) represents the probability of traveling one step from a source node a; to a target node y, or more specifically,",
        "We will also define a state vector vt which represents the probability at each node after iterating through the entire graph t times, where one iteration means to walk one step away from every node.",
        "The state vector at t + 1 iteration is defined as:",
        "0",
        "Nissan",
        "1",
        "Nissan",
        "2",
        "Toyota",
        "3",
        "Toyota",
        "4",
        "Toyota",
        "5",
        "Ford",
        "6",
        "Ford",
        "7",
        "Ford",
        "8",
        "Ford",
        "r ^",
        "\"OHÄA...\"",
        "\"alrF...\"",
        "{6}",
        "{8}",
        "1 V 7",
        "Since we want to start our walk from the seeds, we initialize Vq to have probabilities uniformly distributed over the seed nodes.",
        "In each step of our walk, there is a small probability A of tele-porting back to the seed nodes, which prevents us from walking too far away from the seeds.",
        "We iterate our graph until the state vector converges, and rank the extracted mentions by their probabilities in the final state vector.",
        "We use a constant A of 0.01 in the experiments below.",
        "Bootstrapping refers to iterative unsupervised set expansion.",
        "This process requires minimal supervision, but is very sensitive to the system's performance because errors can easily propagate from one iteration to another.",
        "As shown in previous work (Wang and Cohen, 2008), carefully designed seeding strategies can minimize the propagated errors.",
        "Below, we show the pseudo-code for our bootstrapping strategy.",
        "m = mi(i(3, \\used\\) seeds < – selectm(used) U top{list) stats < – expand(seeds, stats) list < – rank(stats) used < – used U seeds end for where M is the total number of iterations, inputs are the two initial input seeds, selectm(S) randomly selects m different seeds from the set S, used is a set that contains previously expanded seeds, top{list) returns an item that has the highest rank in list, expand(seeds, stats) expands the selected seeds using stats and outputs accumulated statistics, and rank(stats) applies Random Walk described in Section 2.2 on the accumulated stats to produce a list of items.",
        "This strategy dumps the highest-ranked item into the used bucket after every iteration.",
        "It starts by expanding two input seeds.",
        "For the second iteration, it expands three seeds: two used plus one from last iteration.",
        "For every successive iteration, it expands four seeds: three randomly selected used ones plus one from last iteration."
      ]
    },
    {
      "heading": "3. Experiments with Unary Relations",
      "text": [
        "We would like to determine whether character-based or HTML-based wrappers are more suited for the task of set expansion.",
        "In order to do that, we introduce five types of wrappers, as illustrated in Table 3.",
        "The first type is the character-based wrapper that does not have any restriction on the alphabets of its characters.",
        "Starting from the second type, the allowable alphabets in a wrapper become more restrictive.",
        "The fifth type requires that an item must be tightly bracketed by two complete HTML tags in order to be extracted.",
        "All pure HTML-based wrappers are type 5, possibly with additional restrictions imposed (Nadeau et al., 2006; Etzioni et al., 2005).",
        "SEAL currently does not use an HTML parser (or any other kinds of parser), so restrictions cannot be easily imposed.",
        "As far as we know, there isn't an agreement on what restrictions make the most sense or work the best.",
        "Therefore, we evaluate performance for varying wrapper constraints from type 1 (most general) to type 5 (most strict) in our experiments.",
        "For set expansion, we use the same evaluation set as in (Wang and Cohen, 2007) which contains 36 manually constructed lists across three different languages: English, Chinese, and lapanese (12 lists per language).",
        "Each list contains all instances of a particular semantic class in a certain language, and each instance contains a set of synonyms (e.g., USA, America).",
        "Since the output of our system is a ranked list of extracted instances, we choose mean average precision (MAP) as our evaluation metric.",
        "MAP is commonly used in the field of Information Retrieval for evaluating ranked lists because it is sensitive to the entire ranking and it contains both recall and precision-oriented aspects.",
        "The MAP for multiple ranked lists is simply the mean value of average precisions calculated separately for each ranked list.",
        "We define the average precision of a single ranked list as:",
        "Prec(r) x isFresh(r)",
        "Total # of Correct Instances where L is a ranked list of extracted instances, r is the rank ranging from 1 to \\L\\, Prec(r) is the precision at rank r, or the percentage of correct synonyms above rank r (inclusively).",
        "isFresh(r) is a binary function for ensuring that, if a list contains multiple synonyms of the same instance (or instance pair), we do not evaluate that instance (or instance pair) more than once.",
        "More specifically, the function returns 1 if a) the synonym at r is correct, and b) it is the highest-ranked synonym of its instance in the list; it returns 0 otherwise.",
        "#",
        "L. Context [..",
        "] R. Context",
        "Eng",
        "Jap",
        "Chi",
        "Avg",
        "1",
        ".",
        "+ [..",
        "] • +",
        "87.6",
        "96.9",
        "95.4",
        "93.3",
        "2",
        ".",
        "*[<>] .",
        "*[..",
        "] .",
        "*[<>] .",
        "*",
        "85.7",
        "96.8",
        "90.7",
        "91.1",
        "3",
        ".",
        "*>[..",
        "] <.",
        "*",
        "85.7",
        "96.7",
        "90.7",
        "91.0",
        "4",
        ".*<.",
        "+ ?>.",
        "*[..",
        "] .*<.",
        "+ ?>.",
        "*",
        "80.1",
        "95.8",
        "83.7",
        "86.5",
        "5",
        ".*<.",
        "+ ?>[..",
        "] <.",
        "+ ?>.",
        "*",
        "79.6",
        "94.9",
        "82.4",
        "85.6",
        "We evaluate the performance of each type of wrapper by conducting set expansion on the 36 datasets across three languages.",
        "For each dafaset, we randomly select two seeds, expand them by bootstrapping ten iterations (where each iteration retrieves at most 200 web pages only), and evaluate the final result.",
        "We repeat this process three times for every dataset and report the average MAP for English, Japanese, and Chinese in Table 3.",
        "As illustrated, the more restrictive a wrapper is, the worse it performs.",
        "As a result, this indicates that further restrictions on wrappers of type 5 will not improve performance."
      ]
    },
    {
      "heading": "4. Set Expansion for Binary Relations",
      "text": [
        "We extend the wrapper construction algorithm described in Section 2.1 to support relational set expansion.",
        "The major difference is that we introduce a third type of context called the middle context that occurs between the left and right contexts of a wrapper for separating any two items.",
        "We execute the same algorithm as before, except that a seed instance in the algorithm is now a seed instance pair bracketing some middle context (i.e., \"sr middle S2\").",
        "Given some seed pairs (e.g., Ford and USA), the algorithm first locates the seeds in some given documents.",
        "For every pair of seeds located, it extracts their left, middle, and right contexts.",
        "The left and right contexts are inserted into their corresponding tries, while the middle context is inserted into a list.",
        "Every middle context is assigned a flag indicating whether the two instances bracketing it were found in the same or reversed order as the input seed pairs.",
        "Every entry in the seed instance list described previously now stores a pair of instances as one single string (e.g. \"Ford/USA\").",
        "An id stored in a node now matches the index of a pair of instances as well as a middle context.",
        "Shown below is a mock example document of which the seed pairs: Ford and USA, Nissan and Japan, Toyota and Japan are located (and boldfaced).",
        "GtpKxHnlsSaNoKpjaPaNxjHJgleTuoLpBlcLBxKH forDEF cuSAxkrpWNapnIkAAHOFoRdawHDaUSauoh deQ sKxHaCuRAoKp JapANx j Hdlj WnOxoTOyOTaVaq jApaNzxKHAUdlEFcgErmANyxkrOyQKxHToYotAoK p JApaNx j HCRdmt qOVKxH foRdoKpusAx jHaJASzEi n S f rlaFoRDLMmpuSao fwNLWxKHtOYotaEFc jAPan xkrHxQKzrHpoKdGEKtxKHNisSanEFcJApAnxkrEq",
        "After performing the abovementioned procedures on this mock document, we now have context tries that are much more complicated than those illustrated in Figure 1, as well as a list of middle contexts similar to the one shown below:",
        "where r indicates if the two instances bracketing the middle context were found in the reversed order as the input seed pairs.",
        "In order to find the maximally long contextual strings, the \"Intersect\" function in the set expansion pseudo-code presented in Table 2 needs to be replaced with the following:",
        "Integers Intersect(Node n\\, Node n2) Define S = m.indexes PI n-^.indexes Return the largest subset s of S such that:",
        "Every index e s corresponds to same middle context",
        "which returns those seed pairs that are bracketed by the strings associated with the two input nodes with the same middle context.",
        "A wrapper for relational set expansion, or relational wrapper, is defined by the left, middle, and right contextual strings.",
        "The relational wrappers constructed from the mock document given the example seed pairs are shown below.",
        "Notice that Audi/Germany and Acura/Japan are discovered.",
        "toy ota/japan Wrapper: KxH [ .",
        "1. ]",
        "oKp [.",
        "2 . ]",
        "xjH Content: acura/japan, ford/usa, nissan/japan, toy ota/japan",
        "id",
        "Seed Pairs",
        "r",
        "Middle Context",
        "0",
        "Nissan/Japan",
        "No",
        "oKp",
        "1",
        "Nissan/Japan",
        "No",
        "EFc",
        "2",
        "Nissan/Japan",
        "Yes",
        "xkrHxQKzrHpoKd...",
        "4",
        "Toyota/Japan",
        "No",
        "oKp",
        "6",
        "Toyota/Japan",
        "Yes",
        "xjHdljWnOxo",
        "9",
        "Ford/USA",
        "No",
        "EFc",
        "13",
        "Ford/USA",
        "Yes",
        "xkrpWNapnlkAAHO",
        "Table 5 : Performance of various types of wrappers on the five relational datasets after first iteration.",
        "Table 6: Performance of various types of wrappers on the five relational datasets after 10 iteration.",
        "For binary relations, we performed the same experiment as with unary relations described in Section 3.",
        "A relational wrapper is of type t if the wrapper's left and right context match i's constraint for left and right respectively, and also that the wrapper's middle context match both constraints.",
        "For choosing the evaluation datasets for relational set expansion, we surveyed and obtained a dozen relationships, from which we randomly selected five of them and present in Table 4.",
        "Each dataset was then manually constructed.",
        "For the last two datasets, since there are too many items, we tried our best to make the lists as exhaustive as possible.",
        "To evaluate relational wrappers, we performed relational set expansion on randomly selected seeds from the five relational datasets.",
        "For every dataset, we select two seeds randomly and bootstrap the relational set expansion ten times.",
        "The results after the first iteration are shown in Table 5 and after the tenth iteration in Table 6.",
        "When computing precision at 100 for each resulting list, we kept only the top-most-ranked synonym of every instance and remove all other synonyms from the list; this ensures that every instance is unique.",
        "Notice that for the \"Car Maker\" dataset, there exists no wrappers of types 2 to 5 ; thus resulting in zero performance for those wrapper types.",
        "In each fable, the results indicate that character-based wrappers perform the best, while those HTML-based wrappers that require tight HTML bracketing of items (type 3 and 5) perform the worse.",
        "In addition, the results illustrate that bootstrapping is effective for expanding relational pairs of items.",
        "As illustrated in Table 6, the result of finding translation pairs of NBA team names is perfect, and it is almost perfect for finding pairs of U.S. states/territories and governors, as well as Taiwanese cities and mayors.",
        "In finding pairs of acronyms and full names of federal agencies, the precision at top 100 is nearly perfect (97%).",
        "The results for finding pairs of car makers and countries is good as well, with a high precision of 90%.",
        "For the last two datasets, we believe that MAP could be improved by increasing the number of bootstrapping iterations.",
        "Table 7 shows some example wrappers constructed and instances extracted for wrappers of type 1.",
        "Dataset ID",
        "Item #1 vs.",
        "Item #2",
        "Lang.",
        "#1",
        "Lang.",
        "#2",
        "Size",
        "Complete?",
        "US Governor",
        "US State/Territory vs.",
        "Governor",
        "English",
        "English",
        "56",
        "Yes",
        "Taiwan Mayor",
        "Taiwanese City vs. Mayor",
        "Chinese",
        "Chinese",
        "26",
        "Yes",
        "NBA Team",
        "NBA Team vs. NBA Team",
        "Chinese",
        "English",
        "30",
        "Yes",
        "Fed.",
        "Agency",
        "US Federal Agency Acronym vs. Full Name",
        "English",
        "English",
        "387",
        "No",
        "Car Maker",
        "Car Manufacturer vs. Headquartered Country",
        "English",
        "English",
        "122",
        "No",
        "Mean Avg.",
        "Precision",
        "Precision® 100",
        "Datasets",
        "1",
        "2",
        "3",
        "4",
        "5",
        "1",
        "2",
        "3",
        "4",
        "5",
        "US Governor",
        "97.4",
        "89.3",
        "89.2",
        "89.3",
        "89.2",
        "55",
        "50",
        "51",
        "50",
        "50",
        "Taiwan Mayor",
        "99.8",
        "95.6",
        "94.3",
        "91.3",
        "90.8",
        "25",
        "25",
        "24",
        "23",
        "23",
        "NBA Team",
        "100.0",
        "99.9",
        "99.9",
        "99.9",
        "99.2",
        "30",
        "30",
        "30",
        "30",
        "30",
        "Fed.",
        "Agency",
        "43.7",
        "14.5",
        "5.2",
        "11.1",
        "5.2",
        "96",
        "55",
        "20",
        "40",
        "20",
        "Car Maker",
        "61.7",
        "0.0",
        "0.0",
        "0.0",
        "0.0",
        "74",
        "0",
        "0",
        "0",
        "0",
        "Average",
        "80.5",
        "59.9",
        "57.7",
        "58.3",
        "56.9",
        "56",
        "32",
        "25",
        "29",
        "25",
        "Mean Avg.",
        "Precision",
        "Precision® 100",
        "Datasets",
        "1",
        "2",
        "3",
        "4",
        "5",
        "1",
        "2",
        "3",
        "4",
        "5",
        "US Governor",
        "98.9",
        "97.0",
        "95.3",
        "94.1",
        "93.9",
        "55",
        "55",
        "54",
        "53",
        "53",
        "Taiwan Mayor",
        "99.8",
        "98.3",
        "96.9",
        "93.8",
        "94.3",
        "25",
        "25",
        "25",
        "24",
        "24",
        "NBA Team",
        "100.0",
        "100.0",
        "99.2",
        "98.4",
        "98.6",
        "30",
        "30",
        "30",
        "30",
        "30",
        "Fed.",
        "Agency",
        "65.5",
        "54.5",
        "27.9",
        "55.3",
        "30.0",
        "97",
        "97",
        "61",
        "95",
        "69",
        "Car Maker",
        "81.6",
        "0.0",
        "0.0",
        "0.0",
        "0.0",
        "90",
        "0",
        "0",
        "0",
        "0",
        "Average",
        "89.2",
        "70.0",
        "63.9",
        "68.3",
        "63.4",
        "59",
        "41",
        "34",
        "40",
        "35",
        "Seeds: £ ftjj / jf g» / BgBJj.",
        "Seeds: BLM^^I^ / phoenix suns, ^^JCS^S-fte / milwaukee bucks",
        "Content: j^rfteîiSl / denver nuggets, IMÈÏfLÏSSJSPS / Syracuse nations, 5SßM^C^Ä / atlanta hawks, f7fc±4jfl^Ctîf / houston rockets",
        "3SS^MIt± / Cleveland cavaliers, ËPH_?§|5tf S I indiana pacers, lL[Sb / charlotte bobcats, #fii# Sf I / toronto raptors",
        "JtIB#{lHÏT / orlando magjc, SpSfM3MI memphis grizzhes, ^BK8-aEhî / milwaukee bucks, jsM'^fSM I détroit pistons BflfË5?j8K3S / minnesota timberwolves, f^JPSISHrE / Sacramento kings, flJifliliSflf ^r/£ / boston Celtics W&WWSM / Portland trail blazers, iM^TI'RlB / La.",
        "chppers, ?M*1KSA / La.",
        "lakers, Hffeff ± / Utah jazz",
        "Seeds: kentucky / steve beshear, north dakota / john hoeven",
        "URL: http://wildfoia.pbworks.com/Alaska-Governor-Sarati-Palin",
        "URL: http://blogs.suntimes.com/sweet/2008/02/sweet_state_dinner_for_governo.html",
        "URL: http://en.wikipedia.org/wiki/United_States_Senate_elections,_2010",
        "Content: alabama / bob riley, alaska / sarah palin, arizona / janet napolitano, arkansas / mike huckabee, California / arnold Schwarzenegger, Colorado / bill ritter, Connecticut / mary jodi rell, delaware / ruth ann minner, florida / charlie crist, georgia / sonny perdue, hawaii / linda lingle, idaho / butch otter, Illinois / rod blagojevich...",
        "Seeds: cia / central intelligence agency, usps / united states postal service",
        "URL: http://wwwl .american.edu/dccampus/links/whitehouse.html",
        "URL: http://www.usembassy.at/en/us/gov.htm",
        "URL: http://www.nationmaster.com/encyclopedia/List-of-United-States-federal-agencies Wrapper: The [.2.]",
        "([.1.])",
        "is",
        "URL: http://www.nationmaster.com/encyclopedia/List-of-United-States-federal-agencies",
        "Content: achp / advisory council on historic preservation, arc / appalachian regional commission, cftc / commodity futures trading commission, cia / central intelligence agency, cms / centers for medicare and medicaid services, exim bank / export import bank of the united states, ntrc / national transportation research center...",
        "Seeds: mazda / japan, venturi / france",
        "URL: http://www.jrfllters.com/flltres/index.php?lng=en",
        "URL: http://www.jrfllters.com/suspensions/index.php?famille=l&lng=en",
        "URL: http://www.street-car.net/forums/forumdisplay.php?f=10",
        "Wrapper: \"><strong> [ .",
        "l. ] </strong></a> </div> <div clas s=\" smal if ont \" >Country of origin :[.",
        "2 .]",
        ".",
        "URL: http://www.allcarcentral.com/",
        "Content: abarth / italy, acura / japan, alfa romeo / italy, aston martin / england, auburn / usa, audi / germany, aus tin healey / england, austin / england, auto union / germany, balwin / usa, bandini / italy, bentley / england, bmw / germany, brabham / england, bricklin / usa, bristol / england, brm / england, bucciali / france..."
      ]
    },
    {
      "heading": "5. Related Work",
      "text": [
        "In recent years, many research has been done on extracting relations from free text (e.g., (Pan-tel and Pennacchiotti, 2006; Agichtein and Gra-vano, 2000; Snow et al., 2006)); however, almost all of them require some language-dependent parsers or taggers for English, which restrict the language of their extractions to English only (or languages that have these parsers).",
        "There has also been work done on extracting relations from HTML-structured fables (e.g., (Etzioni et al., 2005; Nadeau et al., 2006; Cafarella et al., 2008)); however, they all incorporated heuristics for exploiting HTML structures; thus, they cannot handle documents written in other mark-up languages.",
        "Extracting relations at character-level from semi-structured documents has been proposed (e.g., (Kushmerick et al., 1997),(Brin, 1998)).",
        "In particular, Brin's approach (DIPRE) is the most similar to ours in terms of expanding relational items.",
        "One difference is that it requires maximally-long contextual strings to bracket all seed occurrences.",
        "This technique has been experimentally illustrated to perform worse than SEAL'S approach on unary relations (Wang and Cohen, 2007).",
        "Brin presented five seed pairs of author names and book titles that he used in the experiment (unfortunately, he did not provide detailed results).",
        "We input the top two seed pairs listed in his paper into the relational SEAL, performed ten bootstrapping iterations (took about 3 minutes), and obtained 26,000 author name/book title pairs of which the precision at 100 is perfect (100%)."
      ]
    },
    {
      "heading": "6. Conclusions",
      "text": [
        "In this paper, we have described in detail an algorithm for constructing document-specific wrappers automatically for set expansion.",
        "In the experimental results, we have illustrated that character-based wrappers are better suited than HTML-based wrappers for the task of set expansion.",
        "We also presented a method that utilizes an additional middle context for constructing relational wrappers.",
        "We also showed that our relational set expansion approach is language-independent; it can be applied to non-English and even cross-lingual seeds and documents.",
        "Furthermore, we have illustrated that bootstrapping improves the performance of relational set expansion.",
        "In the future, we will explore automatic mining of binary concepts given only the relation (e.g., \"mayor of\")."
      ]
    },
    {
      "heading": "7. Acknowledgments",
      "text": [
        "This work was supported by the Google Research Awards program."
      ]
    }
  ]
}
