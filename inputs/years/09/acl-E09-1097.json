{
  "info": {
    "authors": [
      "Stephen Wan",
      "Mark Dras",
      "Robert Dale",
      "Cécile L. Paris"
    ],
    "book": "EACL",
    "id": "acl-E09-1097",
    "title": "Improving Grammaticality in Statistical Sentence Generation: Introducing a Dependency Spanning Tree Algorithm with an Argument Satisfaction Model",
    "url": "https://aclweb.org/anthology/E09-1097",
    "year": 2009
  },
  "references": [
    "acl-C00-1007",
    "acl-D07-1002",
    "acl-D08-1019",
    "acl-H05-1066",
    "acl-N07-1022",
    "acl-P02-1040",
    "acl-P04-1030",
    "acl-P05-1009",
    "acl-P05-1066",
    "acl-P05-1074",
    "acl-P06-1146",
    "acl-P07-1022",
    "acl-P07-1041",
    "acl-P07-1044",
    "acl-P96-1025",
    "acl-P99-1071",
    "acl-W00-1401",
    "acl-W04-3216",
    "acl-W07-2216",
    "acl-W98-1426"
  ],
  "sections": [
    {
      "text": [
        "Improving Grammaticality in Statistical Sentence Generation: Introducing a Dependency Spanning Tree Algorithm with an Argument",
        "Satisfaction Model",
        "Stephen Want* Mark Dras* Robert Dale*",
        "^Centre for Language Technology Department of Computing Macquarie University Sydney, NSW 2113",
        "swan,madras,rdale@ics.mq.edu.au",
        "Abstract-like text summarisation requires a means of producing novel summary sentences.",
        "In order to improve the grammaticality of the generated sentence, we model a global (sentence) level syntactic structure.",
        "We couch statistical sentence generation as a spanning tree problem in order to search for the best dependency tree spanning a set of chosen words.",
        "We also introduce a new search algorithm for this task that models argument satisfaction to improve the linguistic validity of the generated tree.",
        "We treat the allocation of modifiers to heads as a weighted bipartite graph matching (or assignment) problem, a well studied problem in graph theory.",
        "Using BLEU to measure performance on a string regeneration task, we found an improvement, illustrating the benefit of the spanning tree approach armed with an argument satisfaction model."
      ]
    },
    {
      "heading": "1. Introduction",
      "text": [
        "Research in statistical novel sentence generation has the potential to extend the current capabilities of automatic text summarisation technology, moving from sentence extraction to abstract-like summarisation.",
        "In this paper, we describe a new algorithm that improves upon the grammaticality of statistically generated sentences, evaluated on a string regeneration task, which was first proposed as a surrogate for a grammaticality test by Bangalore et al.",
        "(2000).",
        "In this task, a system must regenerate the original sentence which has had its word order scrambled.",
        "As an evaluation task, string regeneration reflects the issues that challenge the sentence generation components of machine translation, paraphrase generation, and summarisation systems",
        "Cecile Paris*",
        "*ICT Centre CSIRO Sydney, Australia (Soricut and Marcu, 2005).",
        "Our research in summarisation utilises the statistical generation algorithms described in this paper to generate novel summary sentences.",
        "The goal of the string regeneration task is to recover a sentence once its words have been randomly ordered.",
        "Similarly, for a text-to-text generation scenario, the goal is to generate a sentence given an unordered list of words, typically using an n-gram language model to select the best word ordering.",
        "V-gram language models appear to do well at a local level when examining word sequences smaller than n. However, beyond this window size, the sequence is often ungrammatical.",
        "This is not surprising as these methods are unable to model grammaticality at the sentence level, unless the size of n is sufficiently large.",
        "In practice, the lack of sufficient training data means that n is often smaller than the average sentence length.",
        "Even if data exists, increasing the size of n corresponds to a higher degree polynomial complexity search for the best word sequence.",
        "In response, we introduce an algorithm for searching for the best word sequence in a way that attempts to model grammaticality at the sentence level.",
        "Mirroring the use of spanning tree algorithms in parsing (McDonald et al., 2005), we present an approach to statistical sentence generation.",
        "Given a set of scrambled words, the approach searches for the most probable dependency tree, as defined by some corpus, such that it contains each word of the input set.",
        "The tree is then traversed to obtain the final word ordering.",
        "In particular, we present two spanning tree algorithms.",
        "We first adapt the Chu-Liu-Edmonds (CLE) algorithm (see Chu and Liu (1965) and Edmonds (1967)), used in McDonald et al.",
        "(2005), to include a basic argument model, added to keep track of linear precedence between heads and modifiers.",
        "While our adapted version of the CLE algorithm finds an optimal spanning tree, this does not always correspond with a linguistically valid dependency tree, primarily because it does not attempt to ensure that words in the tree have plausible numbers of arguments.",
        "We propose an alternative dependency-spanning tree algorithm which uses a more fine-grained argument model representing argument positions.",
        "To find the best modifiers for argument positions, we treat the attachment of edges to the spanning tree as a weighted bipartite graph matching problem (or the assignment problem), a standard problem in graph theory.",
        "The remainder of this paper is as follows.",
        "Section 2 outlines the graph representation of the spanning tree problem.",
        "We describe a standard spanning tree algorithm in Section 3.",
        "Section 4 defines a finer-grained argument model and presents a new dependency spanning tree search algorithm.",
        "We experiment to determine whether a global dependency structure, as found by our algorithm, improves performance on the string regeneration problem, presenting results in Section 5.",
        "Related work is presented in Section 6.",
        "Section 7 concludes that an argument model improves the linguistic plausibility of the generated trees, thus improving grammaticality in text generation."
      ]
    },
    {
      "heading": "2. A Graph Representation of Dependencies",
      "text": [
        "In couching statistical generation as a spanning tree problem, this work is the generation analog of the parsing work by McDonald et al.",
        "(2005).",
        "Given a bag of words with no additional constraints, the aim is to produce a dependency tree containing the given words.",
        "Informally, as all dependency relations between each pair of words are possible, the set of all possible dependencies can be represented as a graph, as noted by McDonald et al.",
        "(2005).",
        "Our goal is to find the subset of these edges corresponding to a tree with maximum probability such that each vertex in the graph is visited once, thus including each word once.",
        "The resulting tree is a spanning tree, an acyclic graph which spans all vertices.",
        "The best tree is the one with an optimal overall score.",
        "We use negative log probabilities so that edge weights will correspond to costs.",
        "The overall score is the sum of the costs of the edges in the spanning tree, which we want to minimise.",
        "Hence, our problem is the minimum spanning tree (MST) problem.",
        "We define a directed graph (digraph) in a standard way, G = (V, E) where V is a set of vertices and E C {(u,v)\\u,v € V} is a set of directed edges.",
        "For each sentence w = w\\... wn, we define the digraph Gw = (Vw ,Ew) where Vw = {w0, w\\,..., wn}, with wo a dummy root vertex, and Ew = {(u,v)\\u € Vw ,v € Vw \\ {wo}}.",
        "The graph is fully connected (except for the root vertex wo which is only fully connected outwards) and is a representation of possible dependencies.",
        "For an edge (u, v), we refer to u as the head and v as the modifier.",
        "We extend the original formulation of McDonald et al.",
        "(2005) by adding a notion of argument positions for a word, providing points to attach modifiers.",
        "Adopting an approach similar to Johnson (2007), we look at the direction (left or right) of the head with respect to the modifier; we consequently define a set D = {l,r} to represent this.",
        "Set D represents the linear precedence of the words in the dependency relation; consequently, it partially approximates the distinction between syntactic roles like subject and object.",
        "Each edge has a pair of associated weights, one for each direction, defined by the function s : E xD^ R, based on a probabilistic model of dependency relations.",
        "To calculate the edge weights, we adapt the definition of Collins (1996) to use direction rather than relation type (represented in the original as triples of non-terminals).",
        "Given a corpus, for some edge e = (u,v) € E and direction d € D, we calculate the edge weight as:",
        "We define the set of part-of-speech (PoS) tags P and a function pos : V -^V, which maps vertices (representing words) to their PoS, to calculate the probability of a dependency relation, defined as:",
        "probdep(u,v,d) where cnt((u, pos(u)), (v, pos(v)), d) is the number of times where (v, pos(v)) and (u, pos(u)) are seen in a sentence in the training data, and (v,pos(v)) modifies (u,pos(u)) in direction d. The function co-occurs((u, pos(u)), (v, pos(v))) returns the number of times that (v, pos(v)) and ( u, pos( u)) are seen in a sentence in the training data.",
        "We adopt the same smoothing strategy as Collins (1996), which backs off to PoS for unseen dependency events."
      ]
    },
    {
      "heading": "3. Generation via Spanning Trees",
      "text": [
        "Given the graph Gw = (Vw, Ew), the Chu-Liu Edmonds (CLE) algorithm finds a rooted directed spanning tree, specified by Tw, which is an acyclic set of edges in Ew minimising ^eeTw deV s(e, d).",
        "The algorithm is presented as Algorithm 1.",
        "There are two stages to the algorithm.",
        "The first stage finds the best edge for each vertex, connecting it to another vertex.",
        "To do so, all outgoing edges of v, that is edges where v is a modifier, are considered, and the one with the best edge weight is chosen, where best is defined as the smallest cost.",
        "This minimisation step is used to ensure that each modifier has only one head.",
        "If the chosen edges Tw produce a strongly connected subgraph = (Vw,Tw), then this is the MST.",
        "If not, a cycle amongst some subset of Vw must be handled in the second stage.",
        "Essentially, one edge in the cycle is removed to produce a subtree.",
        "This is done by finding the best edge to join some vertex in the cycle to the main tree.",
        "This has the effect of finding an alternative head for some word in the cycle.",
        "The edge to the original head is discarded (to maintain one head per modifier), turning the cycle into a subtree.",
        "When all cycles have been handled, applying a greedy edge selection once more will then yield the MST.",
        "Once the tree has been generated, all that remains is to obtain an ordering of words based upon it.",
        "Because dependency relations in the tree are either of leftward or rightward direction, it becomes relatively trivial to order child vertices with respect to a parent vertex.",
        "The only difficulty lies in finding a relative ordering for the leftward (to the parent) children, and similarly for the rightward (to the parent) children.",
        "We traverse using a greedy algorithm to order the siblings using an n-gram language model.",
        "Algorithm 2 describes the traversal in pseudocode.",
        "The generated sentence is obtained by calling the algorithm with wo and Tw as parameters.",
        "The algorithm operates recursively if called on an",
        "http://www.ce.rit.edu/~sjyeec/dmst.html .",
        "The difference concerns the direction of the edge and the edge weight function.",
        "We have also folded the function 'contract' in McDonald et al.",
        "(2005) into the main algorithm.",
        "Again following that work, we treat the function s as a data structure permitting storage ofupdated edge weights.",
        "/* initialisation */",
        "1 Discard the edges exiting the wo if any.",
        "/* Chu-Liu/Edmonds Algorithm */"
      ]
    },
    {
      "heading": "2. begin",
      "text": [
        "if Mw = (Vw , Tw ) has no cycles then return Mwforall C C Tw : C is a cycle in Mw do forall c = (vh, vm, ) G C and dc G D do forall e = (vi,vm) G E and d G D do",
        "Algorithm 1: The pseudo-code for the Chu-Liu Edmonds algorithm with our adaptation to include linear precedence.",
        "inner node.",
        "If a vertex v is a leaf in the dependency tree, its string realisation realise(v) is returned.",
        "We keep track of ordered siblings with two lists, one for each direction.",
        "If the sibling set is leftwards, the ordered list, R, is initialised to be the singleton set containing a dummy start token with an empty realisation.",
        "If the sibling set is rightwards then the ordered list, Rr is initialised to be the realisation of the parent.",
        "For some sibling set C C Vw to be ordered, the algorithm chooses the next vertex, v € C , to insert into the appropriate ordered list, Rx,x € D, by maximising the probability of the string of words that would result if the realisation, realise(v), were concatenated with Rx.",
        "The probability of the concatenation is calculated based on a window of words around the join.",
        "This window length is defined to be 2 x floor(n/2), for some n, in this case, 4.",
        "If the siblings are leftwards, the window consists of the last min(n – 1, \\Ri\\) previously chosen words concatenated with the first min(n",
        "1, \\realise(v)\\).",
        "If the siblings are rightwards, the window consists of the last min(n – 1, \\realise(v)\\) previously chosen words concatenated with the first min(n – 1, \\ Rr\\).",
        "The probability of a window of words, w0 .. .wj, of length j + 1 is defined by the following equation:",
        "/* LMO Algorithm */ input : v, Tw where v G Vwoutput: R C Vw1 begin",
        "if isLeaf(v) then",
        "C; – getLeftChildren(v,Tw) Cr – getRightChildren(v, Tw ) R; – {start} Rr - – {realise(v)} while C; = {} do c – – arg max probngram (LMO(c, Tw) U R;) while Cr = {} do c – – arg max probngram (Rr U LMO(c, Tw ))",
        "Rr – Rr U realise(c, Tw) Cr – Cr \\ {c}",
        "return R; U Rrend",
        "Algorithm 2: The Language Model Ordering algorithm for linearising an Tw.",
        "where probMLE (wi+k W ... Wi+k-i) is the maximum likelihood estimate n-gram probability.",
        "We refer to this tree linearisation method as the Language Model Ordering (LMO)."
      ]
    },
    {
      "heading": "4. Using an Argument Satisfaction Model",
      "text": [
        "One limitation of using the CLE algorithm for generation is that the resulting tree, though maximal in probability, may not conform to basic linguistic properties of a dependency tree.",
        "In particular, it may not have the correct number of arguments for each head word.",
        "That is, a word may have too few or too many modifiers.",
        "To address this problem, we can take into account the argument position when assigning a weight to an edge.",
        "When attaching an edge connecting a modifier to a head to the spanning tree, we count how many modifiers the head already has.",
        "An edge is penalised if it is improbable that the head takes on yet another modifier, say in the example of an attachment to a preposition whose argument position has already been filled.",
        "However, accounting for argument positions makes an edge weight dynamic and dependent on surrounding tree context.",
        "This makes the search for an optimal tree an NP-hard problem (McDonald and Satta, 2007) as all possible trees must be considered to find an optimal solution.",
        "Consequently, we must choose a heuristic search algorithm for finding the locally optimum spanning tree.",
        "By representing argument positions that can be filled only once, we allow modifiers to compete for argument positions and vice versa.",
        "The CLE algorithm only considers this competition in one direction.",
        "In line 3 of Algorithm 1, only heads compete for modifiers, and thus the solution will be sub-optimal.",
        "In Wan et al.",
        "(2007), we showed that introducing a model of argument positions into a greedy spanning tree algorithm had little effect on performance.",
        "Thus, to consider both directions of competition, we design a new algorithm for constructing (dependency) spanning trees that casts edge selection as a weighted bipartite graph matching (or assignment) problem.",
        "This problem is to find a weighted alignments between objects of two distinct sets, where an object from one set is uniquely aligned to some object in the other set.",
        "The optimal alignment is one where the sum of alignment costs is minimal.",
        "The graph of all possible assignments is a weighted bipartite graph.",
        "Here, to discuss bipartite graphs, we will extend our notation in a fairly standard way, to write Gp = (U, V, Ep), where U, V are the disjoint sets of vertices and Ep the set of edges.",
        "In our paper, we treat the assignment between attachment positions and words as an assignment problem.",
        "The standard polynomial-time solution to the assignment problem is the Kuhn-Munkres (or Hungarian) algorithm (Kuhn, 1955).",
        "Our alternative dependency-spanning tree algorithm, presented as Algorithm 3, incrementally adds vertices to a growing spanning tree.",
        "At each iteration, the Kuhn-Munkres method assigns words that are as yet unattached to argument positions already available in the tree.",
        "We focus on the bipartite graph in Section 4.3.",
        "Let the sentence w have the dependency graph Gw = (Vw, Ew).",
        "At some arbitrary iteration of the algorithm (see Figure 1), we have the following:",
        "• Tw C Ew, the set of edges in the spanning tree constructed so far;",
        "/* initialisation */",
        "Partially determined spanning tree:",
        "cups for coffee everyone yesterday",
        "/* The Assignment-based Algorithm */"
      ]
    },
    {
      "heading": "6. begin",
      "text": [
        "11 if u G Hw then",
        "Algorithm 3: The Assignment-based Dependency Tree Building algorithm.",
        "Figure 1: A snapshot of the generation process.",
        "Each word in the tree has argument positions to which we can assign remaining words.",
        "Padding Mw with e is described in Section 4.3.",
        "• Hw = {u,v \\ (u,v) € Tw}, the set of vertices in Tw, or 'attached vertices', and therefore potential heads; and",
        "• Mw = Vw\\Hw, the set of 'unattached vertices', and therefore potential modifiers.",
        "For the potential heads, we want to define the set of possible attachment positions available in the spanning tree where the potential modifiers can attach.",
        "To talk about these attachment positions, we define the set of labels L = {(d,j)\\d € D,j € N}, an element (d,j) representing an attachment point in direction d, position j.",
        "Valid attachment positions must be in sequential order and not missing any intermediate positions (e.g. if position 2 on the right is specified, position 1 must be also): so we define for some i € N, 0 < i < N, a set Ai C L such that if the label (d, j) € Ai then the label (d, k) € Ai for 0 < k < j.",
        "Collecting these, we define A = {Ai \\ 0 < i < N}.",
        "To map a potential head onto the set of attachment positions, we define a function q : Hw – A.",
        "So, given some v € Hw, q(v) = Ai for some 0 < i < N .In talking about an individual attachment point (d, j) € q(v) for potential head v, we use the notation vdj.",
        "For example, when referring to the second argument position on the right with respect to v, we use vr2.",
        "For the implementation of the algorithm, we have defined q, to specify attachment points, as follows, given some v e H«:",
        "{vrl} if v = w0, the root { vil } if pos(v) is a preposition L if pos(v) is a verb { vij | j e N} otherwise",
        "Defining q allows one to optionally incorporate linguistic information if desired.",
        "We define the function next : q(v) – A,v € Hw that returns the position (d, j) with the smallest value of j for direction d. Finally, we write the set of available attachment positions in the spanning tree as U Ç {(v, l) \\ v € Hw, l € q(v)}.",
        "To construct the bipartite graph used for the assignment problem at line 9 of Algorithm 3, given our original dependency graph Gw = (Vw ,Ew), and the variables defined from it above in Section 4.2, we do the following.",
        "The first set of vertices, of possible heads and their attachment points, is the set Uw.",
        "The second set of vertices is the set of possible modifiers augmented by dummy vertices ei (indicating no modification) such that this set is at least as large as Uw : MW = MwU{eo,.. .,emax(o,\\uw\\-\\Mw|)}.",
        "Thebipartite graph is then GXu = (Uw, M(w, Efw), where Ew = {(u,v) \\ u € Uw,v € Mw}.",
        "The weights on the edges of this graph incorporate a model of argument counts.",
        "The weight function is of the form sap : Ep – R. We consider some e € Ew: e = (v',v) for some v' € Uw,v € Mw; and v = (u, (d,j)) for some u € Vw,d €D,j € N. s(u, Mw) is defined to return the maximum cost so that the dummy leaves are only attached as a last resort.",
        "We then define:",
        " – log(probdep(u,v,d) where probdep(u, v,d) is as in equation 2, using the original dependency graph defined in Section 2; and probarg(u, d, j), an estimate of the probability that a word u with i arguments assigned already can take on more arguments, is defined as:",
        "probarg(u, d, j) where cntarg(u, d, i) is the number oftimes word u has been seen with i arguments in direction d; and cnt(u,d) = ^ieN cntarg(u,d,i).",
        "As the probability ofargument positions beyond a certain value for i in a given direction will be extremely small, we approximate this sum by calculating the probability density up to a fixed maximum, in this case 7 argument positions, and assume zero probability beyond that."
      ]
    },
    {
      "heading": "5. Evaluation",
      "text": [
        "The best-performing word ordering algorithm is one that makes fewest grammatical errors.",
        "As a surrogate measurement of grammaticality, we use the string regeneration task.",
        "Beginning with a human-authored sentence with its word order randomised, the goal is to regenerate the original sentence.",
        "Success is indicated by the proportion of the original sentence regenerated, as measured by any string comparison method: in our case, using the BLEU metric (Papineni et al., 2002).",
        "One benefit to this evaluation is that content selection, as a factor, is held constant.",
        "Specifically, the probability of word selection is uniform for all words.",
        "The string comparison task and its associated metrics like BLEU are not perfect.",
        "The evaluation can be seen as being overly strict.",
        "It assumes that the only grammatical order is that of the original human authored sentence, referred to as the 'gold standard' sentence.",
        "Should an approach chance upon an alternative grammatical ordering, it would penalised.",
        "However, all algorithms and baselines compared would suffer equally in this respect, and so this will be less problematic when averaging across multiple test cases.",
        "The Penn Treebank corpus (PTB) was used to provide a model of dependency relations and argument counts.",
        "It contains about 3 million words of text from the Wall Street Journal (WSJ) with human annotations of syntactic structures.",
        "Dependency events were sourced from the events file of the Collins parser package, which contains the dependency events found in training sections 2-22 of the corpus.",
        "Development was done on section 00 and testing was performed on section 23.",
        "A 4-gram language model (LM) was also obtained from the PTB training data, referred to as PTB-LM.",
        "Additionally, a 4-gram language model was obtained from a subsection of the BLLIP'99 Corpus (LDC number: LDC2000T43) containing three years of WSJ data from 1987 to 1989 (Char-niak et al., 1999).",
        "As in Collins et al.",
        "(2004), the 1987 portion of the BLLIP corpus containing 20 million words was also used to create a language model, referred to here as BLLIP-LM.",
        "N-gram models were smoothed using Katz's method, backing off to smaller values of n.",
        "For this evaluation, tokenisation was based on that provided by the PTB data set.",
        "This data set also delimits base noun phrases (noun phrases without nested constituents).",
        "Base noun phrases were treated as single tokens, and the rightmost word assumed to be the head.",
        "For the algorithms tested, the input set for any test case consisted of the single tokens identified by the PTB tokenisa-tion.",
        "Additionally, the heads of base noun phrases were included in this input set.",
        "That is, we do not regenerate the base noun phrases.",
        "We compare the baselines against the Chu-Liu Edmonds (CLE) algorithm to see if spanning tree algorithms do indeed improve upon conventional language modelling.",
        "We also compare the Assignment-based (AB) algorithm against the baselines and CLE to see if, additionally, modelling argument assignments improves the resulting tree and thus the generated word sequence.",
        "Two baseline generators based on n-gram language-models were used, representing approaches that optimise word sequences based on the local context of the n-grams.",
        "The first baseline reuses the LMO greedy sequence algorithm on the same set of input words presented to the CLE and AB algorithms.",
        "We apply LMO in a rightward manner beginning with a start-of-sentence token.",
        "Note that this baseline generator, like the two spanning tree algorithms, will score favourably using BLEU since, minimally, the word order of the base noun phrases will be correct when each is reinserted.",
        "Since the LMO baseline reduces to bigram generation when concatenating single words, we test a second language model baseline which always uses a 4-gram window size.",
        "A Viterbi-like generator with a 4-gram model and a beam of 100 is used to generate a sequence.",
        "For this baseline, referred to as the Viterbi baseline, base noun phrases were separated into their constituent words and included in the input word set.",
        "The results are presented in Table 2.",
        "Significance was measured using the sign test and the sampling method outlined in (Collins et al., 2005).",
        "We will examine the results in the PTB-LM column first.",
        "The gain of 10 BLEU points by the LMO baseline over the Viterbi baseline shows the performance improvement that can be gained when reinserting the base noun phrases.",
        "AB: the dow at this point was down about 35 points CLE: was down about this point 35 points the dow at LMO: was this point about at down the down 35 points Viterbi: the down 35 points at was about this point down Original: at this point, the dow was down about 35 points",
        "BLLIP-LM.",
        "The CLE algorithm significantly outperformed the LMO baseline by 2 BLEU points, from which we conclude that incorporating a model for global syntactic structure and treating the search for a dependency tree as a spanning problem helps for novel sentence generation.",
        "However, the real improvement can be seen in the performance of the AB system which significantly outperforms all other methods, beating the CLE algorithm by 7 BLEU points, illustrating the benefits of a model for argument counts and of couching tree building as an iterative set of argument assignments.",
        "One might reasonably ask if more n-gram data would narrow the gap between the tree algorithms and the baselines, which encode global and local information respectively.",
        "Examining results in the BLLIP-LM column, all approaches improve with the better language model.",
        "Unsurprisingly, the improvements are most evident in the baselines which rely heavily on the language model.",
        "The margin narrows between the CLE algorithm and the LMO baseline.",
        "However, the AB algorithm still outperforms all other approaches by 7 BLEU points, highlighting the benefit in modelling dependency relations.",
        "Even with a language model that is one order of magnitude larger than the PTB-LM, the AB still maintains a sizeable lead in performance.",
        "Figure 3 presents sample generated strings."
      ]
    },
    {
      "heading": "6. Related Work",
      "text": [
        "The work in this paper is similar to research in statistical surface realisation (for example, Langk-ilde and Knight (1998); Bangalore and Rambow with a semantic representation for which a specific rendering, an ordering of words, must be determined, often using language models to govern tree traversal.",
        "The task in this paper is different as it is a text-to-text scenario and does not begin with a representation of semantics.",
        "Algorithms",
        "PTB-LM",
        "BLLIP-LM",
        "Viterbi baseline",
        "14.9",
        "18.0",
        "LMO baseline",
        "24.3",
        "26.0",
        "CLE",
        "26.4",
        "26.8",
        "AB",
        "33.6",
        "33.7",
        "The dependency model and the LMO linearisation algorithm are based heavily on word order statistics.",
        "As such, the utility of this approach is limited to human languages with minimal use of inflections, such as English.",
        "Approaches for other language types, for example German, have been explored (Filippova and Strube, 2007).",
        "As a text-to-text approach, our work is more similar to work on Information Fusion (Barzilay et al., 1999), a sub-problem in multi-document summarisation.",
        "In this work, sentences presenting the same information, for example multiple news articles describing the same event, are merged to form a single summary by aligning repeated words and phrases across sentences.",
        "Other text-to-text approaches for generating novel sentences also aim to recycle sentence fragments where possible, as we do.",
        "Work on phrase-based statistical machine translation has been applied to paraphrase generation (Bannard and Callison-Burch, 2005) and multi-sentence alignment in summarisation (Daumé III and Marcu, 2004) .",
        "These approaches typically use n-gram models to find the best word sequence.",
        "The WIDL formalism (Soricut and Marcu, 2005) was proposed to efficiently encode constraints that restricted possible word sequences, for example dependency information.",
        "Though similar, our work here does not explicitly represent the word lattice.",
        "For these text-to-text systems, the order of elements in the generated sentence is heavily based on the original order of words and phrases in the input sentences from which lattices are built.",
        "Our approach has the benefit of considering all possible orderings of words, corresponding to a wider range of paraphrases, provided with a suitable dependency model is available.",
        "This paper presents work closely related to parsing work by McDonald et al.",
        "(2005) which searches for the best parse tree.",
        "Our work can be thought of as generating projective dependency trees (that is, without crossing dependencies).",
        "The key difference between parsing and generation is that, in parsing, the word order is fixed, whereas for generation, this must be determined.",
        "In this paper, we search across all possible tree structures whilst searching for the best word ordering.",
        "As a result, an argument model is needed to identify linguistically plausible spanning trees.",
        "We treated the alignment of modifiers to head words as a bipartite graph matching problem.",
        "This is similar to work in semantic role labelling by Padó and Lapata (2006).",
        "The alignment of answers to question types as a semantic role labelling task using similar methods was explored by Shen and Lapata (2007).",
        "Our work is also strongly related to that of Wong and Mooney (2007) which constructs symbolic semantic structures via an assignment process in order to provide surface realisers with input.",
        "Our approach differs in that we do not begin with a fixed set of semantic labels.",
        "Additionally, our end goal is a dependency tree that encodes word precedence order, bypassing the surface realisation stage."
      ]
    },
    {
      "heading": "7. Conclusions",
      "text": [
        "In this paper, we presented a new use of spanning tree algorithms for generating sentences from an input set of words, a task common to many text-to-text scenarios.",
        "The algorithm finds the best dependency trees in order to ensure that the resulting string has grammaticality modelled at a global (sentence) level.",
        "Our algorithm incorporates a model of argument satisfaction which is treated as an assignment problem, using the Kuhn-Munkres assignment algorithm.",
        "We found a significant improvement using BLEU to measure improvements on the string regeneration task.",
        "We conclude that our new algorithm based on the assignment problem and an argument model finds trees that are linguistically more plausible, thereby improving the grammaticality of the generated word sequence."
      ]
    }
  ]
}
