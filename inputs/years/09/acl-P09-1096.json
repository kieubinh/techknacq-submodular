{
  "info": {
    "authors": [
      "Govind Kothari",
      "Sumit Negi",
      "Tanveer A. Faruquie",
      "Venkatesan T. Chakaravarthy",
      "L. Venkata Subramaniam"
    ],
    "book": "ACL-IJCNLP",
    "id": "acl-P09-1096",
    "title": "SMS based Interface for FAQ Retrieval",
    "url": "https://aclweb.org/anthology/P09-1096",
    "year": 2009
  },
  "references": [
    "acl-C08-1056",
    "acl-J99-1003",
    "acl-P06-2005"
  ],
  "sections": [
    {
      "text": [
        "Govind Kothari Sumit Negi Tanveer A. Faruquie",
        "IBM India Research Lab IBM India Research Lab IBM India Research Lab",
        "IBM India Research Lab",
        "Short Messaging Service (SMS) is popularly used to provide information access to people on the move.",
        "This has resulted in the growth of SMS based Question Answering (QA) services.",
        "However automatically handling SMS questions poses significant challenges due to the inherent noise in SMS questions.",
        "In this work we present an automatic FAQ-based question answering system for SMS users.",
        "We handle the noise in a SMS query by formulating the query similarity over FAQ questions as a combinatorial search problem.",
        "The search space consists of combinations of all possible dictionary variations of tokens in the noisy query.",
        "We present an efficient search algorithm that does not require any training data or SMS normalization and can handle semantic variations in question formulation.",
        "We demonstrate the effectiveness of our approach on two reallife datasets."
      ]
    },
    {
      "heading": "1. Introduction",
      "text": [
        "The number of mobile users is growing at an amazing rate.",
        "In India alone a few million subscribers are added each month with the total subscriber base now crossing 370 million.",
        "The anytime anywhere access provided by mobile networks and portability of handsets coupled with the strong human urge to quickly find answers has fueled the growth of information based services on mobile devices.",
        "These services can be simple advertisements, polls, alerts or complex applications such as browsing, search and e-commerce.",
        "The latest mobile devices come equipped with high resolution screen space, inbuilt web browsers and full message keypads, however a majority of the users still use cheaper models that have limited screen space and basic keypad.",
        "On such devices,",
        "SMS is the only mode of text communication.",
        "This has encouraged service providers to build information based services around SMS technology.",
        "Today, a majority of SMS based information services require users to type specific codes to retrieve information.",
        "For example to get a duplicate bill for a specific month, say June, the user has to type DUPBILLJUN.",
        "This unnecessarily constraints users who generally find it easy and intuitive to type in a \"texting\" language.",
        "Some businesses have recently allowed users to formulate queries in natural language using SMS.",
        "For example, many contact centers now allow customers to \"text\" their complaints and requests for information over SMS.",
        "This mode of communication not only makes economic sense but also saves the customer from the hassle of waiting in a call queue.",
        "Most of these contact center based services and other regular services like \"AQA 63336\" by Issuebits Ltd, GTIP by AlienPant Ltd., \"Tex-perts\" by Number UK Ltd. and \"ChaCha\" use human agents to understand the SMS text and respond to these SMS queries.",
        "The nature of tex-ting language, which often as a rule rather than exception, has misspellings, non-standard abbreviations, transliterations, phonetic substitutions and omissions, makes it difficult to build automated question answering systems around SMS technology.",
        "This is true even for questions whose answers are well documented like a FAQ database.",
        "Unlike other automatic question answering systems that focus on generating or searching answers, in a FAQ database the question and answers are already provided by an expert.",
        "The task is then to identify the best matching question-answer pair for a given query.",
        "In this paper we present a FAQ-based question answering system over a SMS interface.",
        "Our system allows the user to enter a question in the SMS texting language.",
        "Such questions are noisy and contain spelling mistakes, abbreviations, deletions, phonetic spellings, transliterations etc.",
        "Since mobile handsets have limited screen space, it necessitates that the system have high accuracy.",
        "We handle the noise in a SMS query by formulating the query similarity over FAQ questions as a combinatorial search problem.",
        "The search space consists of combinations of all possible dictionary variations of tokens in the noisy query.",
        "The quality of the solution, i.e. the retrieved questions is formalized using a scoring function.",
        "Unlike other SMS processing systems our model does not require training data or human intervention.",
        "Our system handles not only the noisy variations of SMS query tokens but also semantic variations.",
        "We demonstrate the effectiveness of our system on real-world data sets.",
        "The rest of the paper is organized as follows.",
        "Section 2 describes the relevant prior work in this area and talks about our specific contributions.",
        "In Section 3 we give the problem formulation.",
        "Section 4 describes the Pruning Algorithm which finds the best matching question for a given SMS query.",
        "Section 5 provides system implementation details.",
        "Section 6 provides details about our experiments.",
        "Finally we conclude in Section 7."
      ]
    },
    {
      "heading": "2. Prior Work",
      "text": [
        "There has been growing interest in providing access to applications, traditionally available on Internet, on mobile devices using SMS.",
        "Examples include Search (Schusteritsch et al., 2005), access to Yellow Page services (Kopparapu et al., 2007), Email , Blog , FAQ retrieval etc.",
        "As highlighted earlier, these SMS-based FAQ retrieval services use human experts to answer questions.",
        "There are other research and commercial systems which have been developed for general question and answering.",
        "These systems generally adopt one of the following three approaches: Human intervention based, Information Retrieval based, or Natural language processing based.",
        "Human intervention based systems exploit human communities to answer questions.",
        "These systems are interesting because they suggest similar questions resolved in the past.",
        "Other systems like Chacha and Askme use qualified human experts to answer questions in a timely manner.",
        "The information retrieval based system treat question answering as an information retrieval problem.",
        "They search large corpus of text for specific text, phrases or paragraphs relevant to a given question (Voorhees, 1999).",
        "In FAQ based question answering, where FAQ provide a ready made database of question-answer, the main task is to find the closest matching question to retrieve the relevant answer (Sneiders, 1999) (Song et al., 2007).",
        "The natural language processing based system tries to fully parse a question to discover semantic structure and then apply logic to formulate the answer (Molla et al., 2003).",
        "In another approach the questions are converted into a template representation which is then used to extract answers from some structured representation (Sneiders, 2002) (Katz et al., 2002).",
        "Except for human intervention based QA systems most of the other QA systems work in restricted domains and employ techniques such as named entity recognition, co-reference resolution, logic form transformation etc which require the question to be represented in linguistically correct format.",
        "These methods do not work for SMS based FAQ answering because of the high level of noise present in SMS text.",
        "There exists some work to remove noise from (Aw et al., 2006) (Kobus et al., 2008).",
        "However, all of these techniques require aligned corpus of SMS and conventional language for training.",
        "Building this aligned corpus is a difficult task and requires considerable human effort.",
        "(Acharya et al., 2008) propose an unsupervised technique that maps non-standard words to their corresponding conventional frequent form.",
        "Their method can identify non-standard transliteration of a given token only if the context surrounding that token is frequent in the corpus.",
        "This might not be true in all domains.",
        "To the best of our knowledge we are the first to handle issues relating to SMS based automatic question-answering.",
        "We address the challenges in building a FAQ-based question answering system over a SMS interface.",
        "Our method is unsupervised and does not require aligned corpus or explicit SMS normalization to handle noise.",
        "We propose an efficient algorithm that handles noisy lexical and semantic variations."
      ]
    },
    {
      "heading": "3. Problem Formulation",
      "text": [
        "We view the input SMS S as a sequence of tokens S = si, s2,..., sn.",
        "Let Q denote the set of questions in the FAQ corpus.",
        "Each question Q e Q is also viewed as a sequence of terms.",
        "Our goal is to find the question Q* from the corpus Q that best matches the SMS S. As mentioned in the introduction, the SMS string is bound to have misspellings and other distortions, which needs to be taken care of while performing the match.",
        "In the preprocessing stage, we develop a Domain dictionary D consisting of all the terms that appear in the corpus Q.",
        "For each term t in the dictionary and each SMS token sj, we define a similarity measure a(t, Sj) that measures how closely the term t matches the SMS token Sj.",
        "We say that the term t is a variant of sj, if a(t, sj) > 0; this is denoted as t ~ sj.",
        "Combining the similarity measure and the inverse document frequency (idf) of t in the corpus, we define a weight function w(t, sj).",
        "The similarity measure and the weight function are discussed in detail in Section 5.1.",
        "Based on the weight function, we define a scoring function for assigning a score to each question in the corpus Q.",
        "The score measures how closely the question matches the SMS string S. Consider a question Q e Q.",
        "For each token sj, the scoring function chooses the term from Q having the maximum weight; then the weight of the n chosen terms are summed up to get the score.",
        "Our goal is to efficiently find the question Q* having the maximum score."
      ]
    },
    {
      "heading": "4. Pruning Algorithm",
      "text": [
        "We now describe algorithms for computing the maximum scoring question Q*.",
        "For each token Sj, we create a list Lj consisting of all terms from the dictionary that are variants of Sj.",
        "Consider a token sj.",
        "We collect all the variants of sj from the dictionary and compute their weights.",
        "The variants are then sorted in the descending order of their weights.",
        "At the end of the process we have n ranked lists.",
        "As an illustration, consider an SMS query \"gudplc buy 10s strng on9\".",
        "Here, n = 6 and six lists of variants will be created as shown in Figure 1.",
        "The process of creating the lists is speeded up using suitable indices, as explained in detail in Section 5.",
        "Now, we assume that the lists Li, L2,..., Lnare created and explain the algorithms for computing the maximum scoring question Q*.",
        "We describe two algorithms for accomplishing the above task.",
        "The two algorithms have the same functionality i.e. they compute Q*, but the second algorithm called the Pruning algorithm has a better run time efficiency compared to the first algorithm called the naive algorithm.",
        "Both the algorithms require an index which takes as input a term t from the dictionary and returns Qt, the set of all questions in the corpus that contain the term t. We call the above process as querying the index on the term t. The details of the index creation is discussed in Section 5.2.",
        "Naive Algorithm: In this algorithm, we scan each list Lj and query the index on each term appearing in Lj.",
        "The returned questions are added to a collection C. That is,",
        "The collection C is called the candidate set.",
        "Notice that any question not appearing in the candidate set has a score 0 and thus can be ignored.",
        "It follows that the candidate set contains the maximum scoring question Q*.",
        "So, we focus on the questions in the collection C, compute their scores and find the maximum scoring question Q*.",
        "The scores of the question appearing in C can be computed using Equation 1.",
        "The main disadvantage with the naive algorithm is that it queries each term appearing in each list and hence, suffers from high run time cost.",
        "We next explain the Pruning algorithm that avoids this pitfall and queries only a substantially small subset of terms appearing in the lists.",
        "Pruning Algorithm: The pruning algorithm",
        "giid",
        "plc",
        "buy",
        "10s",
        "strng",
        "or.9",
        "-JZ2.",
        "■cal",
        "bav",
        "sprung",
        "onto",
        "guide",
        "police",
        "bi v",
        "storing",
        "once",
        "buy",
        "____",
        "■J'-ZIC.",
        "plaoe",
        "busy",
        "tend",
        "stars",
        "online",
        "good",
        "pill",
        "tennis",
        "string",
        "Ontario",
        "Procedure Pruning Algorithm Input: SMS S = si, s2,..., snOutput: Maximum scoring question Q*.",
        "Begin",
        "Construct lists L1,L2,... ,Ln //(see Section 5.3).",
        "// Li lists variants of si in descending",
        "//order of weight.",
        "Candidate list C = 0. repeat //1* is the term having maximum weight among",
        "// all terms appearing in the n lists.",
        "Delete t* from the list Lj*.",
        "Query the index and fetch Qt* // Qt*: the set of all questions in Q",
        "//having the term t*For each Q e Qt*",
        "Compute Score(Q) and add Q with its score into C Q = argmaxg6C Score(Q).",
        "if Score(Q) > UB, then",
        "// Termination condition satisfied Output Q and exit.",
        "forever End",
        "is inspired by the Threshold Algorithm (Fagin et al., 2001).",
        "The Pruning algorithm has the property that it queries fewer terms and ends up with a smaller candidate set as compared to the naive algorithm.",
        "The algorithm maintains a candidate set C of questions that can potentially be the maximum scoring question.",
        "The algorithm works in an iterative manner.",
        "In each iteration, it picks the term that has maximum weight among all the terms appearing in the lists Li, L2,..., Ln.",
        "As the lists are sorted in the descending order of the weights, this amounts to picking the maximum weight term amongst the first terms of the n lists.",
        "The chosen term t is queried to find the set Qt.",
        "The set Qt is added to the candidate set C. For each question Q e Qt, we compute its score Score(Q) and keep it along with Q.",
        "The score can be computed by Equation 1 (For each SMS token sj, we choose the term from Q which is a variant of sj and has the maximum weight.",
        "The sum of the weights of chosen terms yields Score(Q)).",
        "Next, the chosen term t is removed from the list.",
        "Each iteration proceeds as above.",
        "We shall now develop a thresholding condition such that when it is satisfied, the candidate set C is guaranteed to contain the maximum scoring question Q*.",
        "Thus, once the condition is met, we stop the above iterative process and focus only on the questions in C to find the maximum scoring question.",
        "Consider end of some iteration in the above process.",
        "Suppose Q is a question not included in C. We can upperbound the score achievable by Q, as follows.",
        "At best, Q may include the topmost token from every list Li, L2,..., Ln.",
        "Thus, score of Q is bounded by",
        "Score(Q) < ]Tw(Lj[1]).",
        "(Since the lists are sorted Lj[1] is the term having the maximum weight in Lj).",
        "We refer to the RHS of the above inequality as UB.",
        "Let Q be the question in C having the maximum score.",
        "Notice that if Q > UB, then it is guaranteed that any question not included in the candidate set C cannot be the maximum scoring question.",
        "Thus, the condition \"Q > UB\" serves as the termination condition.",
        "At the end of each iteration, we check if the termination condition is satisfied and if so, we can stop the iterative process.",
        "Then, we simply pick the question in C having the maximum score and return it.",
        "The algorithm is shown in Figure 2.",
        "In this section, we presented the Pruning algorithm that efficiently finds the best matching question for the given SMS query without the need to go through all the questions in the FAQ corpus.",
        "The next section describes the system implementation details of the Pruning Algorithm."
      ]
    },
    {
      "heading": "5. System Implementation",
      "text": [
        "In this section we describe the weight function, the preprocessing step and the creation of lists Li, L2,..., L„.",
        "We calculate the weight for a term t in the dictionary w.r.t.",
        "a given SMS token sj.",
        "The weight function is a combination of similarity measure between t and sj and Inverse Document Frequency (idf) of t. The next two subsections explain the calculation of the similarity measure and the idf in detail.",
        "Let D be the dictionary of all the terms in the corpus Q.",
        "For term t G D and token sj of the SMS, the similarity measure a(t, sj) between them is",
        "LCSRatjo(t,si) EditDistanceSMS (t,Si)",
        "if t and Si share same starting character * otherwise the Longest common subsequence between t and Si.",
        "and LCS(t, Si) is",
        "* The rationale behind this heuristic is that while typing a SMS, people typically type the first few characters correctly.",
        "Also, this heuristic helps limit the variants possible for a given token.",
        "The Longest Common Subsequence Ratio (LCSR) (Melamed, 1999) of two strings is the ratio of the length of their LCS and the length of the longer string.",
        "Since in SMS text, the dictionary term will always be longer than the SMS token, the denominator of LCSR is taken as the length of the dictionary term.",
        "We call this modified LCSR as the LCSRatio.",
        "Procedure EditDistancesMS Input: term t, token st Output: Consonant Skeleton Edit distance",
        "return LevenshteinDistance(CS(st), CS(t)) + 1 // 1 is added to handle the case where // Levenshtein Distance is 0 Consonant Skeleton Generation (CS)",
        "If f number of documents in corpus Q contain a term t and the total number of documents in Q is N, the Inverse Document Frequency (idf) of t is",
        "Combining the similarity measure and the idf of t in the corpus, we define the weight function",
        "w(t,Sj) = a(t,Sj) * idf (t) (4) The objective behind the weight function is",
        "1.",
        "We prefer terms that have high similarity measure i.e. terms that are similar to the SMS token.",
        "Higher the LCSRatio and lower the EditDistanceSMs, higher will be the similarity measure.",
        "Thus for example, for a given SMS token \"byk\", similarity measure of word \"bike\" is higher than that of \"break\".",
        "2.",
        "We prefer words that are highly discriminative i.e. words with a high idf score.",
        "The rationale for this stems from the fact that queries, in general, are composed of informative words.",
        "Thus for example, for a given SMS token \"byk\", idfof \"bike\" will be more than that of commonly occurring word \"back\".",
        "Thus, even though the similarity measure of \"bike\" and \"back\" are same w.r.t.",
        "\"byk\", \"bike\" will get a higher weight than \"back\" due to its idf.",
        "We combine these two objectives into a single weight function multiplicatively."
      ]
    },
    {
      "heading": "1.. remove consecutive repeated characters // (call – cal)",
      "text": []
    },
    {
      "heading": "2.. remove all vowels",
      "text": [
        "Figure 3: EditDistanceSMS",
        "The EditDistancesMS' shown in Figure 3 compares the Consonant Skeletons (Prochasson et al., 2007) of the dictionary term and the SMS token.",
        "If the consonant keys are similar, i.e. the Lev-enshtein distance between them is less, the similarity measure defined in Equation 2 will be high.",
        "We explain the rationale behind using the EditDistanceSMS in the similarity measure a(t, sj) through an example.",
        "For the SMS token \"gud\" the most likely correct form is \"good\".",
        "The two dictionary terms \"good\" and \"guided\" have the same LCSRatio of 0.5 w.r.t \"gud\", but the EditDistanceSMS of \"good\" is 1 which is less than that of \"guided\", which has",
        "EditDistanceSMS of 2 w.r.t \"gud\".",
        "As a result the similarity measure between \"gud\" and \"good\" will be higher than that of \"gud\" and \"guided\".",
        "Preprocessing involves indexing of the FAQ corpus, formationofDomainandSynonymdictionar-ies and calculation of the Inverse Document Frequency for each term in the Domain dictionary.",
        "As explained earlier the Pruning algorithm requires retrieval of all questions Qt that contains a given term t. To do this efficiently we index the FAQ corpus using Lucene.",
        "Each question in the FAQ corpus is treated as a Document; it is tokenized using whitespace as delimiter and indexed.",
        "The Domain dictionary D is built from all terms that appear in the corpus Q.",
        "The weight calculation for Pruning algorithm requires the idf for a given term t. For each term t in the Domain dictionary, we query the Lucene indexer to get the number of Documents containing t. Using Equation 3, the idf(t) is calculated.",
        "The idf for each term t is stored in a Hashtable, with t as the key and idf as its value.",
        "Another key step in the preprocessing stage is the creation of the Synonym dictionary.",
        "The Pruning algorithm uses this dictionary to retrieve semantically similar questions.",
        "Details of this step is further elaborated in the List Creation sub-section.",
        "The Synonym Dictionary creation involves mapping each word in the Domain dictionary to it's corresponding Synset obtained from WordNet.",
        "Given a SMS S, it is tokenized using white-spaces to get a sequence of tokens si, s2,..., sn.",
        "Digits occurring in SMS token (e.g '10s' , \"4get\") are replaced by string based on a manually crafted digit-to-string mapping (\"10\" – \"ten\").",
        "A list Lj is setup for each token sj using terms in the domain dictionary.",
        "The list for a single character SMS token is set to null as it is most likely to be a stop word .",
        "A term t from domain dictionary is included in Lj if its first character is same as that of the token sj and it satisfies the threshold condition",
        "length(LCS(t,Sj)) > 1.",
        "Each term t that is added to the list is assigned a weight given by Equation 4.",
        "Terms in the list are ranked in descending order of their weights.",
        "Henceforth, the term \"list\" implies a ranked list.",
        "For example the SMS query \"gud plc 2 buy 10s strng on9\" (corresponding question \"Where is a good place to buy tennis strings online?",
        "\"), is tokenized to get a set of tokens {'gud', 'plc', '2', 'buy', '10s', 'strng', 'on9'}.",
        "Single character tokens such as '2 are neglected as they are most likely to be stop words.",
        "From these tokens corresponding lists are setup as shown in Figure 1.",
        "To retrieve answers for SMS queries that are semantically similar but lexically different from questions in the FAQ corpus we use the Synonym dictionary described in Section 5.2.",
        "Figure 4 illustrates some examples of such SMS queries.",
        "For a given SMS token sj, the list of variations Lj is further augmented using this Synonym dictionary.",
        "For each token sj a fuzzy match is performed between sj and the terms in the Synonym dictionary and the best matching term from the Synonym dictionary, 5 is identified.",
        "As the mappings between the Synonym and the Domain dictionary terms are maintained, we obtain the corresponding Domain dictionary term // for the Synonym term 5 and add that term to the list Lj.",
        "// is assigned a weight given by",
        "It should be noted that weight for / is based on the similarity measure between Synonym dictionary term 5 and SMS token sj.",
        "For example, the SMS query \"hw2 countr quik srv\"( corresponding question \"How to return a very fast serve?\")",
        "has two terms \"countr\" – \"counter\" and \"quik\" – \"quick\" belonging to the Synonym dictionary.",
        "Their associated mappings in the Domain dictionary are \"return\" and \"fast\" respectively as shown in Figure 5.",
        "During the list setup process the token \"countr\" is looked up in the Domain dictionary.",
        "Terms from the Domain dictionary that begin with the same character as that of the token \"countr\" and have a LCS > 1 such as \"country\",\"count\", etc.",
        "are added to the list and assigned a weight given by Equation 4.",
        "After that, the token \"countr\" is looked up in the Synonym dictionary using Fuzzy match.",
        "In this example the term \"counter\" from the Synonym dictionary fuzzy matches the SMS token.",
        "The Domain dictionary term corresponding to the Synonym dictionary term \"counter\" is looked up and added to the list.",
        "In the current example the corresponding Domain dictionary term is \"return\" .",
        "This term is assigned a weight given by Equation 5 and is added to the list as shown in Figure 5.",
        "Once the lists are created, the Pruning Algorithm as shown in Figure 2 is used to find the FAQ question Q* that best matches the SMS query.",
        "The corresponding answer to Q* from the FAQ corpus is returned to the user.",
        "The next section describes the experimental setup and results."
      ]
    },
    {
      "heading": "6. Experiments",
      "text": [
        "We validated the effectiveness and usability of our system by carrying out experiments on two FAQ data sets.",
        "The first FAQ data set, referred to as the Telecom Data-Set, consists of 1500 frequently asked questions, collected from a Telecom service provider's website.",
        "The questions in this data set are related to the Telecom providers products or services.",
        "For example queries about call rates/charges, bill drop locations, how to install caller tunes, how to activate GPRS etc.",
        "The second FAQ corpus, referred to as the Yahoo DataSet, consists of 7500 questions from three Yahoo!",
        "Answers categories namely Sports.Swimming, Sports.Tennis, Sports.Running.",
        "To measure the effectiveness of our system, a user evaluation study was performed.",
        "Ten human evaluators were asked to choose 10 questions randomly from the FAQ data set.",
        "None of the evaluators were authors of the paper.",
        "They were provided with a mobile keypad interface and asked to \"text\" the selected 10 questions as SMS queries.",
        "Through that exercise 100 relevant SMS queries per FAQ data set were collected.",
        "Figure 6 shows sample SMS queries.",
        "In order to validate that the system was able to handle queries that were out of",
        "why cn ifnd d cart kit watz d most comfy bke seat why cn JC dgmes of dRoland Garros n win vr@ r d br&s of 10s balz uz n tourneys watz d diffbtw a midsize n a mid+ rqts",
        "the FAQ domain, we collected 5 irrelevant SMS queries from each of the 10 human-evaluators for both the data sets.",
        "Irrelevant queries were (a) Queries out of the FAQ domain e.g. queries related to Cricket, Billiards, activating GPS etc (b) Absurd queries e.g. \"ama ameyu tuem\" (sequence of meaningless words) and (c) General Queries e.g. \"what is sports\".",
        "Table 1 gives the number of relevant and irrelevant queries used in our experiments.",
        "The average word length of the collected SMS messages for Telecom and Yahoo datasets was 4 and 7 respectively.",
        "We manually cleaned the SMS query data word by word to create a clean SMS test-set.",
        "For example, the SMS query \"h2 mke a pdl bke fstr\" was manually cleaned to get \"how to make pedal bike faster\" .",
        "In order to quantify the level of noise in the collected SMS data, we built a character-level language model(LM) using the questions in the FAQ dataset (vocabulary size is 44 characters) and computed the perplexity of the language model on the noisy and the cleaned SMS test-set.",
        "The perplexity of the LM on a corpus gives an indication of the average number of bits needed per n-gram to encode the corpus.",
        "Noise will result in the introduction of many previously unseen n-grams in the corpus.",
        "Higher number of bits are needed to encode these improbable n-grams which results in increased perplexity.",
        "From Table 2 we can see the difference in perplexity for noisy and clean SMS data for the Yahoo and Telecom data-set.",
        "The high level of perplexity in the SMS data set indicates the extent of noise present in the SMS corpus.",
        "To handle irrelevant queries the algorithm described in Section 4 is modified.",
        "Only if the Score(Q*) is above a certain threshold, it's answer is returned, else we return \"null\" .",
        "The threshold was determined experimentally.",
        "Data Set",
        "Relevant Queries",
        "Irrelevant Queries",
        "Telecom Yahoo",
        "100 100",
        "50 50",
        "To retrieve the correct answer for the posed SMS query, the SMS query is matched against questions in the FAQ data set and the best matching question(Q*) is identified using the Pruning algorithm.",
        "The system then returns the answer to this best matching question to the human evaluator.",
        "The evaluator then scores the response on a binary scale.",
        "A score of 1 is given if the returned answer is the correct response to the SMS query, else it is assigned 0.",
        "The scoring procedure is reversed for irrelevant queries i.e. a score of 0 is assigned if the system returns an answer and 1 is assigned if it returns \"null\" for an \"irrelevant\" query.",
        "The result of this evaluation on both datasets is shown in Figure 7 and 8.",
        "In order to compare the performance of our system, we benchmark our results against Lucene's Fuzzy match feature.",
        "Lucene supports fuzzy searches based on the Levenshtein Distance, or Edit Distance algorithm.",
        "To do a fuzzy search we specify the ~ symbol at the end of each token of the SMS query.",
        "For example, the SMS query \"romg actvt\" on the FAQ corpus is reformulated as \"romg~ 0.3 actvt~ 0.3\".",
        "The parameter after the ~ specifies the required similarity.",
        "The parameter value is between 0 and 1, with a value closer to 1 only terms with higher similarity will be matched.",
        "These queries are run on the indexed FAQs.",
        "The results of this evaluation on both datasets is shown in Figure 7 and 8.",
        "The results clearly demonstrate that our method performs 2 to 2.5 times better than Lucene's Fuzzy match.",
        "It was observed that with higher values of similarity parameter (~ 0.6, ~ 0.8), the number of correctly answered queries was even lower.",
        "In Figure 9 we show the runtime performance of the Naive vs Pruning algorithm on the Yahoo FAQ Dataset for 150 SMS queries.",
        "It is evident from Figure 9 that not only does the Pruning Algorithm outperform the Naive one but also gives a near-constant runtime performance over all the queries.",
        "The substantially better performance of the Pruning algorithm is due to the fact that it queries much less number of terms and ends up with a smaller candidate set compared to the Naive algorithm."
      ]
    },
    {
      "heading": "7. Conclusion",
      "text": [
        "In recent times there has been a rise in SMS based QA services.",
        "However, automating such services has been a challenge due to the inherent noise in SMS language.",
        "In this paper we gave an efficient algorithm for answering FAQ questions over an SMS interface.",
        "Results of applying this on two different FAQ datasets shows that such a system can be very effective in automating SMS based FAQ retrieval.",
        "Cleaned SMS",
        "Noisy SMS",
        "Yahoo",
        "bigram trigram",
        "14.92 8.11",
        "74.58 93.13",
        "Telecom",
        "bigram trigram",
        "17.62 10.27",
        "59.26 63.21"
      ]
    }
  ]
}
