{
  "info": {
    "authors": [
      "Laura Kallmeyer",
      "Wolfgang Maier",
      "Yannick Parmentier"
    ],
    "book": "ACL-IJCNLP: Short Papers",
    "id": "acl-P09-2003",
    "title": "An Earley Parsing Algorithm for Range Concatenation Grammars",
    "url": "https://aclweb.org/anthology/P09-2003",
    "year": 2009
  },
  "references": [
    "acl-C02-1028",
    "acl-C08-2026",
    "acl-E91-1005",
    "acl-E99-1008",
    "acl-J91-3002",
    "acl-L08-1023",
    "acl-P01-1007",
    "acl-P87-1015",
    "acl-W05-1502"
  ],
  "sections": [
    {
      "text": [
        "SFB 441 Universität Tübingen 72074 Tübingen, Germany",
        "lk@ sfs.uni-tuebingen.de",
        "wo.maier@uni-tuebingen.de",
        "CNRS - LORIA Nancy Université 54506 Vandœuvre, France",
        "parmenti@loria.fr",
        "We present a CYK and an Earley-style algorithm for parsing Range Concatenation Grammar (RCG), using the deductive parsing framework.",
        "The characteristic property of the Earley parser is that we use a technique of range boundary constraint propagation to compute the yields of non-terminals as late as possible.",
        "Experiments show that, compared to previous approaches, the constraint propagation helps to considerably decrease the number of items in the chart."
      ]
    },
    {
      "heading": "1. Introduction",
      "text": [
        "RCGs (Boullier, 2000) have recently received a growing interest in natural language processing (S0gaard, 2008; Sagot, 2005; Kallmeyer et al., 2008; Maier and S0gaard, 2008).",
        "RCGs generate exactly the class of languages parsable in deterministic polynomial time (Bertsch and Neder-hof, 2001).",
        "They are in particular more powerful than linear context-free rewriting systems (LCFRS) (Vijay-Shanker et al., 1987).",
        "LCFRS is unable to describe certain natural language phenomena that RCGs actually can deal with.",
        "One example are long-distance scrambling phenomena (Becker et al., 1991; Becker et al., 1992).",
        "Other examples are non-semilinear constructions such as case stacking in Old Georgian (Michaelis and Kracht, 1996) and Chinese number names (Radzinski, 1991).",
        "Boullier (1999) shows that RCGs can describe the permutations occurring with scrambling and the construction of Chinese number names.",
        "Parsing algorithms for RCG have been introduced by Boullier (2000), who presents a directional top-down parsing algorithm using pseudocode, and Barthélémy et al.",
        "(2001), who add an oracle to Boullier's algorithm.",
        "The more restricted class of LCFRS has received more attention concerning parsing (Villemonte de la Clergerie, 2002; Burden and Ljunglôf, 2005).",
        "This article proposes new CYK and Earley parsers for RCG, formulating them in the framework of parsing as deduction (Shieber et al., 1995).",
        "The second section introduces necessary definitions.",
        "Section 3 presents a CYK-style algorithm and Section 4 extends this with an Earley-style prediction."
      ]
    },
    {
      "heading": "2. Preliminaries",
      "text": [
        "The rules (clauses) of RCGs rewrite predicates ranging over parts of the input by other predicates.",
        "E.g., a clause S(aXb) – > S(X) signifies that S is true for a part of the input if this part starts with an a, ends with a b, and if, furthermore, S is also true for the part between a and b.",
        "Definition 1.",
        "A RCG G = (N, T, V, P, S) consists of a) a finite set of predicates N with an arity function dim: N – > N \\ {0} where S G N is the start predicate with dim(S) = 1, b) disjoint finite sets of terminals T and variables V, c) a finite set P of clauses ipo – >■ tpi ■ ■ ■ ipm> where m > 0 and each of the tpi, 0 < i < m, is a predicate of the form Ai(a\\,..., otdim(Ai)) with M S N and atj G (T U Vf for l<j< dim(^).",
        "Central to RCGs is the notion of ranges on strings.",
        "'in this paper, by RCG, we always mean positive RCG, see Boullier (2000) for details.",
        "first (resp.",
        "second) component of the ith element of (f), that is Xi (resp.",
        "iji).",
        "In order to instantiate a clause of the grammar, we need to find ranges for all variables in the clause and for all occurrences of terminals.",
        "For convenience, we assume the variables in a clause and the occurrences of terminals to be equipped with distinct subscript indices, starting with 1 and ordered from left to right (where for variables, only the first occurrence is relevant for this order).",
        "We introduce a function T : P – > N that gives the maximal index in a clause, and we define T(c, x) for a given clause c and x a variable or an occurrence of a terminal as the index of x in c.",
        "Definition 3.",
        "An instantiation of a c G P with T(c) = j w.r.t.",
        "to some string w is given by a range vector <fi of dimension j.",
        "Applying <fi to a predicate A(a) in c maps all occurrences of x G (T U V) with T(c,x) = i in a to <j)(i).",
        "If the result is defined (i.e., the images of adjacent variables can be concatenated), it is called an instantiated predicate and the result of applying <fi to all predicates in c, if defined, is called an instantiated clause.",
        "We also introduce range constraint vectors, vectors of pairs of range boundary variables together with a set of constraints on these variables.",
        "of range boundary variables.",
        "A range constraint vector of dimension k is a pair (p, C) where a) p G (Vffi; we define Vr(p) as the set of range boundary variables occurring in p. b) C is a set of constraints cr that have one of the following forms: n = r2, k = r\\, n + k = r2, k < r\\, r\\ < k, r\\ < r2 or n + k < r2for r\\,r2 G Vr(p) and fceN.",
        "We say that a range vector <fi satisfies a range constraint vector (p, C) iff <fi and p are of the same dimension k and there is a function / : Vr – > N that maps p(i).l to <fi(i).l and p(i).r to <fi(i).r for all 1 < i < k such that all constraints in C are satisfied.",
        "Furthermore, we say that a range constraint vector (p, C) is satisfiable iff there exists a range vector (f) that satisfies it.",
        "Definition 5.",
        "For every clause c, we define its range constraint vector (p, C) w.r.t.",
        "aw with \\ w\\ = n as follows: a) p has dimension T(c) and all range boundary variables in p are pairwise different, b) For all (r\\,r2) G p: 0 < r\\, n < r2, r2 < n G C. For all occurrences x of terminals in c with i = T(c,x): p(i).l+l = p(i).r G C. For allx,y that are variables or occurrences of terminals in c such that xy is a substring of one of the arguments in c: p(T(c,x)).r = p(T(c,y)).l G C. These are all constraints in C.",
        "The range constraint vector of a clause c captures all information about boundaries forming a range, ranges containing only a single terminal, and adjacent variables/terminal occurrences in c.",
        "An RCG derivation consists of rewriting instantiated predicates applying instantiated clauses, i.e. in every derivation step Ti =>w T2, we replace the lefthand side of an instantiated clause with its righthand side (w.r.t.",
        "a word w).",
        "The language of an RCG G is the set of strings that can be reduced to the empty word: L(G) = {w \\",
        "S«0,M» ^G,w e}.",
        "The expressive power of RCG lies beyond mild context-sensitivity.",
        "As an example, consider the RCG from Fig. 3 that generates a language that is not semilinear.",
        "For simplicity, we assume in the following without loss of generality that empty arguments (e) occur only in clauses whose righthand sides are empty."
      ]
    },
    {
      "heading": "3. Directional Bottom-Up Chart Parsing",
      "text": [
        "In our directional CYK algorithm, we move a dot through the righthand side of a clause.",
        "We therefore have passive items [A, (f)] where A is a predicate and (f) a range vector of dimension dim(A) and active items.",
        "In the latter, while traversing the righthand side of the clause, we keep a record of the left and right boundaries already found for variables and terminal occurrences.",
        "This is achieved by subsequently enriching the range constraint vector of the clause.",
        "Active items have the form [A(x) $ • (p, C)\\ with A(x) a clause, / e, T(A(x = j and {p, C) a range constraint vector of dimension j.",
        "We require that (p, C) be satisfiable.",
        "e e P with instantiation ip Initialize Complete:",
        "range constraint vector where C\" = CU{^(j).i = pCTfo)).",
        "*, Mj> = p(T(%)).r|l < j < k}.",
        "Convert: [A^j satisfies (p,C),",
        "The deduction rules are shown in Fig. 1.",
        "The first rule scans the yields of terminating clauses.",
        "Initialize introduces clauses with the dot on the left of the righthand side.",
        "Complete moves the dot over a predicate provided a corresponding passive item has been found.",
        "Convert turns an active item with the dot at the end into a passive item."
      ]
    },
    {
      "heading": "4. The Earley Algorithm",
      "text": [
        "We now add top-down prediction to our algorithm.",
        "Active items are as above.",
        "Passive items have an additional flag p or c depending on whether the item is predicted or completed, i.e., they either have the form [A, (p, C),p] where (p, C) is a range constraint vector of dimension dim(A), or the form [A, (f), c] where <fi is a range vector of dimension dim(A).",
        "Initialize:",
        "Predict-rule:",
        "[A(Xl... yi,..., xk ... yk) (p',C)] where (p', C) is obtained from the range constraint vector of the clause A(xi... y\\,..., xk ... yk) – > * by taking all constraints from C, mapping all p(i).l to p'(T(xi)).l and all p(i).r to p'(T(j/i)).r, and then adding the resulting constraints to the range constraint vector of the clause.",
        "Predict-pred:",
        "1 < i < k and C\" variables from p'}.",
        "{c | c e C, c contains only range",
        "A(x) -4£eP with an instantiation ip satisfying (p, C) such that ip(A{x)) = A(<j>)",
        "axiom is the prediction of an S ranging over the entire input (initialize).",
        "We have two predict operations: Predict-rule predicts active items with the dot on the left of the righthand side, for a given predicted passive item.",
        "Predict-pred predicts a passive item for the predicate following the dot in an active item.",
        "Scan is applied whenever a predicted predicate can be derived by an e-clause.",
        "The rules complete and convert are the ones from the CYK algorithm except that we add flags c to the passive items occurring in these rules.",
        "The goal is again [S, ((0, n)), c].",
        "To understand how this algorithm works, consider the example in Fig. 3.",
        "The crucial property of this algorithm, in contrast to previous approaches, is the dynamic updating of a set of constraints on range boundaries.",
        "We can leave range boundaries unspecified and compute their values in a more incremental fashion instead of guessing all ranges of a clause at once at prediction.",
        "For evaluation, we have implemented a directional top-down algorithm where range boundaries are guessed at prediction (this is essentially the algorithm described in Boullier (2000)), and the new Earley-style algorithm.",
        "The algorithms were tested on different words of the language L = {a\"|n < 0}.",
        "Table 1 shows the number of generated items.",
        "Clearly, range boundary constraint propagation increases the amount of information transported in single items and thereby decreases considerably the number of generated items."
      ]
    },
    {
      "heading": "5. Conclusion and future work",
      "text": [
        "We have presented a new CYK and Earley parsing algorithms for the full class of RCG.",
        "The crucial difference between previously proposed top-down RCG parsers and the new Earley-style algorithm is that while the former compute all clause instantiations during predict operations, the latter",
        "Of course, the use of constraints makes comparisons between items more complex and more expensive which means that for an efficient implementation, an integer-based representation of the constraints and adequate techniques for constraint solving are required.",
        "Word",
        "Earley",
        "TD",
        "Word",
        "Earley",
        "TD",
        "a'",
        "15",
        "21",
        "aiti",
        "100",
        "539",
        "a",
        "30",
        "55",
        "a",
        "155",
        "1666",
        "a",
        "55",
        "164",
        "a",
        "185",
        "1894",
        "a",
        "59",
        "199",
        "a",
        "350",
        "6969",
        "11 [S(XY) S(X)eç(X, Y).",
        "initialize predict-rule from 1 predict-pred from 2 scan from 3 predict-rule from 3 complete 2 with 4 complete 5 with 4 predict-pred from 6 predict-rule from 8 complete 6 with 10 convert 11",
        "avoids this using a technique of dynamic updating of a set of constraints on range boundaries.",
        "Experiments show that this significantly decreases the number of generated items, which confirms that range boundary constraint propagation is a viable method for a lazy computation of ranges.",
        "The Earley parser could be improved by allowing to process the predicates of the righthand sides of clauses in any order, not necessarily from left to right.",
        "This way, one could process predicates whose range boundaries are better known first.",
        "We plan to include this strategy in future work."
      ]
    }
  ]
}
