{
  "info": {
    "authors": [
      "Albert Gatt",
      "Ehud Reiter"
    ],
    "book": "Proceedings of the 12th European Workshop on Natural Language Generation (ENLG 2009)",
    "id": "acl-W09-0613",
    "title": "SimpleNLG: A Realisation Engine for Practical Applications",
    "url": "https://aclweb.org/anthology/W09-0613",
    "year": 2009
  },
  "references": [
    "acl-A00-2023",
    "acl-A97-1039",
    "acl-W00-1437",
    "acl-W06-1403",
    "acl-W96-0501"
  ],
  "sections": [
    {
      "text": [
        "SimpleNLG: A realisation engine for practical applications",
        "Albert Gatt and Ehud Reiter",
        "This paper describes SimpleNLG, a realisation engine for English which aims to provide simple and robust interfaces to generate syntactic structures and linearise them.",
        "The library is also flexible in allowing the use of mixed (canned and non-canned) representations."
      ]
    },
    {
      "heading": "1. Introduction",
      "text": [
        "Over the past several years, a significant consensus has emerged over the definition of the realisation task, through the development of realisers such as RealPro (Lavoie and Rambow, 1997), Aleth-Gen (Coch, 1996), kpml (Bateman, 1997), fuf/surge (Elhadad and Robin, 1996), Halogen (Langkilde, 2000), yag (McRoy etal., 2000), and OpenCCG (White, 2006).",
        "Realisation involves two logically distinguishable tasks.",
        "Tactical generation involves making appropriate linguistic choices given the semantic input.",
        "However, once tactical decisions have been taken, building a syntactic representation, applying the right morphological operations, and linearising the sentence as a string are comparatively mechanical tasks.",
        "With the possible exception of template-based realisers, such as yag, existing wide-coverage realisers usually carry out both tasks.",
        "By contrast, a realisation engine focuses on the second of the two tasks, making no commitments as to how semantic inputs are mapped to syntactic outputs.",
        "This leaves the (tactical) problem of defining mappings from semantic inputs to morphosyntactic structures entirely up to the developer, something which may be attractive in those applications where full control of the output of generation is required.",
        "Such control is not always easily available in wide-coverage tactical generators, for a number of reasons:",
        "1.",
        "Many such realisers define an input formalism, which effectively circumscribes the (semantic) space of possibilities that the realiser handles.",
        "The developer needs to ensure that the input to realisation is mapped to the requisite formalism.",
        "2.",
        "Since the tactical problem involves search through a space of linguistic choices, the broader the coverage, the more efficiency may be compromised.",
        "Where real-time deployment is a goal, this may be an obstacle.",
        "3.",
        "Many application domains have sublanguage requirements.",
        "For example, the language used in summaries of weather data (Reiter et al., 2005) or patient information (Portet et al., to appear) differs from standard usage, and does not always allow variation to the same extent.",
        "Since realisers don't typically address such requirements, their use in a particular application may require the alteration of the realiser's rule-base or, in the case of statistical realisers, retraining on large volumes of appropruately annotated data.",
        "This paper describes SimpleNLG, a realisation engine which grew out of recent experiences in building large-scale data-to-text NLG systems, whose goal is to summarise large volumes of numeric and symbolic data (Reiter, 2007).",
        "Sublanguage requirements and efficiency are important considerations in such systems.",
        "Although meeting these requirements was the initial motivation behind SimpleNLG, it has since been developed into an engine with significant coverage of English syntax and morphology, while at the same time providing a simple API that offers users direct programmatic control over the realisation process."
      ]
    },
    {
      "heading": "2. Overview of SimpleNLG",
      "text": [
        "SimpleNLG is a Java library that provides interfaces offering direct control over the realisation process, that is, over the way phrases are built and combined, inflectional morphological operations, and linearisation.",
        "It defines a set of lexical and phrasal types, corresponding to the major grammatical categories, as well as ways of combining these and setting various feature values.",
        "In constructing a syntactic structure and linearising it as text with SimpleNLG, the following steps are undertaken:",
        "1.",
        "Initialisation of the basic constituents required, with the appropriate lexical items;",
        "2.",
        "Using the operations provided in the API to set features of the constituents, such as those in bottom panel of Table 1;",
        "3.",
        "Combining constituents into larger structures, again using the operations provided in the API which apply to the constituents in question;",
        "4.",
        "Passing the resulting structure to the lineariser, which traverses the constituent structure, applying the correct inflections and linear ordering depending on the features, before returning the realised string.",
        "Constituents in SimpleNLG can be a mixture of canned and non-canned representations.",
        "This is useful in applications where certain inputs can be mapped to an output string in a deterministic fashion, while others require a more flexible mapping to outputs depending, for example, on semantic features and context.",
        "SimpleNLG tries to meet these needs by providing significant syntactic coverage with the added option of combining canned and non-canned strings.",
        "Another aim of the engine is robustness: structures which are incomplete or not well-formed will not result in a crash, but typically will yield infelicitous, though comprehensible, output.",
        "This is a feature that SimpleNLG shares with yag (McRoy et al., 2000).",
        "A third design criterion was to achieve a clear separation between morphological and syntactic operations.",
        "The lexical component of the library, which includes a wide-coverage morphological generator, is distinct from the syntactic component.",
        "This makes it useful for applications which do not require complex syntactic operations, but which need output strings to be correctly inflected.",
        "The lexical component provides interfaces that define a Lexicon, a MorphologicalRule, and a LexicalItem, with subtypes for different lexical classes (Noun, Preposition etc).",
        "Morphological rules, a reimplementation of those in MorphG (Minnen et al., 2001), cover the full range of English inflection, including regular and irregular forms.",
        "In addition to the range of morphological operations that apply to them, various features can be specified for lexical items.",
        "For example, as shown in the top panel of Table 1, adjectives and adverbs can be specified for their typical syntactic positions.",
        "Thus, an adjective such as red would have the values Attrib2, indicating that it usually occurs in attribute position 2 (following Attrib\\ adjectives such as large), and Predicative.",
        "Similarly, nouns are classified to indicate their agreement features (count, mass, etc), while verbs can be specified for the range of syntactic complement types they allow (e.g. bare infinitives and WH-complements).",
        "Feature",
        "Values",
        "Applicable classes",
        "lexical",
        "AdjPosition",
        "Attrib1/2/3, PostNominal, Predicative",
        "adj",
        "AdvPosition",
        "Sentential, PostVerbal, Verbal",
        "adv",
        "AgrType",
        "Count, Mass, Group, Inv-Pl, Inv-Sg",
        "n",
        "ComplType",
        "AdjP, AdvP, B-Inf, WhFin, WhInf, .",
        ".",
        ".",
        "v",
        "VType",
        "Aux, Main, Modal",
        "v",
        "phrasal",
        "Function",
        "Subject, Obj, I-Obj, Prep-Obj, Modifier",
        "all",
        "SForm",
        "B-Inf, Gerund, Imper, Inf, Subj",
        "s",
        "InterrogType",
        "Yes/No, How, What, .",
        ".",
        ".",
        "s",
        "NumberAgr",
        "Plural, Singular",
        "np",
        "Tense",
        "Pres, Past, Fut",
        "vp",
        "Taxis (boolean)",
        "true (=perfective), false",
        "vp",
        "Possessive (boolean)",
        "true (=possessive), false",
        "np",
        "Passive (boolean)",
        "true, false",
        "vp",
        "A typical development scenario involves the creation of a Lexicon, the repository of the relevant items and their properties.",
        "Though this can be done programmatically, the current distribution of SimpleNLG provides an interface to a database constructed from the nih Specialist Lexicon, a large (> 300,000 entries) repository of lexical items in the medical and general English domains, which incorporates information about lexical features such as those in Table 1.",
        "The syntactic component of SimpleNLG defines interfaces for HeadedPhrase and CoordinatePhrase.",
        "Apart from various phrasal subtypes (referred to as PhraseSpecs) following the usage in Reiter and Dale (2000)), several grammatical features are defined, including Tense, Number, Person and Mood (see Table 1).",
        "In addition, a StringPhraseSpec represents a piece of canned text of arbitrary length.",
        "A complete syntactic structure is achieved by initialising constituents with the relevant features, and combining them using the operations specified by the interface.",
        "Any syntactic structure can consist of a mixture of Phrase or CoordinatePhrase types and canned strings.",
        "The input lexical items to phrase constructors can themselves be either strings or lexical items as defined in the lexical component.",
        "Once syntactic structures have been constructed, they are passed to a lineariser, which also handles basic punctuation and other orthographic conventions (such as capitalisation).",
        "The syntactic component covers the full range of English verbal forms, including participals, compound tenses, and progressive aspect.",
        "Subtypes of CoordinatePhrase allow for fully recursive coordination.",
        "As shown in the bottom panel of Figure 1, subjunctive forms and different kinds of interrogatives are also handled using the same basic feature-setting mechanism.",
        "The example below illustrates one way of constructing the phrase the boys left the house, initialising a sentence with the main verb leave and setting a Tense feature.",
        "Note that the SPhraseSpec interface allows the setting of the main verb, although this is internally represented as the head of a VPPhraseSpec dominated by the clause.",
        "An alternative would be to construct the verb phrase directly, and set it as a constituent of the sentence.",
        "Similarly, the direct object, which is specified directly as a constituent of the sentence, is internally represented as the object of the verb phrase.",
        "In this example, the direct object is an NPPhraseSpec consisting of two words, passed as arguments and internally rendered as lexical items of type Determiner and Noun respectively.",
        "By contrast, the subject is defined as a canned string.",
        "new SPhraseSpec(,leave'); si.setTense(PAST); si.setObject( new StringPhraseSpecPthe boys'); si.setSubject(s2);",
        "Setting the InterrogativeType feature of sentence (1) turns it into a question.",
        "Two examples, are shown below.",
        "While (2) exemplifies a simple yes/no question, in (3), a wh-constituent is specified as establishing a dependency with the direct object (the house).",
        "(2) si.setInterrogative(YES_NO); (Did the boys leave home?)",
        "(3) si.setInterrogative(WHERE, OBJECT); (Where did the boys leave?)",
        "In summary, building syntactic structures in SimpleNLG is largelyaquestion offeature setting, with no restrictions on whether representations are partially orexclusively made up ofcanned strings.",
        "The phrasal features in the bottom panel of Table 1 determine the form of the output, since they are automatically interpreted by the realiser as instructions to call the correct morphological operations on lexical items.",
        "Hence, the syntactic and morphological components are closely integrated (though distinct).",
        "Currently, however, lexical features such as AdjPosition are not fully integrated with the syntactic component.",
        "For example, although adjectives in the lexicon are specified for their position relative to other modifiers, and nouns are specified for whether they take singular or plural agreement, this informaiton is not currently used automatically by the realiser.",
        "Full integration of lexical features and syntactic realisation is currently the focus of ongoing development.",
        "As an indication of efficiency, we measured the time taken to realise 26 summaries with an average text length of 160.8 tokens (14.4 sentences), and sentences ranging in complexity from simple declaratives to complex embedded clauses.",
        "The estimates, shown below, average over 100 iterations per text (i.e. a total of 2600 runs of the realiser) on a Dell Optiplex GX620 machine running Windows XP with a 3.16 GHz Pentium processor.",
        "Separate times are given for the initialisation of constituents based on semantic representations, along the lines shown in (1), (SYN), and linearisation (LIN).",
        "These figures suggest that a medium-length, multiparagraph text can be rendered in un"
      ]
    },
    {
      "heading": "3. Conclusions and future work",
      "text": [
        "This paper has described SimpleNLG, a realisation engine which differs from most tactical generators in that it provides a transparent API to carry out low-level tasks such as inflection and syntactic combination, while making no commitments about input specifications or input-output mappings.",
        "The simplicity of use of SimpleNLG is reflected in its community of users.",
        "The currently available public distribution, has been used by several groups for three main purposes: (a) as a front-end to NLG systems in projects where realisation is not the primary research focus; (b) as a simple natural language component in user interfaces for other kinds of systems, by researchers who do not work in NLG proper; (c) as a teaching tool in advanced undergraduate and postgraduate courses on Natural Language Processing.",
        "SimpleNLG remains under continuous development.",
        "Current work is focusing on the inclusion of output formatting and punctuation modules, which are currently handled using simple defaults.",
        "Moreover, an enhanced interface to the lexicon is being developed to handle derivational morphology and a fuller integration of complementation frames of lexical items with the syntactic component.",
        "MEAN (ms)",
        "SD",
        "MIN",
        "MAX",
        "syn",
        "280.7",
        "229.7",
        "13.8",
        "788.34",
        "lin",
        "749.38",
        "712.6",
        "23.26",
        "2700.38"
      ]
    }
  ]
}
