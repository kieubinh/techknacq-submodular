{
  "info": {
    "authors": [
      "Sankar K.",
      "L. Sobha"
    ],
    "book": "Proceedings of the Third International Workshop on Cross Lingual Information Access: Addressing the Information Need of Multilingual Societies (CLIAWS3)",
    "id": "acl-W09-1608",
    "title": "An Approach to Text Summarization.",
    "url": "https://aclweb.org/anthology/W09-1608",
    "year": 2009
  },
  "references": [
    "acl-W04-3247"
  ],
  "sections": [
    {
      "text": [
        "An Approach to Text Summarization",
        "SankarK",
        "AU-KBC Research Centre MIT Campus, Anna University Chennai- 44.",
        "sankar@au-kbc.org",
        "Sobha L",
        "sobha@au-kbc.org",
        "We propose an efficient text summarization technique that involves two basic operations.",
        "The first operation involves finding coherent chunks in the document and the second operation involves ranking the text in the individual coherent chunks and picking the sentences that rank above a given threshold.",
        "The coherent chunks are formed by exploiting the lexical relationship between adjacent sentences in the document.",
        "Occurrence of words through repetition or relatedness by sense relation plays a major role in forming a cohesive tie.",
        "The proposed text ranking approach is based on a graph theoretic ranking model applied to text summarization task."
      ]
    },
    {
      "heading": "1. Introduction",
      "text": [
        "Automated summarization is an important area in NLP research.",
        "A variety of automated summarization schemes have been proposed recently.",
        "NeATS (Lin and Hovy, 2002) is a sentence position, term frequency, topic signature and term clustering based approach and MEAD (Radev et al., 2004) is a centroid based approach.",
        "Iterative graph based Ranking algorithms, such as Kleinberg's HITS algorithm (Kleinberg, 1999) and Google's Page-Rank (Brin and Page, 1998) have been traditionally and successfully used in web-link analysis, social networks and more recently in text processing applications (Mihalcea and Tarau, 2004), (Mihalcea cea, 2004).",
        "These iterative approaches have a high time complexity and are practically slow in dynamic summarization.",
        "Proposals are also made for coherence based automated summarization system (Silber and McCoy, 2000).",
        "We propose a novel text summarization technique that involves two basic operations, namely finding coherent chunks in the document and ranking the text in the individual coherent chunks formed.",
        "For finding coherent chunks in the document, we propose a set of rules that identifies the connection between adjacent sentences in the document.",
        "The connected sentences that are picked based on the rules form coherent chunks in the document.",
        "For text ranking, we propose an automatic and unsupervised graph based ranking algorithm that gives improved results when compared to other ranking algorithms.",
        "The formation of coherent chunks greatly improves the amount of information of the text picked for subsequent ranking and hence the quality of text summarization.",
        "The proposed text ranking technique employs a hybrid approach involving two phases; the first phase employs word frequency statistics and the second phase involves a word position and string pattern based weighing algorithm to find the weight of the sentence.",
        "A fast running time is achieved by using a compression hash on each sentence.",
        "This paper is organized as follows: section 2 discusses lexical cohesion, section 3 discusses the text ranking algorithm and section 4 describes the summarization by combining lexical cohesion and summarization."
      ]
    },
    {
      "heading": "2. Lexical Cohesion",
      "text": [
        "Coherence in linguistics makes the text semantically meaningful.",
        "It is achieved through semantic features such as the use of deictic (a deictic is an expression which shows the direction.",
        "ex: that, this.",
        "), anaphoric (a referent which requires an antecedent in front.",
        "ex: he, she, it.",
        "), cataphoric (a referent which requires an antecedent at the back.",
        "), lexical relation and proper noun repeating elements (Morris and Hirst, 1991).",
        "Robert De Beaugrande and Wolfgang U. Dressler define coherence as a \"continuity of senses\" and \"the mutual access and relevance within a configuration of concepts and relations\" (Beaugrande and Dressler, 1981).",
        "Thus a text gives meaning as a result of union of meaning or senses in the text.",
        "The coherence cues present in a sentence are directly visible when we go through the flow of the document.",
        "Our approach aims to achieve this objective with linguistic and heuristic information.",
        "The identification of semantic neighborhood, occurrence of words through repetition or relatedness by sense relation namely synonyms, hyponyms and hypernym, plays a major role in forming a cohesive tie (Miller et al., 1990).",
        "When parsing through a document, the relationship among adjacent sentences is determined by the continuity that exists between them.",
        "We define the following set of rules to find coherent chunks in the document.",
        "The presence of connectives (such as accordingly, again, also, besides) in present sentence indicates the connectedness of the present sentence with the previous sentence.",
        "When such connectives are found, the adjacent sentences form coherent chunks.",
        "A 3rd person pronominal in a given sentence refers to the antecedent in the previous sentence, in such a way that the given sentence gives the complete meaning with respect to the previous sentence.",
        "When such adjacent sentences are found, they form coherent chunks.",
        "The reappearance of NERs in adjacent sentences is an indication of connectedness.",
        "When such adjacent sentences are found, they form coherent chunks.",
        "An ontology relationship between words across sentences can be used to find semantically related words across adjacent sentences that appear in the document.",
        "The appearance of related words is an indication of its coherence and hence forms coherent chunks.",
        "All the above rules are applied incrementally to achieve the complete set of coherent chunks.",
        "The ACE Corpus was used for studying the coherence patterns between adjacent sentences of the document.",
        "From our analysis, we picked out a set of keywords such that, the appearance of these keywords at the beginning of the sentence provide a strong lexical tie with the previous sentence.",
        "The appearance of the keywords \"accordingly, again, also, besides, hence, henceforth, however, incidentally, meanwhile, moreover, namely, nevertheless, otherwise, that is, then, therefore, thus, and, but, or, yet, so, once, so that, than, that, till, whenever, whereas and wherever\", at the beginning of the present sentence was found to be highly coherent with the previous sentence.",
        "Linguistically a sentence cannot start with the above words without any related introduction in the previous sentence.",
        "Furthermore, the appearance of the keywords \"\"consequently, finally, furthermore\", at the beginning or middle of the present sentence was found to be highly cohesive with the previous sentence.",
        "Example 1 1. a The train was late.",
        "1. b However I managed to reach the wedding on time.",
        "In Example 1, the connecting word however binds with the situation of the train being late.",
        "Example 2 1. a The cab driver was late.",
        "1. b The bike tyre was punctured.",
        "1. c The train was late.",
        "1 .d Finally, I managed to arrive at the wedding on time by calling a cab.",
        "Example 3 1. a The cab driver was late.",
        "1. b The bike tyre was punctured.",
        "1. c The train was late.",
        "1. d I could not wait any more; I finally managed to reach the wedding on time by calling a cab.",
        "In Example 2, the connecting word finally binds with the situation of him being delayed.",
        "Similarly, in Example 3, the connecting word finally, though it comes in the middle of the sentence, it still binds with the situation of him being delayed.",
        "In this approach we have a set of pronominals which establishes coherence in the text.",
        "From our analysis, it was observed that if the pronominals \"he, she, it, they, her, his, hers, its, their, theirs\", appear in the present sentence; its antecedent may be in the same or previous sentence.",
        "It is also found that if the pronominal is not possessive (i.e. the antecedent appears in the previous sentence or previous clause), then the present sentence and the previous sentences are connected.",
        "However, if the pronominal is possessive then it behaves like reflexives such as \"himself\", \"herself\" which has subject as its antecedent.",
        "Hence the possibility of connecting it with the previous sentence is very unlikely.",
        "Though pronominal resolution cannot be done at a window size of 2 alone, still we are looking at window size 2 alone to pick guaranteed connected sentences.",
        "Example 4 1. a Ravi is a good boy.",
        "1. b He always speaks the truth.",
        "In Example 4, the pronominal he in the second sentence refers to the antecedent Ravi in the first sentence.",
        "Example 5 1. a He is the one who got the first prize.",
        "In example 5 the pronominal he is possessive and it doesn't need an antecedent to convey the meaning.",
        "Two adjacent sentences are said to be coherent when both the sentences contain one or more reappearing nouns.",
        "Example 6 1. b Ravi scored good marks in exams.",
        "Example 7 1. a The car race starts at noon.",
        "1. b Any car is allowed to participate.",
        "Example 6 and Example 7 demonstrates the coherence between the two sentences through reappearing nouns.",
        "WordNet covers most of the sense relationships.",
        "To find the semantic neighborhood between adjacent sentences, most of the lexical relationships such as synonyms, hyponyms, hypernyms, mero-nyms, holonyms and gradation can be used (Fellbaum 1998).",
        "Hence, semantically related terms are captured through this process.",
        "Example 8 1. a The bicycle has two wheels.",
        "1. b The wheels provide speed and stability.",
        "In Example 8, bicycle and wheels are related through bicycle is the holonym of wheels.",
        "The algorithm is carried out in four phases.",
        "Initially, each of the 4 cohesion rules is individually applied over the given document to give coherent chunks.",
        "Next, the coherent chunks obtained in each phases are merged together to give the global cohe- averaged to obtain the final weight metric.",
        "Sen-rent chunks in the document.",
        "tences are sorted in non ascending order of weight.",
        "Let G (V, E) be a weighted undirected complete graph, where V is set of vertices and E is set of weighted edges.",
        "Coherent Chunks",
        "Figure 1, shows the flow and rule positions in the coherence chunk identification module.",
        "One way to evaluate the coherence finding algorithm is to compare against human judgments made by readers, evaluating against text pre marked by authors and to see the improved result in the computational task.",
        "In this paper we will see the computational method to see the improved result."
      ]
    },
    {
      "heading": "3. Text Ranking",
      "text": [
        "The proposed graph based text ranking algorithm consists of three steps: (1) Word Frequency Analysis; (2) A word positional and string pattern based weight calculation algorithm; (3) Ranking the sentences by normalizing the results of step (1) and (2).",
        "The algorithm is carried out in two phases.",
        "The weight metric obtained at the end of each phase is",
        "In figure 2, the vertices in graph G represent the set of all sentences in the given document.",
        "Each sentence in G is related to every other sentence through the set of weighted edges in the complete graph.",
        "Let the set of all sentences in document S= {si | 1 < i < n}, where n is the number of sentences in S. The sentence weight (SW) for each sentence is calculated by average affinity weight of words in it.",
        "For a sentence si= {wj | 1 < j < mi} where mi is the number of words in sentence (1 < i < n) the affinity weight AW of a word wj is calculated as follows:",
        "y IsEqual (wj, wk)",
        "where S is the set of all sentences in the given document, wk is a word in S, WC (S) is the total number of words in S and function IsEqual(x, y) returns an integer count 1 if x and y are equal else integer count 0 is returned by the function.",
        "Next, we find the sentence weight SW (si) of each sentence si (1 < i < n) as follows:",
        "mi //wjGsi",
        "At the end of phase 1, the graph vertices hold the sentence weight as illustrated in figure 4.",
        "A fast compression hash function over word w is given as follows:",
        "where w= {c;, c2, c3 ... ck} is the ordered set of ASCII equivalents of alphabets in w and k the total number of alphabets in w. The choice of a=2 permits the exponentiations and term wise multiplications in equation 3 to be binary shift operations on a micro processor, thereby speeding up the hash computation over the text.",
        "Any lexicographically ordered bijective map from character to integer may be used to generate set w. The recommendation to use ASCII equivalents is solely for implementation convenience.",
        "Set p = 26 (for English), to cover the sample space of the set of alphabets under consideration.",
        "Compute H (w) for each word in sentence si to obtain the hashed set",
        "Next, invert each element in the set H (si) back to its ASCII equivalent to obtain the set",
        "Then, concatenate the elements in set H(si) to obtain the string si; where si is the compressed representation of sentence si.",
        "The hash operations are carried out to reduce the computational complexity in phase 2, by compressing the sentences and at the same time retaining their structural properties, specifically word frequency, word position and sentence patterns.",
        "Levenshtein distance (LD) between two strings string1 and string2 is a metric that is used to find the number of operations required to convert string1 to string2 or vice versa; where the set of possible operations on the character is insertion, deletion, or substitution.",
        "The LD algorithm is illustrated by the following example LD (SATURDAY, SUNDAY) is 3 [1]\"The whole show is dreadful,\" she cried, coming out of the menagerie of M. Martin.",
        "[2]She had just been looking at that daring speculator \"working with his hyena\" to speak in the style of the program.",
        "[3]\"By what means,\" she continued, \"can he have tamed these animals to such a point as to be certain of their affection for.\"",
        "[4]\"What seems to you a problem,\" said I, interrupting, \"is really quite natural.\"",
        "[5]\"Oh!\"",
        "she cried, letting an incredulous smile wander over her lips.",
        "[6]\"You think that beasts are wholly without passions?\"",
        "Quite the reverse; we can communicate to them all the vices arising in our own state of civilization.",
        "Consider two strings, string1 and string2 where ls1 is the length of string1 and ls2 be the length of string2.",
        "Compute MaxLen =maximum (ls1, ls2).",
        "Then LSW between string1 and string2 is the difference between MaxLen and LD, divided by Max-Len.",
        "Clearly, LSW lies in the interval 0 to 1.",
        "In case of a perfect match between two words, its LSW is 1 and in case of a total mismatch, its LSW is 0.",
        "In all other cases, 0 < LSW <1.",
        "The LSW metric is illustrated by the following example.",
        "Hence, to find the Levenshtein similarity weight, first find the Levenshtein distance LD using which LSW is calculated by the equation",
        "(j) = MaxLen(ks)-LD(si,sj)MaxLen( si, sj) where, si and .sj- are the concatenated string outputs of equation 5.",
        "Let S = {si | 1 < i < n} be the set of all sentences in the given document; where n is the number of sentences in S. Further, si = {wj | 1 < j < m}, where m is the number of words in sentence si.",
        "//sie S ,find H(si) = {H(d),H(^2)...H(£m)} using equation 3 and 4.",
        "Then, concatenate the elements in set H(si) to obtain the string ■?i; where ■?i is the compressed representation of sentence si.",
        "Each string si; 1 < i < n is represented as the vertex of the complete graph as in figure 5 and S={si\\1 < i < n}.",
        "For the graph in figure 5, find the Levenshtein similarity weight LSW between every vertex using equation 6.",
        "Find vertex weight (VW) for each string sSi; 1 < l < n by"
      ]
    },
    {
      "heading": "4. Text Ranking",
      "text": [
        "The rank of sentence si; 1 < i < n is computed as",
        "where, SW (si) is calculated by equation 2 of phase 1 and VW(>?i) is found using equation 7 of phase 2.",
        "Arrange the sentences si; 1 < i < n, in non increasing order of their ranks.",
        "SW (si) in phase 1 holds the sentence affinity in terms of word frequency and is used to determine the significance of the sentence in the overall raking scheme.",
        "VW(>?i) in phase 2 helps in the overall ranking by determining largest common subsequences and other smaller subsequences then assigning weights to it using LSW.",
        "Further, since named entities are represented as strings, repeated occurrences are weighed efficiently by LSW, thereby giving it a relevant ranking position."
      ]
    },
    {
      "heading": "5. Summarization",
      "text": [
        "Summarization is done by applying text ranking over the global coherent chunks in the document.",
        "The sentences whose weight is above the threshold is picked and rearranged in the order in which the sentences appeared in the original document."
      ]
    },
    {
      "heading": "6. Evaluation",
      "text": [
        "The ROUGE evaluation toolkit is employed to evaluate the proposed algorithm.",
        "ROUGE, an automated summarization evaluation package based on Ngram statistics, is found to be highly correlated with human evaluations (Lin and Hovy, 2003a).",
        "The evaluations are reported in ROUGE-1 metrics, which seeks unigram matches between the generated and the reference summaries.",
        "The ROUGE-1 metric is found to have high correlation with human judgments at a 95% confidence level and hence used for evaluation.",
        "(Mihalcea and Ta-rau, 2004) a graph based ranking model with based Ranking Algorithms for Sentence Extraction, Applied to Text Summarization with Rouge score 0.5023.",
        "Table 2 shows the ROUGE Score of 567 news articles provided during the Document Understanding Evaluations 2002(DUC, 2002) using the proposed algorithm after the inclusion of coherence chunker module.",
        "Table 1: ROUGE Score for the news article summarization task without coherence chunker, calculated across 567 articles.",
        "Table 2: ROUGE Score for the news article summarization task with coherence chunker, calculated across 567 articles.",
        "Comparatively Table 2, which is the the ROUGE score for summary including the coherence chunker module gives better result."
      ]
    },
    {
      "heading": "7. Related Work",
      "text": [
        "Text extraction is considered to be the important and foremost process in summarization.",
        "Intuitively, a hash based approach to graph based ranking algorithm for text ranking works well on the task of extractive summarization.",
        "A notable study report on usefulness and limitations of automatic sentence extraction is reported in (Lin and Hovy, 2003b), which emphasizes the need for efficient algorithms for sentence ranking and summarization."
      ]
    },
    {
      "heading": "8. Conclusions",
      "text": [
        "In this paper, we propose a coherence chunker module and a hash based approach to graph based ranking algorithm for text ranking.",
        "In specific, we propose a novel approach for graph based text ranking, with improved results comparative to existing ranking algorithms.",
        "The architecture of the algorithm helps the ranking process to be done in a time efficient way.",
        "This approach succeeds in grabbing the coherent sentences based on the linguistic and heuristic rules; whereas other supervised ranking systems do this process by training the summary collection.",
        "This makes the proposed algorithm highly portable to other domains and languages.",
        "Score",
        "ROUGE-1",
        "0.5103",
        "ROUGE-L",
        "0.4863",
        "Score",
        "ROUGE-1",
        "0.5312",
        "ROUGE-L",
        "0.4978"
      ]
    }
  ]
}
