{
  "info": {
    "authors": [
      "Anders Søgaard"
    ],
    "book": "Proceedings of the Third Workshop on Syntax and Structure in Statistical Translation (SSST-3) at NAACL HLT 2009",
    "id": "acl-W09-2308",
    "title": "On the Complexity of Alignment Problems in Two Synchronous Grammar Formalisms",
    "url": "https://aclweb.org/anthology/W09-2308",
    "year": 2009
  },
  "references": [
    "acl-C04-1060",
    "acl-C08-2026",
    "acl-E06-1004",
    "acl-J97-3002",
    "acl-J99-1003",
    "acl-J99-4005"
  ],
  "sections": [
    {
      "text": [
        "On the complexity of alignment problems in two synchronous grammar",
        "formalisms",
        "Anders Sagaard*",
        "Center for Language Technology University of Copenhagen soegaard@hum .ku.dk",
        "The alignment problem for synchronous grammars in its unrestricted form, i.e. whether for a grammar and a string pair the grammar induces an alignment of the two strings, reduces to the universal recognition problem, but restrictions may be imposed on the alignment sought, e.g. alignments may be 1:1, island-free or sure-possible sorted.",
        "The complexities of 15 restricted alignment problems in two very different synchronous grammar formalisms of syntax-based machine translation, inversion transduction grammars (ITGs) (Wu, 1997) and a restricted form of range concatenation grammars ((2,2)-BRCGs) (S0-gaard, 2008), are investigated.",
        "The universal recognition problems, and therefore also the unrestricted alignment problems, of both formalisms can be solved in time O(n|G|).",
        "The complexities of the restricted alignment problems differ significantly, however."
      ]
    },
    {
      "heading": "1. Introduction",
      "text": [
        "The synchronous grammar formalisms used in syntax-based machine translation typically induce alignments by aligning all words that are recognized simultaneously (Wu, 1997; Zhang and Gildea,",
        "This work was done while the first author was a Senior Researcher at the Dpt.",
        "of Linguistics, University of Potsdam, supported by the German Research Foundation in the Emmy Noether project Ptolemaios on grammar learning from parallel corpora; and while he was a Postdoctoral Researcher at the ISV Computational Linguistics Group, Copenhagen Business School, supported by the Danish Research Foundation in the project Efficient syntax-and semantics-based machine translation.",
        "2004).",
        "On a par with weak and strong generative capacity, it is thus possible to talk about the alignment capacity of those formalisms.",
        "In this paper, two synchronous grammar formalisms are discussed, inversion transduction grammars (ITGs) (Wu, 1997) and two-variable binary bottom-up non-erasing range concatenation grammars ((2,2)-BRCGs) (S0gaard, 2008).",
        "It is known that ITGs do not induce the class of inside-out alignments discussed in Wu (1997).",
        "Another class that ITGs do not induce is that of alignments with discontinuous translation units (S0-gaard, 2008).",
        "S0gaard (2008), on the other hand, shows that the alignments induced by (2,2)-BRCGs are closed under union, i.e. (2,2)-BRCGs induce all possible alignments.",
        "The universal recognition problems of both ITGs and (2,2)-BRCGs can be solved in time (n|G|).",
        "This may come as a surprise, as ITGs restrict the alignment search space considerably, while (2,2)-BRCGs do not.",
        "In the context ofthe NP-hardness of decoding in statistical machine translation (Knight, 1999; Udupa and Maji, 2006), it is natural to ask why the universal recognition problem of (2,2)-BRCGs isn't NP-hard?",
        "How can (2,2)-BRCGs induce all possible alignments and still avoid NP-hardness?",
        "This paper bridges the gap between these results and shows that when alignments are restricted to be 1 : 1, island-free or sure-possible sorted (see below), or all combinations thereof, the alignment problem of (2,2)-BRCGs is NP-hard.",
        "(2,2)-BRCGs in a sense avoid NP-hardness by giving up control over global properties of alignments, e.g. any pair of words may be aligned multiple times in a derivation.",
        "The alignment structures induced by synchronous grammars in syntax-based machine translation have the following property: If an alignment structure includes alignments v|v', v|w' and w|w', it also includes the alignment w|v', where w,w',v,v' are word instances.",
        "This follows from the fact that only words that are recognized simultanously, are aligned.",
        "Otherwise alignment structures are just a binary symmetric relation on two strings, a source and a target string, such that two words in the source, resp.",
        "target string, cannot be aligned.",
        "Maximally connected subgraphs (ignoring precedence edges) are called translation units.",
        "The alignment problem can be formulated this way (with s, s' source and target sentence, resp.",
        "):",
        "INSTANCE: G, (s,s').",
        "QUESTION: Does G induce an alignment",
        "The alignment problem in its unrestricted form reduces to the universal recognition problem (Barton et al., 1987), i.e. whether for a grammar G and a string pair (s,s') it holds that (s,s') G L(G)?",
        "Of course the alignment may in this case be empty or partial.",
        "Both ITGs and (2,2)-BRCGs permit unaligned nodes.",
        "This paper investigates the complexity of restricted versions of the alignment problem for ITGs and (2,2)-BRCGs.",
        "A simple example, which can be solved in linear time for both formalisms, is the alignment problem wrt.",
        "alignments that consist of a single translation unit including all source and target words.",
        "It may be formulated this way:",
        "INSTANCE: G, (s,s').",
        "QUESTION: Does G induce an alignment that consists of a single translation unit with no unaligned words on (s, s )?",
        "This can be solved for ITGs by checking if there is a production rule that introduces all the words in the right order such that:",
        "lw\\w' is our short hand notation for saying that w, a word in the source string, and w', a word in the target string, have been aligned.",
        "In the formal definition of alignments below, it is said that w e Vs (w is a word in the source string), w' e Vt(w' is a word in the target string) and (w, w') e A, i.e. w is aligned to w', and vice versa.",
        "Alignments are bidirectional in what follows.",
        "• The LHS nonterminal symbol (possibly suffixed by the empty string e) can be derived from the start symbol.",
        "• The empty string e can be derived from all RHS nonterminal symbols.",
        "The only difference for (2,2)-BRCGs is that production rules are typically referred to as clauses in the range concatenation grammar literature.",
        "This paper considers some more complex examples; namely, the alignment problems wrt.",
        "1 : 1-alignments, (source-side and/or target-side) islandfree alignments and sure-possible sorted alignments.",
        "The formal definitions of the three properties are as follows:",
        "Definition 1.1.",
        "An alignment structure for a string pair (wi ... wn, v1 ... vm) is a graph D = (V, E) where V = VS : {wi,..., w„} U Vt : {vi,..., vm| and E = Es : {w^ -< Wj | i < j} U Et : {v^ -< Vj | i < j} U A where A C Vs x Vt.",
        "If (w,, vj) G A, also written w^vj, wj is said to be aligned to vj, and vice versa.",
        "An alignment structure is said to be wellformed iff for all wj, wj, v,', vj' it holds that if wj|vj', wj|vj' and wj |v»' are aligned then so are wj |vj'.",
        "An alignment structure is said to be 1:1 iff no word occurs in two distinct tuples in A.",
        "An alignment structure is said to be island-free iff all words in V occur in some tuple in A; it is said to be source-side, resp.",
        "target-side, island-free if all words in Vs, resp.",
        "Vt, occur in some tuple in A.",
        "The set of alignments is divided into sure and possible alignments, i.e. A = S U P (in most cases P = 0).",
        "An alignment structure is said to be sure-possible sorted iffif it holds that (wj; vj') G S then for all wj, vj' neither (wj; vj') G P nor (wj, vj') G P holds; similarly, if it holds that (wj; vj') G P then for all wj, vj' neither (w , v ') G S nor (wj, vj') G S holds.",
        "The precedence relations in E are not important for any of our definitions, but are important for meaningful interpretation of alignment structures.",
        "Note that synchronous grammars are guaranteed to induce wellformed alignment structures.",
        "Some brief motivation for the properties singled out:",
        "is a production rule with the start symbol in the LHS that introduces all the words in the right order, since all production rules with nonterminal symbols in the RHS are branching and contain no terminal symbols.",
        "• 1 : 1 alignments have been argued to be adequate by Melamed (1999) and elsewhere, and it may therefore be useful to know ifa grammar extracted from a parallel corpus produces 1 : 1-alignments for a finite set of sentence pairs.",
        "• Island-free alignments are interesting to the extent that unaligned nodes increase the chance of translation errors.",
        "An island threshold may for instance be used to rule out risky translations.",
        "• The notion of sure-possible sorted alignments is more unusual, but can, for instance, be used to check if the use of possible alignments is consistently triggered by words that are hard to align.",
        "The results for all cross-classifications of the four properties - 1 : 1, source-side island-free (IF(s)), target-side island-free (IF(t)) and sure-possible sorted (SP) - are presented in the table in Figure 1.",
        "Note that all (2 – 1 = 15) combinations of the four properties lead to NP-hard alignment problems for (2,2)-BRCGs.",
        "Consequently, while the unrestricted alignment problem for (2,2)-BRCGs can be solved in O(n|G|), the alignment problem turns NP-hard as soon as restrictions are put on the alignments sought.",
        "So the extra expressivity of (2,2)-BRCGs in a way comes at the expense of control over the kind of alignments obtained.",
        "On the structure of the paper: Sect.",
        "2 and 3 briefly introduce, resp., ITGs and (2,2)-BRCGs.",
        "Sect.",
        "4 presents three NP-hardness proofs from which the 15 results in Figure 1 can be derived.",
        "The three proofs are based on reconstructions of the Hamilton circuit problem, the 3SAT problem and the vertex cover problem (Garey and Johnson, 1979)."
      ]
    },
    {
      "heading": "2. Inversion transduction grammars",
      "text": [
        "Inversion transduction grammars (ITGs) (Wu, 1997) are a notational variant of binary syntax-directed translation schemas (Aho and Ullman, 1972) and are usually presented with a normal form:",
        "where A,B,C G N and e, f G T. The first production rule, intuitively, says that the subtree []c]a in the source language translates into a subtree []C]a, whereas the second production rule inverts the order in the target language, i.e. [[]c[]b]a.",
        "The universal recognition problem of ITGs can be solved in time O(n|G|) by a CYK-style parsing algorithm with two charts.",
        "Result",
        "1 : 1",
        "IF(s)",
        "IF(t)",
        "SP",
        "ITGs",
        "(2,2)-BRCGs",
        "(1)",
        "/",
        "0(n\\G\\) 0(n\\G\\) 0(n\\G\\) 0(n\\G\\) 0(n\\G\\) 0(n\\G\\) 0(n\\G\\) 0(n\\G\\) 0(n\\G\\) 0(n\\G\\) 0(n\\G\\) 0(n\\G\\) 0(n\\G\\) 0(n\\G\\) 0(n\\G\\)",
        "NP-complete",
        "(2)",
        "NP-complete",
        "(3)",
        "NP-complete",
        "(4)",
        "/",
        "NP-complete",
        "(5)",
        "/",
        "/",
        "NP-complete",
        "(6)",
        "/",
        "/",
        "NP-complete",
        "(7)",
        "/",
        "/",
        "NP-complete",
        "(8)",
        "/",
        "/",
        "NP-complete",
        "(9)",
        "/",
        "/",
        "NP-complete",
        "(10)",
        "/",
        "/",
        "NP-complete",
        "(11)",
        "/",
        "/",
        "/",
        "NP-complete",
        "(12)",
        "/",
        "/",
        "/",
        "NP-complete",
        "(13)",
        "/",
        "/",
        "/",
        "NP-complete",
        "(14)",
        "/",
        "/",
        "/",
        "NP-complete",
        "(15)",
        "/",
        "/",
        "NP-complete",
        "Figure 1 tells us that all the restricted alignment problems listed can be solved in time O(n|G|).",
        "The explanation is simple.",
        "It can be read off from the syntactic form of the production rules in ITGs whether they introduce 1 : 1 -alignments, island-free alignments or sure-possible sorted alignments.",
        "Note that normal form ITGs only induce 1 : 1-alignments.",
        "Consider, for example, the following grammar, not in normal form for brevity:",
        "Note that this grammar recognizes the translation {(anbn,bnam | n > m}.",
        "To check if for a string pair (w1 ... wn, v1 ... vm) this grammar induces an island-free alignment, simply remove production rule (3).",
        "It holds that only strings in the sublanguage {(anbn,bnan | n > 1} induce island-free alignments.",
        "Similarly, to check if the grammar induces source-side island-free alignments for string pairs, no production rules will have to be removed.",
        "3 Two-variable binary bottom-up non-erasing range concatenation grammars",
        "(2,2)-BRCGs are positive RCGs (Boullier, 1998) with binary start predicate names, i.e. p(S) = 2.",
        "In RCG, predicates can be negated (for complementation), and the start predicate name is typically unary.",
        "The definition is changed only for aesthetic reasons; a positive RCG with a binary start predicate name S is turned into a positive RCG with a unary start predicate name S simply by adding a clause S'(XiX2) – S(Xi,X2).",
        "A positive RCG is a 5-tuple G = (N, T, V, P, S).",
        "N is a finite set of predicate names with an arity function p: N – N, T and V are finite sets of, resp., terminal and variables.",
        "P is a finite set of clauses of the form V0 – V ... Vw, where each of the V^, 0 < i < m, is a predicate of the form A(ai;..., ).",
        "Each aj G (TU V)*, 1 < j < p(A), is an argument.",
        "S G N is the start predicate name with p(S) = 2.",
        "Note that the order of RHS predicates in a clause is of no importance.",
        "Three subclasses of RCGs are introduced for further reference: An RCG G = {N, T, V, P, S) is simple iff for all c G P, it holds that no variable X occurs more than once in the LHS of c, and if X occurs in the LHS then it occurs exactly once in the RHS, and each argument in the RHS of c contains exactly one variable.",
        "An RCG G = {N, T, V, P, S) is a k-RCG iff for all A G N, p(A) < k. Finally, an RCG G = {N, T, V, P, S) is said to be bottom-up non-erasing iff for all c G P all variables that occur in the RHS of c also occur in its LHS.",
        "A positive RCG is a (2,2)-BRCG iff it is a 2-RCG, if an argument of the LHS predicate contains at most two variables, and if it is bottom-up non-erasing.",
        "n<i < j < n + 1+ m, i.e. a string span, which denotes a substring wi+l .",
        ".",
        ".",
        "wj in the source string or a substring vi+l .",
        ".",
        ".",
        "vj in the target string.",
        "Only consequtive ranges can be concatenated into new ranges.",
        "Terminals, variables and arguments in a clause are bound to ranges by a substitution mechanism.",
        "An instantiated clause is a clause in which variables and arguments are consistently replaced by ranges; its components are instantiated predicates.",
        "For example A({g ... h), {i... j)) – B({g ... h), {i + 1... j – 1)) is an instantiation of the clause A(Xl,aY1b) – B(Xl,Y1) if the target string is such that vi+l = a and vj = b.",
        "A derive relation ==> is defined on strings of instantiated predicates.",
        "If an instantiated predicate is the LHS of some instantiated clause, it can be replaced by the RHS of that instantiated clause.",
        "The language of a (2,2)-BRCG G = {N, T, V, P, S) is input string pair {wl .",
        ".",
        ".",
        "wn, vn+2 .",
        ".",
        ".",
        "vn+l+m) isrecognized iff the empty string can be derived from S({0,n), {n + l,n + 1 + m)).",
        "It is not difficult to see that ITGs are also (2,2)-BRCGs.",
        "The left column is ITG production rules; the right column their translations in simple (2,2)-BRCGs.",
        "Consequently, (2,2)-BRCGs recognize all translations recognized by ITGs.",
        "In fact the inclusion is strict, as shown in Sogaard (2008).",
        "The universal recognition problem of (2,2)-BRCGs can be solved in time O(n|G|) by the CYK-style parsing algorithm presented in Sogaard (2008).",
        "Note that L(G) = {(anbmcndm, (ab)n(cd)m) | m, n > 0}."
      ]
    },
    {
      "heading": "4. Results",
      "text": [
        "One possible way to check for island-freeness and sure-possible sortedness in the context of (2,2)-BRCGs is to augment the CYK-style algorithm with feature structures (Boolean vectors); all there is needed, e.g. to check sure-possible sortedness, is to pair up the nonterminals inserted in the cells of the chart with a flat feature structure of the form:",
        "SUREi Vol1SUREn V0ln",
        "where n is the length of the source, resp.",
        "target, string in the source, resp.",
        "target, chart, and 1 < i < n : voli £ {+, – }.",
        "When a clause applies that induces a sure alignment between a word wi and some word in the target, resp.",
        "source, string, the attribute suREi is assigned the value +; if a possible alignment is induced between Wi and another word, the attribute is assigned the value -.",
        "This can all be done in constant time.",
        "A copying clause now checks if the appropriate nonterminals have been inserted in the cells in question, but also that the associated feature structures unify.",
        "This can be done in linear time.",
        "Feature structures can be used the same way to record what words have been aligned to check island-freeness.",
        "Unfortunately, this technique does not guarantee polynomial runtime.",
        "Note that there can be 2n many distinct feature structures for each nonterminal symbol in a chart.",
        "Consequently, whereas the size of a cell in the standard CYK algorithm is bounded by | N |, and in synchronous parsing by |N| x (2n – 1), the cells are now of exponential size in the worst case.",
        "The following three sections provide three NP-hardness proofs: The first shows that the alignment problem wrt.",
        "1 : 1-alignments is NP-hard for (2,2)-BRCGs and goes by reduction of the Hamilton circuit problem for directed connected graphs.",
        "The second shows that the alignment problem wrt.",
        "source-or target-side island-free and sure-possible sorted alignments is NP-hard for (2,2)-BRCGs and goes by 3SAT reduction.",
        "The third proof is more general and goes by reduction of the vertex cover problem.",
        "All three formal decision problems are discussed in detail in Garey and Johnson (1979).",
        "All 15 results in Figure 1 are derived from modifications of these proofs.",
        "A -",
        "+ [BC\\",
        "A(x1x2,y1y2) -",
        "-*B(Xi,Yi)G (X2,Y2)",
        "A -",
        "+ (BC)",
        "A(x1x2,y1y2) -",
        "■^B(Xi,y2)C (X2,Yi)",
        "A-",
        "+ e\\f",
        "A(eJ)^e",
        "A-",
        "-> e | e",
        "A(e, e) – > e",
        "A-",
        "^1/",
        "A(e,/)^e",
        "(1)",
        "Ss(Xi,Yi) -",
        "-* So(Xi,Yi)S0 (Xi,Yi",
        "(2)",
        "So(XiX2,Yi)",
        "-* Si(Xi,Yi)D(X2)",
        "(3)",
        "Si(aXic, abYi) -",
        "- Si(Xi,Yi)",
        "(4)",
        "Si(Xi,YiYî) -",
        "-* B(Xi)G(Yi)D(Yî)",
        "(5)",
        "SO (XiX2,Yi)",
        "-* Si (X2,Yi)A(Xi)",
        "(6)",
        "Si (bXid,Yicd) -",
        "- Si (Xi,Yi)",
        "(7)",
        "Si (Xi.YiYO -",
        "-* G(Xi)A(Yi)B(Yî)",
        "(8)",
        "A(aXi) -",
        "- A(Xi)",
        "(9)",
        "A(e) -",
        "e",
        "(10)",
        "B(bXi) -",
        "- B(Xi)",
        "(11)",
        "B(e) -",
        "e",
        "(12)",
        "G(cXi) -",
        "- G(Xi)",
        "(13)",
        "G (e) -",
        "e",
        "(14)",
        "D(dXi) -",
        "- D(Xi)",
        "(15)",
        "D(e) -",
        "e",
        "The",
        "string pair {abbcdd, abcdcd) is derived:",
        "Ss({0, 6), {0, 6))",
        "So({0, 6), {0, 6))SO({0, 6), {0, 6))",
        "(1)",
        "Si({0, 4), {0, 6))D({4, 6)) SO ({0, 6), {0, 6))",
        "(2)",
        "Si({0, 4), {0, 6))SO({0, 6), {0, 6))",
        "(14-15)",
        "Si({1, 3), {2, 6))SO({0, 6), {0, 6))",
        "(3)",
        "B({1, 3))G({2, 4))D({4, 6)) SO ({0, 6), {0, 6))",
        "(4)",
        "SO ({0, 6), {0, 6))",
        "(10-15)",
        "Si({1, 6), {0, 6))A({0,1))",
        "(5)",
        "Si({1, 6), {0, 6))",
        "(8-9)",
        "Si({2, 5),{0,4))",
        "(6)",
        "Si({3,4), {0, 2))",
        "(6)",
        "G({3, 4))A({0,1))B({1, 2)) e",
        "(7)",
        "(8-13)",
        "Theorem 4.1.",
        "The alignment problem wrt.",
        "1 : 1-alignments is NP-hardfor (2,2)-BRCGs.",
        "Proof.",
        "An instance of the Hamilton circuit problem for directed connected graphs is simply a directed connected graph G = (V, E) and the problem is whether there is a path that visits each vertex exactly once and returns to its starting point?",
        "Consider, for instance, the directed connected graph:",
        "It is easy to see that there is no path in this case that visits each vertex exactly once and returns to its starting point.",
        "The intuition behind our reconstruction of the Hamilton circuit problem for directed connected graphs is to check this via alignments between a sequence of all the vertices in the graph and itself.",
        "The grammar permits an alignment between two words w| v if there is a directed edge between the corresponding nodes in the graph, e.g. (w, v) £ E. The alignment structures below depict the possible alignments induced by the grammar obtained by the translation described below for our example graph:",
        "Since no alignment above is 1 : 1, there is no solution to the corresponding circuit problem.",
        "The translation goes as follows:",
        "• Add a rule S(Xi,Y1) – {S„4(Xi,Y1) | Vvi.3vj.",
        "(vi, Vj) £ E}.",
        "• For all vi £ V add a rule T(viXi) – T(Xi).",
        "• Add a rule T(e) – e.",
        "The grammar ensures source-side island-freeness, and therefore ifthere exists a 1 : 1-alignment ofany linearization of V and itself, by connectivity of the input graph, there is a solution to the Hamilton circuit problem for directed connected graphs.",
        "sure-possible sortedness for (2,2)-BRCGs Theorem 4.2.",
        "The alignment problem wrt.",
        "targetside island-free and sure-possible sorted alignments is NP-hard for (2,2)-BRCGs.",
        "Proof.",
        "An instance of the 3SAT problem is a propositional logic formula 0 that is a conjunction of clauses of three literals connected by disjunctions, and the problem whether this formula is satisfiable, i.e. has amodel?",
        "Say 0 = pVq Vr A pVf V f. For our reconstruction, we use the propositional variables in 0 as source string, and 0 itself with A's omitted and conjuncts as words as the target string.",
        "One of the representations of a solution constructed by the translation described below is the following alignment structure:",
        "Solid lines are sure alignments; dotted lines are possible alignments.",
        "The intuition is to use sure alignments to encode true assignments, and possible alignments as false assignments.",
        "The alignment above thus corresponds to the model {p, f }, which clearly satisfies 0.",
        "For the translation, assume that each 3SAT instance, over a set of propositional variables PROP, consists of a set of clauses c1... cm that are sets of literals of size 3.",
        "For any literal j, if j = pj then pos (j ) = pj and lit (j ) = – ; and if j = pj then pos (j) = pj and lit(j) = +.",
        "If j is a literal in cj, we write j G cj.",
        "First add the following four clauses:",
        "Sp(Xipos (1j )X2,YicjY2) - T(Xi)T(X2) T(Yi)T(Y2) .",
        "Sg(Xipos (1j )X2,YicjY2) - T(Xi)T(X2) T(Yi)T(Y2) .",
        "• For all pj, add T(p,Xi) - T(Xi).",
        "• For all cj, add T(cjXi) - T(Xi).",
        "• Add a rule T(e) - e.",
        "It is easy to see that the first rule adds at most 7m clauses, which for the largest non-redundant formulas equals 7((2|PROP|)).",
        "The second rule adds at most 2|PROP| clauses; and the third at most m < (2|PROP|) clauses.",
        "It is also easy to see that the grammar induces a target-side island-free, sure-possible sorted alignment ifand only ifthe 3SAT instance is satisfiable.",
        "Note that the grammar does not guarantee that all induced alignments are target-side island-free.",
        "Nothing, in other words, corresponds to conjunctions in our reconstruction.",
        "This is not necessary as long as there is at least one target-side island-free alignment that is induced.",
        "□",
        "Note that the proof also applies in the case where it is the source side that is required to be island-free.",
        "All needed is to make the source string the target string, and vice versa.",
        "Note also that the proof can be modified for the case where both sides are islandfree: Just add a dummy symbol to the clause side and allow (or force) all propositional variables to be aligned to this dummy symbol.",
        "Consequently, if there is a target-side (clause-side) island-free alignment there is also an island-free alignment.",
        "Reversely, if there is an island-free alignment there is also a target-side island-free alignment of the string pair in question.",
        "Note also that a more general proof can be obtained by introducing a clause, similar to the clause introduced in the first bullet point of the Hamilton circuit reduction in the proof of Theorem 4.1: S(Xi,Yi) - {SCi(Xi,Y1) | 1 < i < m}.",
        "The four rules used to change between sure and possible alignments then of course need to be copied out for all SCi predicates, and the LHS predicates, except T, of the other clauses must be properly subscripted.",
        "Now the grammar enforces targetside island-freeness, and sure-possible sortedness is the only restriction needed on alignments.",
        "Consequently, this reduction proves (4) that the alignment problem wrt.",
        "sure-possible sortedness is NP-hard for (2,2)-BRCGs.",
        "Theorem 4.3.",
        "The alignment problem wrt.",
        "island-free alignments is NP-hard for (2,2)-BRCGs.",
        "for this instance, and a (2,2)-BRCG with the clauses in Figure 2.",
        "Note that there are four kinds of clauses:",
        "• A clause with an S predicate in the LHS.",
        "In general, there will be one such clause in the grammar constructed for any instance of the vertex cover problem.",
        "• 8 clauses with pj predicates in the LHS.",
        "In general, there will be 2|E| many clauses of this form in the grammars.",
        "• 8 clauses with Uj predicates in the LHS.",
        "In general, there will be | V| x (| V| – k) many clauses of this form in the grammars.",
        "• 16 clauses with 5i predicates in the LHS.",
        "In general, there will be (|E| x |V| – |E| – |E| x (|V | – k)) x |V | many clauses of this form in the grammars.",
        "For an instance {D = {V, E), k), the translation function in general constructs the following clauses:",
        "The string pair is constructed this way:",
        "Finally, for all words w in this string pair, add:",
        "Since this translation is obviously polynomial, it follows that the alignment problem wrt.",
        "island-free alignments for (2,2)-BRCGs is NP-hard.",
        "□",
        "Note that the proof also applies if only the source, resp.",
        "target, side is required to be island-free, since the grammar restricts the alignments in a way such thatifone side is island-free then so is the otherside.",
        "This gives us results (2) and (3).",
        "It is not difficult to see either that it is possible to convert the grammar into a grammar that induces 1 : 1-alignments.",
        "This gives us results (5), (8) and (11).",
        "Of course by the observation that all the grammars only use sure alignments, it follows that the alignment problems in (7), (9-10) and (12-15) are also NP-hard."
      ]
    },
    {
      "heading": "5. Conclusion",
      "text": [
        "The universal recognition problems of both ITGs and (2,2)-BRCGs can be solved in time O(n|G|).",
        "This may come as a surprise, as ITGs restrict the alignment space considerably, while (2,2)-BRCGs induce all possible alignments.",
        "In the context of the NP-hardness of decoding in statistical machine translation (Knight, 1999; Udupa and Maji, 2006), it is natural to ask why the universal recognition problem of (2,2)-BRCGs isn't NP-hard?",
        "This paper bridges the gap between these results and shows that when alignments are restricted to be 1 : 1, island-free or sure-possible sorted, or all combinations thereof, the alignment problem of (2,2)-BRCGs is NP-hard.",
        "Consequently, while the unrestricted alignment problem for (2,2)-BRCGs can be solved in O(n|G|), the alignment problem turns NP-hard as soon as restrictions are put on the alignments sought.",
        "So the extra expressivity in a way comes at the expense of control over the kind of alignments obtained.",
        "Note also that an alignment of two words may be enforced multiple times in a (2,2)-BRCGs parse, since two derivation trees that share leaves on both sides can align the same two words.",
        "Our results are not intended to be qualifications of the usefulness of (2,2)-BRCGs (Sogaard, 2008), but rather they are attempts to bridge a gap in our understanding of the synchronous grammar formalisms at hand to us in syntax-based machine translation.",
        "Pi(XipiX2, YiaYi) pi(Xi piX2,YicY2)",
        "U (XiUX2,aaaaYi) U i(XiUX2,YibbbbY2) U (XiUX2,YibbbbY2)",
        "Figure 2: A (2,2)-BRCG for the instance of the vertex cover problem (({a, b, c, d}, {(a, c), (b, c), (b, d), (c, d)}), 2)."
      ]
    }
  ]
}
