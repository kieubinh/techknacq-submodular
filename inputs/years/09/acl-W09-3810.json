{
  "info": {
    "authors": [
      "Laura Kallmeyer",
      "Wolfgang Maier",
      "Giorgio Satta"
    ],
    "book": "Proceedings of the 11th International Conference on Parsing Technologies (IWPT’09)",
    "id": "acl-W09-3810",
    "title": "Synchronous Rewriting in Treebanks",
    "url": "https://aclweb.org/anthology/W09-3810",
    "year": 2009
  },
  "references": [],
  "sections": [
    {
      "text": [
        "Laura Kallmeyer Wolfgang Maier Giorgio Satta",
        "Tübingen, Germany Tübingen, Germany Padova, Italy",
        "lk@sfs.uni-tuebingen.de wo.maier@uni-tuebingen.de satta@dei.unipd.it",
        "Several formalisms have been proposed for modeling trees with discontinuous phrases.",
        "Some of these formalisms allow for synchronous rewriting.",
        "However, it is unclear whether synchronous rewriting is a necessary feature.",
        "This is an important question, since synchronous rewriting greatly increases parsing complexity.",
        "We present a characterization of recursive synchronous rewriting in constituent treebanks with discontinuous annotation.",
        "An empirical investigation reveals that synchronous rewriting is actually a necessary feature.",
        "Furthermore, we transfer this property to grammars extracted from treebanks."
      ]
    },
    {
      "heading": "1. Introduction",
      "text": [
        "Discontinuous phrases are frequent in natural language, particularly in languages with a relatively free word order.",
        "Several formalisms have been proposed in the literature for modeling trees containing such phrases.",
        "These include non-projective dependency grammar (Nivre, 2006), discontinuous phrase structure grammar (DPSG) (Bunt et al., 1987), as well as linear context-free rewriting systems (LCFRS) (Vijay-Shanker et al., 1987) and the equivalent formalism of simple range concatenation grammar (sRCG) (Boul-lier, 2000).",
        "Kuhlmann (2007) uses LCFRS for non-projective dependency trees.",
        "DPSG have been used in Plaehn (2004) for data-driven parsing of treebanks with discontinuous constituent annotation.",
        "Maier and Sogaard (2008) extract sRCGs from treebanks with discontinuous constituent structures.",
        "Both LCFRS and sRCG can model discontinuities and allow for synchronous rewriting as well.",
        "We speak of synchronous rewriting when two or more context-free derivation processes are instantiated in a synchronous way.",
        "DPSG, which has also been proposed for modeling discontinuities, does not allow for synchronous rewriting because the different discontinuous parts of the yield of a non-terminal are treated locally, i.e., their derivations are independent from each other.",
        "So far, synchronous rewriting has not been empirically motivated by linguistic data from treebanks.",
        "In this paper, we fill this gap by investigating the existence of structures indicating synchronous rewriting in treebanks with discontinuous annotations.",
        "The question of whether we can find evidence for synchronous rewriting has consequences for the complexity of parsing.",
        "In fact, parsing with synchronous formalisms can be carried out in time polynomial in the length of the input string, with a polynomial degree depending on the maximum number of synchronous branches one can find in derivations (Seki et al., 1991).",
        "In this paper, we characterize synchronous rewriting as a property of trees with crossing branches and in an empirical evaluation, we confirm that treebanks do contain recursive synchronous rewriting which can be linguistically motivated.",
        "Furthermore, we show how this characterization transfers to the simple RCGs describing these trees."
      ]
    },
    {
      "heading": "2. Synchronous Rewriting Trees in German treebanks",
      "text": [
        "By synchronous rewriting we indicate the synchronous instantiation of two or more context-free derivation processes.",
        "As an example, consider the language L = [anbncndn n > 1}.",
        "Each of the two halves of some w L can be obtained through a standalone context-free derivation, but for w to be in L the two derivations must be synchronized somehow.",
        "For certain tasks, synchronous rewriting is a desired property for a formalism.",
        "In machine translation, e.g., synchronous rewriting is extensively used to model the synchronous dependence between the source and target languages (Chiang, 2007).",
        "The question we are concerned with in this paper is whether we can find instances of recursive synchronous rewriting in treebanks that show discontinuous phrases.",
        "We make the assumption that, if the annotation of a treebank allows to express synchronous rewriting, then all cases of synchronous rewriting are present in the annotation.",
        "This means that, on the one hand, there are no cases of synchronous rewriting that the annotator \"forgot\" to encode.",
        "Therefore unrelated cases of parallel iterations in different parts of a tree are taken to be truly unrelated.",
        "On the other hand, if synchronous rewriting is annotated explicitely, then we take it to be a case of true synchronous rewriting, even if, based on the string, it would be possible to find an analysis that does not require synchronous rewriting.",
        "This assumption allows us to concentrate only on explicit cases of synchronous rewriting .",
        "We concentrate on German treebanks annotated with trees with crossing branches.",
        "In such trees, synchronous rewriting amounts to cases where different components of a non-terminal category develop in parallel.",
        "In particular, we search for cases where the parallelism can be iterated.",
        "An example is the relative clause in (1), found in TIGER.",
        "Fig.",
        "1 gives the annotation.",
        "As can be seen in the annotation, we have two VP nodes, each of which has a discontinuous span consisting of two parts.",
        "The two parts are separated by lexical material not belonging to the VPs.",
        "The two components of the second VP (Pop-Idol and werden) are included in the two components of the first, higher, VP (genausogut auch Pop-Idol and werden konnen).",
        "In other words, the two VP components are rewritten in parallel containing again two smaller VP components.",
        "(1) ... der genausogut auch Pop-Idol hatte werden konnen ... who as well also pop-star AUX become could \"who could as well also become a pop-star\"",
        "Let us assume the following definitions: We map the elements of a string to their positions.",
        "We then say that the yield Y of a node n in a tree is the set of all indices i such that n dominates the leaf labeled with the ith terminal.",
        "A yield Y has a gap if there are ii < i2 < i3 such that ii ,i3 G Y and i2 G Y.",
        "For all i, j G Y with i < j, the set Y^j} = {k | i < k < j} is a component of Y if Y{i,j) C Y and i – 1 G Y and j +1 G Y.",
        "We order the components of Y such that < Y(i2j-2) ifii < i2.",
        "Trees showing recursive synchronous rewriting can be characterized as follows: We have a non-terminal node n1 with label A whose yield has a gap.",
        "ni dominates another node n2 with label A such that for some i = j, the ith component of the yield of n2 is contained in the ith component of the yield of ni and similar for the jth component.",
        "We call the path from ni to n2 a recursive synchronous rewriting segment (RSRS).",
        "Table 1 shows the results obtained from searching for recursive synchronous rewriting in the German TIGER and NeGra treebanks.",
        "In a preprocessing step, punctuation has been removed, since it is directly attached to the root node and therefore not included in the annotation.",
        "Example (1) shows that we find instances of recursive synchronous rewriting where each of the rewriting steps adds something to both of the parallel components.",
        "(1) was not an isolated case.",
        "The annotation of (1) in Fig. 1 could be turned into a context-free structure if the lowest node dominating the material in the gap while not dominating the synchronous rewriting nodes (here VAFIN) is attached lower, namely below the lower VP node.",
        "(Note however that there is good linguistic motivation for attaching it high.)",
        "Besides such cases, we even encountered cases where the discontinuity cannot be removed this way.",
        "An example is (2) (resp.",
        "Fig.",
        "2) where we have a gap containing an NP such that the lowest node dominating this NP while not dominating the synchronous rewriting nodes has a daughter to the right of the yields of the synchronous rewriting nodes, namely the extraposed relative clause.",
        "This structure is of the type ancbnd, where a and b depend on each other in a left-to-right order and can be nested, and c and d also depend on each other and must be generated together.",
        "This is a structure that requires synchronous rewriting, even on the basis of the string language.",
        "Note that the nesting of VPs can be iterated, as can be seen in (3).",
        "TIGER",
        "NeGra",
        "number of trees",
        "40,013",
        "20,597",
        "total num.",
        "of RSRS in all trees",
        "1476",
        "600",
        "av.",
        "RSRS length in all trees",
        "2.13",
        "2.12",
        "max.",
        "RSRS length in all trees",
        "5",
        "4",
        "Abstellanlage gebaut werden konne, der ... parking facility built be could, which .",
        ".",
        ".",
        "\"whether on their premises precisely the type of parking facility could be built, which .",
        ".",
        ". \"",
        "(3) ... ob auf deren Gelande der Typ von .",
        ".",
        ".",
        "whether on their premises the type of Abstellanlage eigentlich hatte schon gebaut werden parking facility actually had already built be sollen, der .",
        ".",
        ".",
        "should, which .",
        ".",
        ".",
        "\"whether on their premises precisely the type of parking facility should actually already have been built, which",
        "As a conclusion from these empirical results, we state that to account for the data we can find in treebanks with discontinuities, i.e., with crossing branches, we need a formalism that can express synchronous rewriting."
      ]
    },
    {
      "heading": "3. Synchronous Rewriting in Grammars Extracted from Treebanks",
      "text": [
        "In the following, we will use simple RCG (which are equivalent to LCFRS) to model our treebank annotations.",
        "We extract simple RCG rewriting rules from NeGra and TIGER and check them for the possibility to generate recursive synchronous rewriting.",
        "A simple RCG (Boullier, 2000) is a tuple G = (N, T, V, P, S) where a) N is a finite set of predicate names with an arity function dim: N – N, b) T and V are disjoint finite sets of terminals and variables, c) P is a finite set of clauses of the form A(ai ,...,adtm (a) ) – ",
        "for m > 0 where A, Ai,..., Am G N, Xj(i) G V for 1 < i < m, 1 < j < dim(Ai) and ai G (T U V)* for 1 < i < dim (A), and e) S G N is the start predicate name with dim (S) = 1.",
        "For all c G P, it holds that every variable X occurring in c occurs exactly once in the left-hand side (LHS) and exactly once in the RHS.",
        "A simple RCG G = (N, T, V, P, S) is a simple k-RCG if for all A G",
        "N, dim(A) < k.",
        "For the definition of the language of a simple",
        "RCG, we borrow the LCFRS definitions here: Let G = (N, T, V, P, S) be a simple RCG.",
        "For every A G N, we define the yield of A, yield(A) as follows:",
        "b) For every clause",
        "(iii) f (xy) = f (x)f (y) for all x,y G (T U V)+.",
        "c) Nothing else is in yield(A).",
        "The language is then {w | (w) G yield(S)}.",
        "We are using the algorithm from Maier and Sogaard (2008) to extract simple RCGs from Ne-Gra and TIGER.",
        "For the tree in Fig. 1, the algorithm produces for instance the following clauses:",
        "PRELS(der) – e ADV(genausogut) – e",
        "We distinguish different usages of the same category depending on their numbers of yield components.",
        "E.g., we distinguish non-terminals VP1, VP2, .",
        ".",
        ".",
        "depending on the arity of the VP.",
        "We define cat (A) for A G N as the category of A, independent from the arity, e.g., cat(VP2) =VP.",
        "In terms of simple RCG, synchronous rewriting means that in a single clause distinct variables occurring in two different arguments of the LHS predicate are passed to two different arguments of the same RHS predicate.",
        "We call this recursive",
        "ob auf dem Gelande der Typ von Abstellanlage gebaut werden sollen, der...",
        "if, by a sequence of synchronous rewriting steps, we can reach the same two arguments of the same predicate again.",
        "Derivations using such cycles of synchronous rewriting lead exactly to the recursive synchronous rewriting trees characterized in section 2.",
        "In the following, we check to which extent the extracted simple RCG allows for such cycles.",
        "In order to detect synchronous rewriting in a simple k-RCG G, we build a labeled directed graph G = (Vg, Eg, l) from the grammar with Vg a set of nodes, Eg a set of arcs and l : Vg – N x {0,..., k} x {0,..., k} where N' = {cat(A) | A G N} a labeling function.",
        "G is constructed as follows.",
        "For each clause Ao (a) – A1 (al)... Am(am) G P we consider all pairs of variables Xs,Xt for which the following conditions hold: (i) Xs and Xt occur in different arguments i and j of Ao, 1 < i < j < dim(Ao); and (ii) Xs and Xt occur in different arguments q and r of the same occurrence of predicate Ap in the RHS, 1 < q < r < dim(Ap) and 1 < p < m. For each of these pairs, two nodes with labels [cat(A0), i, j] and [cat(Ap), q, r], respectively, are added to Vg (if they do not yet exist, otherwise we take the already existing nodes) and a directed arc from the first node to the second node is added to Eg.",
        "The intuition is that an arc in G represents one or more clauses from the grammar in which a gap between two variables in the LHS predicate is transferred to the same RHS predicate.",
        "To detect recursive synchronous rewriting, we then need to discover all elementary cycles in G, i.e., all cycles in which no vertex appears twice.",
        "In order to accomplish this task efficiently, we exploit the algorithm presented in Johnson (1975).",
        "On a grammar extracted from NeGra (19,100 clauses), the algorithm yields a graph with 28 nodes containing 206,403 cycles of an average length of 12.86 and a maximal length of 28."
      ]
    },
    {
      "heading": "4. Conclusion",
      "text": [
        "The starting point of this paper was the question whether synchronous rewriting is a necessary feature of grammer formalisms for modelling natural languages.",
        "In order to answer this question, we have characterized synchronous rewriting in terms of properties of treebank trees with crossing branches.",
        "Experiments have shown that recursive cases of synchronous rewriting occur in treebanks for German which leads to the conclusion that, in order to model these data, we need formalisms that allow for synchronous rewriting.",
        "In a second part, we have extracted a simple RCG from these treebanks and we have characterized the grammar properties that are necessary to obtain recursive synchronous rewriting.",
        "We then have investigated the extent to which a grammar extracted from Ne-Gra allows for recursive synchronous rewriting."
      ]
    }
  ]
}
