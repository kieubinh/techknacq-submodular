{
  "info": {
    "authors": [
      "Jean-Philippe Prost"
    ],
    "book": "Proceedings of the 11th International Conference on Parsing Technologies (IWPT’09)",
    "id": "acl-W09-3826",
    "title": "Grammar Error Detection with Best Approximated Parse",
    "url": "https://aclweb.org/anthology/W09-3826",
    "year": 2009
  },
  "references": [],
  "sections": [
    {
      "text": [
        "LIFO, Université d'Orléans INRIA Lille - Nord Europe",
        "Jean-Philippe.Prost@univ-orleans.fr",
        "In this paper, we propose that grammar error detection be disambiguated in generating the connected parse(s) of optimal merit for the full input utterance, in overcoming the cheapest error.",
        "The detected er-ror(s) are described as violated grammatical constraints in a framework for Model-Theoretic Syntax (MTS).",
        "We present a parsing algorithm for MTS, which only relies on a grammar of well-formedness, in that the process does not require any extragrammatical resources, additional rules for constraint relaxation or error handling, or any recovery process."
      ]
    },
    {
      "heading": "1. Introduction",
      "text": [
        "Grammar error detection is a crucial part of NLP applications such as Grammar Checking or Computer-Assisted Language Learning (CALL).",
        "The problem is made highly ambiguous depending on which context is used for interpreting, and thus pinpointing, the error.",
        "For example, a phrase may look perfectly fine when isolated (e.g. brief interview), but is erroneous in a specific context (e.g. in *The judge grants brief interview to this plaintiff, or in *The judges brief interview this plaintiff).",
        "Robust partial parsing is often not enough to precisely desambiguate those cases.",
        "The solution we prescribe is to point out the error(s) as a set of violated (atomic) constraints of minimal cost, along with the structural context used for measuring that cost.",
        "Given an ungrammatical input string, the aim is then to provide an approximated rooted parse tree for it, along with a description of all the grammatical constraints it violates.",
        "For example, Figure 1 illustrates an approximated parse for an ill-formed sentence in French, and the error being detected in that context.",
        "Property Grammar (Blache, 2001) provides an elegant framework for that purpose.",
        "juge judge octroie grants plaignant plaintiff",
        "Figure 1: Approximated parse for an erroneous French sentence (the Noun 'entretien' requires a Determiner).",
        "Most of the relevant approaches to robust knowledge-based parsing addresses the problem as a recovery process.",
        "More specifically, we observe three families of approaches in that respect: those relying on grammar mal-rules in order to specify how to correctly parse what ought to be ungrammatical (Bender et al., 2004; Foster, 2007); those relying on constraint relaxation according to specified relaxation rules (Douglas and Dale, 1992); and those relying on constraint relaxation with no relaxation rules, along with a recovery process based on weighted parsing (Fou-vry, 2003; Foth et al., 2005).",
        "The first two are actually quite similar, in that, through their use of extra-grammatical rules, they both extend the grammar s coverage with a set of ought-to-be-ungrammatical utterances.",
        "The main drawback of those approaches is that when faced with unexpected input at best their outcome remains unknown, at worst the parsing process fails.",
        "With robust weighted parsing, on the other hand, that problem does not occur.",
        "The recovery process consists of filtering out structures with respect to their weights or the weights of the constraints being relaxed.",
        "However, these strategies usually can not discriminate between grammatical and ungrammatical sentences.",
        "The reason for that comes from the fact that grammaticality is disconnected from grammar consistency: since the grammar contains contradicting (universal) constraints, no conclusion can be drawn with regard to the grammaticality of a syntactic structure, which violates part of the constraint system.",
        "The same problem occurs with Optimality Theory.",
        "In a different fashion, Fouvry weighs unification constraints according to \"how much information it contains\".",
        "However, relaxation only seems possible for those unification constraints: error patterns such as word order, co-occurrence, uniqueness, mutual exclusion, .",
        ".",
        ".",
        "can not be tackled.",
        "The same restriction is observed in VanRullen (2005), though to a much smaller extent in terms of unrelaxable constraints.",
        "*NP7",
        ",5",
        "A4",
        "entretien",
        "interview",
        "bref",
        "brief",
        "What we would like is (i) to detect any type of errors, and present them as conditions of well-formedness being violated in solely relying on the knowledge of a grammar of well-formedness – as opposed to an error grammar or mal-rules, and (ii) to present, alongside the violated constraints, an approximated parse for the full sentence, which may explain which errors have been found and overcome.",
        "We propose here a parsing algorithm which meets these requirements."
      ]
    },
    {
      "heading": "2. Property Grammar",
      "text": [
        "The framework we are using for knowledge representation is Property Grammar (Blache, 2001) (PG), whose model-theoretical semantics was formalised by Duchier et al.",
        "(2009).",
        "Intuitively, a PG grammar decomposes what would be rewriting rules of a generative grammar into atomic syntactic properties – a property being represented as a boolean constraint.",
        "Take, for instance, the rewriting rule np – d n. That rule implicitely informs on different properties (for French): (1) NP has a D child; (2) the D child is unique; (3) NP has an N child; (4) the N child is unique; (5) the D child precedes the N child; (6) the N child requires the D child.",
        "PG defines a set of axioms, each axiom corresponding to a constraint type.",
        "The properties above are then specified in the grammar as the following constraints: (1) np : A d; (2) np : d!",
        "; (3) np : A n; (4) np : n!",
        "; (5) np : d -< n; (6) np: n => d. These constraints can be independently violated.",
        "A PG grammar is traditionally presented as a collection of Categories (or Constructions), each of them being specified by a set of constraints.",
        "Table 1 shows an example of a category.",
        "The class of models we are working",
        "NP (Noun Phrase) _",
        "Features | Property Type : Properties",
        "obligation uniqueness linearity j»GENDmi ^ d»gi",
        "with is made up of trees labelled with categories, whose surface realisations are the sentences a of language.",
        "A syntax tree of the realisation of the well-formed sentence a is a strong model of the PG grammar G iff it satisfies every constraint in G. The loose semantics also allows for constraints to be relaxed.",
        "Informally, a syntax tree of the realisation of the ill-formed sentence a is a loose model of G iff it maximises the proportion of satisfied constraints in G with respect to the total number of evaluated ones for a given category.",
        "The set of violated constraints provides a description of the detected error(s)."
      ]
    },
    {
      "heading": "3. Parsing Algorithm",
      "text": [
        "The class of models is further restricted to constituent tree structures with no pairwise intersecting constituents, satisfying at least one constraint.",
        "Since the solution parse must have a single root, should a category not be found for a node a wildcard (called Star) is used instead.",
        "The Star category is not specified by any constraint in the grammar.",
        "We introduce an algorithm for Loose Satisfaction Chart Parsing (LSCP), presented as Algorithm 1.",
        "We have named our implementation of it Numbat.",
        "LSCP is based on the probabilistic CKY, augmented with a process of loose constraint satisfaction.",
        "However, LSCP differs from CKY in various respects.",
        "While CKY requires a grammar in Chomsky Normal Form (CNF), LSCP takes an ordinary PG grammar, since no equivalent of the CNF exists for PG.",
        "Consequently, LSCP generates nary structures.",
        "LSCP also uses scores of merit instead of probabilities for the constituents.",
        "That score can be optimised, since it only factors through the influence of the constituent's immediate descendants.",
        "Steps 1 and 2 enumerate all the possible and Algorithm 1 Loose Satisfaction Chart Parsing",
        "/* Initialisation */",
        "Create and clear the chart n: every score in n is set to 0 /* Base case: populate n with POS-tags for each word */ for i – – 1 to numjwords",
        "for (each POS-category T of wi) if merit(T) > 1, T] then I Create constituent wT, whose category is T I 1, T] – {wT, merit(wT)}",
        "/* Recursive case */ /* Step 1: selection of the current reference span */ for span – – 1 to numjwords",
        "for offset – – 1 to numjwords – span + 1",
        "i end – – offset + span – 1",
        "/* Step 2: enumeration of all the configurations */ for (every set partition P in [offset, .",
        ".",
        ".",
        ", end] ) i Kp – – buildConfigurations(P ) I K – K U Kp /* Step 3: characterisation of the constraint system from the grammar */ i i i for (every configuration A G Kp ) I I I I – – characterisation(A) /* Step 4: projection into categories */ /* Ca is a set of candidate constituents */ Ca – projection(xA ) checkpoint (Ca) /* Step 5: memoisation of the optimal candidate constituent */",
        "for (every candidate constituent x G Ca, of construction C) i if merit(x) > n[offset, span, C] then I n[offset, span, C] – – {x, merit(x)} if n [offset, span] = 0 then n [offset, span] – preferred forest in K",
        "legal configurations of optimal substructures already stored in the chart for a given span and offset.",
        "At this stage, a configuration is a tree with an unlabelled root.",
        "Note that Step 2 actually does not calculate all the set partitions, but only the legal ones, i.e. those which are made up of subsets of contiguous elements.",
        "Step 3 evaluates the constraint system, using a configuration as an assignment.",
        "The characterisation process is implemented with Algorithm 2.",
        "Step 4 consists of makAlgorithm 2 Characterisation Function",
        "function characterisation(A = {c\\, .",
        ".",
        ".",
        ", cn) : assignment, G: grammar)",
        "returns the set of evaluated properties relevant to A, and the set of projected categories for A.",
        "/* For storing the result characterisation: */ create and clear \\j± [property]: table of boolean, indexed by property /* For storing the result projected categories: */ create and clear Ca : set of category /* For temporarily storing the properties to be evaluated: */ create and clear S: set of property key < – applyBinaryMask(A, mask) if (key is in the set of indexes for G) then /* Properties are retrieved from the grammar, then evaluated */ s – – G[key].getProperties()",
        " – – evaluate(s) /* Projection Step: fetch the categories to be projected */ Ca – – G[key] .getDominantCategories () return xa , Ca",
        "The key is a hash-code of a combination of constructions, used for fetching the constraints this combination is concerned with.",
        "ing a category judgement for a configuration, on the basis of which constraints are satisfied and violated, in order to label its root.",
        "The process is a simple table lookup, the grammar being indexed by properties.",
        "Step 5 then memoises the optimal substructures for every possible category.",
        "Note that the uniqueness of the solution is not guaranteed, and there may well be many different parses with exact same merit for a given input utterance.",
        "Should the current cell in the chart not being populated with any constituents, a preferred forest of partial parses (= Star category) is used instead.",
        "The preferred forest is constructed on the fly (as part of buildConfigurations); a pointer is maintained to the preferred configuration during enumeration.",
        "The preference goes to: (i) the constituents with the widest span; (ii) the least overall number of constituents.",
        "This translates heuristically into a preference score pF computed as follows (where F is the forest, and Cj its constituents): pF = span • (merit(Cj) + span).",
        "In that way, LSCP always delivers a parse for any input.",
        "The technique is somehow similar to the one of Riezler et al.",
        "(2002), where fragment parses are allowed for achieving increased robustness, although their solution requires the standard grammar to be augmented with a fragment grammar."
      ]
    },
    {
      "heading": "4. Evaluation",
      "text": [
        "In order to measure Numbat's ability to (i) detect errors in an ungrammatical sentence, and (ii) build the best approximated parse for it, Numbat should, ideally, be evaluated on a corpus of both well-formed and ill-formed utterances annotated with spannnig phrase structures.",
        "Unfortunately, such a Gold Standard is not available to us.",
        "The development of adequate resources is central to future works.",
        "In order to (partially) overcome that problem we have carried out two distinct evaluations: one aims to measure Numbat's performance on grammatical sentences, and the other one on ungrammatical sentences.",
        "Evaluation 1, whose results are reported in Table 2, follows the protocol devised for the EASY evaluation campaign of parsers of French (Paroubek et al., 2003), with a subset of the campaign's corpus.",
        "For comparison, Table 3 reports the performance measured under the same circumstances for two other parsers: a shallow one (VanRullen, 2005) also based on PG, and a stochastic one (VanRullen et al., 2006).",
        "The grammar used for that evaluation was developed by VanRullen (2005).",
        "Evaluation 2 was run on a corpus of unannotated ungrammatical sentences (Blache et al., 2006), where each of the ungrammatical sentences (amounting to 94% of the corpus) matches a controlled error pattern.",
        "Five expert annotators were asked whether the solution trees were possible and acceptable syntactic parses for their corresponding sentence.",
        "Specific instructions were given to make sure that the judgement does not hold on the grammatical acceptability of the surface sentence as such, but actually on the parse associated with it.",
        "For that evaluation Van-Rullen's grammar was completed with nested categories (since the EASY annotation scheme only has chunks).",
        "Given the nature of the material to be assessed here, the Precision and Recall measurements had to be modified.",
        "The total number of input sentences is interpreted as the number of predictions; the number of complete structures is interpreted as the number of observations; and the number of structures evaluated as correct by human judges is interpreted as the number of correct solutions.",
        "Hence the following formulations and scores: Precision=C0RRECT/C0MPLETE=0.74; Recall=C0RRECT/Total=0.68; F=0.71.",
        "92% of the corpus is analysed with a complete structure; 74% of these complete parses were judged as syntactically correct.",
        "The Recall score indicates that the correct parses represent 68% of the corpus.",
        "In spite of a lack of a real baseline, these scores compare with those of grammatical parsers."
      ]
    },
    {
      "heading": "5. Conclusion",
      "text": [
        "In this paper, we have proposed to address the problem of grammar error detection in providing a set of violated syntactic properties for an ill-formed sentence, along with the best structural context in the form of a connected syntax tree.",
        "We have introduced an algorithm for Loose Satisfaction Chart Parsing (LSCP) which meets those requirements, and presented performance measures for it.",
        "Future work includes optimisation of LSCP and validation on more appropriate corpora.",
        "Acknowledgement",
        "Partly funded by ANR-07-MDC0-03 (CRoTAL).",
        "Precision",
        "Recall",
        "F",
        "Total",
        "0.7835",
        "0.7057",
        "0.7416",
        "generaLlemonde",
        "0.8187",
        "0.7515",
        "0.7837",
        "general_mlcc",
        "0.7175",
        "0.6366",
        "0.6746",
        "generaLsenat",
        "0.8647",
        "0.7069",
        "0.7779",
        "litteraire",
        "0.8124",
        "0.7651",
        "0.788",
        "mail",
        "0.7193",
        "0.6951",
        "0.707",
        "medical",
        "0.8573",
        "0.678",
        "0.757",
        "oral_delic",
        "0.6817",
        "0.621",
        "0.649",
        "questions_amaryllis",
        "0.8081",
        "0.7432",
        "0.7743",
        "questions_trec",
        "0.8208",
        "0.7069",
        "0.7596",
        "Precision",
        "Recall",
        "F",
        "shallow parser",
        "0.7846",
        "0.8376",
        "0.8102",
        "stochastic parser",
        "0.9013",
        "0.8978",
        "0.8995"
      ]
    }
  ]
}
