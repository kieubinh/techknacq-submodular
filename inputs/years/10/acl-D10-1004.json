{
  "info": {
    "authors": [
      "Andre Martins",
      "Noah A. Smith",
      "Eric P. Xing",
      "Pedro Aguiar",
      "Mario Figueiredo"
    ],
    "book": "EMNLP",
    "id": "acl-D10-1004",
    "title": "Turbo Parsers: Dependency Parsing by Approximate Variational Inference",
    "url": "https://aclweb.org/anthology/D10-1004",
    "year": 2010
  },
  "references": [
    "acl-D07-1014",
    "acl-D07-1015",
    "acl-D08-1016",
    "acl-D08-1017",
    "acl-H05-1066",
    "acl-N03-1028",
    "acl-N10-1112",
    "acl-P08-1067",
    "acl-P08-1109",
    "acl-P09-1039",
    "acl-P10-1001",
    "acl-P98-1106",
    "acl-W06-2920",
    "acl-W06-2932",
    "acl-W08-2121"
  ],
  "sections": [
    {
      "text": [
        "TUrbo Parsers: Dependency Parsing by Approximate Variational Inference",
        "André F. T. Martins*\" Noah A. Smith* Eric P. Xing*",
        "* School of Computer Science Carnegie Mellon University Pittsburgh, PA 15213, USA",
        "Pedro M. Q. Aguiar*",
        "^Instituto de Sistemas e Robotica Instituto Superior Tecnico Lisboa, Portugal aguiar@isr.ist.utl.pt",
        "Mario A. T. Figueiredo\"",
        "\"\"\"Instituto de Telecomunicacoes Instituto Superior Tecnico Lisboa, Portugal mtf@lx.it.pt",
        "We present a unified view of two state-of-the-art non-projective dependency parsers, both approximate: the loopy belief propagation parser of Smith and Eisner (2008) and the relaxed linear program of Martins et al.",
        "(2009).",
        "By representing the model assumptions with a factor graph, we shed light on the optimization problems tackled in each method.",
        "We also propose a new aggressive online algorithm to learn the model parameters, which makes use of the underlying variational representation.",
        "The algorithm does not require a learning rate parameter and provides a single framework for a wide family of convex loss functions, including CRFs and structured SVMs.",
        "Experiments show state-of-the-art performance for 14 languages."
      ]
    },
    {
      "heading": "1. Introduction",
      "text": [
        "Feature-rich discriminative models that break locality/independence assumptions can boost a parser's performance (McDonald et al., 2006; Huang, 2008; Finkel et al., 2008; Smith and Eisner, 2008; Martins et al., 2009; Koo and Collins, 2010).",
        "Often, inference with such models becomes computationally intractable, causing a demand for understanding and improving approximate parsing algorithms.",
        "In this paper, we show a formal connection between two recently-proposed approximate inference techniques for non-projective dependency parsing: loopy belief propagation (Smith and Eisner, 2008) and linear programming relaxation (Martins et al., 2009).",
        "While those two parsers are differently motivated, we show that both correspond to inference in a factor graph, and both optimize objective functions over local approximations of the marginal polytope.",
        "The connection is made clear by writing the explicit declarative optimization problem underlying Smith and Eisner (2008) and by showing the factor graph underlying Martins et al.",
        "(2009).",
        "The success of both approaches parallels similar approximations in other fields, such as statistical image processing and error-correcting coding.",
        "Throughtout, we call these turbo parsers.",
        "Our contributions are not limited to dependency parsing: we present a general method for inference in factor graphs with hard constraints (§2), which extends some combinatorial factors considered by Smith and Eisner (2008).",
        "After presenting a geometric view of the variational approximations underlying message-passing algorithms (§3), and closing the gap between the two aforementioned parsers (§4), we consider the problem of learning the model parameters (§5).",
        "To this end, we propose an aggressive online algorithm that generalizes MIRA (Crammer et al., 2006) to arbitrary loss functions.",
        "We adopt a family of losses subsuming CRFs (Laf-ferty et al., 2001) and structured SVMs (Taskar et al., 2003; Tsochantaridis et al., 2004).",
        "Finally, we present a technique for including features not attested in the training data, allowing for richer models without substantial runtime costs.",
        "Our experiments (§6) show state-of-the-art performance on dependency parsing benchmarks.",
        "(1993) for which decoding algorithms are equivalent to running belief propagation in a graph with loops (McEliece et al., 1998)."
      ]
    },
    {
      "heading": "2. Structured Inference and Factor Graphs",
      "text": [
        "Denote by X a set of input objects from which we want to infer some hidden structure conveyed in an output set Y.",
        "Each input x G X (e.g., a sentence) is associated with a set of candidate outputs Y (x) ç Y (e.g., parse trees); we are interested in the case where Y (x) is a large structured set.",
        "Choices about the representation of elements of Y(x) play a major role in algorithm design.",
        "In many problems, the elements of Y(x) can be represented as discrete-valued vectors of the form y = (yi,...,yi), each yi taking values in a label set Yi.",
        "For example, in unlabeled dependency parsing, I is the number of candidate dependency arcs (quadratic in the sentence length), and each Yi = {0,1}.",
        "Of course, the yi are highly interdependent.",
        "Factor Graphs.",
        "Probabilistic models like CRFs (Lafferty et al., 2001) assume a factorization of the conditional distribution of Y, where each C ç {1,..., I} is a factor, C is the set of factors, each yc = (yi)iec denotes a partial output assignment, and each ^c is a nonnegative potential function that depends on the output only via its restriction to C. A factor graph (Kschischang et al., 2001) is a convenient representation for the factorization in Eq.",
        "1: it is a bipartite graph Gx comprised of variable nodes {1,..., I} and factor nodes C G C, with an edge connecting the ith variable node and a factor node C iff i G C. Hence, the factor graph Sx makes explicit the direct dependencies among the variables {yi,..., yI}.",
        "Factor graphs have been used for several NLP tasks, such as dependency parsing, segmentation, and co-reference resolution (Sutton et al., 2007; Smith and Eisner, 2008; McCallum et al., 2009).",
        "Hard and Soft Constraint Factors.",
        "It may be the case that valid outputs are a proper subset of Yi x • • • x Y i – for example, in dependency parsing, the entries of the output vector y must jointly define a spanning tree.",
        "This requires hard constraint factors that rule out forbidden partial assignments by mapping them to zero potential values.",
        "See Table 1 for an inventory of hard constraint factors used in this paper.",
        "Factors that are not of this special kind are called soft factors, and have strictly positive potentials.",
        "We thus have a partition C = Chard U Csoft.",
        "We let the soft factor potentials take the form *c(x, yc) = exp(0T0c(x, yc)), where 6 G Rdis a vector of parameters (shared across factors) and 4>c (x, yc ) is a local feature vector.",
        "The conditional distribution of Y (Eq.",
        "1) thus becomes log-linear:",
        "where Zx(6) = £y'ey(x) exp(6T0(x, y')) is the partition function, and the features decompose as:",
        "Dependency Parsing.",
        "Smith and Eisner (2008) proposed a factor graph representation for dependency parsing (Fig.",
        "1).",
        "The graph has O(n) variable nodes (n is the sentence length), one per candidate arc a = (h, m) linking a head h and modifier m. Outputs are binary, with ya = 1 iff arc a belongs to the dependency tree.",
        "There is a hard factor T RE E connected to all variables, that constrains the overall arc configurations to form a spanning tree.",
        "There is a unary soft factor per arc, whose log-potential reflects the score of that arc.",
        "There are also O(n) pairwise factors; their log-potentials reflect the scores of sibling and grandparent arcs.",
        "These factors create loops, thus calling for approximate inference.",
        "Without them, the model is arc-factored, and exact inference in it is well studied: finding the most probable parse tree takes O(n) time with the Chu-Liu-Edmonds algorithm (McDonald et al., 2005),and computing posterior marginals for all arcs takes O(n) time via the matrix-tree theorem (Smith and",
        "Smith, 2007; Koo et al., 2007).",
        "Message-passing algorithms.",
        "In general factor graphs, both inference problems – obtaining the most probable output (the MAP) argmaxy€y(x) Pr#(y|x), and computing the marginals Pr#(Yi = yi|x) – can be addressed with the belief propagation (BP) algorithm (Pearl, 1988), which iteratively passes messages between variables and factors reflecting their local \"beliefs.\"",
        "where SC Ç {0, i}n.",
        "• Local agreem.",
        "constr.",
        ": z e conv Sc , where z = (ri (i))\"=i • Entropy: He = log Zc (ü) – En=;L margi(ü)log mi – e",
        "where A is the set of candidate arcs.",
        "• Partition function Ztree(ü) and marginals (MARGa(u))aEA computed via the matrix-tree theorem, with u> = (ma^TREE)a€A",
        "• Local agreem.",
        "constr.",
        ": z e Ztree, where Ztree = conv ytree is the arborescence polytope",
        "• Entropy: Htree = log Ztree(ü) – EaPA MARGa(ü) log ma – TREE",
        ",i(w)/MAX-MARGa,o(w), where MAX-MARGa b(w) = maxyeStree Pr„(y\\ya = b)",
        "i En=i vi > i 0 otherwise.",
        "i vn = Vnrii vi",
        "OR-WITH-OUTPUT",
        "i = n.",
        "min {\"n – or-ou^max{i,mj – or-out}, max{i, minj=i,n m – or-out}} i < n nj=n max{i,mj – or-out} min{i, maxj=n mj – or-out}_i = n.",
        "Table 1: Hard constraint factors, their potentials, messages, and entropies.",
        "The top row shows expressions for a general binary factor: each outgoing message is computed from incoming marginals (in the sum-product case), or max-marginals (in the max-product case); the entropy of the factor (see §3) is computed from these marginals and the partition function; the local agreement constraints (§4) involve the convex hull of the set sc of allowed configurations (see footnote 5).",
        "The tree, xor, or and or-with-output factors allow tractable computation of all these quantities (rows 2-5).",
        "Two of these factors (TREE and XOR) had been proposed by Smith and Eisner (2008); we provide further information (max-product messages, entropies, and local agreement constraints).",
        "Factors OR and OR-WITH-OUTPUT are novel to the best of our knowledge.",
        "This inventory covers many cases, since the above formulae can be extended to the case where some inputs are negated: just replace the corresponding messages by their reciprocal, v by 1 - vj, etc.",
        "This allows building factors NAND (an OR factor with negated inputs), IMPLY (a 2-input OR with the first input negated), and xor-with-output (an xor factor with the last input negated).",
        "In sum-product BP, the messages take the form:",
        "In max-product BP, the summation in Eq.",
        "5 is replaced by a maximization.",
        "Upon convergence, variable and factor beliefs are computed as:",
        "BP is exact when the factor graph is a tree: in the sum-product case, the beliefs in Eqs.",
        "6-7 correspond to the true marginals, and in the max-product case, maximizing each ri(yi ) yields the MAP output.",
        "In graphs with loops, BP is an approximate method, not guaranteed to converge, nicknamed loopy BP.",
        "We highlight a variational perspective of loopy BP in §3; for now we consider algorithmic issues.",
        "Note that computing the factor-to-variable messages for each factor C (Eq.",
        "5) requires a summation/maximization over exponentially many configurations.",
        "Fortunately, for all the hard constraint factors in rows 3-5 of Table 1, this computation can be done in linear time (and polynomial for the TREE factor) – this extends results presented in Smith and Eisner (2008).",
        "SIB SIB SIB",
        "Figure 1: Factor graph corresponding to the dependency parsing model of Smith and Eisner (2008) with sibling and grandparent features.",
        "Circles denote variable nodes, and squares denote factor nodes.",
        "Note the loops created by the inclusion of pairwise factors (GRAND and SIB).",
        "In Table 1 we present closed-form expressions for the factor-to-variable message ratios mc= Mc^i(1)/Mc-^(0) in terms of their variable-to-factor counterparts mi^c = Mi^c (1)/Mi^c (0); these ratios are all that is necessary when the variables are binary.",
        "Detailed derivations are presented in an extended version of this paper (Martins et al., 2010b)."
      ]
    },
    {
      "heading": "3. Variational Representations",
      "text": [
        "Let Px = (Pre(.|x) | 6 G Rd} be the family of all distributions of the form in Eq.",
        "2.",
        "We next present an alternative parametrization for the distributions in Px in terms of factor marginals.",
        "We will see that each distribution can be seen as a point in the so-called marginal polytope (Wainwright and Jordan, 2008); this will pave the way for the variational representations to be derived next.",
        "Parts and Output Indicators.",
        "A part is a pair (C, yc ), where C is a soft factor and yc a partial output assignment.",
        "We let R = ((C, yc) | C G Csoft, yc G I]iec Yi} be the set of all parts.",
        "Given an output y' G Y (x), a part (C, yc) is said to be active if it locally matches the output, i.e., if yc = yC.",
        "Any output y' G Y(x) can be mapped to a |R|-dimensional binary vector x(y') indicating which parts are active, i.e., [x(y')](c,ye) = 1 if yc = yC",
        "max$C(yc)=i Pr{Ye = ye|Yi = yi}, respectively for the sum-product and max-product cases; these probabilities are induced by the messages in Eq.",
        "4: for an event A Ç FJi C yi, Pr{Ye € A} 4 pyc I(ye € A) ni6e Mi – e(yi).",
        "and 0 otherwise; x(y') is called the output indicator vector.",
        "This mapping allows decoupling the feature vector in Eq.",
        "3 as the product of an input matrix and an output vector:",
        "where F(x) is a d-by-|R| matrix whose columns contain the part-local feature vectors 0C (x, yc ).",
        "Observe, however, that not every vector in (0, corresponds necessarily to a valid output in Y(x).",
        "Marginal Polytope.",
        "Moving to vector representations of outputs leads naturally to a geometric view of the problem.",
        "The marginal polytope is the convex hull of all the \"valid\" output indicator vectors:",
        "M(3x) = conv(x(y) | y g Y(x)}.",
        "Note that M(Sx) only depends on the factor graph Sx and the hard constraints (i.e., it is independent of the parameters 6).",
        "The importance of the marginal polytope stems from two facts: (i) each vertex of M(Sx) corresponds to an output in Y(x); (ii) each point in M(Sx) corresponds to a vector of marginal probabilities that is realizable by some distribution (not necessarily in Px) that factors according to Sx.",
        "Variational Representations.",
        "We now describe formally how the points in M(Sx) are linked to the distributions in Px.",
        "We extend the \"canonical over-complete parametrization\" case, studied by Wainwright and Jordan (2008), to our scenario (common in NLP), where arbitrary features are allowed and the parameters are tied (shared by all factors).",
        "Let",
        "H(Pre(.|x)) = – Eyey(x) Pre(y|x)logPre(y|x)denote the entropy of Pre(.|x), and Ee[.]",
        "the expectation under Pre(.|x).",
        "The component of G M(Sx) indexed by part (C, yc) is denoted /xc(yc).",
        "Proposition 1.",
        "There is a map coupling each distribution Pre(.|x) G Px to a unique G M(Sx) such that Ee)] = Define H(//) = H(Pre(.|x)) if some Pre (.|x) is coupled to and H (//) = – oo if no such Pre (.|x) exists.",
        "Then:",
        "1.",
        "The following variational representation for the log-partition function (mentioned in Eq.",
        "2) holds:",
        "Parameter space Factorlog-potentials Marginal polytope Rd space Rl*l M(%)",
        "Figure 2: Dual parametrization of the distributions in Px.",
        "Our parameter space (left) is first linearly mapped to the space of factor log-potentials (middle).",
        "The latter is mapped to the marginal polytope M(Gx) (right).",
        "In general only a subset of M( Gx ) is reachable from our parameter space.",
        "Any distribution in Px can be parametrized by a vector 6 g Rd or by a point ß g M(Gx).",
        "2.",
        "The problem in Eq.",
        "9 is convex and its solution is attained at the factor marginals, i.e., there is a maximizer ß s.t.",
        "/ic (yc ) = Pre (Yc = yc |x) for each C G C. The gradient of the log-partition function is V log Zx(6) = F(x)ß.",
        "3.",
        "The MAP y = argmaxy€y(x) Pre(y|x) can be obtained by solving the linear program",
        "A proof of this proposition can be found in Martins et al.",
        "(2010a).",
        "Fig.",
        "2 provides an illustration of the dual parametrization implied by Prop.",
        "1."
      ]
    },
    {
      "heading": "4. Approximate Inference & Turbo Parsing",
      "text": [
        "We now show how the variational machinery just described relates to message-passing algorithms and provides a common framework for analyzing two recent dependency parsers.",
        "Later (§5), Prop.",
        "1 is used constructively for learning the model parameters.",
        "For general factor graphs with loops, the marginal polytope M(Sx) cannot be compactly specified and the entropy term H( ) lacks a closed form, rendering exact optimizations in Eqs.",
        "9-10 intractable.",
        "A popular approximate algorithm for marginal inference is sum-product loopy BP, which passes messages as described in §2 and, upon convergence, computes beliefs via Eqs.",
        "6-7.",
        "Were loopy BP exact, these beliefs would be the true marginals and hence a point in the marginal polytope M(Sx).",
        "However, this need not be the case, as elucidated by Yedidia et al.",
        "(2001) and others, who first analyzed loopy BP from a variational perspective.",
        "The following two approximations underlie loopy BP:",
        "• The marginal polytope M(Sx) is approximated by the local polytope L(Sx).",
        "This is an outer bound; its name derives from the fact that it only imposes local agreement constraints Vi, y G Yi, C G C:",
        "Namely, it is characterized by L(Sx) = (t g R+R\\ | Eq.",
        "11 holds Vi, y G Yi,C G C}.",
        "The elements of L(Sx) are called pseudo-marginals.",
        "Clearly, the true marginals satisfy Eq.",
        "11, and therefore M(Sx) Ç L(Sx).",
        "• The entropy H is replaced by its Bethe approximation Hßethe(t) = Ei=i(1 – di)H(ti) + E^ e H (t c ), where di = |(C | i G C }| is the number of factors connected to the ith variable,",
        "H(Ti) = ^E»i Ti(yi)log and H(tc) = – EyC Tc (yc) log Tc (yc).",
        "Any stationary point of sum-product BP is a local optimum of the variational problem in Eq.",
        "9 with M(Sx) replaced by L(Sx) and H replaced by HBethe (Yedidia et al., 2001).",
        "Note however that multiple optima may exist, since HBethe is not necessarily concave, and that BP may not converge.",
        "Table 1 shows closed form expressions for the local agreement constraints and entropies of some hard-constraint factors, obtained by invoking Eq.",
        "7 and observing that tc (yc) must be zero if configuration yc is forbidden.",
        "See Martins et al.",
        "(2010b).",
        "We next present our main contribution: a formal connection between two recent approximate dependency parsers, which at first sight appear unrelated.",
        "Recall that (i) Smith and Eisner (2008) proposed a factor graph (Fig.",
        "1) in which they run loopy BP, and that (ii) Martins et al.",
        "(2009) approximate parsing as the solution of a linear program.",
        "Here, we fill the blanks in the two approaches: we derive explicitly the variational problem addressed in (i) and we provide the underlying factor graph in (ii).",
        "This puts the two approaches side-by-side as approximate methods for marginal and MAP inference.",
        "Since both rely on \"local\" approximations (in the sense of Eq.",
        "11) that ignore the loops in their graphical models, we dub them turbo parsers by analogy with error-correcting turbo decoders (see footnote 1).",
        "Turbo Parser #1: Sum-Product Loopy BP.",
        "The factor graph depicted in Fig. 1 – call it Sx – includes pairwise soft factors connecting sibling and grandparent arcs.",
        "We next characterize the local polytope L(Sx) and the Bethe approximation HBethe inherent in Smith and Eisner's loopy BP algorithm.",
        "Let A be the set of candidate arcs, and P ç A the set of pairs of arcs that have factors.",
        "Let t = (t a, t p ) with t a = (Ta)a€A and t p = (Tab)(a^)ep.",
        "Since all variables are binary, we may write, for each a g A, Ta(1) = Za and Ta (0) = 1 – Za, where Za is a variable constrained to [0,1].",
        "Let ZA = (za)aeA; the local agreement constraints at the tree factor (see Table 1) are written as za g Ztree(x), where Ztree(x) is the arborescence poly-tope, i.e., the convex hull of all incidence vectors of dependency trees (Martins et al., 2009).",
        "It is straightforward to write a contingency table and obtain the following local agreement constraints at the pairwise factors:",
        "Tab(1, 0) = Za – Zab, Tab(0, 1) = Zb – Zab.",
        "Noting that all these pseudo-marginals are constrained to the unit interval, one can get rid of all variables Tab and write everything as",
        "PATH-BUILDER",
        "SINGLE-PARENT",
        "FLOW-IMPLIES-ARC",
        "FLOW-DELTA",
        "FLOW FLOW PATH FLOW FLOW PATH",
        "Figure 3: Details of the factor graph underlying the parser of Martins et al.",
        "(2009).",
        "Dashed circles represent auxiliary variables.",
        "See text and Table 1.",
        "£ya,yb Tab(ya, yb) log TafâTbSb).",
        "The approximate variational expression becomes log Zx(6) w",
        "maxz 6TF(x)z + Htlee(zA) – Ia;b(Za, Zb, Zab)",
        "s.t.",
        "ZA g Ztree,",
        "inequalities which, along with za g Ztree(x), define the local polytope L(Sx).",
        "As for the factor entropies, start by noting that the TREE-factor entropy Htree can be obtained in closed form by computing the marginals za and the partition function Zx(6) (via the matrix-tree theorem) and recalling the variational representation in Eq.",
        "9, yielding Htree = log Zx(6) – 6tF(x)za.",
        "Some algebra allows writing the overall Bethe entropy approximation as:",
        "where we introduced the mutual information associated with each pairwise factor, Ia;b(Za, Zb, Zab) = whose maximizer corresponds to the beliefs returned by the Smith and Eisner's loopy BP algorithm (if it converges).",
        "Turbo Parser #2: LP-Relaxed MAP.",
        "We now turn to the concise integer LP formulation of Martins et al.",
        "(2009).",
        "The formulation is exact but NP-hard, and so an LP relaxation is made there by dropping the integer constraints.",
        "We next construct a factor graph Sx and show that the LP relaxation corresponds to an optimization of the form in Eq.",
        "10, with the marginal polytope M(Sx) replaced by L(Sx).",
        "Sx includes the following auxiliary variable nodes: path variables )i=ov.^nj=L..^n, which indicate whether word j descends from i in the dependency tree, and flow variables (/a )aeA^=1v^n, which evaluate to 1 iff arc a \"carries flow\" to k, i.e., iff there is a path from the root to k that passes through a.",
        "We need to seed these variables imposing i.e., any word descends from the root and from itself, and arcs leaving a word carry no flow to that word.",
        "This can be done with unary hard constraint factors.",
        "We then replace the tree factor in Fig. 1 by the factors shown in Fig. 3:",
        "• O(n) xor factors, each connecting all arc variables of the form ((h, m)}/j=0v^n.",
        "These ensure that each word has exactly one parent.",
        "Each factor yields a local agreement constraint (see Table 1):",
        "• O(n) imply factors, each expressing that if an arc carries flow, then that arc must be active.",
        "Such factors are or factors with the first input negated, hence, the local agreement constraints are:",
        "• O(n) xor-with-output factors, which impose the constraint that each path variable pmf is active if and only if exactly one incoming arc in ((h, m)}/!^^«, carries flow to k. Such factors are xor factors with the last input negated, and hence their local constraints are:",
        "• O(n) xor-with-output factors to impose the constraint that words don't consume other words' commodities; i.e., if h = k and k = 0, then there is a path from h to k iff exactly one outgoing arc in ((h, m)}m=1v^ra carries flow to k:",
        "îfcfc = Em=i /f/m), h, k G (0,..., n}, k G (0, h}.",
        "L(Sx) is thus defined by the constraints in Eq.",
        "12 and 15-19.",
        "The approximate MAP problem, that replaces M(Sx) by L(Sx) in Eq.",
        "10, thus becomes:",
        "maxz,f,p 6TF(x)z (20) s.t.",
        "Eqs.",
        "12 and 15-19 are satisfied.",
        "This is exactly the LP relaxation considered by Martins et al.",
        "(2009) in their multi-commodity flow model, for the configuration with siblings and grandparent features.",
        "They also considered a configuration with non-projectivity features – which fire if an arc is non-projective.",
        "That configuration can also be obtained here if variables («(^m)} are added to indicate non-projective arcs and or-with-output hard constraint factors are inserted to enforce n(/j,m) = Z(/i,m) AVmin(/i,m)<j<min(/i,m) .",
        "Details are omitted for space.",
        "In sum, although the approaches of Smith and Eisner (2008) and Martins et al.",
        "(2009) look very different, in reality both are variational approximations emanating from Prop.",
        "1, respectively for marginal and MAP inference.",
        "However, they operate on distinct factor graphs, respectively Figs.",
        "1 and 3."
      ]
    },
    {
      "heading": "5. Online Learning",
      "text": [
        "Our learning algorithm is presented in Alg.",
        "1.",
        "It is a generalized online learner that tackles ^2-regularized empirical risk minimization of the form where each (xi, yi) is a training example, A > 0 is the regularization constant, and L(6; x, y) is a nonnegative convex loss.",
        "Examples include the logistic loss used in CRFs ( – logPre(y|x)) and the hinge loss of structured SVMs (maxy/ey(x) 6T(0(x, y') – 0(x, y)) + ^(y', y) for some cost function £).",
        "These are both special cases of the family defined in Fig. 4, which also includes the structured perceptron's loss (ß – oo, 7 = 0) and the softmax-margin loss of Gimpel and Smith (2010; ß = 7 = 1).",
        "Alg.",
        "1 is closely related to stochastic or online gradient descent methods, but with the key advantage of not needing a learning rate hyperparameter.",
        "We sketch the derivation of Alg.",
        "1; full details can be found in Martins et al.",
        "(2010a).",
        "On the tth round, one example (xt, yt) is considered.",
        "We seek to solve",
        "Figure 4: A family of loss functions including as particular cases the ones used in CRFs, structured SVMs, and the structured perceptron.",
        "The hyperparameter ß is the analogue of the inverse temperature in a Gibbs distribution, while 7 scales the cost.",
        "For any choice of ß > 0 and 7 > 0, the resulting loss function is convex in 6, since, up to a scale factor, it is the composition of the (convex) log-sum-exp function with an affine map.",
        "Algorithm 1 Aggressive Online Learning",
        "4: Receive instance (xt, yt) and set ßt = x(yt)",
        "Compute nt = min",
        "10: Return the averaged model Ö – ^ ^ 6t.",
        "which trades off conservativeness (stay close to the most recent solution 6t) and correctness (keep the loss small).",
        "Alg.",
        "1's lines 7-8 are the result of taking the first-order Taylor approximation of L around 6t, which yields the lower bound L(6; xt, yt) > L(6t; xt, yt) + (6 – 6t)TVL(6t; xt, yt), and plugging that linear approximation into the constraint of Eq.",
        "23, which gives a simple Euclidean projection problem (with slack) with a closed-form solution.",
        "The online updating requires evaluating the loss and computing its gradient.",
        "Both quantities can be computed using the variational expression in Prop.",
        "1, for any loss Lß Y(6; x, y) in Fig. 4.",
        "Our only assumption is that the cost function ^(y', y) can be written as a sum over factor-local costs; letting ß = x(y) and ß' = x(y'), this implies ^(y', y) = PTß' + q for some p and q which are constant with respect to '.",
        "under this assumption, Lß Y(6; x, y) becomes expressible in terms of the log-partition function of a distribution whose log-potentials are set to ß(F(x)T6 + 7p).",
        "From Eq.",
        "9 and after some algebra, we finally obtain Lß,7 (6; x, y) = max ,6TF(x)(ß' – ß) +H(ß')+7(pTß'+q).",
        "Let ß be a maximizer in Eq.",
        "24; from the second statement of Prop.",
        "1 we obtain VLß Y(6; x, y) = F(x)(ß – ß).",
        "When the inference problem in Eq.",
        "24 is intractable, approximate message-passing algorithms like loopy BP still allow us to obtain approximations of the loss Lß Y and its gradient.",
        "For the hinge loss, we arrive precisely at the max-loss variant of 1-best MIRA (Crammer et al., 2006).",
        "For the logistic loss, we arrive at a new online learning algorithm for CRFs that resembles stochastic gradient descent but with an automatic step size that follows from our variational representation.",
        "Unsupported Features.",
        "As datasets grow, so do the sets of features, creating further computational challenges.",
        "Often only \"supported\" features – those observed in the training data – are included, and even those are commonly eliminated when their frequencies fall below a threshold.",
        "Important information may be lost as a result of these expedient choices.",
        "Formally, the supported feature set is Fsupp = Um=1 SUPP 0(xi, yi), where supp u = (j | Uj = 0} denotes the support of vector u. Fsuppis a subset of the complete feature set, comprised of those features that occur in some candidate output, Fcomp = U£=111 yiey(xi) supp0(xi, yi).",
        "Features in Fcomp \\Fsupp are called unsupported.",
        "Sha and Pereira (2003) have shown that training a CRF-based shallow parser with the complete feature set may improve performance (over the supported one), at the cost of 4.6 times more features.",
        "Dependency parsing has a much higher ratio (around 20 for bilexical word-word features, as estimated in the Penn Treebank), due to the quadratic or faster growth of the number of parts, of which only a few are active in a legal output.",
        "We propose a simple strategy for handling Fcomp efficiently, which can be applied for those losses in Fig. 4 where ß = o .",
        "(e.g., the structured SVM and perceptron).",
        "Our procedure is the following: keep an active set F contain-",
        "Table 2: unlabeled attachment scores, ignoring punctuation.",
        "The leftmost columns show the performance of arc-factored and second-order models for the CRF and SVM losses, after 10 epochs with 1 /(Am) =0.001 (tuned on the English Non-Proj.",
        "dev.-set).",
        "The rightmost columns refer to a model to which non-projectivity features were added, trained under the SVM loss, that handles the complete feature set.",
        "Shown is the total number of features instantiated, the multiplicative factor w.r.t.",
        "the number of supported features, and the accuracies (in parenthesis, we display the difference w.r.t.",
        "a model trained with the supported features only).",
        "Entries marked with | are the highest reported in the literature, to the best of our knowledge, beating (sometimes slightly) McDonald et al.",
        "(2006), Martins et al.",
        "(2008), Martins et al.",
        "(2009), and, in the case of English Proj., also the third-order parser of Koo and Collins (2010), which achieves 93.04% on that dataset (their experiments in Czech are not comparable, since the datasets are different).",
        "ing all features that have been instantiated in Alg.",
        "1.",
        "At each round, run lines 4-5 as usual, using only features in F. Since the other features have not been used before, they have a zero weight, hence can be ignored.",
        "When ß = o , the variational problem in Eq.",
        "24 consists of a MAP computation and the solution corresponds to one output yt G Y(xt).",
        "Only the parts that are active in yt but not in yt, or vice-versa, will have features that might receive a nonzero update.",
        "Those parts are reexamined for new features and the active set F is updated accordingly."
      ]
    },
    {
      "heading": "6. Experiments",
      "text": [
        "We trained non-projective dependency parsers for 14 languages, using datasets from the CoNLL-x shared task (Buchholz and Marsi, 2006) and two datasets for English: one from the CoNLL-2008 shared task (Surdeanu et al., 2008), which contains non-projective arcs, and another derived from the Penn Treebank applying the standard head rules of Yamada and Matsumoto (2003), in which all parse trees are projective.",
        "We implemented Alg.",
        "1, which handles any loss function Lß Y .",
        "When ß < o , Turbo Parser #1 and the loopy BP algorithm of Smith and Eisner (2008) is used; otherwise, Turbo Parser #2 is used and the LP relaxation is solved with CPLEx.",
        "in both cases, we employed the same pruning strategy as Martins et al.",
        "(2009).",
        "Two different feature configurations were first tried: an arc-factored model and a model with second-order features (siblings and grandparents).",
        "We used the same arc-factored features as McDonald et al.",
        "(2005) and second-order features that conjoin words and lemmas (at most two), parts-of-speech tags, and (if available) morphological information; this was the same set of features as in Martins et al.",
        "(2009).",
        "Table 2 shows the results obtained in both configurations, for CRF and SVM loss functions.",
        "While in the arc-factored case performance is similar, in second-order models there seems to be a consistent gain when the SVM loss is used.",
        "There are two possible reasons: first, SVMs take the cost function into consideration; second, Turbo Parser #2 is less approximate than Turbo Parser #1, since only the marginal polytope is approximated (the entropy function is not involved).",
        "TurboParser.",
        "CRF (Turbo Pars.",
        "#1)",
        "SVM (Turbo Pars.",
        "#2)",
        "SVM (Turbo #2)",
        "Arc-Fact.",
        "Sec.",
        "Ord.",
        "Arc-Fact.",
        "Sec.",
        "Ord.",
        "\\F",
        "1 F supp",
        "+nonproj., compl.",
        "Arabic",
        "78.28",
        "79.12",
        "79.04",
        "79.42",
        "6,643,191",
        "2.8",
        "80.02 (-0.14)",
        "Bulgarian",
        "91.02",
        "91.78",
        "90.84",
        "92.30",
        "13,018,431",
        "2.1",
        "92.88 (+0.34) (f)",
        "Chinese",
        "90.58",
        "90.87",
        "91.09",
        "91.77",
        "28,271,086",
        "2.1",
        "91.89 (+0.26)",
        "Czech",
        "86.18",
        "87.72",
        "86.78",
        "88.52",
        "83,264,645",
        "2.3",
        "88.78 (+0.44) (f)",
        "Danish",
        "89.58",
        "90.08",
        "89.78",
        "90.78",
        "7,900,061",
        "2.3",
        "91.50 (+0.68)",
        "Dutch",
        "82.91",
        "84.31",
        "82.73",
        "84.17",
        "15,652,800",
        "2.1",
        "84.91 (-0.08)",
        "German",
        "89.34",
        "90.58",
        "89.04",
        "91.19",
        "49,934,403",
        "2.5",
        "91.49 (+0.32) (f)",
        "Japanese",
        "92.90",
        "93.22",
        "93.18",
        "93.38",
        "4,256,857",
        "2.2",
        "93.42 (+0.32)",
        "Portuguese",
        "90.64",
        "91.00",
        "90.56",
        "91.50",
        "16,067,150",
        "2.1",
        "91.87 (-0.04)",
        "Slovene",
        "83.03",
        "83.17",
        "83.49",
        "84.35",
        "4,603,295",
        "2.7",
        "85.53 (+0.80)",
        "Spanish",
        "83.83",
        "85.07",
        "84.19",
        "85.95",
        "11,629,964",
        "2.6",
        "87.04 (+0.50) (f)",
        "Swedish",
        "87.81",
        "89.01",
        "88.55",
        "88.99",
        "18,374,160",
        "2.8",
        "89.80 (+0.42)",
        "Turkish",
        "76.86",
        "76.28",
        "74.79",
        "76.10",
        "6,688,373",
        "2.2",
        "76.62 (+0.62)",
        "English Non-Proj.",
        "90.15",
        "91.08",
        "90.66",
        "91.79",
        "57,615,709",
        "2.5",
        "92.13 (+0.12)",
        "English Proj.",
        "91.23",
        "91.94",
        "91.65",
        "92.91",
        "55,247,093",
        "2.4",
        "93.26 (+0.41) (f)",
        "recently proposed an efficient dual decomposition method to solve an LP problem similar (but not equal) to the one in Eq.",
        "20, with excellent parsing performance.",
        "Their parser is also an instance of a turbo parser since it relies on a local approximation of a marginal polytope.",
        "While one can also use dual decomposition to address our MAP problem, the fact that our model does not decompose as nicely as the one in Koo et al.",
        "(2010) would likely result in slower convergence."
      ]
    },
    {
      "heading": "8. Conclusion",
      "text": [
        "We presented a unified view of two recent approximate dependency parsers, by stating their underlying factor graphs and by deriving the variational problems that they address.",
        "We introduced new hard constraint factors, along with formulae for their messages, local belief constraints, and entropies.",
        "We provided an aggressive online algorithm for training the models with a broad family of losses.",
        "There are several possible directions for future work.",
        "Recent progress in message-passing algorithms yield \"convexified\" Bethe approximations that can be used for marginal inference (Wainwright et al., 2005), and provably convergent max-product variants that solve the relaxed LP (Globerson and Jaakkola, 2008).",
        "Other parsing formalisms can be handled with the inventory of factors shown here – among them, phrase-structure parsing."
      ]
    },
    {
      "heading": "Acknowledgments",
      "text": [
        "The authors would like to thank the reviewers for their comments, and Kevin Gimpel, David Smith, David Son-tag, and Terry Koo for helpful discussions.",
        "A. M. was supported by a grant from FCT/iCTi through the CMu-Portugal Program, and also by Priberam Informatica.",
        "N. S. was supported in part by Qatar NRF NPRP-08-485-1-083.",
        "E. X. was supported by AFOSR FA9550010247,",
        "NSF IIS-0713379, and an Alfred P. Sloan Fellowship.",
        "M. F. and P. A. were supported by the FET programme (EU FP7), under the SIMBAD project (contract 213250).",
        "Table 3: Varying ß and 7: neither the CRF nor the SVM is optimal.",
        "Results are uAS on the English Non-Projective dataset, with A tuned with dev.-set validation.",
        "The loopy BP algorithm managed to converge for nearly all sentences (with message damping).",
        "The last three columns show the beneficial effect of unsupported features for the SVM case (with a more powerful model with non-projectivity features).",
        "For most languages, unsupported features convey helpful information, which can be used with little extra cost (on average, 2.5 times more features are instantiated).",
        "A combination of the techniques discussed here yields parsers that are in line with very strong competitors – for example, the parser of Koo and Collins (2010), which is exact, third-order, and constrains the outputs to be projective, does not outperform ours on the projective English dataset.",
        "Finally, Table 3 shows results obtained for different settings of ß and 7.",
        "Interestingly, we observe that higher scores are obtained for loss functions that are \"between\" SVMs and CRFs."
      ]
    },
    {
      "heading": "7. Related Work",
      "text": [
        "There has been recent work studying efficient computation of messages in combinatorial factors: bipartite matchings (Duchi et al., 2007), projective and non-projective arborescences (Smith and Eisner, 2008), as well as high order factors with count-based potentials (Tarlow et al., 2010), among others.",
        "Some of our combinatorial factors (OR, OR-WITH-OUTPUT) and the analogous entropy computations were never considered, to the best of our knowledge.",
        "Prop.",
        "1 appears in Wainwright and Jordan (2008) for canonical overcomplete models; we adapt it here for models with shared features.",
        "We rely on the variational interpretation of loopy BP, due to Yedidia et al.",
        "(2001), to derive the objective being optimized by Smith and Eisner's loopy BP parser.",
        "ß",
        "1",
        "1",
        "1",
        "1",
        "3",
        "5",
        "oo",
        "0 (CRF)",
        "1",
        "3",
        "5",
        "1",
        "1",
        "1 (SVM)",
        "Arc-F.",
        "90.15",
        "90.41",
        "90.38",
        "90.53",
        "90.80",
        "90.83",
        "90.66",
        "2Ord.",
        "91.08",
        "91.85",
        "91.89",
        "91.51",
        "92.04",
        "91.98",
        "91.79"
      ]
    }
  ]
}
