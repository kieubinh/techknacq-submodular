{
  "info": {
    "authors": [
      "Ryan McDonald",
      "Keith Hall",
      "Gideon S. Mann"
    ],
    "book": "Human Language Technologies: the 2010 Annual Conference of the North American Chapter of the Association for Computational Linguistics",
    "id": "acl-N10-1069",
    "title": "Distributed Training Strategies for the Structured Perceptron",
    "url": "https://aclweb.org/anthology/N10-1069",
    "year": 2010
  },
  "references": [
    "acl-D08-1059",
    "acl-E06-1011",
    "acl-P04-1015",
    "acl-P05-1012",
    "acl-P06-1096",
    "acl-P08-1109",
    "acl-W02-1001",
    "acl-W03-0419",
    "acl-W06-2920"
  ],
  "sections": [
    {
      "text": [
        "Ryan McDonald Keith Hall Gideon Mann",
        "Google, Inc., New York / Zurich",
        "Perceptron training is widely applied in the natural language processing community for learning complex structured models.",
        "Like all structured prediction learning frameworks, the structured perceptron can be costly to train as training complexity is proportional to inference, which is frequently non-linear in example sequence length.",
        "In this paper we investigate distributed training strategies for the structured perceptron as a means to reduce training times when computing clusters are available.",
        "We look at two strategies and provide convergence bounds for a particular mode of distributed structured perceptron training based on iterative parameter mixing (or averaging).",
        "We present experiments on two structured prediction problems - named-entity recognition and dependency parsing to highlight the efficiency of this method."
      ]
    },
    {
      "heading": "1. Introduction",
      "text": [
        "One of the most popular training algorithms for structured prediction problems in natural language processing is the perceptron (Rosenblatt, 1958; Collins, 2002).",
        "The structured perceptron has many desirable properties, most notably that there is no need to calculate a partition function, which is necessary for other structured prediction paradigms such as CRFs (Lafferty et al., 2001).",
        "Furthermore, it is robust to approximate inference, which is often required for problems where the search space is too large and where strong structural independence assumptions are insufficient, such as parsing (Collins and Roark, 2004; McDonald and Pereira, 2006; Zhang and Clark, 2008) and machine translation (Liang et al., 2006).",
        "However, like all structured prediction learning frameworks, the structure perceptron can still be cumbersome to train.",
        "This is both due to the increasing size of available training sets as well as the fact that training complexity is proportional to inference, which is frequently nonlinear in sequence length, even with strong structural independence assumptions.",
        "In this paper we investigate distributed training strategies for the structured perceptron as a means of reducing training times when large computing clusters are available.",
        "Traditional machine learning algorithms are typically designed for a single machine, and designing an efficient training mechanism for analogous algorithms on a computing cluster often via a map-reduce framework (Dean and Ghe-mawat, 2004) - is an active area of research (Chu et al., 2007).",
        "However, unlike many batch learning algorithms that can easily be distributed through the gradient calculation, a distributed training analog for the perceptron is less clear cut.",
        "It employs online updates and its loss function is technically non-convex.",
        "A recent study by Mann et al.",
        "(2009) has shown that distributed training through parameter mixing (or averaging) for maximum entropy models can be empirically powerful and has strong theoretical guarantees.",
        "A parameter mixing strategy, which can be applied to any parameterized learning algorithm, trains separate models in parallel, each on a disjoint subset of the training data, and then takes an average of all the parameters as the final model.",
        "In this paper, we provide results which suggest that the percep-tron is ill-suited for straightforward parameter mixing, even though it is commonly used for large-scale structured learning, e.g., Whitelaw et al.",
        "(2008) for named-entity recognition.",
        "However, a slight modification we call iterative parameter mixing can be shown to: 1) have similar convergence properties to the standard perceptron algorithm, 2) find a separating hyperplane if the training set is separable, 3) reduce training times significantly, and 4) produce models with comparable (or superior) accuracies to those trained serially on all the data."
      ]
    },
    {
      "heading": "2. Related Work",
      "text": [
        "Distributed cluster computation for many batch training algorithms has previously been examined by Chu et al.",
        "(2007), among others.",
        "Much of the relevant prior work on online (or sub-gradient) distributed training has been focused on asynchronous optimization via gradient descent.",
        "In this scenario, multiple machines run stochastic gradient descent simultaneously as they update and read from a shared parameter vector asynchronously.",
        "Early work by Tsitsiklis et al.",
        "(1986) demonstrated that if the delay between model updates and reads is bounded, then asynchronous optimization is guaranteed to converge.",
        "Recently, Zinkevich et al.",
        "(2009) performed a similar type of analysis for online learners with asynchronous updates via stochastic gradient descent.",
        "The asynchronous algorithms in these studies require shared memory between the distributed computations and are less suitable to the more common cluster computing environment, which is what we study here.",
        "While we focus on the perceptron algorithm, there is a large body of work on training structured prediction classifiers.",
        "For batch training the most common is conditional random fields (CRFs) (Lafferty et al., 2001), which is the structured analog of maximum entropy.",
        "As such, its training can easily be distributed through the gradient or sub-gradient computations (Finkel et al., 2008).",
        "However, unlike per-ceptron, CRFs require the computation of a partition function, which is often expensive and sometimes intractable.",
        "Other batch learning algorithms include MNs (Taskar et al., 2004) and Structured SVMs (Tsochantaridis et al., 2004).",
        "Due to their efficiency, online learning algorithms have gained attention, especially for structured prediction tasks in NLP.",
        "In addition to the perceptron (Collins, 2002), others have looked at stochastic gradient descent (Zhang, 2004), passive aggressive algorithms (McDonald et al., 2005; Crammer et al., 2006), the recently introduced confidence weighted learning (Dredze et al., 2008) and coordinate descent algorithms (Duchi and",
        "Singer, 2009)."
      ]
    },
    {
      "heading": "3. Structured Perceptron",
      "text": [
        "The structured perceptron was introduced by Collins (2002) and we adopt much of the notation and presentation of that study.",
        "The structured percetron algorithm - which is identical to the multi-class per-ceptron - is shown in Figure 1.",
        "The perceptron is an online learning algorithm and processes training instances one at a time during each epoch of training.",
        "Lines 4-6 are the core of the algorithm.",
        "For a input-output training instance pair (xt, yt) G T, the algorithm predicts a structured output y' G Yt, where Yt is the space of permissible structured outputs for input xt, e.g., parse trees for an input sentence.",
        "This prediction is determined by a linear classifier based on the dot product between a high-dimensional feature representation of a candidate input-output pair f(x, y) G RM and a corresponding weight vector w G RM, which are the parameters of the model.",
        "If this prediction is incorrect, then the parameters are updated to add weight to features for the corresponding correct output yt and take weight away from features for the incorrect output y'.",
        "For structured prediction, the inference step in line 4 is problem dependent, e.g., CKY for context-free parsing.",
        "A training set T is separable with margin 7 > 0 if there exists a vector u G RM with ||u|| = 1 such that u • f (xt, yt) – u • f (xt, y') > 7, for all (xt, yt) G T, and for all y' G Yt such that y' = yt.",
        "Furthermore, let R > ||f (xt, yt) – f (xt, y')||, for all ( xt, yt) G T and y' G Yt.",
        "A fundamental theorem of the perceptron is as follows:",
        "Proof.",
        "See Collins (2002) Theorem 1.",
        "Theorem 1 implies that if T is separable then 1) the perceptron will converge in a finite amount of time, and 2) will produce a w that separates T. Collins also proposed a variant of the structured perceptron where the final weight vector is a weighted average of all parameters that occur during training, which he called the averaged perceptron and can be viewed as an approximation to the voted perceptron algorithm (Freund and Schapire, 1999)."
      ]
    },
    {
      "heading": "4. Distributed Structured Perceptron",
      "text": [
        "In this section we examine two distributed training strategies for the perceptron algorithm based on parameter mixing.",
        "Distributed training through parameter mixing is a straightforward way of training classifiers in parallel.",
        "The algorithm is given in Figure 2.",
        "The idea is simple: divide the training data T into S disjoint shards such that T = {Ti,..., Ts}.",
        "Next, train perceptron models (or any learning algorithm) on each shard in parallel.",
        "After training, set the final parameters to a weighted mixture of the parameters of each model using mixture coefficients //t.",
        "Note that we call this strategy parameter mixing as opposed to parameter averaging to distinguish it from the averaged perceptron (see previous section).",
        "It is easy to see how this can be implemented on a cluster through a map-reduce framework, i.e., the map step trains the individual models in parallel and the reduce step mixes their parameters.",
        "The advantages of parameter mixing are: 1) that it is parallel, making it possibly to scale to extremely large data sets, and 2) it is resource efficient, in particular with respect to network usage as parameters are not repeatedly passed across the network as is often the case for exact distributed training strategies.",
        "For maximum entropy models, Mann et al.",
        "(2009) show it is possible to bound the norm of the dif-",
        "PerceptronParamMix(T = {(xt, yt)}t=i)"
      ]
    },
    {
      "heading": "4.. return w",
      "text": [
        "Figure 2: Distributed perceptron using a parameter mixing strategy.",
        "| Each w(i) is computed in parallel.",
        "t = {/i,..., /s}, V^j G //x : M» > 0 and J2» Mi = 1.",
        "ference between parameters trained on all the data serially versus parameters trained with parameter mixing.",
        "However, their analysis requires a stability bound on the parameters of a regularized maximum entropy model, which is not known to hold for the perceptron.",
        "In Section 5, we present empirical results showing that parameter mixing for distributed perceptron can be sub-optimal.",
        "Additionally, Dredze et al.",
        "(2008) present negative parameter mixing results for confidence weighted learning, which is another online learning algorithm.",
        "The following theorem may help explain this behavior.",
        "Theorem 2.",
        "For a any training set T separable by margin 7, the perceptron algorithm trained through a parameter mixing strategy (Figure 2) does not necessarily return a separating weight vector w.",
        "This counter example does not say that a parameter mixing strategy will not converge.",
        "On the contrary, Theorem 1 (Novikoff (1962)).",
        "Assume training set T is separable by margin 7.",
        "Let k be the number of mistakes made training the perceptron (Figure 1) on T. If training is run indefinitely, then k < R if T is separable, then each of its subsets is separable and converge via Theorem 1.",
        "What it does say is that, independent of / , the mixed weight vector produced after convergence will not necessarily separate the entire data, even when T is separable.",
        "Consider a slight augmentation to the parameter mixing strategy.",
        "Previously, each parallel percep-tron was trained to convergence before the parameter mixing step.",
        "Instead, shard the data as before, but train a single epoch of the perceptron algorithm for each shard (in parallel) and mix the model weights.",
        "This mixed weight vector is then resent to each shard and the perceptrons on those shards reset their weights to the new mixed weights.",
        "Another single epoch of training is then run (again in parallel over the shards) and the process repeats.",
        "This iterative parameter mixing algorithm is given in Figure 3.",
        "Again, it is easy to see how this can be implemented as map-reduce, where the map computes the parameters for each shard for one epoch and the reduce mixes and resends them.",
        "This is analogous to batch distributed gradient descent methods where the gradient for each shard is computed in parallel in the map step and the reduce step sums the gradients and updates the weight vector.",
        "The disadvantage of iterative parameter mixing, relative to simple parameter mixing, is that the amount of information sent across the network will increase.",
        "Thus, if network latency is a bottleneck, this can become problematic.",
        "However, for many parallel computing frameworks, including both multi-core computing as well as cluster computing with high rates of connectivity, this is less of an issue.",
        "Theorem 3.",
        "Assume a training set T is separable by margin 7.",
        "Let k^n be the number of mistakes that occurred on shard i during the nth epoch of training.",
        "For any N , when training the perceptron with iterative parameter mixing (Figure 3), Proof.",
        "Let w(i,n) to be the weight vector for the ith shard after the nth epoch of the main loop and let w([i,n]-k) be the weight vector that existed on shard i in the nth epoch k errors before w(i,n).",
        "Let",
        "PerceptronIterParamMix(T = {(xt, yt)}t=i) 4. w(i,n) = OneEpochPerceptron(Tj, w)"
      ]
    },
    {
      "heading": "6.. return w",
      "text": [
        "OneEpochPerceptron(T, w*)",
        "Figure3: Distributedperceptronusing aniterativeparam-eter mixing strategy.",
        "| Each w(i,n) is computed in parallel.",
        "t = {/i,n,..., Ms,n}, ^Mi,n G //x„: Mi,„ > 0 and Vn: ^i Mi,n = 1.",
        "w(avg,n) be the mixed vector from the weight vectors returned after the nth epoch, i.e.,",
        "Following the analysis from Collins (2002) Theorem 1, by examining line 5 of OneEpochPerceptron in Figure 3 and the fact that u separates the data by 7:",
        "That is, u • w(i,n) is bounded below by the average weight vector for the n-1st epoch plus the number of mistakes made on shard i during the nth epoch times the margin 7.",
        "Next, by OneEpochPerceptron line 5, the definition of R, and w([i,n]-l) (f (xt, yt) – f(xt, y')) < 0 when line 5 is called:",
        "Thatis, the squared L2-normofashards weightvec-tor is bounded above by the same value for the average weightvectorofthe n-1stepochand the number of mistakes made on that shard during the nth epoch times R.",
        "Using A1/A2 we prove two inductive hypotheses:",
        "using A1 and the fact that w(avg,0) = 0 for the second step.",
        "For the IH2 base case we can write:",
        "i=i i=i The first inequality is Jensen's inequality, and the second is true by A2 and ||w(avg,0) || = 0.",
        "Proceeding to the general case, w(avg,N):",
        "The first inequality uses A1, the second step J2i Mi,N = 1 and the second inequality the inductive hypothesis IH1.",
        "For IH2, in the general case, we can write:",
        "The first inequality is Jensen's, the second A2, and the third the inductive hypothesis IH2.",
        "Putting together IH1, IH2 and ||w(avg,N) || > u • w(avg,N):",
        "which yields: Ef=l Mi,nki,n <",
        "If we set each //tn to be the uniform mixture, /x^n = 1/S, then Theorem 3 guarantees convergence to a separating hyperplane.",
        "If ES=l M^nk^n = 0, then the previous weight vector already separated the data.",
        "Otherwise, EN=l YS=l ki,n is still increasing, but is bounded and cannot increase indefinitely.",
        "Also note that if S = 1, then /l n must equal 1 for all n and this bound is identical to Theorem 1.",
        "However, we are mainly concerned with how fast convergence occurs, which is directly related to the number of training epochs each algorithm must run, i.e., N in Figure 1 and Figure 3.",
        "For the non-distributed variant of the perceptron we can say that Nnon_dist < R/7 since in the worst case a single mistake happens on each epoch.",
        "For the distributed case, consider setting /x^n = k^n/kn, where kn =",
        "i ki,n.",
        "That is, we mix parameters proportional to the number of errors each made during the previous epoch.",
        "Theorem 3 still implies convergence to a separating hyperplane with this choice.",
        "Further, we can",
        "bound the required number of epochs Ndist:",
        "Ignoring when all ki,n are zero (since the algorithm will have converged), the first inequality is true since either k^n > 1, implying that [k^n]fci'n/fcn > 1, or k^n = 0 and [k^n]fci'n/fcn = 1.",
        "The second inequality is true by the generalized arithmetic-geometric mean inequality and the final inequality is Theorem 3.",
        "Thus, the worst-case number of epochs is identical for both the regular and distributed percep-tron - but the distributed perceptron can theoretically process each epoch S times faster.",
        "This observation holds only for cases where /x^n > 0 when k^n > 1 and /x^n = 0 when k^n = 0, which does not include uniform mixing."
      ]
    },
    {
      "heading": "5. Experiments",
      "text": [
        "To investigate the distributed perceptron strategies discussed in Section 4 we look at two structured prediction tasks - named entity recognition and dependency parsing.",
        "We compare up to four systems:",
        "1.",
        "Serial (All Data): This is the classifier returned if trained serially on all the available data.",
        "2.",
        "Serial (Sub Sampling): Shard the data, select one shard randomly and train serially.",
        "3.",
        "Parallel (Parameter Mix): Parallel strategy discussed in Section 4.1 with uniform mixing.",
        "4.",
        "Parallel (Iterative Parameter Mix): Parallel strategy discussed in Section 4.2 with uniform mixing (Section 5.1 looks at mixing strategies).",
        "For all four systems we compare results for both the standard perceptron algorithm as well as the averaged perceptron algorithm (Collins, 2002).",
        "We report the final test set metrics of the converged classifiers to determine whether any loss in accuracy is observed as a consequence of distributed training strategies.",
        "We define convergence as either: 1) the training set is separated, or 2) the training set performance measure (accuracy, f-measure, etc.)",
        "does not change by more than some predefined threshold on three consecutive epochs.",
        "As with most real world data sets, convergence by training set separation was rarely observed, though in both cases training set accuracies approached 100%.",
        "For both tasks we also plot test set metrics relative to the user wall-clock taken to obtain the classifier.",
        "The results were computed by collecting the metrics at the end of each epoch for every classifier.",
        "All experiments used 10 shards (Section 5.1 looks at convergence relative to different shard size).",
        "Our first experiment is a named-entity recognition task using the English data from the CoNLL 2003 shared-task (Tjong Kim Sang and De Meul-der, 2003).",
        "The task is to detect entities in sentences and label them as one of four types: people, organizations, locations or miscellaneous.",
        "For our experiments we used the entire training set (14041 sentences) and evaluated on the official development set (3250 sentences).",
        "We used a straightforward IOB label encoding with a 1st order Markov factorization.",
        "Our feature set consisted of predicates extracted over word identities, word affixes, orthography, part-of-speech tags and corresponding concatenations.",
        "The evaluation metric used was micro f-measure over the four entity class types.",
        "Results are given in Figure 4.",
        "There are a number of things to observe here: 1) training on a single shard clearly provides inferior performance to training on all data, 2) the simple parameter mixing strategy improves upon a single shard, but does not meet the performance of training on all data, 3) iterative parameter mixing achieves performance as good as or better than training serially on all the data, and 4) the distributed algorithms return better classifiers much quicker than training serially on all the data.",
        "This is true regardless of whether the underlying algorithm is the regular or the averaged perceptron.",
        "Point 3 deserves more discussion.",
        "In particular, the iterative parameter mixing strategy has a higher final f-measure than training on all the data serially than the standard perceptron (f-measure of87.9 vs. 85.8).",
        "We suspect this happens for two reasons.",
        "First, the parameter mixing has a bagging like effect which helps to reduce the variance of the per-shard classifiers (Breiman, 1996).",
        "Second, the fact that parameter mixing is just a form of parameter averaging perhaps has the same effect as the averaged perceptron.",
        "Our second set of experiments looked at the much more computationally intensive task of dependency parsing.",
        "We used the Prague Dependency Treebank (PDT) (Hajic et al., 2001), which is a Czech",
        "Figure 4: NER experiments.",
        "Upper figures plot test data f-measure versus wall clock for both regular perceptron (left) and averaged perceptron (right).",
        "Lower table is f-measure for converged models.",
        "language treebank and currently one of the largest dependency treebanks in existence.",
        "We used the CoNLL-X training (72703 sentences) and testing splits (365 sentences) of this data (Buchholz and Marsi, 2006) and dependency parsing models based on McDonald and Pereira (2006) which factors features over pairs of dependency arcs in a tree.",
        "To parse all the sentences in the PDT, one must use a non-projective parsing algorithm, which is a known NP-complete inference problem when not assuming strong independence assumptions.",
        "Thus, the use of approximate inference techniques is common in order to find the highest weighted tree for a sentence.",
        "We use the approximate parsing algorithm given in McDonald and Pereira (2006), which runs in time roughly cubic in sentence length.",
        "To train such a model is computationally expensive and can take on the order of days to train on a single machine.",
        "Unlabeled attachment scores (Buchholz and Marsi, 2006) are given in Figure 5.",
        "The same trends are seen for dependency parsing that are seen for named-entity recognition.",
        "That is, iterative parameter mixing learns classifiers faster and has a final accuracy as good as or better than training serially on all data.",
        "Again we see that the iterative parameter mixing model returns a more accurate classifier than the regular perceptron, but at about the same level as the averaged perceptron.",
        "Section 4.3 suggests that different weighting strategies can lead to different convergence properties, in particular with respect to the number of epochs.",
        "For the named-entity recognition task we ran four experiments comparing two different mixing strategies - uniform mixing (/t^n=1/S) and error mixing (/t^n=k^n/kn) - each with two shard sizes S = 10 and S = 100.",
        "Figure 6 plots the number of training errors per epoch for each strategy.",
        "We can make a couple observations.",
        "First, the mixing strategy makes little difference.",
        "The reason being that the number of observed errors per epoch is roughly uniform across shards, making both strategies ultimately equivalent.",
        "The other observation is that increasing the number of shards can slow down convergence when viewed relative to epochs.",
        "Again, this appears in contradiction to the analysis in Section 4.3, which, at least for the case of error weighted mixtures, implied that the number of epochs to convergence was independent of the number of shards.",
        "But that analysis was based on worst-case scenarios where a single error occurs on a single shard at each epoch, which is unlikely to occur in real world data.",
        "Instead, consider the uni-",
        "Wall Clock",
        "Wall Clock",
        "Reg.",
        "Perceptron",
        "Avg.",
        "Perceptron",
        "F-measure",
        "F-measure",
        "Serial (All Data)",
        "85.8",
        "88.2",
        "Serial (Sub Sampling)",
        "75.3",
        "76.6",
        "Parallel (Parameter Mix)",
        "81.5",
        "81.6",
        "Parallel (Iterative Parameter Mix)",
        "87.9",
        "88.1",
        "Wall Clock",
        "Figure 5: Dependency Parsing experiments.",
        "Upper figures plot test data unlabeled attachment score versus wall clock for both regular perceptron (left) and averaged perceptron (right).",
        "Lower table is unlabeled attachment score for converged models.",
        "Training Epochs",
        "form mixture case.",
        "Theorem 3 implies:",
        "Thus, for cases where training errors are uniformly distributed across shards, it is possible that, in the worst-case, convergence may slow proportional the the number of shards.",
        "This implies a trade-off between slower convergence and quicker epochs when selecting a large number of shards.",
        "In fact, we observed a tipping point for our experiments in which increasing the numberofshards began to have an adverse effect on training times, which for the named-entity experiments occurred around 25-50 shards.",
        "This is both due to reasons described in this section as well as the added overhead of maintaining and summing multiple high-dimensional weight vectors after each distributed epoch.",
        "It is worth pointing out that a linear term S in the convergence bound above is similar to convergence/regret bounds for asynchronous distributed online learning, which typically have bounds linear in the asynchronous delay (Mesterharm, 2005; Zinkevich et al., 2009).",
        "This delay will be on average roughly equal to the number of shards S."
      ]
    },
    {
      "heading": "6. Conclusions",
      "text": [
        "In this paper we have investigated distributing the structured perceptron via simple parameter mixing strategies.",
        "Our analysis shows that an iterative parameter mixing strategy is both guaranteed to separate the data (if possible) and significantly reduces the time required to train high accuracy classifiers.",
        "However, there is a trade-off between increasing training times through distributed computation and slower convergence relative to the number ofshards.",
        "Finally, we note that using similar proofs to those given in this paper, it is possible to provide theoretical guarantees for distributed online passive aggressive learning (Crammeretal., 2006), whichis aform of large-margin perceptron learning.",
        "Unfortunately space limitations prevent exploration here.",
        "Acknowledgements: We thank Mehryar Mohri, Fernando Periera, Mark Dredze and the three anonymous reviews for their helpful comments on this work.",
        "Reg.",
        "Perceptron",
        "Avg.",
        "Perceptron",
        "Unlabeled Attachment Score",
        "Unlabeled Attachment Score",
        "Serial (All Data)",
        "81.3",
        "84.7",
        "Serial (Sub Sampling)",
        "77.2",
        "80.1",
        "Parallel (Iterative Parameter Mix)",
        "83.5",
        "84.5"
      ]
    }
  ]
}
