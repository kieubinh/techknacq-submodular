{
  "info": {
    "authors": [
      "Andreas Maletti"
    ],
    "book": "Human Language Technologies: the 2010 Annual Conference of the North American Chapter of the Association for Computational Linguistics",
    "id": "acl-N10-1130",
    "title": "Why Synchronous Tree Substitution Grammars?",
    "url": "https://aclweb.org/anthology/N10-1130",
    "year": 2010
  },
  "references": [
    "acl-D07-1078",
    "acl-J08-3004",
    "acl-J90-2002",
    "acl-J93-2003",
    "acl-N06-1033",
    "acl-N09-1026",
    "acl-P05-1033",
    "acl-P09-2036",
    "acl-W09-3801"
  ],
  "sections": [
    {
      "text": [
        "Universität Rovira i Virgili, Departament de Filologies Romàniques Avinguda de Catalunya 35, 43002 Tarragona, Spain",
        "andreas.maletti@urv.cat",
        "Synchronous tree substitution grammars are a translation model that is used in syntax-based machine translation.",
        "They are investigated in a formal setting and compared to a competitor that is at least as expressive.",
        "The competitor is the extended multi bottom-up tree transducer, which is the bottom-up analogue with one essential additional feature.",
        "This model has been investigated in theoretical computer science, but seems widely unknown in natural language processing.",
        "The two models are compared with respect to standard algorithms (binarization, regular restriction, composition, application).",
        "Particular attention is paid to the complexity of the algorithms."
      ]
    },
    {
      "heading": "1. Introduction",
      "text": [
        "Every machine translation system uses a translation model, which is a formal model that describes the translation process.",
        "Either this system is handcrafted (in rule-based translation systems) or it is trained with the help of statistical processes.",
        "Brown et al.",
        "(1990) discuss automatically trainable translation models in their seminal paper on the latter approach.",
        "The IBM models of Brown et al.",
        "(1993) are string-based in the sense that they base the translation decision on the words and the surrounding context.",
        "In the field of syntax-based machine translation, the translation models have access to the syntax (in the form of parse trees) of the sentences.",
        "Knight (2007) presents a good exposition to both fields.",
        "In this paper, we focus on syntax-based translation models, and in particular, synchronous tree substitution grammars (STSGs), or the equally powerful (linear and nondeleting) extended (top-down) tree transducers of Graehl et al.",
        "(2008).",
        "Chiang and Knight (2006) gives a good introduction to STSGs, which originate from the syntax-directed translation schemes of Aho and Ullman (1972) [nowadays more commonly known as synchronous context-free grammars].",
        "Roughly speaking, an STSG has rules in which a nonterminal is replaced by two trees containing terminal and nonterminal symbols.",
        "In addition, the nonterminals in the two trees are linked and a rule is only applied to linked nonterminals.",
        "Several algorithms for STSGs have been discussed in the literature.",
        "For example, we can• attempt to compose them.",
        "However, some important algorithms are partial because it is known that the construction might not be possible in general.",
        "This is the case, for example, for binarization and composition.",
        "In the theoretical computer science community, alternative models have been explored.",
        "Such a model is the multi bottom-up tree transducer (1981), which essentially is the bottom-up analogue of STSGs with the additional feature that nonterminals can have an arbitrary rank (the rank of a nonterminal of an STSG can be considered to be fixed to 1).",
        "This model is even more expressive than STSGs, but still offers good computational properties.",
        "In this contribution, we will compare STSGs and MBOTs with respect to some standard algorithms.",
        "Generally, MBOTs offer algorithmic benefits over STSG, which can be summarized as fol-",
        "• Every STSG can be transformed into an equivalent MBOT in linear time.",
        "• MBOTs can be fully binarized in linear time whereas only partial binarizations (or asynchronous binarizations) are possible for",
        "STSGs.",
        "• The input language of an MBOT M can be regularly restricted in O(|M| • |S|), whereas the corresponding construction for an STSG M is in O(|M| • |S|2rk(M)+) where rk(M) is the maximal number of nonterminals in a rule of",
        "the STSG M.",
        "• MBOTs can be composed, whereas this cannot be achieved for STSGs.",
        "Overall, we thus conclude that, from an algorithmic perspective, it would be beneficial to work with MBOTs instead of STSGs.",
        "However, the full power of MBOTs should not be tapped because, in general, MBOTs have the finite-copying property [see Engelfriet et al.",
        "(1980)], which complicates the algorithms for forward and backward application (see Section 7)."
      ]
    },
    {
      "heading": "2. Preliminary definitions",
      "text": [
        "An alphabet is a finite set of symbols.",
        "Our weighted devices use real-number weights, but the results translate easily to the more general setting of commutative semirings [see Golan (1999)].",
        "A weighted string automaton as in Schützenberger (1961) and Eilenberg (1974) is a system (S, V, I, t, F) where",
        "• S and V are alphabets of states and input symbols, respectively,",
        "• I, F : S – R assign initial and final weights, respectively, and",
        "• t : S x V x S – R assigns a weight to each transition.",
        "Let w = 7i • • • Yk G V* be an input string of length k. A run on w is r : {0,..., k} – S. The weight of the run r is wt(r) = Yii=1 t(ri-1, y%, r).",
        "The semantics of the automaton A then assigns to w the weight",
        "A(w) = I (ro) • wt(r) • F (rk ) .",
        "r run on w",
        "A good introduction to weighted string automata can be found in Mohri (2009) and Sakarovitch (2009).",
        "To simplify the theoretical discussion, we assume that each symbol that we use in trees has a fixed rank, which determines the number of children of each node with that label.",
        "A ranked alphabet S = Uk>0 Skis an alphabet whose symbols have assigned ranks.",
        "The set Sk contains all symbols of rank k. The set Ts(V) of S-trees indexed by a set V is the smallest set such that V ç Ts(V) and ..., tk) G Ts(V) for every a G Sk and ti,...,tk G TE(V).",
        "The size |t| of the tree t G Tsis the number of occurrences of symbols from S U V that appear in t. A context c is a tree of TSU{D}(V), in which the nullary symbol □ occurs exactly once.",
        "The set of all such contexts is Cs(V).",
        "The tree c[t] is obtained from c by replacing the symbol □ by t.",
        "A weighted synchronous tree substitution grammar (STSG) is a system (N, S, A, I, P) where• N is an alphabet of nonterminals,",
        "• S and A are ranked alphabets of input and output symbols, respectively,",
        "• I : N – R assigns initial weights, and",
        "• P is a finite set of productions n : t A u with n G N, t G TS(N), a G R, and u G TA(N) such that",
        "- every n' G N that occurs in t occurs exactly once in u and vice versa, and - t G N or u G N.",
        "Note that our distinction between nonterminals and terminals is rather uncommon for STSG [see Chiang (2005)], but improves the generative power.",
        "We chose the symbol \"a\" because STSG productions are symmetric.",
        "The size |n : t A u| of a production is |t| + |u|, and the size |M| of the STSG M is J2peP |p| .",
        "It is a weighted tree substitution grammar (TSG) if t = u for all productions n : t A u G P. Further, it is in normal form if for every production n : t A u G P there exist a G Sk, 6 G Ak, and nonterminals n1,..., nk, ni,..., n'k G N such that t = a(n1,..., nk) and u = 6(ni,..., n'k).",
        "A detailed exposition to STSGs and STSGs in normal form (also called synchronous context-free grammars) can be found in Chiang (2005).",
        "Further details on TSGs can be found in Berstel and Reutenauer (1982) and Fulop and Vogler (2009).",
        "Equal nonterminals in t and u of a production n : t A u G P are linked.",
        "To keep the presentation simple, we assume that those links are re-",
        "Figure 1: STSG production (top) and corresponding MBOT rule (bottom) where @ is an arbitrary symbol that is introduced during binarization.",
        "membered also in sentential forms.",
        "In addition, we assume that N n S = 0.",
        "For every c, c' G Cs(N) and n G N, let (c[n], c'[n]) == (c[t], c'[u]) if• there is a production n : t A u G P, and",
        "• the explicit (the ones replacing □) occurrences of n in c[n] and c'[n] are linked.",
        "Left-most derivations are defined as usual, and the weight of a derivation D : £0 == • • • == £k is wt(D) = Yik=1 ai.",
        "The weight assigned by the grammar M to a pair (t, u) G Ts x Ta is",
        "M(t,u)= ]T I(n) • ]T wt(D) .",
        "D leftmost derivation from (n, n) to (t, u)",
        "The second restriction on productions ensures that derivations are of finite length, and thus that the sums in the definition of M(t, u) are finite.",
        "In the following, we will use syntactic simplifications such as",
        "• several occurrences of the same nonterminal in a tree (disambiguated by decoration).",
        "• symbols that are terminals (of S and A) and nonterminals.",
        "We will print nonterminals in italics and terminal symbols upright.",
        "• omission of the nonterminal n (or the weight a) of a rule n : t a u if the terminal n occurs at the root of t and u (or a = 1).",
        "• n – t instead of n : t A t if it is a TSG.",
        "A sample STSG production (using those simplifications) is displayed in Figure 1.",
        "Our STSGs are essentially equivalent to the (nondeleting and linear) extended tree transducers of Graehl et al.",
        "(2008) and",
        "Maletti et al.",
        "(2009)."
      ]
    },
    {
      "heading": "3. Multi bottom-up tree transducers",
      "text": [
        "As indicated in the Introduction, we will compare STSGs to weighted multi bottom-up tree transducers, which have been introduced by Arnold and Dauchet (1982) and Lilin (1981).",
        "A more detailed (and English) presentation can be found in Engel-friet et al.",
        "(2009).",
        "Let us quickly recall the formal definition.",
        "We use a fixed set X = {x1, x2,... } of (formal) variables.",
        "For a ranked alphabet S and L ç Ts(X ) we let and we treat elements of S(L) like elements of Tsus (X ).",
        "Definition 1 A weighted multi bottom-up tree transducer (MBOT) is a system (S, S, A, F, R) where",
        "• S, S, and A are ranked alphabets ofstates, input symbols, and output symbols, respectively,",
        "• F : S1 – R assigns final weights, and",
        "• R is a finite set of rules l – r where a G R, l G Ts(s(X)), and r G S(Ta(X)) such that",
        "- every x G X that occurs in l occurs exactly once in r and vice versa, and - lGS(X ) or r GS (X ).",
        "Roughly speaking, an MBOT is the bottom-up version of an extended top-down tree transducer, in which the states can have a rank different from 1.",
        "We chose the symbol \" – \" because rules have a distinguished left-and right-hand side.",
        "The size |l – r| of a rule is 111 + | r |, and the size | M | of an MBOT M is 4 Binarization",
        "Sreß|r|.",
        "Again the second condition on the rules will ensure that derivations will be finite.",
        "Let us continue with the rewrite semantics for the MBOT (S, S, A, F, R).",
        "To simplify the presentation, we again assume that S n (S U A) = 0.",
        "We need the concept of substitution.",
        "Let 6 : X – Ta and t G Ta(X).",
        "Then t6 is the tree obtained by replacing every occurrence of x X in t by 6(x).",
        "Definition2 Let c G CS (S(X)) and 6 : X – Ta.",
        "M (t,u)= £ F (s) • ]T wt(D) .",
        "D leftmost derivation from t to s(u)",
        "We use the simplifications already mentioned in the previous section also for MBOTs.",
        "Figures 1 and 2 display example rules of an MBOT.",
        "The rules of Figure 2 are applied in a derivation in Figure 3.",
        "The first displayed derivation step uses the context S(NP(t1), □) and any substitution 6 such that 6(x2) = t2 and 6(x3) = t3.",
        "It is argued by Chiang (2005) and Graehl et al.",
        "(2008) that STSGs (and extended tree transducers) have sufficient power for syntax-based machine translation.",
        "Knight (2007) presents a detailed overview that also mentions short-comings.",
        "Since our newly proposed device, the MBOT, should be at least as powerful as STSGs, we quickly demonstrate how each STSG can be coded as an MBOT.",
        "An STSG production and the corresponding MBOT rule are displayed in Figure 1.",
        "Since the correspondence is rather trivial, we omit a formal definition.",
        "Theorem 3 For every STSG M, an equivalent MBOT can be constructed in time O(|M|).",
        "Whenever nondeterminism enters the playfield, binarization becomes an important tool for efficiency reasons.",
        "This is based on the simple, yet powerful observation that instead of making 5 choices from a space of n in one instant (represented by n rules), it is more efficient (Wang et al., 2007) to make them one-by-one (represented by 5n rules).",
        "Clearly, this cannot always be done but positive examples exist in abundance; e.g., binarization of context-free grammars [see Chomsky normal form in Hopcroft and Ullman (1979)].",
        "Binarization of tree language devices typically consists of two steps: (i) binarization of the involved trees (using the auxiliary symbol @) and (ii) adjustment (binarization) of the processing device to work on (and fully utilize) the binarized trees.",
        "If successful, then this leads to binarized derivation trees for the processing device.",
        "In Figure 4 we show the bi-narization of the trees in an STSG production.",
        "Another binarization of the rule of Figure 4 is displayed in Figure 1.",
        "The binarization is evident enough, so we can assume that all trees considered in the following are binarized.",
        "The binarization in Figure 1 is unfortunate because the obtained production cannot be factorized such that only two nonterminals occur in each rule.",
        "However, the binarization of Figure 4 allows the factorization into S(U, NP) a S(U, NP) and U : @(NP, V) a @( V, NP), which are fully bina-rized productions.",
        "However, in general, STSGs (or SCFGs or extended tree transducers) cannot be fully binarized as shown in Aho and Ullman (1972).",
        "Zhang et al.",
        "(2006) and Wang et al.",
        "(2007) show the benefits of fully binarized STSGs and present a linear-time algorithm for the binarization of binariz-able STSGs.",
        "We show that those benefits can be reaped for all STSGs by a simple change of model.",
        "NP V NP V NP NPSS",
        "NP V V NP",
        "We have already demonstrated that every STSG can be transformed into an equivalent MBOT in linear time.",
        "Next, we discuss binarization of MBOTs.",
        "An MBOT is in one-symbol normal form if there is at most one input and at most one output symbol, but at least one symbol in each rule (see Figure 2).",
        "Raoult (1993) and Engelfriet et al.",
        "(2009) prove that every MBOT can be transformed into one-symbol normal form.",
        "The procedure presented there runs in linear time in the size of the input MBOT.",
        "Consequently, we can transform each STSG to an equivalent MBOT in one-symbol normal form in linear time.",
        "Finally, we note that a MBOT in one-symbol normal form has binarized derivation trees, which proves that we fully binarized the STSG.",
        "Theorem 4 For every STSG M an equivalent, fully binarized MBOT can be constructed in O(|M |).",
        "The construction of Engelfriet et al.",
        "(2009) is illustrated in Figure 2, which shows the rules of an MBOT in one-symbol normal form.",
        "Those rules are constructed from the unlucky binarization of Figure 1.",
        "In the next section, we show the benefit of the full binarization on the example of the Bar-Hillel construction."
      ]
    },
    {
      "heading": "5. Input and output restriction",
      "text": [
        "A standard construction for transformation devices (and recognition devices alike) is the regular restriction of the input or output language.",
        "This construction is used in parsing, integration of a language model, and the computation of certain metrics [see Nederhof and Satta (2003), Nederhof and Satta (2008), and Satta (2010) for a detailed account].",
        "The construction is generally known as Bar-Hillel construction [see Bar-Hillel et al.",
        "(1964) for the original construction on context-free grammars].",
        "STSGs (and extended tree transducers) are symmetric, so that input and output can freely be swapped.",
        "Let M be an STSG and A a weighted string automaton with states S. In the Bar-Hillel construction for M and A, the maximal rank rk(M) of a symbol in the derivation forest of M enters as an exponent into the complexity O(|M| • |S|2rk(M)+).",
        "Since full binarization is not possible in general, the maximal rank cannot be limited to 2.",
        "In contrast, full binarization is possible for MBOTs (with only linear overhead), so let us investigate whether we can exploit this in a Bar-Hillel construction for",
        "MBOTs.",
        "Let M = (S, S, A, F, R) be an MBOT in one-symbol normal form.",
        "The symbols in S U A have rank at most 2.",
        "Moreover, let G = (N, S, S, I, P) be a TSG in normal form.",
        "We want to construct an MBOT M ' such that M ' (t, u) = M (t, u) • G(t) for every t G TS and u G Ta.",
        "In other words, each input tree should be rescored according to G; in the unweighted case this yields that the translation ofM is filtered to the set of input trees accepted by G.",
        "We occasionally write the pair (a, b) in angled parentheses ('(' and ')').",
        "In addition, we use the center line ellipsis '• •' (also with decoration) like a variable (especially for sequences).",
        "• for every rule s(- •) – s'(- •') G R with s, s' G S and every n G N, there exists a rule",
        "every production n – a(n1,..., nk) G P, the following rule is in R':",
        "a((s1,n1)(\"1 ),..., (sk ,nk )(-k )) – – (s,n)(-) .",
        "The first type of rule (second item) does not involve an input symbol, and thus the nonterminal of G is just forwarded to the new state.",
        "Since no step with respect to G is made, only the weight of the rule of M is charged.",
        "The second type of rule (third item) uses a rule of R with the input symbol a and a production of P that also contains a.",
        "The rule and the production are executed in parallel in the resulting rule and its weight is thus the product of the weights of the original rule and production.",
        "Overall, this is a classical product construction, which is similar to other product constructions such as Bor-chardt (2004).",
        "A straightforward proof shows that M'{t,v) = M(t,u) • G(t) for every t G Ts and u G Ta, which proves the correctness.",
        "Next, let us look at the complexity.",
        "The MBOT Prod(M, G) can be obtained in time O(|M| • |G|).",
        "Furthermore, it is known [see, for example, Maletti and Satta (2009)] that for every weighted string automaton A with states S, we can construct a TSG G in normal form, which has size O(|E| • |S|) and recognizes each tree of Ts with the weight that the automaton A assigns to its yield.",
        "The idea of this construction is illustrated in Figure 5.",
        "Consequently, our Bar-Hillel construction has the well-known complexity O(|M| • |S|).",
        "This should be compared to the complexity of the corresponding construction for an STSG M, which is in O(|M| • |S|2rk(M)+) where rk(M) is the maximal number of (different) nonterminals in a production of M. Thus, the STSG should be transformed into an equivalent MBOT in one-symbol normal form, which can be achieved in linear time, and the Bar-Hillel construction should be performed on this MBOT.",
        "Since STSGs are symmetric, our approach can also be applied to the output side of an STSG.",
        "However, it should be noted that we can apply it only to one side (the input side) of the MBOT.",
        "A construction for the output side of the MBOT can be defined, but it would suffer from a similarly high complexity as already presented for STSGs.",
        "More precisely, we expect a complexity of roughly O(|M| • |S|2rk(M)+) for this construction.",
        "The small gain is due to the one-symbol normal form and binarization."
      ]
    },
    {
      "heading": "6. Composition",
      "text": [
        "Another standard construction for transformations is (relational) composition.",
        "Composition constructs a translation from a language L to L'' given translations from L to L' and from L' to L\".",
        "Formally, given transformations M' : Ts x Ta a R and M\" : Ta x Tr a R, the composition of M' and M\" is a tranformation M' ; M\" : Ts x Tr a R with for every t G Ts and v G Tr.",
        "Mind that the summation might be infinite, but we will only consider compositions, in which it is finite.",
        "Unfortunately, Arnold and Dauchet (1982) show that the composition of two transformations computed by STSGs cannot necessarily be computed by an STSG.",
        "Consequently, there cannot be a general composition algorithm for STSGs.",
        "Let us consider the problem of composition for MBOTs.",
        "Essentially, we will follow the unweighted approach of Engelfriet et al.",
        "(2009) to obtain a composition construction, which we present next.",
        "Let be MBOTs in one-symbol normal form.",
        "We extend the rewrite semantics (see Definition 2) to trees that include symbols foreign to a MBOT.",
        "In other words, we (virtually) extend the input and output alphabets to contain all used symbols (in particular also the states of another MBOT).",
        "However, since we do not extend the set of rules, the MBOT cannot process foreign symbols.",
        "Nevertheless it can perform rewrite steps on known symbols (or apply rules that do not contain input symbols).",
        "We use =>R/ and =>R« for derivation steps original rule:",
        "that exclusively use rules of R' and R'', respectively.",
        "••k ) for s' G S' and This identification is illustrated",
        "s'k' G S''.",
        "in Figure 6.",
        "• the rules l A r of R, all of which are such that the variables in l occur in order (xi,..., xk) from left-to-right, are constructed in 3 ways:",
        "- l =>R/ £ == R// r with a = ai • a2 and the applied rule ofR' contains an output symbol.",
        "If a rule l A r can be constructed in several ways (with exactly weight a), then the weights ofall possibilities are added for the weight of the new rule.",
        "Intuitively, a single rule of R' without output symbols is used in the first type (because otherwise r would have the wrong shape).",
        "In the second type, a single rule of R'' without input symbols is used.",
        "Finally, in the third type, first a rule of R' that produces an output symbol of A is used and then this symbol is processed by a single rule of R''.",
        "Note that every rule of R' can produce at most one output symbol and the rules of R'' either process none or one input symbol due to the assumption that M' and M'' are in one-symbol normal form.",
        "We illustrate a rule of the first in Figure 7.",
        "constructed rule: a",
        "The correctness proof of this construction can essentially (i.e., for the unweighted case) be found in Engelfriet et al.",
        "(2009).",
        "Before we can extend it to the weighted case, we need to make sure that the sum in the definition of composition is finite.",
        "We achieve this by requiring that",
        "• for every t G Ts and s G S' there are finitely many u G Ta such that t == • • • = s(u), or",
        "• for every v G Tr and s G Si' there are finitely many u G Ta such that u =^ • • • => s(v).",
        "In other words, M' may not have cyclic input e-rules or M'' may not have cyclic output e-rules.",
        "Now we can state the main theorem.",
        "Theorem 7 For all MBOTs M' and M'' with the above restriction the composition M' ; M'' oftheir transformations can be computed by another MBOT.",
        "This again shows an advantage of MBOTs.",
        "The composition result relies essentially on the one-symbol normal form (or full binarization), which can always be achieved for MBOTs, but cannot for STSGs.",
        "Consequently, MBOTs can be composed, whereas STSGs cannot be composed in general.",
        "Indeed, STSGs in one-symbol normal form, which can be defined as for MBOTs, can be composed as well, which shows that the one-symbol normal form is the key for composition.",
        "Finally, let us discuss the complexity of composition.",
        "Let rk(M') be the maximal rank of a state in S'.",
        "Then there are",
        "s'' .",
        ".",
        ".s .",
        ".",
        ".",
        "• O(|M'| • |M''| • |S''|rk(m/)) rules of type 3.",
        "Each rule can be constructed in linear time in the size of the participating rules, so that we obtain a final complexity of O(|M'| • |M''| • |S''|rk(M/)).",
        "Note that if M' is obtained from an STSG M (via Theorem 4), then rk(M') < rk(M).",
        "This shows that binarization does not avoid the exponent for composition, but at least enables composition in the general case.",
        "Moreover, the complexity could be slightly improved by the observation that our construction only relies on",
        "(i) M' having at most one output symbol per rule and (ii) M'' having at most one input symbol per rule."
      ]
    },
    {
      "heading": "7. Forward and backward application",
      "text": [
        "We might want to apply a transformation not just to a single tree, but rather to a set of trees, which are, in some cases, already weighted.",
        "In general, the set of trees is given by a TSG G and we expect the result to be represented by a TSG as well.",
        "Forward and backward application amount to computing the image and pre-image of G under the transformation, respectively.",
        "Since STSG are symmetric, we need to solve only one of the problems if the transformation is given by an STSG.",
        "The other problem can then be solved by inverting the STSG (exchanging input and output) and using the method for the solved problem.",
        "We chose to address forward application here.",
        "Forward application can be reduced to the problem of computing the co-domain (or range) with the help of a product construction for STSG, which is similar to the one presented in Definition 5.",
        "The co-domain codm of the tranformation computed by an STSG M assigns to each t G Ts the weight",
        "codM(t) = ^ M(t,u) .",
        "This sum might not be well-defined.",
        "However, if u G N for all productions n : t A u of the STSG, then the sum is well-defined and the output-side TSG (i.e., for every production n : t A u in the STSG there is a production n A u in the TSG) computes the co-domain.",
        "The restriction \"u G N\" guarantees that the output side is a TSG.",
        "Overall, domain, co-domain, and forward and backward applications (using the product construction) can be computed given such minor new requirements.",
        "Also for transformations computed by MBOTs we can reduce the problem of forward application to the problem of computing the co-domain with the help of the product construction of Definition 5.",
        "However, the co-domain of an MBOT is not necessarily representable by a TSG, which is not due to well-definedness problems but rather the finite-copying property (Engelfriet et al., 1980) of MBOTs.",
        "This property yields that the co-domain might not be a regular tree language (or context-free string language).",
        "Consequently, we cannot compute forward or backward applications for arbitrary MBOT.",
        "However, if the MBOT is equivalent to an STSG (for example, because it was constructed by the method presented before Theorem 3), then forward and backward application can be computed essentially as for STSG.",
        "This can be understood as a warning.",
        "MBOT can efficiently be used (with computational benefits) as an alternative representation for transformations computed by STSG (or compositions of STSG).",
        "However, MBOT can also compute transformations, of which the domain or range cannot be represented by a TSG.",
        "Thus, if we train MBOT directly and utilize their full expressive power, then we might not be able to perform forward and backward application.",
        "In the unweighted case, backward application can always be computed for MBOT.",
        "Moreover, it can be decided using (Esik, 1984) whether all forward applications can be represented by TSGs.",
        "However, for a given specific TSG, it cannot be decided whether the forward application is representable by a TSG, which was proved by Fulop (1994).",
        "A subclass of transformations computable by MBOT (that still contains all transformations computable by STSG), which allows all forward and backward applications, has been identified by Raoult (1993).",
        "Conclusion and acknowledgement",
        "We compared STSGs and MBOTs on several standard algorithms (binarization, regular restriction, composition, and application).",
        "We prove that MBOTs offer computational benefits on all mentioned algorithms as long as the original transformation is computable by an STSG.",
        "The author was financially supported by the Min-isterio de Educacion y Ciencia (MEC) grants JDCI2007-760 and MTM-2007-63422."
      ]
    }
  ]
}
