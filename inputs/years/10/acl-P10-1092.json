{
  "info": {
    "authors": [
      "Jeffrey Heinz"
    ],
    "book": "ACL",
    "id": "acl-P10-1092",
    "title": "String Extension Learning",
    "url": "https://aclweb.org/anthology/P10-1092",
    "year": 2010
  },
  "references": [],
  "sections": [
    {
      "text": [
        "This paper provides a unified, learning-theoretic analysis of several learnable classes of languages discussed previously in the literature.",
        "The analysis shows that for these classes an incremental, globally consistent, locally conservative, set-driven learner always exists.",
        "Additionally, the analysis provides a recipe for constructing new learnable classes.",
        "Potential applications include learnable models for aspects of natural language and cognition."
      ]
    },
    {
      "heading": "1. Introduction",
      "text": [
        "The problem of generalizing from examples to patterns is an important one in linguistics and computer science.",
        "This paper shows that many disparate language classes, many previously discussed in the literature, have a simple, natural and interesting (because non-enumerative) learner which exactly identifies the class in the limit from distribution-free, positive evidence in the sense of Gold (Gold, 1967).",
        "These learners are called String Extension Learners because each string in the language can be mapped (extended) to an element of the grammar, which in every case, is conceived as a finite set of elements.",
        "These learners have desirable properties: they are incremental, globally consistent, and locally conservative.",
        "Classes previously discussed in the literature which are string extension learnable include the Locally Testable (LT) languages, the Locally Testable Languages in the Strict Sense (Strictly Local, SL) (McNaughton and Papert, 1971; Rogers and Pullum, to appear), the Piecewise Testable (PT) languages (Simon, 1975), the Piecewise Testable languages in the Strict Sense (Strictly Piecewise, SP) (Rogers et al., 2009), the Strongly Testable languages (Beauquier and Pin, 1991), the Definite languages (Brzozowski, 1962), and the Finite languages, among others.",
        "To our knowledge, this is the first analysis which identifies the common structural elements of these language classes which allows them to be identifiable in the limit from positive data: each language class induces a natural partition over all logically possible strings and each language in the class is the union of finitely many blocks of this partition.",
        "One consequence of this analysis is a recipe for constructing new learnable classes.",
        "One notable case is the Strictly Piecewise (SP) languages, which was originally motivated for two reasons: the learnability properties discussed here and its ability to describe long-distance dependencies in natural language phonology (Heinz, 2007; Heinz, to appear).",
        "Later this class was discovered to have several independent characterizations and form the basis of another subregular hierarchy (Rogers et al., 2009).",
        "It is expected string extension learning will have applications in linguistic and cognitive models.",
        "As mentioned, the SP languages already provide a novel hypothesis of how long-distance dependencies in sound patterns are learned.",
        "Another example is the Strictly Local (SL) languages which are the categorical, symbolic version of n-gram models, which are widely used in natural language processing (Jurafsky and Martin, 2008).",
        "Since the SP languages also admit a probabilistic variant which describe an efficiently estimable class of distributions (Heinz and Rogers, 2010), it is plausible to expect the other classes will as well, though this is left for future research.",
        "String extension learners are also simple, making them accessible to linguists without a rigorous mathematical background.",
        "This paper is organized as follow.",
        "§2 goes over basic notation and definitions.",
        "§3 defines string extension grammars, languages, and language classes and proves some of their fundamental properties.",
        "§4 defines string extension learners and proves their behavior.",
        "§5 shows how important subregular classes are string extension language classes.",
        "§6 gives examples of nonregular and infinite language classes which are string extension learnable.",
        "§7 summarizes the results, and discusses lines of inquiry for future research."
      ]
    },
    {
      "heading": "2. Preliminaries",
      "text": [
        "This section establishes notation and recalls basic definitions for formal languages, the paradigm of identification in the limit from positive data (Gold, 1967).",
        "Familiarity with the basic concepts of sets, functions, and sequences is assumed.",
        "For some set A, P(A) denotes the set of all subsets of A and Pfin(A) denotes the set of all finite subsets of A.",
        "If f is a function such that f : A – B then let f°(a) = {f (a)}.",
        "Thus, f° : A – P(B) (note f° is not surjective).",
        "A set n of nonempty subsets of S is a partition of S iff the elements of n (called blocks) are pairwise disjoint and their union equals S.",
        "S denotes a fixed finite set of symbols, the alphabet.",
        "Let Sn, S^n, S*, S+ denote all strings formed over this alphabet of length n, of length less than or equal to n, of any finite length, and of any finite length strictly greater than zero, respectively.",
        "The term word is used interchangeably with string.",
        "The range of a string w is the set of symbols which are in w. The empty string is the unique string of length zero denoted A.",
        "Thus range(X) = 0.",
        "The length of a string u is denoted by |u|, e.g. |A| =0.",
        "A language L is some subset of S*.",
        "The reverse of a language Lr = {wr : w G L}.",
        "Gold (1967) establishes a learning paradigm known as identification in the limit from positive data.",
        "A text is an infinite sequence whose elements are drawn from S* U {#} where # represents a non-expression.",
        "The ith element of t is denoted t(i), and t[i] denotes the finite sequence t(0), t(1),... t(i).",
        "Following Jain et al.",
        "(1999), let SEQ denote the set of all possible finite sequences:",
        "The content of a text is defined below.",
        "A text t is a positive text for a language L iff content(t) = L. Thus there is only one text t for the empty language: for all i, t(i) = #.",
        "A learner is a function 0 which maps initial finite sequences of texts to grammars, i.e. 0 : SEQ – G. The elements of G (the grammars) generate languages in some well-defined way.",
        "A learner converges on a text t iffthere exists i G N and a grammar G such that for all j > i, 0(t[j ]) = G.",
        "For any grammar G, the language it generates is denoted L(G).",
        "A learner 0 identifies a language L in the limit iff for any positive text t for L, 0 converges on t to grammar G and L(G) = L. Finally, a learner 0 identifies a class of languages L in the limit iff for any L G L, 0 identifies L in the limit.",
        "Angluin (1980b) provides necessary and sufficient properties of language classes which are identifiable in the limit from positive data.",
        "A learner 0 of language class L is globally consistent iff for each i and for all texts t for some L G L, content(t[i}) ç L(0(t[i])).",
        "A learner 0 is locally conservative iff for each i and for all texts t for some L G L, whenever 0(t[i]) = 0(t[i – 1]), it is the case that t(i) G L(0([i – 1])).",
        "These terms are from Jain et al.",
        "(2007).",
        "Also, learners which do not depend on the order of the text are called set-driven (Jain et al., 1999, p. 99)."
      ]
    },
    {
      "heading": "3. Grammars and Languages",
      "text": [
        "Consider some set A.",
        "A string extension function is a total function f : S* – Pfin(A).",
        "It is not required that f be onto.",
        "Denote the class of functions which have this general form SEF.",
        "Each string extension function is naturally associated with some formal class of grammars and languages.",
        "These functions, grammars, and languages are called string extension functions, grammars, and languages, respectively.",
        "Definition 1 Let f G SEF.",
        "1.",
        "A grammar is a finite subset of A."
      ]
    },
    {
      "heading": "2.. The language ofgrammar G is",
      "text": []
    },
    {
      "heading": "3.. The class oflanguages obtained by all possible grammars is",
      "text": [
        "The subscript f is omitted when it is understood from context.",
        "A function f G SEF naturally induces a partition nf over S*.",
        "Strings u and v are equivalent (u f v)iff f (u) = f (v).",
        "Theorem 1 Every language L G Lf is a finite union of blocks of nf.",
        "Proof: Follows directly from the definition of – f and the finiteness of string extension grammars.",
        "□",
        "We return to this result in §6.",
        "Theorem 2 Lf is closed under intersection.",
        "Proof: We show LinL2 = L(GinG2).",
        "Consider any word w belonging to L1 and L2.",
        "Then f (w) is a subset of Gi and of G2.",
        "Thus f(w) ç Gin G2, and therefore w G L(Gi n G2).",
        "The other inclusion follows similarly.",
        "□",
        "String extension language classes are not in general closed under union or reversal (counterexamples to union closure are given in §5.1 and to reversal closure in §6.)",
        "It is useful to extend the domain of the function f from strings to languages.",
        "An element g of grammar G for language L = Lf (G) is useful iff g G f (L).",
        "An element is useless if it is not useful.",
        "A grammar with no useless elements is called canonical.",
        "Remark 1 Fix a function f G SEF.",
        "For every L G Lf, there is a canonical grammar, namely f(L).",
        "In other words L = L(f(L)).",
        "Lemma 1 Let L,L' G Lf.",
        "L ç L' iff f (L) ç Proof: (=>) Suppose L ç L' and consider any g G f(L).",
        "Since g is useful, there is a w G L such that g G f(w).",
        "But f(w) ç f(L') since w G L'.",
        "Suppose f (L) ç f (L') and consider any w G L. Then f (w) ç f (L) so by transitivity,",
        "The significance of this result is that as the grammar G monotonically increases, the language L(G) monotonically increases too.",
        "The following result can now be proved, used in the next section on learning.",
        "Theorem 3 For any finite Lo ç S*, L = L(f (L0)) is the smallest language in Lf containing Lo.",
        "Proof: Clearly L0 ç L. Suppose L' G Lf and L0 ç L'.",
        "It follows directly from Lemma 1 that L ç L' (since f (L) = f (Lo) ç f (L')).",
        "□"
      ]
    },
    {
      "heading": "4. String Extension Learning",
      "text": [
        "Learning string extension classes is simple.",
        "The initial hypothesis of the learner is the empty grammar.",
        "The learner's next hypothesis is obtained by applying function f to the current observation and taking the union of that set with the previous one.",
        "Definition 2 For all f G SEF and for all t G SEQ, define 0f as follows:",
        "By convention, the initial state of the grammar is given by 0(t[ – 1]) = 0.",
        "The learner 0f exemplifies string extension learning.",
        "Each individual string in the text reveals, by extension with f, aspects of the canonical grammar for L G Lf.",
        "Theorem 4 0f is globally consistent, locally conservative, and set-driven.",
        "Proof: Global consistness and local conservativeness follow immediately from Definition 2.",
        "For set-drivenness, witness (by Definition 2) it is the case that for any text t and any i G , 0(t[i]) =",
        "The key to the proof that 0f identifies Lf in the limit from positive data is the finiteness of G for all L(G) G L. The idea is that there is a point in the text in which every element of the grammar has been seen because (1) there are only finitely many useful elements of G, and (2) the learner is guaranteed to see a word in L which yields (via f) each element of G at some point (since the learner receives a positive text for L).",
        "Thus at this point the learner 0 is guaranteed to have converged to the target G as no additional words will add any more elements to the learner's grammar.",
        "Lemma 2 For all L G Lf, there is a finite sample S such that L is the smallest language in Lf containing S. S is called a characteristic sample ofL in Lf (S is also called a tell-tale).",
        "Proof: For L G Lf, construct the sample S as follows.",
        "For each g G f(L), choose some word w G L such that g G f (w).",
        "Since f (L) is finite (Remark 1), S is finite.",
        "Clearly f (S) = f (L) and thus L = L(f(S)).",
        "Therefore, by Theorem 3, L is the smallest language in Lf containing S. □ Theorem 5 Fix f G SEF.",
        "Then 0f identifies Lf in the limit.",
        "Proof: For any L G Lf, there is a characteristic finite sample S for L (Lemma 2).",
        "Thus for any text t for L, there is i such that S ç content (t[i]).",
        "Thus for any j > i, 0(t(j)) is the smallest language in Lf containing S by Theorem 3 and Lemma 2.",
        "An immediate corollary is the efficiency of 0f in the length of the sample, provided f is efficient in the length of the string (de la Higuera, 1997).",
        "Corollary 1 0f is efficient in the length of the sample iff f is efficiently computable in the length of a string.",
        "To summarize: string extension grammars are finite subsets of some set A.",
        "The class of languages they generate are determined by a function f which maps strings to finite subsets of A (chunks ofgrammars).",
        "Since the size ofthe canonical grammars is finite, a learner which develops a grammar on the basis of the observed words and the function f identifies this class exactly in the limit from positive data.",
        "It also follows that if f is efficient in the length of the string then 0f is efficient in the length of the sample and that 0f is globally consistent, locally conservative, and set-driven.",
        "It is striking that such a natural and general framework for generalization exists and that, as will be shown, a variety of language classes can be expressed given the choice of f."
      ]
    },
    {
      "heading": "5. Subregular examples",
      "text": [
        "This section shows how classes which make up the subregular hierarchies (McNaughton and Pa-pert, 1971) are string extension language classes.",
        "Readers are referred to Rogers and Pullum (2007) and Rogers et al.",
        "(2009) for an introduction to the subregular hierarchies, as well as their relevance to linguistics and cognition.",
        "The k-factors of a word are the contiguous subsequences of length k in w. Consider the following string extension function.",
        "Definition 3 For some k G N, let",
        "such that w = uxv} when k < |w| and { w } otherwise",
        "Following the earlier definitions, for some k, a grammar G is a subset of S-k and a word w belongs to the language of G iff fack(w) ç G.",
        "L(G) G Lfac2.",
        "Languages in Lfack make distinctions based on which k-factors are permitted or prohibited.",
        "Since f ack G SEF, it follows immediately from the results in §§3-4 that the k-factor languages are closed under intersection, and each has a characteristic sample.",
        "For example, a characteristic sample for the 2-factor language in Example 1 is {A, a, a6,6a, aa}; i.e. the canonical grammar itself.",
        "It follows from Theorem 5 that the class of k-factor languages is identifiable in the limit by 0f ack.",
        "The learner 0fac2 with a text from the language in Example 1 is illustrated in Table 1.",
        "The class Lfack is not closed under union.",
        "For example for k = 2, consider Li = L({A, a, 6, aa, 66, 6a}) and L2 = L({A, a, 6, aa, a6, 66}).",
        "Then Li U L2 excludes string a6a, but includes a6 and 6a, which is not possible for any L G Lfack.",
        "K-factors are used to define other language classes, such as the Strictly Local and Locally Testable languages (McNaughton and Pa-pert, 1971), discussed in §5.4 and §5.5.",
        "The Strictly k-Piecewise (SPk) languages (Rogers et al., 2009) can be defined with a function whose co-domain is P(S-k).",
        "However unlike the function f ack, the function SPk, does not require that the k-length subsequences be contiguous.",
        "Table 1 : The learner 0fac2 with a text from the language in Example 1.",
        "Boldtype indicates newly added elements to the grammar.",
        "A string u = ai ... ak is a subsequence of string w iff 3 vo, v1,... vk G S* such that w = vo a1v1... akvk.",
        "The empty string A is a subsequence of every string.",
        "When u is a subsequence of w we write u ç w.",
        "Definition 4 For some k G N,",
        "In other words, SPk (w) returns all subsequences, contiguous or not, in w up to length k. Thus, for some k, a grammar G is a subset ofS-k.",
        "Following Definition 1, a word w belongs to the language of G only if SP2(w) ç G. Example 2 Let S = {a, 6} and consider the grammar G = { A, a, 6, aa, a6, 6a}.",
        "Then L(G) = S*\\(S*6S*6S*).",
        "As seen from Example 2, SP languages encode long-distance dependencies.",
        "In Example 2, L prohibits a 6 from following another 6 in a word, no matter how distant.",
        "Table 2 illustrates 0sp2 learning the language in Example 2.",
        "Heinz (2007,2009a) shows that consonantal harmony patterns in natural language are describable by such SP2 languages and hypothesizes that humans learn them in the way suggested by 0SP2.",
        "Strictly 2-Piecewise languages have also been used in models of reading comprehension (Whitney, 2001; Grainger and Whitney, 2004; Whitney and Cornelissen, 2008) as well as text classification(Lodhi et al., 2002; Cancedda et al., 2003) (see also (Shawe-Taylor and Christianini, 2005, chap.",
        "11)).",
        "A language L is k-Piecewise Testable iff whenever strings u and v have the same subsequences of length at most k and u is in L, then v is in L as well (Simon, 1975; Simon, 1993; Lothaire, 2005).",
        "A language L is said to be Piecewise-Testable (PT) if it is k-Piecewise Testable for some k G .",
        "If k is fixed, the k-Piecewise Testable languages are identifiable in the limit from positive data (Garcia and Ruiz, 1996; Garcia and Ruiz, 2004).",
        "More recently, the Piecewise Testable languages has been shown to be linearly separable with a subsequence kernel (Kontorovich et al., 2008).",
        "The k-Piecewise Testable languages can also be described with the function SP^.",
        "Recall that f°(a) = {f (a)}.",
        "Thus functions SPk° define grammars as a finite list of sets of subsequences up to length k that may occur in words in the language.",
        "This reflects the fact that the k-Piecewise Testable languages are the boolean closure of the Strictly k-Piecewise languages.",
        "To define the Strictly k-Local languages, it is necessary to make a pointwise extension to the definitions in §3.",
        "(f1> .",
        ".",
        ".",
        ", fn).",
        "G1 G Pfin(A1), .",
        ".",
        ".",
        ", Gn G Pfin(An).",
        "2.",
        "If for any w G S*, each f,(w) ç G, for all 1 < i < n, then f (w) is a pointwise subset of G, written f (w) ç G."
      ]
    },
    {
      "heading": "3.. The language ofgrammar G is",
      "text": [
        "4.",
        "The class oflanguages obtained by all such possible grammars G is Lf.",
        "i",
        "m",
        "fac2(t(i))",
        "Grammar G",
        "L{G)",
        "-1",
        "0 1",
        "2",
        "aaaa",
        "aab",
        "a",
        "{aa} {aa, ab} {a}",
        "0",
        "{aa} {aa, ab} {a, aa, ab}",
        "0",
        "aaa*",
        "aaa* U aaa*b aa* U aa*b",
        "Table 2: The learner (psp2 with a text from the language in Example 2.",
        "Boldtype indicates newly added elements to the grammar.",
        "These definitions preserve the learning results of §4.",
        "Note that the characteristic sample of L G Lf will be the union of the characteristic samples of each fi and the language L f (G) is the intersection of Lf (Gi).",
        "Locally k-Testable Languages in the Strict Sense (Strictly k-Local) have been studied by several researchers (McNaughton and Papert, 1971; Garcia et al., 1990; Caron, 2000; Rogers and Pul-lum, to appear), among others.",
        "We follow the definitions from (McNaughton and Papert, 1971, p. 14), effectively encoded in the following functions.",
        "Definition 6 Fix k G N. Then the (left-edge) prefix of length k, the (right-edge) suffix of length k, and the interior k-factors of a word w are",
        "Lk(w) = {u G Sk : 3v G S* such that w = uv}",
        "Example 3 Suppose w = abcba.",
        "Then L2(w) = {ab}, R2(w) = {ba} and I2(w) = {bc, cb}.",
        "Example 4 Suppose |w| = k. Then Lk(w) =",
        "Rk(w) = {w} and Ik(w) = 0.",
        "Example 5 Suppose |w| is less than k. Then",
        "Lk(w) = Rk(w) = 0 and Ik(w) = {w}.",
        "A language L is k-Strictly Local (k-SL) iff for all w G L, there exist sets L, R, and I such that w G L iff Lk(w) Ç L, Rk(w) Ç R, and Ik (w) Ç I. McNaughton and Papert note that if w is of length less than k than L may be perfectly arbitrary about w.",
        "This can now be expressed as the string extension function:",
        "Thus for some k, a grammar G is triple formed by taking subsets of Sk, Sk, and S-k, respectively.",
        "A word w belongs to the language of G only if LRIk(w) Ç G. Clearly, LLRik = k-SL, and henceforth we refer to this class as k-SL.",
        "Since, for fixed k, LRIk G SEF, all of the learning results in §4 apply.",
        "The Locally k-testable languages (k-LT) are originally defined in McNaughton and Papert (1971) and are the subject of several studies (Brzozowski and Simon, 1973; McNaughton, 1974; Kim et al., 1991; Caron, 2000; Garcia and Ruiz, 2004; Rogers and Pullum, to appear).",
        "A language L is k-testable iff for all wi, w2 G S* such that |wi| > k and |w21 > k, and LRIk(wi) = LRIk(w2) then either both wi, w2 belong to L or neither do.",
        "Clearly, every language in k-SL belongs to k-LT.",
        "However k-LT properly include k-SL because a k-testable language only distinguishes words whenever LRIk(wi) = LRIk(w2).",
        "It is known that the k-LT languages are the boolean closure of the k-SL (McNaughton and Papert, 1971).",
        "The function LRI£ exactly expresses k-testable languages.",
        "Informally, each word w is mapped to a set containing a single element, this element is the triple LRIk(w).",
        "Thus a grammar G is a subset of the triples used to define k-SL.",
        "Clearly, LLRIo = k-LT since it is the boolean closure of LlrIu .",
        "Henceforth we refer to LLRIo as the k-Locally Testable (k-LT) languages.",
        "Here we introduce generalized subsequence functions, a general class of functions to which the SPk and fack functions belong.",
        "Like those functions, generalized subsequence functions map words to a set of subsequences found within the words.",
        "These functions are instantiated by a vector whose number of coordinates determine how many times a subsequence may be discontiguous and whose coordinate values determine the length of each contiguous part of the subsequence.",
        "i",
        "m",
        "sp2(m)",
        "Grammar G",
        "Language of G",
        "-1",
        "0 1",
        "2 3",
        "aaaa aab baa aba",
        "{A, a, aa} {A, a, b, aa, ab} {A, a, b, aa, ba} {A, a, b, ab, ba}",
        "0",
        "{A, a, aa} {A, a, aa, b, ab} {A, a, b, aa, ab, ba} {A, a, b, aa, ab, ba}",
        "0",
        "a*",
        "a*Ua*b",
        "Definition 7 For some n G N, let v = (vo, vi;..., vn), where each vi G N. Let k be the length of the subsequences; i.e. k = n vi.",
        "when k < |w|, and{w} otherwise",
        "The following examples help make the generalized subsequence functions clear.",
        "Example 6 Let v = (2).",
        "Then f^2) = fac2.",
        "Generally, f(k) = fack.",
        "fv = SPk.",
        "Example 8 Let v = (3, 2,1) and a, b, c, d, e, f G S. Then Lf<321) includes languages which prohibit strings w which contain subsequences abcdef where abc and de must be contiguous in w and abcdef is a subsequence of w.",
        "Generalized subsequence languages make different kinds of distinctions to be made than PT and LT languages.",
        "For example, the language in Example 8 is neither k-LT nor k'-PT for any values k, k'.",
        "Generalized subsequence languages properly include the k-SP and k-SL classes (Examples 6 and 7), and the boolean closure of the subsequence languages (f|) properly includes the LT and PT classes.",
        "Since for any v, fv and fV are string extension functions the learning results in §4 apply.",
        "Note that fv(w) is computable in time O(|w|k) where k is the length of the maximal subsequences determined by v."
      ]
    },
    {
      "heading": "6. Other examples",
      "text": [
        "This section provides examples of infinite and nonregular language classes that are string extension learnable.",
        "Recall from Theorem 1 that string extension languages are finite unions of blocks of the partition of S* induced by f. Assuming the blocks of this partition can be enumerated, the range of f can be construed as Pfin (N).",
        "grammar G Language of G",
        "In the examples considered so far, the enumeration of the blocks is essentially encoded in particular substrings (or tuples ofsubstrings).",
        "However, much less clever enumerations are available.",
        "Example 9 Let A = {0,1} and consider the following function:",
        "The function f belongs to SEF because it is maps strings to a finite co-domain.",
        "Lf has four languages shown in Table 3.",
        "The language class in Example 9 is not regular because it includes the well-known context-free language anbn.",
        "This collection of languages is also not closed under reversal.",
        "There are also infinite language classes that are string extension language classes.",
        "Arguably the simplest example is the class of finite languages, denoted Lfin.",
        "Example 10 Consider the function id which maps words in S* to their singleton sets, i.e. id(w) = {w}.",
        "A grammar G is then a finite subset of S*, and so L(G) is just a finite set of words in S*; in fact, L(G) = G. It follows that",
        "Lid – Lfin.",
        "It can be easily seen that the function id induces the trivial partition over S*, and languages are just finite unions of these blocks.",
        "The learner 0idmakes no generalizations at all, and only remembers what it has observed.",
        "There are other more interesting infinite string extension classes.",
        "Here is one relating to the Parikh map (Parikh, 1966).",
        "For all a G S, let fa(w) be the set containing n where n is the number of times the letter a occurs in the string w. For example fa(babab) = {2}.",
        "Thus fa is a total function mapping strings to singleton sets of natural numbers, so it is a string extension function.",
        "This function induces an infinite partition of S*, where the words in any particular block have the same number of letters a.",
        "It is convenient to enumerate the blocks according to how many occurrences of the letter a may occur in words within the block.",
        "Hence, B0 is the block whose words have no occurrences of a, Bi is the block whose words have one occurrence of a, and so on.",
        "In this case, a grammar G is a finite subset of N, e.g. {2, 3, 4}.",
        "L(G) is simply those words which have either 2, 3, or 4, occurrences of the letter a.",
        "Thus Lf is an infinite class, which contains languages of infinite size, which is easily identified in the limit from positive data by 4>fa.",
        "This section gave examples of nonregular and nonfinite string extension classes by pursuing the implications of Theorem 1, which established that f G SEF partition S* into blocks of which languages are finite unions thereof.",
        "The string extension function f provides an effective way of encoding all languages L in Lf because f (L) encodes a finite set, the grammar."
      ]
    },
    {
      "heading": "7. Conclusion and open questions",
      "text": [
        "One contribution of this paper is a unified way of thinking about many formal language classes, all of which have been shown to be identifiable in the limit from positive data by a string extension learner.",
        "Another contribution is a recipe for defining classes of languages identifiable in the limit from positive data by this kind of learner.",
        "As shown, these learners have many desirable properties.",
        "In particular, they are globally consistent, locally conservative, and set-driven.",
        "Additionally, the learner is guaranteed to be efficient in the size of the sample, provided the function f itself is efficient in the length of the string.",
        "Several additional questions of interest remain open for theoretical linguistics, theoretical computer science, and computational linguistics.",
        "For theoretical linguistics, it appears that the string extension function f = (LRI3, P2), which defines a class of languages which obey restrictions on both contiguous subsequences of length 3 and on discontiguous subsequences of length 2, provides a good first approximation to the segmental phonotactic patterns in natural languages (Heinz, 2007).",
        "The string extension learner for this class is essentially two learners: 0lri3 and 0P2, operating simultaneously.",
        "The learners make predictions about generalizations, which can be tested in artificial language learning experiments on adults and infants (Rogers and Pullum, to appear; Chambers et al., 2002; Onishi et al., 2003; Cristia and Seidl, 2008).",
        "For theoretical computer science, it remains an open question what property holds of functions f in SEF to ensure that Lf is regular, context-free, or context-sensitive.",
        "For known subregular classes, there are constructions that provide deterministic automata that suggest the relevant properties.",
        "(See, for example, Garcia et al.",
        "(1990) and",
        "Also, Timo Kotzing and Samuel Moelius (p.c.)",
        "suggest that the results here may be generalized along the following lines.",
        "Instead of defining the function f as a map from strings to finite subsets, let f be a function from strings to elements of a lattice.",
        "A grammar G is an element of the lattice and the language of the G are all strings w such that f maps w to a grammar less than G. Learners 0f are defined as the least upper bound of its current hypothesis and the grammar to which f maps the current word.",
        "Kasprzik and Kotzing (2010) develop this idea and demonstrate additional properties of string extension classes and learning, and show that the pattern languages (Angluin, 1980a) form a string extension class.",
        "Also, hyperplane learning (Clark et al., 2006a; Clark et al., 2006b) and function-distinguishable learning (Fernau, 2003) similarly associate language classes with functions.",
        "How those analyses relate to the current one remains open.",
        "Finally, since the stochastic counterpart of k-SL class is the n-gram model, it is plausible that probabilistic string extension language classes can form the basis of new natural language processing techniques.",
        "(Heinz and Rogers, 2010) show how to efficiently estimate k-SP distributions, and it is conjectured that the other string extension language classes can be recast as classes of distributions, which can also be successfully estimated from positive evidence."
      ]
    },
    {
      "heading": "Acknowledgments",
      "text": [
        "This work was supported by a University of Delaware Research Fund grant during the 20082009 academic year.",
        "I would like to thank John Case, Alexander Clark, Timo Kotzing, Samuel Moelius, James Rogers, and Edward Stabler for valuable discussion.",
        "I would also like to thank Timo Kotzing for careful reading of an earlier draft and for catching some errors.",
        "Remaining errors are my responsibility."
      ]
    }
  ]
}
