{
  "info": {
    "authors": [
      "Carlos Gómez-Rodríguez",
      "Joakim Nivre"
    ],
    "book": "ACL",
    "id": "acl-P10-1151",
    "title": "A Transition-Based Parser for 2-Planar Dependency Structures",
    "url": "https://aclweb.org/anthology/P10-1151",
    "year": 2010
  },
  "references": [
    "acl-C08-1095",
    "acl-C96-1058",
    "acl-E06-1010",
    "acl-E09-1034",
    "acl-E09-1055",
    "acl-H05-1066",
    "acl-J08-4003",
    "acl-P05-1012",
    "acl-P05-1013",
    "acl-P06-2066",
    "acl-P07-1021",
    "acl-P07-1077",
    "acl-P08-1110",
    "acl-P09-1039",
    "acl-P97-1043",
    "acl-W04-2407",
    "acl-W06-2920",
    "acl-W06-2933",
    "acl-W07-2216",
    "acl-W07-2218"
  ],
  "sections": [
    {
      "text": [
        "Finding a class of structures that is rich enough for adequate linguistic representation yet restricted enough for efficient computational processing is an important problem for dependency parsing.",
        "In this paper, we present a transition system for 2-planar dependency trees - trees that can be decomposed into at most two planar graphs - and show that it can be used to implement a classifier-based parser that runs in linear time and outperforms a state-of-the-art transition-based parser on four data sets from the CoNLL-X shared task.",
        "In addition, we present an efficient method for determining whether an arbitrary tree is 2-planar and show that 99% or more of the trees in existing treebanks are 2-planar."
      ]
    },
    {
      "heading": "1. Introduction",
      "text": [
        "Dependency-based syntactic parsing has become a widely used technique in natural language processing, and many different parsing models have been proposed in recent years (Yamada and Matsumoto, 2003; Nivre et al., 2004; McDonald et al., 2005a; Titov and Henderson, 2007; Martins et al., 2009).",
        "One of the unresolved issues in this area is the proper treatment of non-projective dependency trees, which seem to be required for an adequate representation of predicate-argument structure, but which undermine the efficiency of dependency parsing (Neuhaus and Broker, 1997; Buch-Kromann, 2006; McDonald and Satta, 2007).",
        "Caught between the Scylla of linguistically inadequate projective trees and the Charybdis of computationally intractable non-projective trees, some researchers have sought a middle ground by exploring classes of mildly non-projective dependency structures that strike a better balance between expressivity and complexity (Nivre, 2006;",
        "Kuhlmann and Nivre, 2006; Kuhlmann and Mohl, 2007; Havelka, 2007).",
        "Although these proposals seem to have a very good fit with linguistic data, in the sense that they often cover 99% or more of the structures found in existing treebanks, the development of efficient parsing algorithms for these classes has met with more limited success.",
        "For example, while both Kuhlmann and Satta (2009) and Gomez-Rodriguez et al. (2009) have shown how well-nested dependency trees with bounded gap degree can be parsed in polynomial time, the best time complexity for lexicalized parsing of this class remains a prohibitive O(n), which makes the practical usefulness questionable.",
        "In this paper, we explore another characterization of mildly non-projective dependency trees based on the notion of multiplanarity.",
        "This was originally proposed by Yli-Jyra (2003) but has so far played a marginal role in the dependency parsing literature, because no algorithm was known for determining whether an arbitrary tree was m-planar, and no parsing algorithm existed for any constant value of m. The contribution of this paper is twofold.",
        "First, we present a procedure for determining the minimal number m such that a dependency tree is m-planar and use it to show that the overwhelming majority of sentences in dependency treebanks have a tree that is at most 2-planar.",
        "Secondly, we present a transition-based parsing algorithm for 2-planar dependency trees, developed in two steps.",
        "We begin by showing how the stack-based algorithm of Nivre (2003) can be generalized from projective to planar structures.",
        "We then extend the system by adding a second stack and show that the resulting system captures exactly the set of 2-planar structures.",
        "Although the contributions of this paper are mainly theoretical, we also present an empirical evaluation of the 2-planar parser, showing that it outperforms the projective parser on four data sets from the CoNLL-X shared task (Buchholz and Marsi, 2006)."
      ]
    },
    {
      "heading": "2. Preliminaries",
      "text": [
        "Let w = wi.. .",
        "wn be an input string.",
        "An interval (with endpoints i and j) of the string w is a set of the form [i, j] = {wk | i < k < j}.",
        "Definition 1.",
        "A dependency graph for w is a directed graph G = (Vw, E), where Vw = [1, n] and E ç Vw x Vw.",
        "We call an edge (wj, wj ) in a dependency graph G a dependency link from wj to wj.",
        "We say that wi is the parent (or head) of wj and, conversely, that wj is a syntactic child (or dependent) of wi.",
        "For convenience, we write wi – wj G E if the link (wi, wj) exists; wi <-> wj G E if there is a link from wi to wj or from wj to wi; wi – * wj G E if there is a (possibly empty) directed path from wi to wj ; and wi ^* wj G E if there is a (possibly empty) path between wi and wj in the undirected graph underlying G (omitting reference to E when clear from the context).",
        "The projection of a node wi, denoted [wiJ, is the set of reflexive-transitive dependents of wi: [wiJ = {wj G V | wi – * wj}.",
        "Most dependency representations do not allow arbitrary dependency graphs but typically require graphs to be acyclic and have at most one head per node.",
        "Such a graph is called a dependency forest.",
        "Definition 2.",
        "A dependency graph G for a string wi... wn is said to be a forest iff it satisfies:",
        "1.",
        "Acyclicity: If wi – * wj, then not wj – wi.",
        "2.",
        "Single-head: If wj – wi, then not wk – wi(for every k = j ).",
        "Nodes in a forest that do not have a head are called roots.",
        "Some frameworks require that dependency forests have a unique root (i.e., are connected).",
        "Such a forest is called a dependency tree.",
        "For reasons of computational efficiency, many dependency parsers are restricted to work with projective dependency structures, that is, forests in which the projection of each node corresponds to a contiguous substring of the input:",
        "Definition 3.",
        "A dependency forest G for a string wi... wn is projective iff [wiJ is an interval for every word wi G [1,n].",
        "Projective dependency trees correspond to the set of structures that can be induced from lexicalised context-free derivations (Kuhlmann, 2007; Gaif-man, 1965).",
        "Like context-free grammars, projective dependency trees are not sufficient to represent all the linguistic phenomena observed in natural languages, but they have the advantage ofbeing efficiently parsable: their parsing problem can be solved in cubic time with chart parsing techniques (Eisner, 1996; Gomez-Rodriguez et al., 2008), while in the case of general non-projective dependency forests, it is only tractable under strong independence assumptions (McDonald et al., 2005b;",
        "McDonald and Satta, 2007).",
        "The concept of planarity (Sleator and Temperley, 1993) is closely related to projectivity and can be informally defined as the property of a dependency forest whose links can be drawn above the words without crossing.",
        "To define planarity more formally, we first define crossing links as follows: let (wi, wk) and (wj, wj) be dependency links in a dependency graph G. Without loss of generality, we assume that min (i, k) < min (j, l).",
        "Then, the links are said to be crossing if min(i,k) < min (j, l) < max (i,k) < max (j, l).",
        "Definition 4.",
        "A dependency graph is planar iff it does not contain a pair ofcrossing links.",
        "The concept of planarity on its own does not seem to be very relevant as an extension of projectiv-ity for practical dependency parsing.",
        "According to the results by Kuhlmann and Nivre (2006), most non-projective structures in dependency treebanks are also non-planar, so being able to parse planar structures will only give us a modest improvement in coverage with respect to a projective parser.",
        "However, our interest in planarity is motivated by the fact that it can be generalised to multipla-narity (Yli-Jyra, 2003):",
        "Figure 1: A 2-planar dependency structure with two different ways of distributing its links into two planes (represented by solid and dotted lines).",
        "Definition 5.",
        "A dependency graph G = (V, E) is m-planar iff there exist planar dependency graphs G\\ = (V, E\\),..., Gm = (V, Em) (called planes) such that E = E\\ U • • • U Em.",
        "Intuitively, we can associate planes with colours and say that a dependency graph G is m-planar if it is possible to assign one of m colours to each of its links in such a way that links with the same colour do not cross.",
        "Note that there may be multiple ways of dividing an m-planar graph into planes, as shown in the example of Figure 1."
      ]
    },
    {
      "heading": "3. Determining Multiplanarity",
      "text": [
        "Several constraints on non-projective dependency structures have been proposed recently that seek a good balance between parsing efficiency and coverage of non-projective phenomena present in natural language treebanks.",
        "For example, Kuhlmann and Nivre (2006) and Havelka (2007) have shown that the vast majority of structures present in existing treebanks are well-nested and have a small gap degree (Bodirsky et al., 2005), leading to an interest in parsers for these kinds of structures (Gomez-Rodnguez et al., 2009).",
        "No similar analysis has been performed for m-planar structures, although Yli-Jyra (2003) provides evidence that all except two structures in the Danish dependency treebank are at most 3-planar.",
        "However, his analysis is based on constraints that restrict the possible ways of assigning planes to dependency links, and he is not guaranteed to find the minimal number m for which a given structure is m-planar.",
        "In this section, we provide a procedure for finding the minimal number m such that a dependency graph is m-planar and use it to show that the vast majority of sentences in dependency treebanks are at most 2-planar, with a coverage comparable to that of well-nestedness.",
        "The idea is to reduce the problem of determining whether a dependency graph G = (V,E) is m-planar, for a given value of m, to a standard graph colouring problem.",
        "Consider first the following undirected graph:",
        "C = {{ei, ej} | e%, ej are crossing links in G}",
        "This graph, which we call the crossings graph of G, has one node corresponding to each link in the dependency graph G, with an undirected link between two nodes if they correspond to crossing links in G. Figure 2 shows the crossings graph of the 2-planar structure in Figure 1.",
        "As noted in Section 2.4, a dependency graph G is m-planar if each of its links can be assigned one of m colours in such a way that links with the same colours do not cross.",
        "In terms of the crossings graph, this means that G is m-planar if each of the nodes of U(G) can be assigned one of m colours such that no two neighbours have the same colour.",
        "This amounts to solving the well-known k-colouring problem for U(G), where k = m.",
        "For k = 1 the problem is trivial: a graph is 1-colourable only if it has no edges.",
        "For k = 2, the problem can be solved in time linear in the size of the graph by simple breadth-first search.",
        "Given a graph U = (V, E), we pick an arbitrary node v and give it one of two colours.",
        "This forces us to give the other colour to all its neighbours, the first colour to the neighbours' neighbours, and so on.",
        "This process continues until we have processed all the nodes in the connected component of v. If this has resulted in assigning two different colours to the same node, the graph is not 2-colourable.",
        "Otherwise, we have obtained a 2-colouring of the connected component of U that contains v. If there are still unprocessed nodes, we repeat the process by arbitrarily selecting one of them, continue with the rest of the connected components, and in this way obtain a 2-colouring of the whole graph if it",
        "Table 1: Proportion of dependency trees classified by projectivity, planarity, m-planarity and ill-nestedness in treebanks for Arabic (Hajic et al., 2004), Czech (Hajic et al., 2006), Danish (Kromann, 2003), Dutch (van der Beek et al., 2002), German (Brants et al., 2002), Portuguese (Afonso et al., 2002), Swedish (Nilsson et al., 2005) and Turkish (Oflazer et al., 2003; Atalay et al., 2003).",
        "exists.",
        "Since this process can be completed by visiting each node and edge of the graph U once, its complexity is O(V + E).",
        "The crossings graph of a dependency graph with n nodes can trivially be built in time O(n) by checking each pair of dependency links to determine if they cross, and cannot contain more than n edges, which means that we can check if the dependency graph for a sentence of length n is 2-planar in O(n) time.",
        "For k > 2, the k-colouring problem is known to be NP-complete (Karp, 1972).",
        "However, we have found this not to be a problem when measuring multiplanarity in natural language treebanks, since the effective problem size can be reduced by noting that each connected component of the crossings graph can be treated separately, and that nodes that are not part of a cycle need not be considered.",
        "Given that non-projective sentences in natural language tend to have a small proportion of non-projective links (Nivre and Nilsson, 2005), the connected components of their crossings graphs are very small, and k-colourings for them can quickly be found by brute-force search.",
        "By applying these techniques to dependency treebanks of several languages, we obtain the data shown in Table 1.",
        "As we can see, the coverage provided by the 2-planarity constraint is comparable to that of well-nestedness.",
        "In most of the treebanks, well over 99% of the sentences are 2-planar, and 3-planarity has almost total coverage.",
        "As we will see below, the class of 2-planar dependency structures not only has good coverage oflin-guistic phenomena in existing treebanks but is also efficiently parsable with transition-based parsing methods, making it a practically interesting subclass of non-projective dependency structures."
      ]
    },
    {
      "heading": "4. Parsing 1-Planar Structures",
      "text": [
        "In this section, we present a deterministic lineartime parser for planar dependency structures.",
        "The parser is a variant of Nivre's arc-eager projective parser (Nivre, 2003), modified so that it can also handle graphs that are planar but not projective.",
        "As seen in Table 1, this only gives a modest improvement in coverage compared to projective parsing, so the main interest of this algorithm lies in the fact that it can be generalised to deal with 2-planar structures, as shown in the next section.",
        "In the transition-based framework of Nivre (2008), a deterministic dependency parser is defined by a non-deterministic transition system, specifying a set of elementary operations that can be executed during the parsing process, and an oracle that deterministically selects a single transition at each choice point of the parsing process.",
        "Definition 6.",
        "A transition system for dependency parsing is a quadruple S = (C, T, cs, Ct) where"
      ]
    },
    {
      "heading": "1.. C is a set of possible parser configurations,",
      "text": [
        "2.",
        "T is a set of transitions, each of which is a partial function t : C – C,",
        "3. cs is a function that maps each input sentence w to an initial configuration cs(w) G C, 4.",
        "Ct ç C is a set of terminal configurations.",
        "Definition 7.",
        "An oracle for a transition system 5 = (C, T, cs, Ct) is a function o : C – T.",
        "An input sentence w can be parsed using a transition system S = (C, T, cs, Ct) and an oracle o by starting in the initial configuration cs (w), calling the oracle function on the current configuration c, and updating the configuration by applying the transition o(c) returned by the oracle.",
        "This process is repeated until a terminal configuration is",
        "Language",
        "Structures",
        "Non-Projective",
        "Not Planar",
        "Not 2-Planar",
        "Not 3-Pl.",
        "Not 4-pl.",
        "Ill-nested",
        "Arabic",
        "2995",
        "205 ( 6.84%)",
        "158 ( 5.28%)",
        "0 (0.00%)",
        "0 (0.00%)",
        "0 (0.00%)",
        "1 (0.03%)",
        "Czech",
        "87889",
        "20353 (23.16%)",
        "16660 (18.96%)",
        "82 (0.09%)",
        "0 (0.00%)",
        "0 (0.00%)",
        "96 (0.11%)",
        "Danish",
        "5512",
        "853 (15.48%)",
        "827 (15.00%)",
        "1 (0.02%)",
        "1 (0.02%)",
        "0 (0.00%)",
        "6 (0.11%)",
        "Dutch",
        "13349",
        "4865 (36.44%)",
        "4115 (30.83%)",
        "162(1.21%)",
        "1 (0.01%)",
        "0 (0.00%)",
        "15 (0.11%)",
        "German",
        "39573",
        "10927 (27.61%)",
        "10908 (27.56%)",
        "671 (1.70%)",
        "0 (0.00%)",
        "0 (0.00%)",
        "419 (1.06%)",
        "Portuguese",
        "9071",
        "1718 (18.94%)",
        "1713 (18.88%)",
        "8 (0.09%)",
        "0 (0.00%)",
        "0 (0.00%)",
        "7 (0.08%)",
        "Swedish",
        "6159",
        "293 ( 4.76%)",
        "280 ( 4.55%)",
        "5 (0.08%)",
        "0 (0.00%)",
        "0 (0.00%)",
        "14 (0.23%)",
        "Turkish",
        "5510",
        "657 (11.92%)",
        "657 (11.92%)",
        "10 (0.18%)",
        "0 (0.00%)",
        "0 (0.00%)",
        "20 (0.36%)",
        "only if flk\\(vjk ,vji) e A (single-head) and not wi Wj e A (acyclicity).",
        "only if flk\\(vjk ,Wj ) e A (single-head) and not Wi Wj e A (acyclicity).",
        "reached, and the dependency analysis of the sentence is defined by the terminal configuration.",
        "Each sequence of configurations that the parser can traverse from an initial configuration to a terminal configuration for some input w is called a transition sequence.",
        "If we associate each configuration c of a transition system S = (C, T, cs, Ct) with a dependency graph g(c), we can say that S is sound for a class of dependency graphs G if, for every sentence w and transition sequence (cs(w),c1,... ,cf ) of S, g(cf ) is in G, and that S is complete for G if, for every sentence w and dependency graph G G G for w, there is a transition sequence (cs(w),c1,... ,cf) suchthatg(cf) = G. A transition system that is sound and complete for G is said to be correct for G.",
        "Note that, apart from a correct transition system, a practical parser needs a good oracle to achieve the desired results, since a transition system only specifies how to reach all the possible dependency graphs that could be associated to a sentence, but not how to select the correct one.",
        "Oracles for practical parsers can be obtained by training classifiers on treebank data (Nivre et al., 2004).",
        "A correct transition system for the class of planar dependency forests can be obtained as a variant of the arc-eager projective system by Nivre (2003).",
        "As in that system, the set of configurations of the planar transition system is the set of all triples c = (S,B,A) such that S and B are disjoint lists of words from Vw (for some input w), and A is a set of dependency links over Vw.",
        "The list B, called the buffer, is initialised to the input string and is used to hold the words that are still to be read from the input.",
        "The list S, called the stack, is initially empty and holds words that have dependency links pending to be created.",
        "The system is shown in Figure 3, where we use the notation S wi for a stack with top wi and tail S, and we invert the notation for the buffer for clarity (i.e., wi|B is a buffer with top wi and tail B).",
        "The system reads the input from left to right and creates links in a left-to-right order by executing its four transitions:",
        "1.",
        "Shift: pops the first (leftmost) word in the buffer, and pushes it to the stack.",
        "2.",
        "Left-arc: adds a link from the first word in the buffer to the top of the stack.",
        "3.",
        "Right-arc: adds a link from the top of the stack to the first word in the buffer.",
        "4.",
        "Reduce: pops the top word from the stack, implying that we have finished building links to or from it.",
        "Note that the planar parser's transitions are more fine-grained than those of the arc-eager projective parser by Nivre (2003), which pops the stack as part of its Left-Arc transition and shifts a word as part of its Right-Arc transition.",
        "Forcing these actions after creating dependency links rules out structures whose root is covered by a dependency link, which are planar but not projective.",
        "In order to support these structures, we therefore simplify the Arc transitions (Left-arc and Right-arc) so that they only create an arc.",
        "For the same reason, we remove the constraint in Nivre's parser by which words without a head cannot be reduced.",
        "This has the side effect of making the parser able to output cyclic graphs.",
        "Since we are interested in planar dependency forests, which do not contain cycles, we only apply Arc transitions after checking that there is no undirected path between the nodes to be linked.",
        "This check can be done without affecting the linear-time complexity of the parser by storing the weakly connected component of each node in g(c).",
        "The fine-grained transitions used by this parser have also been used by Sagae and Tsujii (2008) to parse DAGs.",
        "However, the latter parser differs from ours in the constraints, since it does not allow the reduction of words without a head (disallowing forests with covered roots) and does not enforce the acyclicity constraint (which is guaranteed by post-processing the graphs to break cycles).",
        "For reasons of space, we can only give a sketch of the correctness proof.",
        "We wish to prove that the planar transition system is sound and complete for the set Fp of all planar dependency forests.",
        "To prove soundness, we have to show that, for every sentence w and transition sequence (cs(w),c1,..., cf ), the graph g(cf ) associated with cf is in Fp.",
        "We take the graph associated with a configuration c = (S,B,A) to be g(c) = (Vw,A).",
        "With this, we prove the stronger claim that g(c) G Fp for every configuration c that belongs to some transition sequence starting with cs(w).",
        "This amounts to showing that in every configuration c reachable from cs(w), g(c) meets the following three conditions that characterise a planar dependency forest: (1) g(c) does not contain nodes with more than one head; (2) g(c) is acyclic; and (3) g(c) contains no crossing links.",
        "(1) is trivially guaranteed by the single-head constraint; (2) follows from (1) and the acyclicity constraint; and (3) can be established by proving that there is no transition sequence that will invoke two Arc transitions on node pairs that would create crossing links.",
        "At the point when a link from wi to wj is created, we know that all the words strictly located between wi and wj are not in the stack or in the buffer, so no links can be created to or from them.",
        "To prove completeness, we show that every planar dependency forest G = (V,E) G Fpfor a sentence w can be produced by applying the oracle function that maps a configuration (S|w^ wj|B, A) to:",
        "4.",
        "Shift otherwise.",
        "We show completeness by setting the following invariants on transitions traversed by the application of the oracle:",
        "We can show that each branch of the oracle function keeps these invariants true.",
        "When we reach a terminal configuration (which always happens after a finite number of transitions, since every transition generating a configuration c = (S,B,A) decreases the value of the variant function |E| + |S| + 2|B| – |A|), it can be deduced from the invariant that A = E, which proves completeness.",
        "The worst-case complexity of a deterministic transition-based parser is given by an upper bound on transition sequence length (Nivre, 2008).",
        "For the planar system, like its projective counterpart, the length is clearly O(n) (where n is the number of input words), since there can be no more than n Shift transitions, n Reduce transitions, and n Arc transitions in a transition sequence."
      ]
    },
    {
      "heading": "5. Parsing 2-Planar Structures",
      "text": [
        "The planar parser introduced in the previous section can be extended to parse all 2-planar dependency structures by adding a second stack to the system and making Reduce and Arc transitions apply to only one of the stacks at a time.",
        "This means that the set of links created in the context of each individual stack will be planar, but pairs of links created in different stacks are allowed to cross.",
        "In this way, the parser will build a 2-planar dependency forest by using each of the stacks to construct one of its two planes.",
        "The 2-planar transition system, shown in Figure 4, has configurations of the form (So, S1, B, A), where we call S0 the active stack and S1 the inactive stack, and the following transitions:",
        "1.",
        "Shift: pops the first (leftmost) word in the buffer, and pushes it to both stacks.",
        "2.",
        "Left-arc: adds a link from the first word in the buffer to the top of the active stack.",
        "3.",
        "Right-arc: adds a link from the top of the active stack to the first word in the buffer.",
        "4.",
        "Reduce: pops the top word from the active stack, implying that we have added all links to or from it on the plane tied to that stack.",
        "5.",
        "Switch: makes the active stack inactive and vice versa, changing the plane the parser is working with.",
        "Initial configuration:",
        "Terminal configurations:",
        "Transitions: Shift Reduce Left-Arc {So|wi, Si, Wj|B, A) == {So|Wi, Si, Wj|B, A U {(Wj, Wi)}) only if ßk | (wk, e A (single-head) and not wi Wj e A (acyclicity).",
        "only if ßk\\(wk ,Wj ) e A (single-head) and not Wi ^* Wj e A (acyclicity).",
        "As in the planar case, we provide a brief sketch of the proof that the transition system in Figure 4 is correct for the set F2p of 2-planar dependency forests.",
        "Soundness follows from a reasoning analogous to the planar case, but applying the proof of planarity separately to each stack.",
        "in this way, we prove that the sets of dependency links created by linking to or from the top of each of the two stacks are always planar graphs, and thus their union (which is the dependency graph stored in A) is 2-planar.",
        "This, together with the single-head and acyclicity constraints, guarantees that the dependency graphs associated with reachable configurations are always 2-planar dependency forests.",
        "For completeness, we assume an extended form of the transition system where transitions take the form {S0, Si, B, A,p), where p is a flag taking values in {0,1} which equals 0 for initial configurations and gets flipped by each application of a SWITCH transition.",
        "Then we show that every 2-planar dependency forest G G F2p, with planes G0 = (V, E0) and Gi = (V, can be produced by this system by applying the oracle function that maps a configuration {S0|Wi, Si,Wj|B, A,p) to:",
        "1.",
        "Left-Arc if wj – wi e (ep \\ A), 2.",
        "Right-Arc if wi – wj e (Ep \\ A), 3.",
        "Reduce if ßx[x<i] [wx wj e (Ep \\ A) a 5.",
        "SHIFT otherwise.",
        "This can be shown by employing invariants analogous to the planar case, with the difference that the third invariant applies to each stack and its corresponding plane: if Sy is associated with the plane",
        "Vi[z>fc] [Wfc Wi G Ex]",
        "Since the presence of the flag p in configurations does not affect the set of dependency graphs generated by the system, the completeness of the system extended with the flag p implies that of the system in Figure 4.",
        "We can show that the complexity of the 2-planar system is O(n) by the same kind of reasoning as for the 1-planar system, with the added complication that we must constrain the system to prevent two adjacent SWITCH transitions.",
        "In fact, without this restriction, the parser is not even guaranteed to terminate.",
        "In practical settings, oracles for transition-based parsers can be approximated by classifiers trained on treebank data (Nivre, 2008).",
        "To do this, we need an oracle that will generate transition sequences for gold-standard dependency graphs.",
        "In the case of the planar parser of Section 4.2, the oracle of 4.3 is suitable for this purpose.",
        "However, in the case of the 2-planar parser, the oracle used for the completeness proof in Section 5.1 cannot be used directly, since it requires the gold-standard trees to be divided into two planes in order to generate a transition sequence.",
        "Of course, it is possible to use the algorithm presented in Section 3 to obtain a division of sentences into planes.",
        "However, for training purposes and to obtain a robust behaviour if non-2-planar",
        "Table 2: Parsing accuracy for 2-planar parser in comparison to MaltParser with (PP) and without (P) pseudo-projective transformations.",
        "LAS = labeled attachment score; UAS = unlabeled attachment score; NPP = precision on non-projective arcs; NPR = recall on non-projective arcs.",
        "sentences are found, it is more convenient that the oracle can distribute dependency links into the planes incrementally, and that it produces a distribution of links that only uses SWITCH transitions when it is strictly needed to account for non-planarity.",
        "Thus we use a more complex version of the oracle which performs a search in the crossings graph to check if a dependency link can be built on the plane of the active stack, and only performs a switch when this is not possible.",
        "This has proved to work well in practice, as will be observed in the results in the next section."
      ]
    },
    {
      "heading": "6. Empirical Evaluation",
      "text": [
        "In order to get a first estimate of the empirical accuracy that can be obtained with transition-based 2-planar parsing, we have evaluated the parser on four data sets from the CoNLL-X shared task (Buchholz and Marsi, 2006): Czech, Danish, German and Portuguese.",
        "As our baseline, we take the strictly projective arc-eager transition system proposed by Nivre (2003), as implemented in the freely available MaltParser system (Nivre et al., 2006a), with and without the pseudo-projective parsing technique for recovering non-projective dependencies (Nivre and Nilsson, 2005).",
        "For the two baseline systems, we use the parameter settings used by Nivre et al.",
        "(2006b) in the original shared task, where the pseudo-projective version of MaltParser was one of the two top performing systems (Buchholz and Marsi, 2006).",
        "For our 2-planar parser, we use the same kernelized SVM classifiers as MaltParser, using the LIBSVM package (Chang and Lin, 2001), with feature models that are similar to MaltParser but extended with features defined over the second stack.",
        "In Table 2, we report labeled (LAS) and unlabeled (UAS) attachment score on the four languages for all three systems.",
        "For the two systems that are capable of recovering non-projective dependencies, we also report precision (NPP) and recall (NPR) specifically on non-projective dependency arcs.",
        "The results show that the 2-planar parser outperforms the strictly projective variant of MaltParser on all metrics for all languages, and that it performs on a par with the pseudo-projective variant with respect to both overall attachment score and precision and recall on non-projective dependencies.",
        "These results look very promising in view of the fact that very little effort has been spent on optimizing the training oracle and feature model for the 2-planar parser so far.",
        "It is worth mentioning that the 2-planar parser has two advantages over the pseudo-projective parser.",
        "The first is simplicity, given that it is based on a single transition system and makes a single pass over the input, whereas the pseudo-projective parsing technique involves preprocessing of training data and post-processing of parser output (Nivre and Nilsson, 2005).",
        "The second is the fact that it parses a well-defined class of dependency structures, with known coverage, whereas no formal characterization exists of the class of structures parsable by the pseudo-projective parser."
      ]
    },
    {
      "heading": "7. Conclusion",
      "text": [
        "In this paper, we have presented an efficient algorithm for deciding whether a dependency graph is 2-planar and a transition-based parsing algorithm that is provably correct for 2-planar dependency forests, neither of which existed in the literature before.",
        "In addition, we have presented empirical results showing that the class of 2-planar dependency forests includes the overwhelming majority of structures found in existing treebanks and that a deterministic classifier-based implementation of the 2-planar parser gives state-of-the-art accuracy on four different languages.",
        "Parser",
        "Czech",
        "Danish",
        "German",
        "Portuguese",
        "las",
        "uas",
        "NPP",
        "npr",
        "las",
        "uas",
        "NPP",
        "npr",
        "las",
        "uas",
        "NPP",
        "npr",
        "las",
        "uas",
        "NPP",
        "npr",
        "2-planar",
        "79.24",
        "85.30",
        "68.9",
        "60.7",
        "83.81",
        "88.50",
        "66.7",
        "20.0",
        "86.50",
        "88.84",
        "57.1",
        "45.8",
        "87.04",
        "90.82",
        "82.8",
        "33.8",
        "MaltP",
        "78.18",
        "84.12",
        "-",
        "-",
        "83.31",
        "88.30",
        "-",
        "-",
        "85.36",
        "88.06",
        "-",
        "-",
        "86.60",
        "90.20",
        "-",
        "-",
        "Malt PP",
        "79.80",
        "85.70",
        "76.7",
        "56.1",
        "83.67",
        "88.52",
        "41.7",
        "25.0",
        "85.76",
        "88.66",
        "58.1",
        "40.7",
        "87.08",
        "90.66",
        "83.3",
        "46.2"
      ]
    },
    {
      "heading": "Acknowledgments",
      "text": [
        "The first author has been partially supported by Ministerio de Education y Ciencia and FEDER (HUM2007-66607-C04) and Xunta de Galicia (PGIDIT07SIN005206PR, Rede Galega de Proce-samento da Linguaxe e Recuperation de Information, Rede Galega de Lingmstica de Corpus, Bolsas Estadias INCITE/FSE cofinanced)."
      ]
    }
  ]
}
