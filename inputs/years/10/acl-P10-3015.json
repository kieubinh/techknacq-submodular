{
  "info": {
    "authors": [
      "Vipul Mittal"
    ],
    "book": "Proceedings of the ACL 2010 Student Research Workshop",
    "id": "acl-P10-3015",
    "title": "Automatic Sanskrit Segmentizer Using Finite State Transducers",
    "url": "https://aclweb.org/anthology/P10-3015",
    "year": 2010
  },
  "references": [
    "acl-P09-2087",
    "acl-W98-1007"
  ],
  "sections": [
    {
      "text": [
        "Language Technologies Research Center, IIIT-H, Gachibowli, Hyderabad, India.",
        "vipulmittal@research.iiit.ac.in",
        "In this paper, we propose a novel method for automatic segmentation of a Sanskrit string into different words.",
        "The input for our segmentizer is a Sanskrit string either encoded as a Unicode string or as a Roman transliterated string and the output is a set of possible splits with weights associated with each of them.",
        "We followed two different approaches to segment a Sanskrit text using sandhi rules extracted from a parallel corpus of manually sandhi split text.",
        "While the first approach augments the finite state transducer used to analyze Sanskrit morphology and traverse it to segment a word, the second approach generates all possible segmentations and validates each constituent using a morph analyzer."
      ]
    },
    {
      "heading": "1. Introduction",
      "text": [
        "Sanskrit has a rich tradition of oral transmission of texts and this process causes the text to undergo euphonic changes at the word boundaries.",
        "In oral transmission, the text is predominantly spoken as a continuous speech.",
        "However, continuous speech makes the text ambiguous.",
        "To overcome this problem, there is also a tradition of reciting the pada-patha (recitation of words) in addition to the recitation of a samhita (a continuous sandhied text).",
        "In the written form, because of the dominance of oral transmission, the text is written as a continuous string of letters rather than a sequence of words.",
        "Thus, the Sanskrit texts consist of a very long sequence of phonemes, with the word boundaries having undergone euphonic changes.",
        "This makes it difficult to split a continuous string into words and process the text automatically.",
        "Sanskrit words are mostly analyzed by building a finite state transducer (Beesley, 1998).",
        "In the first approach, this transducer was modified by linking the final states to appropriate intermediate states incorporating the sandhi rules.",
        "This approach then allows one to traverse the string from left to right and generate all and only possible splits that are morphologically valid.",
        "The second approach is very closely based on the Optimality Theory (Prince and Smolensky, 1993) where we generate all the possible splits for a word and validate each using a morphological analyzer.",
        "We use one of the fastest morphological analyzers available viz. the one developed by Apertium group.",
        "The splits that are not validated are pruned out.",
        "Based on the number of times the first answer is correct, we achieved an accuracy of around 92% using the second approach while the first approach performed with around 71% accuracy."
      ]
    },
    {
      "heading": "2. Issues involved in Sanskrit Processing",
      "text": [
        "The segmentizer is an important component of an NLP system.",
        "Especially, languages such as Chinese (Badino, 2004), Japanese, Thai (Haruechaiyasak, 2008) or Vietnamese (Thang et al.",
        ", 2008) which do not mark word boundaries explicitly or highly agglutinative languages like Turkish need segmentizers.",
        "In all these languages, there are no explicit delimiters to specify the word boundaries.",
        "In Thai, each syllable is transcribed using several characters and there is no space in the text between syllables.",
        "So the problem of segmentation is basically twofold: (1) syllable segmentation followed by (2) word segmentation itself.",
        "A sentence in these languages is segmented by predicting the word boundaries, where euphonic changes do not occur across the word boundaries and it is more like mere concatenation of words.",
        "So the task here is just to choose between various combinations of the words in a sentence.",
        "However, in Sanskrit, euphonic changes occur across word boundaries leading to addition and deletion of some original part of the combining words.",
        "These euphonic changes in Sanskrit introduce non-determinism in the segmentation.",
        "This makes the segmentation process in Sanskrit more complex than in Chinese or Japanese.",
        "In case of highly agglutinative languages like Turkish, the components are related to each other semantically involving dependency analysis.",
        "Whereas in Sanskrit, only the compounds involve a certain level of dependency analysis, while sandhi is just gluing of words together, without the need for words to be related semantically.",
        "For example, consider the following part of a verse,",
        "San: naradam paripapraccha valmïkirmunipungavam gloss: to_the_Narada asked Valmikito_the_wisest_among_sages",
        "Eng: Valmiki asked the Narada, the wisest among the sages.",
        "In the above verse, the words valmïkih and mu-nipurigavam (wisest among the sages - an adjective of Narada) are not related semantically, but still undergo euphonic change and are glued together as valmïkirmunipungavam.",
        "Further, the split need not be unique.",
        "Here is an example, where a string maturajnamparipäälaya may be decomposed in two different ways after undergoing euphonic changes across word boundaries.",
        "• matuh ajnam paripalaya (obey the order of mother) and,",
        "• ma aturajnam paripalaya (do not obey the order of the diseased).",
        "There are special cases where the sandhied forms are not necessarily written together.",
        "In such cases, the white space that physically marks the boundary of the words, logically refers to a single sandhied form.",
        "Thus, the white space is deceptive, and if treated as a word boundary, the morphological analyzer fails to recognize the word.",
        "For example, consider srutva ca narado vacah.",
        "In this example, the space between srutvä and ca represent a proper word boundary and the word srutva is recognized by the morphological analyzer whereas the space between narado and vacah.",
        "does not mark the word boundary making it deceptive.",
        "Because of the word vacah, naradah has undergone a phonetic change and is rendered as narado.",
        "In unsandhied form, it would be written as,",
        "San: srutva ca naradah vacah.",
        "gloss: afterJistening and Narada's speech Eng: And after listening to Narada's speech",
        "The third factor aggravating Sanskrit segmentation is productive compound formation.",
        "Unlike English, where either the components of a compound are written as distinct words or are separated by a hyphen, the components of compounds in Sanskrit are always written together.",
        "Moreover, before these components are joined, they undergo the euphonic changes.",
        "The components of a compound typically do not carry inflection or in other words they are the bound morphemes used only in compounds.",
        "This forces a need of a special module to recognize compounds.",
        "Assuming that a sandhi handler to handle the sandhi involving spaces is available and a bound morpheme recognizer is available, we discuss the development of sandhi splitter or a segmentizer that splits a continuous string of letters into meaningful words.",
        "To illustrate this point, we give an example.",
        "Consider the text, srutva caitattrilokajno valmïkernarado vacah.",
        "We assume that the sandhi handler handling the sandhi involving spaces is available and it splits the above string as,",
        "srutva caitattrilokajnah valmïkernaradah vacah.",
        ".",
        "The sandhi splitter or segmentizer is supposed to split this into",
        "srutva ca etat triloka-jnah valmïkeh naradah vacah.",
        "This presupposes the availability of rules corresponding to euphonic changes and a good coverage morphological analyzer that can also analyze the bound morphemes in compounds.",
        "A segmentizer for Sanskrit developed by Huet (Huet, 2009), decorates the final states of its finite state transducer handling Sanskrit morphology with the possible sandhi rules.",
        "However, it is still not clear how one can prioritize various splits with this approach.",
        "Further, this system in current state demands some more work before the sandhi splitter of this system can be used as a standalone system allowing plugging in of different morphological analyzers.",
        "With a variety of morphological analyzers being developed by various researchers, at times with complementary abilities, it would be worth to experiment with various morphological analyzers for splitting a sand-hied text.",
        "Hence, we thought of exploring other alternatives and present two approaches, both of which assume the existence of a good coverage morphological analyzer.",
        "Before we describe our approaches, we first define the scoring matrix used to prioritize various analyses followed by the baseline system."
      ]
    },
    {
      "heading": "3. Scoring Matrix",
      "text": [
        "Just as in the case of any NLP systems, with the sandhi splitter being no exception, it is always desirable to produce the most likely output when a machine produces multiple outputs.",
        "To ensure that the correct output is not deeply buried down the pile of incorrect answers, it is natural to prioritize solutions based on some frequencies.",
        "A Parallel corpus of Sanskrit text in sandhied and sandhi split form is being developed as a part of the Consortium project in India.",
        "The corpus contains texts from various fields ranging from children stories, dramas to Ayurveda texts.",
        "Around 100K words of such a parallel corpus is available from which around 25,000 parallel strings of unsandhied and corresponding sandhied texts were extracted.",
        "The same corpus was also used to extract a total of 2650 sandhi rules including the cases of mere concatenation, and the frequency distribution of these sandhi rules.",
        "Each sandhi rule is a triple (x, y, z) where y is the last letter of the first primitive, z is the first letter of the second primitive, and x is the letter sequence created by euphonic combination.",
        "We define the estimated probability of the occurrence of a sandhi rule as follows:",
        "Let Ri denote the ith rule with as the frequency of occurrence in the manually split parallel text.",
        "The probability of rule Ri is:",
        "where n denotes the total number of sandhi rules found in the corpus.",
        "Let a word be split into a candidate Sj with k constituents as < ci, C2, ..Ck > by applying k – 1 sandhi rules < R\\,R2, --Rk-i > in between the constituents.",
        "It should be noted here that the rules Ri, ..Rk-i and the constituents ci, ..Ck are interdependent since a different rule sequence will result in a different constituents sequence.",
        "Also, except ci and Ck, all intermediate constituents take part in two segmentations, one as the right word and one as the left.",
        "The weight of the split Sj is defined as:",
        "where PCx is the probability of occurrence of the word cx in the corpus.",
        "The factor of k was introduced to give more preference to the split with less number of segments than the one with more segments."
      ]
    },
    {
      "heading": "4. Baseline System",
      "text": [
        "We define our own baseline system which assumes that each Sanskrit word can be segmented only in two constituents.",
        "A word is traversed from left to right and is segmented by applying the first applicable rule provided both the constituents are valid morphs.",
        "Using the 2,650 rules, on a test data of 2,510 words parallel corpus, the baseline performance of the system was around 52.7% where the first answer was correct."
      ]
    },
    {
      "heading": "5. Two Approaches",
      "text": [
        "We now present the two approaches we explored for sandhi splitting.",
        "In this approach, we build an FST, using Open-Fst (Allauzen et al., 2007) toolkit, incorporating sandhi rules in the FST itself and traverse it to find the sandhi splittings.",
        "We illustrate the augmentation of a sandhi rule with an example.",
        "Let the two strings be xaXi (dadhi) and awra (atra).",
        "The initial FST without considering any sandhi rules is shown in Figure 1.",
        "As the figure depicts, 0 is the start state and 4 is the final state.",
        "Each transition is a 4-tuple <c, n, i, o> where c is current state, n is the next state, z is the input symbol and o is the output.",
        "The FST marks word boundaries by flushing out certain features about the words whenever it encounters a valid word.",
        "Multiple features are separated by a 'I'.",
        "E.g., the output for xaXi is lc,s\\vc,s and for awra it is vc,s where lc,s stands for locative, singular and vc,s is vocative, singular.",
        "The FST in Figure 1 recognize exactly two words xaXi and awra.",
        "One of the sandhi rule states that i+a – > y a which will be represented as a triple (ya,i,a).",
        "Applying the sandhi rule, we get: xaXi + awra – > xaXyawra.",
        "After adding this sandhi rule to the FST, we get the modified FST that is represented in Figure 2.",
        "Here, a transition arc is added depicting the rule which says that on receiving an input symbol ya at state 3, go to state 5 with an output i+a – > ya.",
        "Thus the new FST accepts xaXyawra in addition to xaXi and awra.",
        "Thus, we see that the original transducer gets modified with all possible transitions at the end of a final phoneme, and hence, also explodes the number of transitions leading to a complex transducer.",
        "The basic outline of the algorithm to split the given string into sub-strings is:",
        "Algorithm 1 To split a string into sub-strings",
        "1: Let the FST for morphology be/",
        "2: Add sandhi rules to the final states offl linking them to the intermediary states to get /'.",
        "3: Traverse /' to find all possible splits for a word.",
        "If a sandhi rule is encountered, split the word and continue with the remaining part.",
        "4: Calculate the weights of the possible outputs with the formula discussed in section 3.",
        "The pseudo-code of the algorithm used to insert sandhi rules in the FST is illustrated here:",
        "Algorithm 2 To insert sandhi rules in the FST",
        "The main problem with this approach is that every finite state can have as many transitions as the number of euphonic rules resulting in phoneme change.",
        "This increases the size of the FST considerably.",
        "It should be noted that, we have not included the cases, where there is just a concatenation.",
        "In such cases, if the input string is not exhausted, but the current state is a final state, we go back to the start state with the remaining string as the input.",
        "1:",
        "I = Input Symbol; X = last character of the",
        "result of the rule.",
        "2:",
        "for each transition in the FST transition table",
        "do",
        "3:",
        "if next state is a final state then",
        "4:",
        "for all rules where I is the last character",
        "of first word do",
        "5:",
        "S = next state from the start state on",
        "encountering X;",
        "6:",
        "Y = first character of the result of the",
        "rule;",
        "7:",
        "transition T = current state, S, Y, rule;",
        "8:",
        "Add T into the FST;",
        "9:",
        "end for",
        "10:",
        "end if",
        "11:",
        "end for",
        "The performance of this system measured in terms of the number of times the highest ranked segmentation is correct, with around 500 sandhi rules, and only noun morphology tested on the same test data used for testing baseline system gave the following rank-wise distribution presented in Table 1.",
        "Table 1 : Rank-wise Distribution for Approach-1.",
        "The system was slow consuming, on an average, around 10 seconds per string of 15 letters..",
        "With the increase in the sandhi rules, though system's performance was better, it slowed down the system further.",
        "Moreover, this was tested only with the inflection morphology of nouns.",
        "The verb inflection morphology and the derivational morphology were not used at all.",
        "Since, the system is supposed to be part of a real time application viz. machine translation, we decided to explore other possibilities.",
        "Our second approach follows optimality the-ory(OT) which proposes that the observed forms of a language are a result of the interaction between the conflicting constraints.",
        "The three basic components of the theory are:",
        "1.",
        "GEN - generates all possible outputs, or candidates.",
        "2.",
        "CON - provides the criteria and the constraints that will be used to decide between candidates.",
        "3.",
        "EVAL - chooses the optimal candidate based on the conflicts on the constraints.",
        "OT assumes that these components are universal and the grammars differ in the way they rank the universal constraint set, CON.",
        "The grammar of each language ranks the constraints in some dominance order in such a way that every constraint must have outperformed every lower ranked constraint.",
        "Thus a candidate A is optimal if it performs better than some other candidate B on a higher ranking constraint even if A has more violations of a lower ranked constraint than B.",
        "The GEN function produces every possible segmentation by applying the rules wherever applicable.",
        "The rules tokenize the input surface form into individual constituents.",
        "This might contain some insignificant words that will be eventually pruned out using the morphological analyser in the EVAL function thus leaving the winning candidate.",
        "Therefore, the approach followed is very closely based on optimality theory.",
        "The morph analyser has no role in the generation of the candidates but only during their validation thus composing the back-end of the segmentizer.",
        "In original OT, the winning candidate need not satisfy all the constraints but it must outperform all the other candidates on some higher ranked constraint.",
        "While in our scenario, the winning candidate must satisfy all the constraints and therefore there could be more than one winning candidates.",
        "Currently we are applying only two constraints.",
        "We are planning to introduce some more constraints.",
        "The constraints applied are:",
        "•CI: All the constituents of a split must be valid morphs.",
        "• C2 : Select the split with maximum weight, as defined in section 3.",
        "The basic outline of the algorithm is:",
        "l : Recursively break a word at every possible position applying a sandhi rule and generate all possible candidates for the input.",
        "2: Pass the constituents of all the candidates through the morph analyzer.",
        "3: Declare the candidate as a valid candidate, if all its constituents are recognized by the morphological analyzer.",
        "4: Assign weights to the accepted candidates and sort them based on the weights.",
        "5: The optimal solution will be the one with the highest salience.",
        "The current morphological analyzer can recognize around 140 million words.",
        "Using the 2650 rules and the same test data used for previous approach, we obtained the following results:",
        "Rank",
        "% of output",
        "1",
        "71.2509",
        "2",
        "5.64543",
        "3",
        "3.85324",
        "4",
        "3.35651",
        "5",
        "1.56123",
        ">5",
        "14.33268",
        "• Almost 93% of the times, the highest ranked segmentation is correct.",
        "And in almost 98% of the cases, the correct split was among the top 3 possible splits.",
        "• The system consumes around 0.04 seconds per string of 15 letters on an average.",
        "The complete rank wise distribution is given in Table 2."
      ]
    },
    {
      "heading": "6. Conclusion",
      "text": [
        "We presented two methods to automatically segment a Sanskrit word into its morphologically valid constituents.",
        "Though both the approaches outperformed the baseline system, the approach that is close to optimality theory gives better results both in terms of time consumption and segmentations.",
        "The results are encouraging.",
        "But the real test of this system will be when it is integrated with some real application such as a machine translation system.",
        "This sandhi splitter being modular, wherein one can plug in different morphological analyzer and different set of sandhi rules, the splitter can also be used for segmentization of other languages.",
        "Future Work The major task would be to explore ways to shift rank 2 and rank 3 segmentations more towards rank 1.",
        "We are also exploring the possibility of including some semantic information about the words while defining weights.",
        "The sandhi with white spaces also needs to be handled."
      ]
    },
    {
      "heading": "Acknowledgments",
      "text": [
        "I would like to express my gratitude to Amba Kulkarni and Rajeev Sangal for their guidance and support.",
        "% of output",
        "Rank",
        "Approach-1",
        "Approach-2",
        "1",
        "71.2509",
        "92.8771",
        "2",
        "5.64543",
        "5.44693",
        "3",
        "3.85324",
        "1.07076",
        "4",
        "3.35651",
        "0.41899",
        "5",
        "1.56123",
        "0.09311",
        ">5",
        "14.33268",
        "0.0931"
      ]
    }
  ]
}
