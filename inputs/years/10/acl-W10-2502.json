{
  "info": {
    "authors": [
      "Steve DeNeefe",
      "Kevin Knight",
      "Heiko Vogler"
    ],
    "book": "Proceedings of the 2010 Workshop on Applications of Tree Automata in Natural Language Processing",
    "id": "acl-W10-2502",
    "title": "A Decoder for Probabilistic Synchronous Tree Insertion Grammars",
    "url": "https://aclweb.org/anthology/W10-2502",
    "year": 2010
  },
  "references": [
    "acl-C90-3001",
    "acl-C90-3045",
    "acl-D09-1076",
    "acl-E06-1048",
    "acl-J95-4002",
    "acl-P01-1067"
  ],
  "sections": [
    {
      "text": [
        "Steve DeNeefe * and Kevin Knight *",
        "Heiko Vogler t",
        "Synchronous tree insertion grammars (STIG) are formal models for syntax-based machine translation.",
        "We formalize a decoder for probabilistic STIG; the decoder transforms every source-language string into a target-language tree and calculates the probability of this transformation."
      ]
    },
    {
      "heading": "1. Introduction",
      "text": [
        "Tree adjoining grammars (TAG) were invented in (Joshi et al.",
        "1975) in order to better characterize the string sets of natural languages.",
        "One of TAG's important features is the ability to introduce two related syntactic units in a single rule, then push those two units arbitrarily far apart in subsequent derivation steps.",
        "For machine translation (MT) between two natural languages, each being generated by a TAG, the derivations of the two TAG may be synchronized (Abeille et al., 1990; Shieber and Shabes, 1990) in the spirit of syntax-directed transductions (Lewis and Stearns, 1968); this results in synchronous TAG (STAG).",
        "Recently, in (Nesson et al., 2005, 2006) probabilistic synchronous tree insertion grammars (pSTIG) were discussed as model of MT; a tree insertion grammar is a particular TAG in which the parsing problem is solvable in cubic-time (Schabes and Waters, 1994).",
        "In (DeNeefe, 2009; DeNeefe and",
        "Knight 2009) a decoder for pSTIG has been proposed which transforms source-language strings into (modifications of) derivation trees of the pSTIG.",
        "Nowadays, large-scale linguistic STAG rule bases are available.",
        "In an independent tradition, the automata-theoretic investigation of the translation of trees",
        "* financially supported by NSF STAGES project, grant #IIS-0908532.",
        "led to the rich theory of tree transducers (Gecseg and Steinby, 1984, 1997).",
        "Roughly speaking, a tree transducer is a finite term rewriting system.",
        "If each rewrite rule carries a probablity or, in general, a weight from some semiring, then they are weighted tree transducers (Maletti, 2006, 2006a; Fulop and Vogler, 2009).",
        "Such weighted tree transducers have also been used for the specification of MT of natural languages (Yamada and al., 2008; Knight and May 2009).",
        "Martin and Vere (1970) and Schreiber (1975) established the first connections between the two (2008, 2010) investigated their relationship.",
        "The problem addressed in this paper is the decoding of source-language strings into target-language trees where the transformation is described by a pSTIG.",
        "Currently, this decoding requires two steps: first, every source string is translated into a derivation tree of the underlying pSTIG (DeNeefe, 2009; DeNeefe and Knight 2009), and second, the derivation tree is transformed into the target tree using an embedded tree transducer (Shieber, 2006).",
        "We propose a transducer model, called a bottom-up tree adjoining transducer, which performs this decoding in a single step and, simultaneously, computes the probabilities of its derivations.",
        "As a basis of our approach, we present a formal definition of pSTIG."
      ]
    },
    {
      "heading": "2. Preliminaries",
      "text": [
        "For two sets S and A, we let Us (A) be the set of all (unranked) trees over S in which also elements of A may label leaves.",
        "We abbreviate Us(0) by Us.",
        "We denote the set of positions, leaves, and non-leaves of £ G Us by pos(£) Ç N*, lv(£), and nlv(£), resp., where e denotes the root of £ and w.i denotes the ith child of position w; nlv(£) = pos(£) \\ lv(£).",
        "For a position w G pos(£), the label of £ at w (resp., subtree of £ at w) is denoted by £(w) (resp., £\\w ).",
        "If additionally C G Us (A), then £[Z]w denotes the tree which is obtained from £ by replacing its subtree at w by C. For every A ç S U A, the set posA(£) is the set of all those positions w G pos(£) suchthat £(w) G A.",
        "Similarly, we can define 1va(£) and nlvA(£).",
        "The yield of £ is the sequence yield(£) G (S U A)* of symbols that label the leaves from left to right.",
        "If we associate with a G S a rank k G N, then we require that in every tree £ G Us (A) every a-labeled position has exactly k children."
      ]
    },
    {
      "heading": "3. Probabilistic STAG and STIG",
      "text": [
        "First we will define probabilistic STAG, and second, as a special case, probabilistic STIG.",
        "Let N and T be two disjoint sets of, resp., nonterminals and terminals.",
        "A substitution rule r is a tuple (Cs,Ct,V,W,P;dj) where",
        "• W ç nlvvv(Cs) x nlvv (Ct) (potential adjoining sites), and",
        "• Pldj : W – [0,1] (adjoiningprobability).",
        "An auxiliary rule r is a tuple (Cs, Ct, V, W, *, PJdj) where Cs, Ct, W, and are defined as above and",
        "An (elementary) rule is either a substitution rule or an auxiliary rule.",
        "The root-category of a rule r is the tuple (Cs(e), Ct(e)), denoted by rc(r).",
        "A probabilistic synchronous tree adjoining grammar (pSTAG) is a tuple G = (N, T, (Ss,St), S, A,P) such that N and T are two disjoint sets (resp., ofnonterminals and terminals), (Ss, St) G N x N (start nonterminal), S and A are finite sets of, resp., substitution rules and auxiliary rules, and P : S U A – > [0,1] such that for every (A, B) G N x N, assuming that in each case the number of sum-mands is not zero.",
        "In the following, let G always denote an arbitrary pSTAG.",
        "PIdij(c)",
        "In Fig. 1 we show the rules of our running example pSTAG, where the capital Roman letters are the nonterminals and the small Greek letters are the terminals.",
        "The substitution site (in rule ri) is indicated by j, and the potential adjoining sites are denoted by a, b, c, d, and e. For instance, in formal notation the rules r1 and r2 are written as follows:",
        "where b = (e, e), c = (e, 1), and * = (1,2).",
        "In the derivation relation of G we will distinguish four types ofsteps:",
        "1. substitution of a rule at a substitution site (substitution),",
        "2. deciding to turn a potential adjoining site into an activated adjoining site (activation),",
        "3. deciding to drop a potential adjoining site, i.e., not to adjoin, (non-adjoining) and",
        "4. adjoining of a rule at an activated adjoining site (adjoining).",
        "In the sentential forms (defined below) we will maintain for every adjoining site w a two-valued flag g(w) indicating whether w is a potential (g(w) = p) or an activated site (g(w) = a).",
        "The set ofsentential forms ofG is the set SF(G) of all tuples k = (£s, £t, V, W, g) with",
        "• * = (*s, *t) G lvv(Cs) x lvv(Ct) and neither *s nor *t occurs in any element of V; moreover, Cs(e) = Cs(*s) and Ct(e) = Ct(*t), and *s = e = *t; the node *s (and *t) is called the foot-node of Cs (resp., Ct).",
        "• W C nlvN((s) x nlvN(Ct), and",
        "• g : W – {p, a}.",
        "The derivation relation (of G) is the binary relation i C SF(G) x SF(G) such that for every ki = ((,(t ,Vi,Wi,gi) and k2 = ((,(t, V2, W2,g2) we have Ki => K2 iff one of the following is true:",
        "1.",
        "(substitution) there are w = (ws,wt) G Viand r = (Cs, Ct, V, W, Pardj) G S such that",
        "- g2 is the union of gi and the set of pairs (w.u, p) for every u G W; this step is denoted by Ki ==> k2;"
      ]
    },
    {
      "heading": "3.. (non-adjoining) there is w G W i with",
      "text": [
        "- V2 is the smallest set such that (i) for every (us, ut) G Vi we have (u's, ut) G V2where us if ws is not a prefix of us, ws.",
        "*s .u if us = ws.u for some u; and ut is obtained in the same way from ut, wt, and *t, and (ii) V2 contains w.V ; - W2 is the smallest set such that (i) for every (us,ut) G W1 \\ {w} we have (u's,ut) G W2 where us and ut are obtained in the same way as for V2, and g2(us, ut) = g1(us,ut) and (ii) W2 contains w.W and g2(w.u) = p for every u G W; this step is denoted by k1 ==> k2.",
        "In Fig. 2 we show a derivation of our running example pSTAG where activated adjoining sites are indicated by surrounding circles, the other adjoining sites are potential.",
        "The only initial sentential form is Kin = (Ss, St, {(e, e)}, 0,0).",
        "A sentential form k is final if it has the form ((s, (t, 0, 0, 0).",
        "Let k g SF(G).",
        "A derivation (of k) is a sequence d of the form Kou1 K1... unKn with ko = Kin and n > 0, Ki-1 I Ki for every 1 < i < n (and Kn = k).",
        "We denote Kn also by last(d), and the set of all derivations of k (resp., derivations) by D(k) (resp., D).",
        "We call d G D successful if last(d) is final.",
        "S4",
        "substitution of ri at (e, e)",
        "P(ri) = 1",
        "Ss",
        "/ 1 \\",
        "/ 1 \\",
        "/1 \\",
        "/ 1 \\ aB Bi ß",
        "a",
        "ß",
        "substitution of r4 at (2, 2)",
        "il",
        "P(r4) = .1",
        "St",
        "/ \\ \\",
        "/ ^",
        "a A Aa",
        "<^",
        "/ 1 \\",
        "aB B ß",
        "aa",
        "ß ß",
        "activation at a = (3,1)",
        "I",
        "PS» = .9",
        "St",
        "/ 1 \\",
        "/ ^ ^",
        "a a Aa",
        "/ \\ \\ ®ß B ß",
        "aa",
        "ß ß",
        "adjoining of r2 at a = (3,1)",
        "=j",
        "P(r2) = .4",
        "Ss",
        "/ / \\",
        "St",
        "/ W",
        "/ / \\",
        "a A Ab,c",
        "/\\",
        "a A Y",
        "bB B ß",
        "/ \\ cB B ß",
        "a",
        "8 ß",
        "non-adjoining at c = (3,1.1)",
        "=j",
        "1 - PÏÏ,(c) = .4",
        "Ss",
        "St",
        "/ \\ \\",
        "/ ' \\ a A A b",
        "/\\",
        "a A Y",
        "/ \\ \\",
        "bB B ß",
        "/ \\",
        "BBß",
        "a",
        "8 ß",
        "non-adjoining at b = (3,1)",
        "=j",
        "Ss",
        "St",
        "/ \\\\",
        "a A A",
        "/\\",
        "aAY",
        "B B ß /\\",
        "BBß",
        "a",
        "8ß",
        "The tree transformation computed by G is the relation tg C Un (T) x UN (T) with ((s, (t) G to iff there is a successful derivation of ((s,(t, 0, 0, 0).",
        "Our definition of the probability of a derivation is based on the following observation.",
        "Let d G D(k) for some k = ((s, (t, V, W, g).",
        "Then, for every w G W, the rule which created w and the corresponding local position in that rule can be retrieved from d. Let us denote this rule by r(d, k, w) and the local position by 1(d, k, w).",
        "Now let d be the derivation k0u1k1 ... unKn.",
        "Then the probability of d is defined by"
      ]
    },
    {
      "heading": "2.. (activation)",
      "text": []
    },
    {
      "heading": "3.. (non-adjoining)",
      "text": [
        "Pd(Ki-i == Ki) = 1 - Par,dj(w') where r' and w' are defined as in the activation case"
      ]
    },
    {
      "heading": "4.. (adjoining)",
      "text": [
        "Pd(Ki-i == Ki) = P(r).",
        "In order to describe the generative model of G, we impose a deterministic strategy sel on the derivation relation in order to obtain, for every sentential form, a probability distribution among the follow-up sentential forms.",
        "A deterministic derivation strategy is a mapping sel : SF(G) – (N* x N*) U {_L} such that for every k = ((s, (t, V, W, g) G SF(G), we have that sel(K) G V U W if V U W = 0, and sel(K) = _L otherwise.",
        "In other words, sel chooses the next site to operate on.",
        "Then we define ==sel in the same way as == but in each of the cases we require that w = sel(K1).",
        "Moreover, for every derivation d G D, we denote by next(d) the set of all derivations of the form duK where last(d) ==sel k.",
        "The generative model of G comprises all the generative stories of G. A generative story is a tree t G UD; the root of t is labeled by Kin.",
        "Let w G pos(t) and t(w) = d. Then either w is a leaf, because we have stopped the generative story at w, or w has | next(d)| children, each one represents exactly one possible decision about how to extend d by a single derivation step (where their order does not matter).",
        "Then, for every generative story t, we have that",
        "E p(t(w)) = 1.",
        "We note that (D,next,//) can be considered as a discrete Markov chain (cf., e.g. (Baier et al., 2009)) where the initial probability distribution /t : D – [0,1] maps d = Kin to 1, and all the other derivations to 0.",
        "A probabilistic synchronous tree insertion grammar (pSTIG) G is a pSTAG except that for every rule r = (Cs, Ct, V, W, P rdj) or r = (Cs,Ct, V, W, *,Pardj) we have that",
        "• for * = (*s, *t) we have that *s is either the rightmost leaf of Cs or its leftmost one; then we call r, resp., L-auxiliaryin the source and R-auxiliary in the source; similarly, we restrict *t; the source-spine ofr (target-spine of r) is the set of prefixes of *s (resp., of *t)",
        "• W C nlvN (Cs) x {L, R} xnlvN (Ct) x {L, R} where the new components are the direction-type of the potential adjoining site, and",
        "• for every (ws,8s,wt,8t) G W, if ws lies on the source-spine of r and r is L-auxiliary (R-auxiliary) in the source, then 8s = L (resp., 8s = R), and corresponding restrictions hold for the target component.",
        "According to the four possibilities for the foot-node * we call r LL-, LR-, RL-, or RR-auxiliary.",
        "The restriction for the probability distribution P of G is modified such that for every ( A, B) G N x N and x, y G {L, R}:",
        "E P (r) = 1 .",
        "In the derivation relation of the pSTIG G we will have to make sure that the direction-type of the chosen adjoining site w matches with the type of auxiliarity of the auxiliary rule.",
        "Again we assume that the data structure SF(G) is enriched such that for every potential adjoining site w of k G SF(G) we know its direction-type dir(w).",
        "We define the derivation relation of the pSTIG G to be the binary relation C SF(G) x SF(G) such that we have k1 =>/ k2 iff (i) k1 i k2 and (ii) if adjoining takes place at w, then the used auxiliary rule must be dir(w)-auxiliary.",
        "Since i/ is a subset ofi, the concepts ofderivation, successful derivation, and tree transformation are defined also for a pSTIG.",
        "In fact, our running example pSTAG in Fig. 1 is a pSTIG, where r2 and r3 are RL-auxiliary and every potential adjoining site has direction-type RL; the derivation shown in Fig. 2 is a pSTIG-derivation."
      ]
    },
    {
      "heading": "4. Bottom-up tree adjoining transducer",
      "text": [
        "Here we introduce the concept of a bottom-up tree adjoining transducer (BUTAT) which will be used to formalize a decoder for a pSTIG.",
        "A BUTAT is a finite-state machine which translates strings into trees.",
        "The left-hand side of each rule is a string over terminal symbols and statevariable combinations.",
        "A variable is either a substitution variable or an adjoining variable; a substitution variable (resp., adjoining variable) can have an output tree (resp., output tree with foot node) as value.",
        "Intuitively, each variable value is a translation of the string that has been reduced to the corresponding state.",
        "The right-hand side of a rule has the form q(C) where q is a state and C is an output tree (with or without foot-node); C may contain the variables from the left-hand side of the rule.",
        "Each rule has a probability p G [0,1].",
        "In fact, BUTAT can be viewed as the string-to-tree version of bottom-up tree transducers (En-gelfriet, 1975; Gecseg and Steinby, 1984,1997) in which, in addition to substitution, adjoining is allowed.",
        "Formally, we let X = {x1, x2,...} and F = f2,...} be the sets of substitution variables and adjoining variables, resp.",
        "Each substitution variable (resp., adjoining variable) has rank 0 (resp., 1).",
        "Thus when used in a tree, substitution variables are leaves, while adjoining variables have a single child.",
        "A bottom-up tree adjoining transducer (BUTAT) is a tuple M = (Q, r, A,Q/, R) where",
        "• Q is a finite set (of states),",
        "• r is an alphabet (of input symbols), assuming that Q n r = 0,",
        "• A is an alphabet (of output symbols),",
        "• Q/ C Q (set offinal states), and",
        "• R is a finite set of rules of the form",
        "where p G [0,1] (probability of (t)), k > 0, Yo,Yi,...,Yk G r*, q,qi,...,qfc G Q, zi,..., zk G X U F, and C G RHS(k) where RHS(k) is the set of all trees over A U {z1,..., zk} U {*} in which the nullary * occurs at most once.",
        "The set of intermediate results ofM is the set IR(M) = {i | i G UA({*}), |pos{*}(i)| < 1} and the set of sentential forms ofM is the set SF(M) = (r U {q(i) | q G Q, i G IR(M)})*.",
        "The derivation relation induced by M is the binary relation i C SF(M) x SF(M) such that",
        "• for every 1 < i < k: if zi G X, then Ci does not contain *; if zi G F, then Ci contains * exactly once,",
        "where 6 is a function that replaces variables in a right-hand side with their values (subtrees) from the left-hand side of the rule.",
        "Formally, 6 : RHS(k) – IR(M) is defined as follows:",
        "(ii) (substitution) for every zi G X, we have 6(Zi) = Ci,",
        "(iii) (adjoining) for every zi G F and ( G RHS(k), we have 6(zi(()) = Ci[6(()]v where v is the uniquely determined position of * in Ci, and (iv) 6(*) = *.",
        "Clearly, the probablity of a rule carries over to derivation steps that employ this rule.",
        "Since, as usual, a derivation d is a sequence of derivation steps, we let the probability ofd be the product of the probabilities of its steps.",
        "The string-to-tree transformation computed by M is the set tm of all tuples (y, () G r* x UA such that there is a derivation of the form y ==* q(() for some q G Q/."
      ]
    },
    {
      "heading": "5. Decoder for pSTIG",
      "text": [
        "Now we construct the decoder dec(G) for a pSTIG G that transforms source strings directly into target trees and simultaneously computes the probability of the corresponding derivation of G. This decoder is formalized as a BUTAT.",
        "Since dec(G) is a string-to-tree transducer, we have to transform the source tree Cs of a rule r into a left-hand side p of a dec(G)-rule.",
        "This is done similarly to (DeNeefe and Knight, 2009) by traversing Cs via recursive descent using a mapping p (see an example after Theorem 1); this creates appropriate state-variable combinations for all substitution sites and potential adjoining sites of r. In particular, the source component of the direction-type of a potential adjoining site determines the position of the corresponding combination in p. If there are several potential adjoining sites with the same source component, then we create a p for every permutation ofthese sites.",
        "The right-hand side of a dec(G)-rule is obtained by traversing the target tree Ct via recursive descent using a mapping VP and, whenever a nonterminal with a potential adjoining site w is met, a new position labeled by /w is inserted.",
        "If there is more than one potential adjoining site, then the set of all those sites is ordered as in the left-hand side p from top to bottom.",
        "Apart from these main rules we will employ rules which implement the decision of whether or not to turn a potential adjoining site w into an activated adjoining site.",
        "Rules for the first purpose just pass the already computed output tree through from left to right, whereas rules for the second purpose create for an empty left-hand side the output tree *.",
        "We will use the state behavior of dec(G) in order to check that (i) the nonterminals of a substitution or potential adjoining site match the root-category of the used rule, (ii) the direction-type of an adjoining site matches the auxiliarity of the chosen auxiliary rule, and (iii) the decisions of whether or not to adjoin for each rule r of G are kept separate.",
        "Whereas each pair ((s, (t) in the translation of G is computed in a top-down way, starting at the initial sentential form and substituting and adjoining to the present sentential form, dec(G) builds (t in a bottom-up way.",
        "This change of direction is legitimate, because adjoining is associative (Vijay-Shanker and Weir, 1994), i.e., it leads to the same result whether we first adjoin r2 to r1, and then align r3 to the resulting tree, or first adjoin r3 to r2, and then adjoin the resulting tree to r1.",
        "In Fig. 3 we show some rules of the decoder of our running example pSTIG and in Fig. 4 the derivation of this decoder which correponds to the derivation in Fig. 2.",
        "Theorem 1.",
        "Let G be a pSTIG over N and T. Then there is a BUTAT dec(G) such that for every ((s,(t) G Un (T ) x Un (T ) and p G [0,1] the following two statements are equivalent:",
        "1. there is a successful derivation of ((s, (t, 0,0,0) by G with probability p,",
        "2. there is a derivation from yield((s) to [Ss, St]((t) by dec(G) with probability p.",
        "pSTIG.",
        "We will construct the BUTAT dec(G) = (Q, T, N U T, {[Ss, St]}, R) as follows (where the mappings p and VP will be defined below):",
        "• R is the smallest set R of rules such that for every r G SUA of the form (Cs, Ct, V, W, Pardj) or (Cs, Ct, V, W, *, Pardj):",
        "- for every p G p(e), if r G S, then the main rule is in R , and if r G A and r is 8s8t-auxiliary, then the main rule is in R , and",
        "for non-adjoining at w are in R .",
        "We define the mapping with Q(X U F) = {q(z) | q G Q, z G X U F} inductively on its argument as follows.",
        "Let w G pos(Cs) and let w have n children.",
        "(a) Let Cs(w) G T. Then p(w) = {Cs(w)}.",
        "(b) (substitution site) Let Cs(w) G N and let w' G pos(Ct) suchthat (w, w') G V. Then p(w) = {[Cs(w),Ct(w')](x(w,w')) }.",
        "(c) (adjoining site) Let Cs(w) G N and let there be an adjoining site in W with w as first component.",
        "Then, we define p(w) to be the smallest set such that for every permutation (ui,... ,u) (resp., (vi,..., vm))of all the L-adjoining (resp., R-adjoining) sites in W with w as first component, the set ui = h ui] ( /w)and vj = h vj K for 1 < i < l and 1 < j < m.",
        "(d) Let Cs(w) G N, w = *, and let w be neither the first component of a substitution site in V nor the first component of an adjoining site in p(w) = p(w.1) o ... o p(w.n) .",
        "(e) Let w = *.",
        "Then we define p(w) = {e}.",
        "For every p G p(e), we define the mapping",
        ": pos(Ct) – Unufux(T U {*}) inductively on its argument as follows.",
        "Let w G pos(Ct) and let w have n children.",
        "(a) Let Ct(w) G T. Then Vp(w) = Ct(w).",
        "(b) (substitution site) Let Ct(w) G N and let w G pos(Cs) such that (w , w) G V. Then",
        "Vp(w) = x(w',w).",
        "(c) (adjoining site) Let Ct(w) G N and let there be an adjoining site in W with w as third component.",
        "Then let {u1, .",
        ".",
        ".",
        ", u } C W be the set of all potential adjoining sites with w as third component, and we define where C = Ct(w)(Vp(w.1),..., Vp(w.n)) and the ui's occur in Vp(w) (from the root towards the leaves) in exactly the same order as they occur in p (from left to right).",
        "(d) Let Ct(w) G N, w = *, and let w be neither the second component of a substitution site in V nor the third component of an adjoining site in W. Then",
        "Vp(w) = Ct(w)( Vp(w.1),..., Vp(w.n)).",
        "(e) Let w = *.",
        "Then Vp(w) = *.",
        "With dec(G) constructed as shown, for each derivation of G there is a corresponding derivation of dec(G), with the same probability, and vice versa.",
        "The derivations proceed in opposite directions.",
        "Each sentential form in one has an equivalent sentential form in the other, and each step of the derivations correspond.",
        "There is no space to present the full proof, but let us give a slightly more precise idea about the formal relationship between the derivations ofG and dec(G).",
        "In the usual way we can associate a derivation tree dt with every successful derivation d of G. Assume that last(d) = ((s,(t, 0,0,0), and let Es and Et be the embedded tree transducers (Shieber, 2006) associated with, respectively, the source component and the target component of G. Then it was shown in (Shieber, 2006) that tes (dt) = (s and rEt (dt) = (t where rE denotes the tree-to-tree transduction computed by an embedded tree transducer E. Roughly speaking, Es and Et reproduce the derivations of, respectively, the source component and the target component of G that are prescribed by dt.",
        "Thus, for k = ((s, (t, V, W, g), if Kin =>G k and k is aprefix of d, then there is exactly one subtree dt[(w, w )] of dt associated with every (w, w ) G V U W, which prescribes how to continue at (w, w ) with the reproduction of d. Having this in mind, we obtain the sentential form of the dec(G)-derivation which corresponds to k by applying a modification of p to k where the modification amounts to replacing x(w,w') and /(w,w') by rEt(dt[(w, w')]); note that TEt (dt[(w, w')]) might contain *.",
        "■",
        "As illustration of the construction in Theorem 1 let us apply the mappings p and Vp to rule r2 of Fig. 1, i.e., to r2 = (Cs, Ct, 0, {b,c}, *, PJdj) with Cs = A(A,y), Ct = B(B(8),B), b = (e, R, e, L), c = (e, R, 1, L), and * = (1,2).",
        "Let us calculate p(e) on Cs.",
        "Due to (c), p(e) = J o p(1) o p(2) o K.",
        "{Y [r2,c](/c) [r2,b](/b), y [r2,b](/b) [r2,c](/c)}.",
        "Hence we obtain the rule",
        "[A, R, B, L](/b(B(/c(B(8)), *))) which is also shown in Fig. 3.",
        "Now let p = y [r2, b](/6) [r2, c](/c).",
        "Let us calculate Vp(e) on Ct."
      ]
    }
  ]
}
