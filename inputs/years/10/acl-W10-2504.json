{
  "info": {
    "authors": [
      "Suna Bensch",
      "Frank Drewes"
    ],
    "book": "Proceedings of the 2010 Workshop on Applications of Tree Automata in Natural Language Processing",
    "id": "acl-W10-2504",
    "title": "Millstream Systems – a Formal Model for Linking Language Modules by Interfaces",
    "url": "https://aclweb.org/anthology/W10-2504",
    "year": 2010
  },
  "references": [
    "acl-J08-3004"
  ],
  "sections": [
    {
      "text": [
        "Millstream Systems - a Formal Model for Linking Language Modules by Interfaces",
        "We introduce Millstream systems, a formal model consisting of modules and an interface, where the modules formalise different aspects of language, and the interface links these aspects with each other."
      ]
    },
    {
      "heading": "1. Credits",
      "text": [
        "This work is partially supported by the project Tree Automata in Computational Language Technology within the Sweden - South Africa Research Links Programme.",
        "A preliminary but more detailed version of this article is available as a technical report (Bensch and Drewes, 2009)."
      ]
    },
    {
      "heading": "2. Introduction",
      "text": [
        "Modern linguistic theories (Sadock, 1991; Jackendoff, 2002) promote the view that different aspects of language, such as phonology, morphology, syntax, and semantics should be viewed as autonomous modules that work simultaneously and are linked with each other by interfaces that describe their interaction and interdependency.",
        "Formalisms in modern computational linguistics which establish interfaces between different aspects of language are the Combinatory Categorical Grammar (CCG), the Functional Generative Description (FGD), the Head-Driven Phrase Structure Grammar (HPSG), the Lexical Functional Grammar (LFG), and the Extensible Dependency Grammar (XDG).",
        "Here, we propose Millstream systems, an approach from a formal language theoretic point of view which is based on the same ideas as XDG, but uses tree-generating modules of arbitrary kinds.",
        "Let us explain in slightly more detail what a Millstream system looks like.",
        "A Millstream system contains any number oftree generators, called its modules.",
        "Such a tree generator is any device that specifies a tree language.",
        "For example, a tree generator may be a context-free grammar, tree adjoining grammar, a finite-state tree automaton, a dependency grammar, a corpus, human input, etc.",
        "Even within a single Millstream system, the modules need not be of the same kind, since they are treated as \"black boxes\".",
        "The Millstream system links the trees generated by the modules by an interface consisting of logical formulas.",
        "Suppose that a Millstream system has k modules.",
        "Then the interface consists of interface rules in the form of logical expressions that establish links between the (nodes of the) trees ti,... ,tkthat are generated by the individual modules.",
        "Thus, a valid combination of trees is not just any collection of trees ti,... ,tk generated by the k modules.",
        "It also includes, between these structures, interconnecting links that represent their relationships and that must follow the rules expressed by the interface.",
        "Grammaticality, in terms of a Millstream system, means that the individual structures must be valid (i.e., generated by the modules) and are linked in such a way that all interface rules are logically satisfied.",
        "A Millstream system can thus be considered to perform independent concurrent derivations of autonomous modules, enriched by an interface that establishes links between the outputs of the modules, thus constraining the acceptable configurations.",
        "Millstream systems may, for example, be of interest for natural language understanding and natural language generation.",
        "Simply put, the task of natural language understanding is to construct a suitable semantic representation of a sentence that has been heard (phonology) and parsed (syntax).",
        "Within the framework of Millstream systems this corresponds to the problem where we are given a syntactic tree (and possibly a phonological tree if such a module is involved) and the goal is to construct an appropriate semantic tree.",
        "Conversely, natural language generation can be seen as the problem to construct an appropriate syntactic (and/or phonological) tree from a given semantic tree.",
        "In abstract terms, the situations just described are identical.",
        "We refer to the problem as the completion problem.",
        "While the current paper is mainly devoted to the introduction and motivation of Millstream systems, in (Bensch et al., 2010) the completion problem is investigated for so-called regular MSO Millstream systems, i.e. systems in which the modules are regular tree grammars (or, equivalently, finite tree automata) and the interface conditions are expressed in monadic second-order (MSO) logic.",
        "In Section 7, the results obtained so far are briefly summarised.",
        "Now, let us roughly compare Millstream systems with XDG.",
        "Conceptually, the k modules ofa Millstream system correspond to the k dimensions of an XDG.",
        "In an XDG, a configuration consists of dependency structures ti,..., tk.",
        "The interface of a Millstream system corresponds to the principles of the XDG.",
        "The latter are logical formulas that express conditions that the collection of dependency structures must fulfill.",
        "The major difference between the two formalisms lies in the fact that XDG inherently builds upon dependency structures, whereas the modules of a Millstream system are arbitrary tree generators.",
        "In XDG, each of ti,... ,tk is a dependency analysis of the sentence considered.",
        "In particular, they share the yield and the set of nodes (as the nodes of a dependency tree correspond to the words in the sentence analysed, and its yield is that sentence).",
        "Millstream systems do not make similar assumptions, which means that they may give rise to new questions and possibilities:",
        "• The purpose of a Millstream system is not necessarily the analysis of sentences.",
        "For example, a Millstream system with two modules could translate one language into another.",
        "For this, tree grammars representing the source and target languages could be used as modules, with an interface expressing that t2 is a correct translation of ti.",
        "This scenario makes no sense in the context of XDG, because the sentences represented by ti and t2 differ.",
        "Many similar applications of Millstream system may the thought of, for example correction or simplification of sentences.",
        "• As the modules may be arbitrary devices specifying tree languages, they contribute",
        "their own generative power and theoretical properties to the whole (in contrast to XDG, which does not have such a separation).",
        "This makes it possible to apply known results from tree language theory, and to study the interplay between different kinds of modules and interface logics.",
        "• The fact that the individual modules of a Millstream system may belong to different classes of tree generators could be linguistically valuable.",
        "For example, a Millstream system combining a dependency grammar module with a regular tree grammar module, could be able to formalise aspects of a given natural language that cannot be formalised by using only one of these formalisms.",
        "• For Millstream systems whose modules are generative grammar formalisms (such as regular tree grammars, tree-adjoining grammars and context-free tree grammars), it will be interesting to study conditions under which the Millstream system as a whole becomes generative, in the sense that well-formed configurations can be constructed in a step-by-step manner based on the derivation relations of the individual modules.",
        "Let us finally mention another, somewhat subtle difference between XDG and Millstream systems.",
        "In XDG, the interfaces are dimensions on their own.",
        "For example, an XDG capturing the English syntax and semantics would have three dimensions, namely syntax, semantics, and the syntax-semantics interface.",
        "An analysis of a sentence would thus consist of three dependency trees, where the third one represents the relation between the other two.",
        "In contrast, a corresponding Millstream system would only have two modules.",
        "The interface between them is considered to be conceptually different and establishes direct links between the trees that are generated by the two modules.",
        "One of our tasks (which is, however, outside the scope of this contribution) is a study of the formal relation between XDG and Millstream systems, to achieve a proper understanding oftheir similarities and differences.",
        "The rest of the paper is organised as follows.",
        "In the next section, we discuss an example illustrating the linguistic notions and ideas that Millstream systems attempt to provide a formal basis for.",
        "After some mathematical preliminaries, which are collected in Section 4, the formal definition of Millstream systems is presented in Section 5.",
        "Section 6 contains examples and remarks related to Formal Language Theory.",
        "Finally, Section 7 discusses preliminary results and future work."
      ]
    },
    {
      "heading": "3. Linguistical Background",
      "text": [
        "In this section, we discuss an example, roughly following (Jackendoff, 2002), that illustrates the linguistic ideas that have motivated our approach.",
        "Figure 1 shows the phonological, syntactical and semantical structure, depicted as trees (a), (b) and (c), respectively of the sentence Mary likes Peter.",
        "Trees are defined formally in the next section, for the time being we assume the reader to be familiar with the general notion of a tree as used in linguistics and computer science.",
        "Morphophonology",
        "Segmental structure meari laik s pitar",
        "wo q situation",
        "like fate mary { peterj-",
        "The segmental structure in the phonological tree (a) is the basic pronunciation of the sentence Mary likes Peter, where each symbol represents a speech sound.",
        "This string of speech sound symbols is structured into phonological words by mor-phophonolgy.",
        "The morphophonological structure in our example consists of the three full phonological words meari, laik, pitar and of the clitic s. The clitic is attached to the adjacent phonological word, thus forming a larger phonological constituent.",
        "The syntactical tree (b) depicts the syntactical constituents.",
        "The sentence S is divided into a noun phrase NP and a verb phrase VP.",
        "The verb phrase VP is divided into an inflected verb V and a noun phrase NP.",
        "The inflected verb consists of its uninflected form and its inflection, which refers, in our example, to the grammatical features present tense and third person singular.",
        "The semantical tree (c) depicts the semantical constituents.",
        "In our example, like is a function of type state and takes two arguments, namely mary and peter which are of type agent and patient.",
        "The structure of Mary likes Peter is not just the sum of its phonological, syntactical and semantical structures.",
        "It also includes the relationships between certain constituents in these tree structures.",
        "To illustrate these relationships we use indices in Figure 1.",
        "The sole role of the indices here is to express the linguistic relationships among coin-dexed constituents.",
        "The indices do not occur in the formalisation, where they are replaced by logical links relating the nodes that, in the figure, carry the same indices.",
        "The morphophonological word wi, for example, is linked with the noun phrase NPi in the syntactical tree and with the conceptual constituent mary(l9ent in the semantical tree.",
        "This illustrates that wi, NPi, and mary(l9ent are the corresponding morphophonological, syntactical and semantical representations of Mary, respectively.",
        "But there are also correspondences that concern only the phonological and syntactical trees, excluding the semantical tree.",
        "For example, the inflected word V2 in the syntactical structure corresponds to the phonological word w2, but has no link to the semantical structure whatsoever."
      ]
    },
    {
      "heading": "4. Preliminaries",
      "text": [
        "The set of non-negative integers is denoted by N, and N+ = N \\ {0}.",
        "For k G N, we let [k] = {1,..., k}.",
        "For a set S, the set of all nonempty finite sequences (or strings) over S is denoted by S+; if the empty sequence e is included, we write 5 *.",
        "As usual, Ai x • • • x Ak denotes the Cartesian product of sets Ai,..., Ak.",
        "The transitive and reflexive closure of a binary relation == Ç A x A on a set A is denoted by ==*.",
        "A ranked alphabet is a finite set S of pairs (f, k), where f is a symbol and k G N is its rank.",
        "We denote (f, k) by for simply by f if k is understood or of lesser importance.",
        "Further, we let = {f(n) G S | n = k}.",
        "We define trees over S in one of the standard ways, by identifying the nodes of a tree t with sequences of natural numbers.",
        "Intuitively, such a sequence shows that path from the root of the tree to the node in question.",
        "In particular, the root is the empty sequence e.",
        "Formally, the set T£ of trees over S consists of all mappings t : V(t) – S (called trees) with the following properties:",
        "• The set V (t) of nodes of t is a finite and nonempty prefix-closed subset of N+.",
        "Thus, for every node vi G V(t) (where i G N+), its parent v is in V(t) as well.",
        "• For every node v G V(t), if t(v) = f (k),then { i G N | vi G V ( t) } = [ k] .",
        "In other words, the children of v are v1, .",
        ".",
        ".",
        ", vk.",
        "Let t G TS be a tree.",
        "The root of t is the node e. For every node v G V(t), the subtree oft rooted at v is denoted by t/v.",
        "It is defined by V(t/v) = {v' G N* | vv' G V(t)} and, for all v' G V(t/v), (t/v)(v') = t(vv').",
        "We shall denote a tree t as f [ti,..., tk] if t(e) = f(k) and t/i = ti for i G [k].",
        "In the special case where k = 0 (i.e., V(t) = {e}), the brackets may be omitted, thus denoting t as f. For a set S oftrees, the set of all trees of the form f [ti,..., tk] such that f(k) G S and ti,..., tk G S is denoted by S(S).",
        "For a tuple T G T£, we let V(T) denote the set {(i, v) | i G [k] and v G V(ti)}.",
        "Thus, V(T) is the disjoint union of the sets V(ti).",
        "Furthermore, we let V(T, i) denote the ith component of this disjoint union, i.e., V(T, i) = {i} x V(ti) for all i G [k].",
        "A tree language is a subset of TS, for a ranked alphabet S, and a S-tree generator (or simply tree generator) is any sort of formal device G that determines a tree language L(G) Ç TS.",
        "A typical sort of tree generator, which we will use in our examples, is the regular tree grammar.",
        "Definition 1 (regular tree grammar).",
        "A regular tree grammar is a tuple G = (N, S, R, S) consisting of disjoint ranked alphabets N and S of nonterminals and terminals, where N = N(0), a finite set R of rules A – r, where A G N and r G Tsun, and an initial nonterminal S G N.",
        "Given trees t, t' G TSuN, there is a derivation step t = t' if t' is obtained from t by replacing a single occurrence of a nonterminal A with r, where A – r is a rule in R. The regular tree language generated by G is",
        "L(G) = {t G Ts | S == t}.",
        "It is well known that a string language L is context-free if and only if there is a regular tree language L', such that L = yield(L').",
        "Here, yield(L') = {yield(t) | t G L'} denotes the set of all yields of trees in L', the yield yield(t) of a tree t being the string obtained by reading its leaves from left to right."
      ]
    },
    {
      "heading": "5. Millstream Systems",
      "text": [
        "Throughout the rest of this paper, let A denote any type of predicate logic that allows us to make use of nary predicates symbols.",
        "We indicate the ar-ity of predicate symbols in the same way as the rank of symbols in ranked alphabets, i.e., by writing P(n) if P is a predicate symbol of arity n. The set of all well-formed formulas in A without free variables (i.e., the set of sentences of A) is denoted by Fa.",
        "If S is a set, we say that a predicate symbol P(n) is S-typed if it comes with an associated type (si,..., sn) G Sn.",
        "We write P: six • • • x sn to specify the type of P. Recall that an nary predicate 0 on D is a function 0 : Dn – {true, false}.",
        "Alternatively, 0 can be viewed as a subset of Dn, namely the set of all ..., dn) G Dn such that ..., dn) = true.",
        "We use these views interchangeably, selecting whichever is more convenient.",
        "Given a (finite) set P of predicate symbols, a logical structure (D; (0P)Pep) consists of a set D called the domain and, for each P(n) G P, a predicate 0P Ç Dn.",
        "If an existing structure Z is enriched with additional predicates (0P)Pep/ (where PnP' = 0), we denote the resulting structure by (Z; (0p)Pep/ ).",
        "In this paper, we will only consider structures with finite domains.",
        "To represent (tuples of) trees as logical structures, consider a ranked alphabet S, and let r be the maximum rank of symbols in S. A tuple T = (ti,..., tk) G T£ will be represented by the structure consisting of the domain V(T) and the predicates",
        "• For every i G [k], Vi = V(T, i).",
        "Thus, Vi(d) expresses that d is a node in ti (or, to be precise, that d represents a node of ti in the disjoint union V(T)).",
        "• For every g G S, labfl = {(i,v) G V(T) | i G [k] and ti(v) = g}.",
        "Thus, labg(d) expresses that the label ofd is g.",
        "expresses that d!",
        "is the jth child of d in one of the trees t\\,..., tk.",
        "In the following, we write d [j dd instead of [j (d, d').",
        "Note that, in the definition of |T |, we have blurred the distinction between predicate symbols and their interpretation as predicates, because this interpretation is fixed.",
        "Especially in intuitive explanations, we shall sometimes also identify the logical structure |T| with the tuple T it represents.",
        "To define Millstream systems, we start by formalising our notion of interfaces.",
        "The idea is that a tuple T = (ti,... ,tk ) of trees, represented by the structure |T|, is augmented with additional interface links that are subject to logical conditions.",
        "An interface may contain finitely many different kinds of interface links.",
        "Formally, the collection of all interface links of a given kind is viewed as a logical predicate.",
        "The names of the predicates are called interface symbols.",
        "Each interface symbol is given a type that indicates which trees it is intended to link with each other.",
        "For example, if we want to make use of ternary links called TI E, each linking a node of ti with a node of t3 and a node of t4, we use the interface symbol TIE : 1 x 3 x 4.",
        "This interface symbol would then be interpreted as a predicate V%e Ç V(T, 1) x V(T, 3) x V(T, 4).",
        "Each triple in would thus be an interface link of type TIE that links a node in V(ti) with a node in V(t3) and a node in V (t4).",
        "Definition 2 (interface).",
        "Let S be a ranked alphabet.",
        "An interface on T| (k G N) is a pair INT = (I, $), suchthat",
        "• I is a finite set of [k] typed predicate symbols called interface symbols, and",
        "• $ is a finite set of formulas in Fa that may, in addition to the fixed vocabulary of A, contain the predicate symbols in I and those of the structures |T| (where T G T|).",
        "These formulas are called interface conditions.",
        "A configuration (w.r.t.",
        "INT) is a structure C = (|T)ieJ), such that",
        "• C satisfies the interface conditions in $ (if each symbol / G I is interpreted as ipi).",
        "Note that several interfaces can always be combined into one by just taking the union of their sets of interface symbols and interface conditions.",
        "Definition 3 (Millstream system).",
        "Let S be a ranked alphabet and k G N. A Millstream system (MS, for short) is a system of the form MS = (Mi,..., Mk; INT) consisting of S-tree generators Mi,..., Mk, called the modules of MS, and an interface INT on T|.",
        "The language L(MS) generated by MS is the set of all configurations (|T|;(V>/)/ei) such that T G L(Mi) x ••• x L(Mk ).",
        "Sometimes we consider only some of the trees in these tuples.",
        "For this, if MS is as above and 1 < ii < • • • <i < k, we define the notation (|(ti,...,tfc)/ex|) G L(MS)}.",
        "The reader should note that, intentionally, Millstream systems are not a priori \"generative\".",
        "Even less so, they are \"derivational\" by nature.",
        "This is because there is no predefined notion of derivation that allows us to create configurations by means of a stepwise (though typically nondeterministic) procedure.",
        "In fact, there cannot be one, unless we make specific assumptions regarding the way in which the modules work, but also regarding the logic A and the form of the interface conditions that may be used.",
        "Similarly, as mentioned in the introduction, there is no predefined order of importance or priority among the modules."
      ]
    },
    {
      "heading": "6. Examples and Remarks Related to Formal Language Theory",
      "text": [
        "The purpose of this section is to indicate, by means of examples and easy observations, that Millstream systems are not only linguistically well motivated, but also worth studying from the point of view of computer science, most notably regarding their algorithmic and language-theoretic properties.",
        "While this kind of study is beyond the scope of the current article, part of our future research on Millstream systems will be devoted to such questions.",
        "Example 1.",
        "Let A be ordinary first-order logic with equality, and consider the Millstream system MS over S = {o(2), a(0), 6(0), c(0), d(0)} which consists of two identical modules Mi = M2 that simply generate (e.g., using the regular tree grammar with the single nonterminal S and the",
        "V (labz(x) A labz(y)).",
        "The first interface condition expresses that all and only the leaves of both trees are linked.",
        "The second expresses that no leaf is linked with two or more leaves.",
        "In effect, this amounts to saying that B Ij is a bijection between the leaves of the two trees.",
        "The third interface condition expresses that this bijection is label preserving.",
        "Altogether, this amounts to saying that the yields of the two trees are permutations of each other; see Figure 2.",
        "Now, let us replace the modules by slightly more interesting ones.",
        "For a string w over {A, B, a, b, c, d}, let w denote any tree over {o(2), A(0), B(0),a(0),b(0),c(0),d(0)} with yield(w) = w. (For example, we may choose w to be the left comb whose leaf symbols are given by w.) Let the Millstream system MS' be defined as MS, but using the modules Mi = ({A, B, C, D}, S, Ri, A) and M2 = ({A, B}, S, R2, A) with the following rules:",
        "C – cC | cD, D – dD | d}, R2 = {A – acA | acB, B – bdB | bd}.",
        "Thus, M ' and M2' are the \"standard\" grammars (written as regular tree grammars) that generate the regular languages {akb cmdn | k,l,m,n > 1} and {(ac)m(bd)n | m, n > 1}.",
        "The interface makes sure that LM1 xM2 (MS') contains only those pairs of trees t , t2 in which yield(t ) is a permutation of yield(t2).",
        "As a consequence, it follows that yield(LM1 (MS)) = {ambncmdn | m, n > 1}.",
        "The next example discusses how top-down tree transductions can be implemented as Millstream systems.",
        "Example 2 (top-down tree transduction).",
        "Recall that a tree transduction is a binary relation t Ç Ts x Ts', where S and S' are ranked alphabets.",
        "The set of trees that a tree t G Ts is transformed into is given by t (t) = {t' G TS' | (t, t') G t}.",
        "Obviously, every Millstream system of the form MS = (Mi, M2; INT ) defines a tree transduction, namely LMlxM2 (MS).",
        "Let us consider a very simple instance of a deterministic top-down tree transduction t (see, e.g., (Gecseg and Steinby, 1997; Fulop and Vogler, 1998; Comon et al., 2007) for definitions and references regarding top-down tree transductions), where S = S' = {/(2), g(2), a(0)}.",
        "We transform a tree t G Ts into the tree obtained from t by interchanging the subtrees of all topmost /s (i.e., of all nodes that are labelled with / and do not have an ancestor that is labelled with / as well) and turning the / at hand into a g. To accomplish this, a top-down tree transducer would use two states, say swap and copy, to traverse the input tree from the top down, starting in state swap.",
        "Whenever an / is reached in this state, its subtrees are interchanged and the traversal continues in parallel on each of the subtrees in state COPY.",
        "The only purpose of this state is to copy the input to the output without changing it.",
        "Formally, this would be expressed by the following term rewrite rules, viewing the states as symbols of rank 1 :",
        "swap [a] coPY[a] a, a.",
        "(We hope that these rules are intuitive enough to be understood even by readers who are unfamiliar with top-down tree transducers, as giving the formal definition of top-down tree transducers would be out of the scope of this article.)",
        "We mimic the behaviour of the top-down tree transducer using a Millstream system with interface symbols SWAP : 1 x 2 and COPY : 1 x 2.",
        "Since the modules simply generate Ts, they are not explicitly discussed.",
        "The idea behind the interface is that an interface link labelled q G {swap, copy} links a node v in the input tree with a node v' in the output tree if the simulated computation of the tree transducer reaches v in state q, resulting in node v' in the output tree.",
        "First, we specify that the initial state is SWAP, which simply means that the roots of the two trees are linked by a swap link:",
        "where rooti is defined as rooti (x) = Vi(x) A $y : y [i x.",
        "It expresses that X is the root of tree i.",
        "The next interface condition corresponds to the first rule of the simulated top-down tree transducer:",
        "C0PY(Xi,y2) A C0PY(x2,yi).",
        "In a similar way, the remaining rules are turned into interface conditions, e.g.,",
        "C0PY(Xi,yi) A C0PY(x2,y2).",
        "The reader should easily be able to figure out the remaining interface conditions required.",
        "One of the elements of L(MS) is shown in Figure 3.",
        "It should not be difficult to see that, indeed,",
        "LMlxM2 (MS ) = t .",
        "Extending the previous example, one can easily see that all top-down and bottom-up tree trans-ductions can be turned into Millstream systems in a way similar to the construction above.",
        "A similar remark holds for many other types of tree transductions known from the literature.",
        "Most notably, monadic second-order definable tree trans-ductions (Engelfriet and Maneth, 1999; Engelfriet and Hoogeboom, 2001; Engelfriet and Maneth, 2003) can be expressed as Millstream systems.",
        "Since the mentioned types of tree transductions are well studied, and much is known about their algorithmic properties, future research on Millstream systems should investigate the relationship between different types of tree transductions and Millstream systems in detail.",
        "In particular, it should be tried to formulate requirements on the interface conditions that can be used to obtain characterisations of various classes of tree transductions.",
        "We note here that results of this type would not only be interesting from a purely mathematical point of view, since tree transducers have turned out to be a valuable tool in, for example, machine translation (Knight and Graehl, 2005; May and Knight, 2006; Graehl et al., 2008)."
      ]
    },
    {
      "heading": "7. Preliminary Results and Future Work",
      "text": [
        "Millstream systems, as introduced in this article, are formal devices that allow to model situations in which several tree-generating modules are interconnected by logical interfaces.",
        "In a forthcoming paper (Bensch et al., 2010), we investigate the theoretical properties of regular MSO Millstream systems, i.e., Millstream systems in which the modules are regular tree grammars and the logic used is monadic second-order logic.",
        "In particular, we study the so-called completion problem.",
        "Given a Millstream system with k modules and l < k known trees til,..., ti; (1 < ii < • • • < %\\ < k), the task is to find a completion, i.e., a configuration whose i j th tree is tij for all j G [l].",
        "Thus, if viewed as a pure decision problem, the completion problem corresponds to the membership problem for LMii x-xMH (MS).",
        "To be useful in applications, algorithms solving the completion problem should, of course, be required to explicitly construct a completion rather than just answering yes.",
        "Let us briefly summarize the results of (Bensch et al., 2010).",
        "1.",
        "In general, the completion problem is unde-cidable for k – l > 2 even in the case where only the use of first-order logic is permitted.",
        "This can be shown by reducing Post's correspondence problem (PCP) to the emptiness problem for a regular FO Millstream system with k = 2.",
        "The Millstream system constructed is somewhat similar to the one in Example 1, as it establishes bijective correspondences between the nodes of two trees (that represent the two parts of a solution to a PCP instance).",
        "2.",
        "If there are no direct links between unknown trees (i.e., |{ji,...,jm} \\ < 1 for each interface symbol I : j x • • • x then the completion problem is solvable for all regular MSO Millstream systems.",
        "3.",
        "Applying some well-known results, the completion problem is solvable for all regular MSO Millstream systems for which L(MS) is of bounded tree width.",
        "Thus, it is of interest to establish conditions that guarantee the configurations in L(MS ) to be of bounded tree width.",
        "Two such conditions, are given in (Bensch et al., 2010).",
        "Roughly speaking, they require that the links respect the structure of the trees.",
        "Let us informally describe one of them, called nestedness.",
        "Say that a link I'(ui,..., um) is directly below a link I(vi,..., v) if there are i, j such that Uj is a descendant of viand none of the nodes in between carries a link.",
        "Now, fix a constant h. A configuration is nested if the roots are linked with each other and the following hold for every link A = I(vi,..., v) :",
        "(a) There are at most h links I' (ui,..., um) directly below A.",
        "(b) Each of the nodes uj in (a) is a descendant of one of the nodes vi.",
        "As mentioned above, L(MS) is of bounded tree width if its configurations are nested (with respect to the same constant h).",
        "Nestedness, and also the second sufficient condition for bounded tree width studied in (Bensch et al., 2010) restrict the configurations themselves.",
        "While such conditions may be appropriate in many practical cases (where one knows what the configurations look like), future research should also attempt to find out whether it is possible to put some easily testable requirements on the interface conditions in order to force the configurations to be of bounded tree width.",
        "Note that, since the property of being of tree width at most d is expressible in monadic second-order logic, one can always artificially force the configurations of a given MSO Millstream system to be of bounded tree width, but this is not very useful as it would simply exclude those configurations whose tree width is greater than the desired constant d, thus changing the semantics of the given Millstream system in a usually undesired manner.",
        "Future work should also investigate properties that make it possible to obtain or complete configurations in a generative way.",
        "For example, for regular MSO Millstream systems with interface conditions of a suitable type, it should be possible to generate the configurations in L(MS) by generating the k trees in a parallel top-down manner, at the same time establishing the interface links.",
        "Results of this kind could also be used for solving the completion problem in an efficient manner.",
        "In general, it is clear that efficiency must be an important aspect of future theoretical investigations into Millstream systems.",
        "In addition to theoretical results, a good implementation of Millstream systems is needed in order to make it possible to implement nontrivial examples.",
        "While this work should, to the extent possible, be application independent, it will also be necessary to seriously attempt to formalise and implement linguistic theories as Millstream systems.",
        "This includes exploring various such theories with respect to their appropriateness.",
        "To gain further insight into the usefulness and limitations of Millstream systems for Computational Linguistics, future work should elaborate if and how it is possible to translate formalisms such as HPSG, LFG, CCG, FDG and XDG into Millstream systems."
      ]
    },
    {
      "heading": "Acknowledgments",
      "text": [
        "We thank Dot and Danie van der Walt for providing us with a calm and relaxed atmosphere at Millstream Guest House in Stellenbosch (South Africa), where the first ideas around Millstream systems were born in April 2009.",
        "Scientifically, we would like to thank Henrik Bjorklund, Stephen j. Hegner, and Brink van der Merwe for discussions and constructive input.",
        "Furthermore, we would like to thank one of the referees for valuable comments."
      ]
    }
  ]
}
