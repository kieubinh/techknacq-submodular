{
  "info": {
    "authors": [
      "Xuezhe Ma",
      "Xiaotian Zhang",
      "Hai Zhao",
      "Bao-Liang Lu"
    ],
    "book": "Proceedings of the Joint Conference on Chinese Language Processing",
    "id": "acl-W10-4146",
    "title": "Dependency Parser for Chinese Constituent Parsing",
    "url": "https://aclweb.org/anthology/W10-4146",
    "year": 2010
  },
  "references": [
    "acl-C04-1010",
    "acl-H91-1060",
    "acl-J03-4003",
    "acl-J04-4004",
    "acl-N07-1051",
    "acl-P04-1054",
    "acl-P05-1022",
    "acl-P05-1067",
    "acl-P06-2089",
    "acl-P08-1067",
    "acl-P08-1109",
    "acl-P95-1037",
    "acl-W98-1115"
  ],
  "sections": [
    {
      "text": [
        "Xuezhe Ma, Xiaotian Zhang, Hai Zhao, Bao-Liang Lu",
        "Center for Brain-Like Computing and Machine Intelligence Department of Computer Science and Engineering, Shanghai Jiao Tong University MOE-Microsoft Key Laboratory for Intelligent Computing and Intelligent Systems Shanghai Jiao Tong University, 800 Dong Chuan Rd., Shanghai 200240, China {xuezhe.ma,xtian.zh}@gmail.com, {zhaohai,blu}@cs.sjtu.edu.cn",
        "This paper presents our work for participation in the 2010 CIPS-ParsEval shared task on Chinese syntactic constituent tree parsing.",
        "We use dependency parsers for this constituent parsing task based on a formal dependency-constituent transformation method which converts dependency to constituent structures using a machine learning approach.",
        "A conditional random fields (CRF) tagger is adopted for head information recognition.",
        "Our experiments shows that acceptable parsing and head tagging results are obtained on our approaches."
      ]
    },
    {
      "heading": "1. Introduction",
      "text": [
        "Constituent parsing is a challenging but useful task aiming at analyzing the constituent structure of a sentence.",
        "Recently, it is widely adopted by the popular applications of natural language processing techniques, such as machine translation (Ding and Palmer, 2005), synonym generation (Shinyama et al., 2002), relation extraction (Culotta and Sorensen, 2004) and lexical resource augmentation (Snow et al., 2004).",
        "A great deal of researches have been conducted on this topic with promising progress (Magerman, 1995; Collins, 1999; Charniak, 2000; Charniak and Johnson, 2005; Sagae and Lavie, 2006; Petrov and Klein, 2007; Finkel et al., 2008; Huang, 2008).",
        "Recently, several effective dependency parsing algorithms has been developed and shows excellent performance in the responding parsing tasks (McDonald, 2006; Nivre and Scholz, 2004).",
        "Since graph structures of dependency and constituent parsing over a sentence are strongly related, they should be benefited from each other.",
        "It is true that constituent parsing may be smoothly altered to fit dependency parsing.",
        "However, due to the inconvenience from dependency to constituent structure, it is not so easy to adopt the latter",
        "* This work is partially supported by the National Natural Science Foundation of China (Grant No.",
        "60903119, Grant No.",
        "60773090 and Grant No.",
        "90820018), the National Basic Research Program of China (Grant No.",
        "2009CB320901), and the National High-Tech Research Program of China (Grant No.2008AA02Z315).",
        "for the former.",
        "This means that most of these popular and effective dependency parsing models can not be directly extended to constituents parsing.",
        "This paper proposes an formal method for such a conversion which adoptively solves the problem of ambiguity.",
        "Based on the proposed method, a dependency parsing algorithm can be used to solve tasks of constituent parsing.",
        "A part of Tsinghua Chinese Treebank (TCT) (Zhou, the training and test data for the 2010 CIPS-ParsEval shared task.",
        "Being different from the annotation scheme of the Penn Chinese Treebank (CTB), the TCT has another annotation scheme, which combines both the constituent tree structure and the head information of each constituent.",
        "Specifically, there can be always multiple heads in a constituent.",
        "For the 2010 CIPS-ParsEval shared task, only segmented sentences are given in test data without part-of-speech (POS) tags, a POS tagger is required for this task.",
        "Therefore, we divide our system into three major cascade stages, namely POS tagging, constituent parsing and head information recognition, which are connected as a pipeline of processing.",
        "For the POS tagging, we adopt the SVMTool tagger (Gimenez and Marquez, 2004); for the constituent parsing, we use the Maximum Spanning Tree (MST) (McDonald, 2006) parser combined with a dependencies-to-constituents conversion; and for the head information recognition, we apply a sequence labeling method to label head information.",
        "Section 2 presents the POS tagger in our approach.",
        "The details of our parsing method is presented in section 3.",
        "The head information recognition is described in section 4.",
        "The data and experimental results are shown in section 5.",
        "The last section is the conclusion and future work."
      ]
    },
    {
      "heading": "2. POS Tagging",
      "text": [
        "The SVMTool tagger (Gimenez and Marquez, 2004) is used as our POS tagging tool for the first stage.",
        "It is a POS tagger based on SVM classifier, written in Perl.",
        "It can be trained on standardized collection of hand POS-tagged sentences.",
        "It uses SVM-Light toolkit as the",
        "http://www.cs.cornell.edu/People/tj/ svm_light/.",
        "implementation of SVM classifier and achieves 97.2% accuracy on the Penn English Treebank.",
        "We test the accuracy of the SVMTool tagger on the development set of the TCT (see section 5.1) and achieve accuracy of 94.98%."
      ]
    },
    {
      "heading": "3. Parsing Constituents Using Dependency Parsing Algorithms",
      "text": [
        "The conversion from constituent to dependency structures is straightforward with some specific rules based on linguistic theory.",
        "However, there is not an effective method which can accurately accomplish the opposite transformation, from the dependency structures back into constituent ones due to the existence of ambiguity introduced by the former transformation.",
        "Aimed at the above difficulty, our solution is to introduce a formal dependency structure and a machine learning method so that the ambiguity from dependency structures to constituent structures can be dealt with automatically.",
        "We first transform constituent trees into the form that all productions for all subtrees are either unary or binary, before converting them to dependency structures.",
        "Due to the binarization, the target constituent trees of the conversion from dependency back to constituent structures are binary branching.",
        "This binarization is done by the left-factoring approach described in (Charniak et al., 1998; Petrov and Klein, 2008), which converts each production with n children, where n > 2, into n â€“ 1 binary productions.",
        "Additional non-terminal nodes introduced in this conversion must be clearly marked.",
        "Transforming the binary branching trees into arbitrary branching trees is accomplished by using the reverse process.",
        "We train a classifier to decide which dependency edges should be transformed first at each step of conversion automatically.",
        "After the binarization described in the previous section, only one dependency edge should be transformed at each step.",
        "Therefore the classifier only need to decide which dependency edge should be transformed at each step during the conversion.",
        "As a result of the projective property of constituent structures, this problem only happens in the cases that modifiers are at both sides of their heads.",
        "And for these cases that one head has multiple modifiers, only the leftmost or the rightmost dependency edge could be transformed first.",
        "Therefore, a binary classifier is always enough for the disambiguation at each step.",
        "Support Vector Machine (SVM) is adopted as the learning algorithm for the binary classifier and the features are in Table 1.",
        "The rest problem is that we should restore the label for each constituent when dependency structure trees are again converted to constituent structures.",
        "The problem is solved by storing constituent labels as labels of dependency types.",
        "The label for each constituent is just used as the label dependency type for each dependency edge.",
        "The conversion method is tested on the development, too.",
        "Constituent trees are firstly converted into dependency structures using the head rules described in (Li and Zhou, 2009).",
        "Then, we transform those trees back to constituent structure using our conversion measures to evaluate the performance of the conversion method.",
        "Our conversion method obtains 99.76% precision and 99.76% recall, which is a great performance.",
        "Based on the proposed conversion method, dependency parsing algorithms can be used for constituent parsing.",
        "This can be done by firstly transforming training data from constituents into dependencies and extract training instances to train a binary classifier for dependency-constituent conversion, then training a dependency parser using the transformed training data.",
        "On the test step, parse the test data using the dependency parser and convert output dependencies to constituents using the binary classifier trained in advance.",
        "In addition, since our conversion method needs dependency types, labeled dependency parsing algorithms are always required.",
        "1.",
        "Word form of the parent",
        "2.",
        "Part-of-speech (POS) tag of the parent",
        "3.",
        "Word form of the leftmost child",
        "4.",
        "POS tag of the leftmost child",
        "5.",
        "Dependency label of the leftmost child",
        "6.",
        "Word form of the rightmost child",
        "7.",
        "POS tag of the rightmost child",
        "8.",
        "Dependency label of the rightmost child",
        "9.",
        "Distance between the leftmost child and",
        "the parent",
        "10.",
        "Distance between the rightmost child",
        "and the parent"
      ]
    },
    {
      "heading": "4. Head Information Recognition",
      "text": [
        "Since head information of each constituent is always determined by the syntactic label of its own and the categories of the constituents in subtrees, the order and relations between the productions of each constituent strongly affects the head information labeling.",
        "It is natural to apply a sequential labeling strategy to tackle this problem.",
        "The linear chain CRF model is adopted for the head information labeling, and the implementation of CRF model we used is the 0.53 version of the CRF++ toolkit.",
        "We assume that head information is independent between different constituents, which could decrease the length of sequence to be labeled for the CRF model.",
        "We use a binary tag set to determine whether a constituent is a head, e.g. H for a head, O for a non-head, which is the same as (Song and Kit, 2009).",
        "The features in Table 2 are used for CRF model.",
        "To test our CRF tagger, we remove all head information from the development set, and use the CRF tagger to retrieve the head.",
        "The result strongly proves its effectiveness by showing an accuracy of 99.52%."
      ]
    },
    {
      "heading": "5. Experiments",
      "text": [
        "All experiments reported here were performed on a Core 2 Quad 2.83Ghz CPU with 8GB of RAM.",
        "There are 37,219 short sentences in official released training data for the first subtask and 17,744 long sentences for the second subtask (for the second sub-task, one line in the training data set may contain more than one sentence).",
        "We split one eighth of the data as our development set.",
        "On the other hand, there are both 1,000 sentences in released test data for the first and second sub-tasks.",
        "As mentioned in section 3, constituent parsing is done by using a dependency parser combined with our conversion method.",
        "We choose the second order maximum spanning tree parser with k-best online large-margin learning algorithm (Crammer and Singer, is in the form of an open source program implemented in C++.",
        "The features used for MST parser is the same as (McDonald, 2006).",
        "Both the single-stage and two-stage dependency type labeling approaches are applied in our experiments.",
        "For the two-stage dependency type labeling, The linear chain CRF model is adopted instead of the first-order Markov model used in (McDonald, 2006).",
        "The features in Table 3 are used for CRF model.",
        "It takes about 7 hours for training the MST parser, and about 24 hours for training the CRF model.",
        "As mentioned in section 3.1.2, SVM is adopted as the learning algorithm for the binary classifier.",
        "There are about 40,000 training instances in the first subtask and about 80,000 in the second sub-task.",
        "Development sets are used for tuning parameter C of SVM and the training time of the SVM classifier for the first and second subtask is about 8 and 24 hours, respectively.",
        "However, the conversion from dependencies to constituents is extremely fast.",
        "Converting more than 2,000 trees takes less than 1 second.",
        "To transform the constituent trees in training set into dependency structures, we use the head rules of (Li and",
        "Zhou, 2009).",
        "The evaluation metrics used in 2010 CIPS-ParsEval shared task is shown in following:"
      ]
    },
    {
      "heading": "1.. syntactic parsing",
      "text": [
        "Pr *s*on _ number of correct constituents in proposed parse",
        "number of constituents in proposed parse",
        "Recall _ number of correct constituents in proposed parse",
        "number of constituents in standard parse",
        "F1 _ 2*Precision*Recall",
        "Precision+Recall",
        "1.",
        "Constituent label of the constituent",
        "2.",
        "Constituent label of each child of",
        "the constituent.",
        "3.",
        "Wether it is a terminal for each",
        "child of the constituent",
        "4.",
        "The leftmost word in the sentence",
        "of each child of the constituent.",
        "5.",
        "The leftmost word in the sentence",
        "of each child of the constituent.",
        "tion.",
        "1.",
        "Word form and POS tag of the parent.",
        "2.",
        "Word form and POS tag of each child.",
        "3.",
        "POS tag of the leftmost child of each child.",
        "4.",
        "POS tag of the rightmost child of each child.",
        "5.",
        "Dependency label between the parent and",
        "its parent",
        "Table 4: Official scores of syntactic parsing.",
        "single-stage and two-stage are for single-stage and two-stage dependency type labeling approached, respectively.",
        "The correctness of syntactic constituents is judged based on the following two criteria:",
        "(a) the boundary, the POS tags of all the words in the constituent and the constituent type label should match that of the constituent in the gold standard data.",
        "(b) the boundary, the POS tags of all the words in the constituent, the constituent type label and head child index of the constituent should match that of the constituent in the gold standard data.",
        "(if the constituent contains more than one head child index, at least one of them should be correct.)"
      ]
    },
    {
      "heading": "2.. event pattern recognition",
      "text": [
        "Micro R _ number of all correct events in proposed parse",
        "number of all events in standard parse",
        "Macro R _ sum of recall of different target verbs",
        "number of target verbs",
        "Here the event pattern of a sentence is defined to be the sequence of event blocks controlled by the target verb in a sentence.",
        "The criteria for judging the correctness of event pattern recognition is:",
        "â€¢ the event pattern should be completely consistent with gold standard data (information of each event block should completely match and the order of event blocks should also consistent).",
        "There are both two submissions for the first and second sub-tasks.",
        "One is using the single-stage dependency type labeling and the other is two-stage.",
        "Since there are some mistakes in our models for the second sub-task, the results of our submissions are unexpectedly poor and are not shown in this paper.",
        "All the results in this paper is reported by the official organizer of the 2010 CIPS-ParsEval shared task.",
        "The accuracy of POS tagging on the official test data is 92.77%.",
        "The results of syntactic parsing for the first subtask is shown in Table 4.",
        "And results of event recognition is shown in Table 5.",
        "From the Table 4 and 5, we can see that our system achieves acceptable parsing and head tagging results, and the results of event recognition is also reasonably high.",
        "We comparison our approach with previous works of 2009 CIPS-ParsEval shared task.",
        "The data set and evaluation measures of 2009 CIPS-ParsEval shared task, which are quite different from that of 2010 CIPS-ParsEval shared task, are used in this experiment for the comparison purpose.",
        "Table 6 shows the comparison.",
        "We compare our method with several main parsers on the official data set of 2009 CIPS-ParsEval shared task.",
        "All these results are evaluated with official evaluation tool by the 2009 CIPS-ParsEval shared task.",
        "Bikel's parser (Bikel, 2004) in Table 6 is a implementation of Collins' head-driven statistical model (Collins, 2003).",
        "The Stanford parser is based on the factored model described in (Klein and Manning, 2002).",
        "The Charniak's parser is based on the parsing model described in (Charniak, 2000).",
        "Berkeley parser is based on unlexicalized parsing model described in (Petrov and Klein, 2007).",
        "According to Table 6, the performance of our method is better than all the four parsers described above.",
        "Chen et al.",
        "(2009) and Jiang et al.",
        "(2009) both make use of combination of multiple parsers and achieve considerably high performance.",
        "http://www.cis.upenn.edu/~dbikel/ software.html",
        "http://nlp.stanford.edu/software/ lex-parser.shtml/",
        "without head",
        "with head",
        "Precision",
        "Recall",
        "F1",
        "Precision",
        "Recall",
        "F1",
        "single-stage",
        "77.78",
        "78.13",
        "77.96",
        "75.78",
        "76.13",
        "75.95",
        "two-stage",
        "78.61",
        "78.76",
        "78.69",
        "76.61",
        "76.75",
        "76.68",
        "Micro-R",
        "Macro-R",
        "single-stage",
        "62.74",
        "62.47",
        "two-stage",
        "63.14",
        "62.48"
      ]
    },
    {
      "heading": "6. Conclusion",
      "text": [
        "This paper describes our approaches for the parsing task in CIPS-ParsEval 2010 shared task.",
        "A pipeline system is used to solve the POS tagging, constituent parsing and head information recognition.",
        "SVMTool tagger is used for the POS tagging.",
        "For constituent parsing, we proposes a conversion based method, which can use dependency parsers for constituent parsing.",
        "MST parser is chosen as our dependency parser.",
        "A CRFtaggeris usedforheadinformationrecognition.",
        "The official scores indicate that our system obtains acceptable results on constituent parsing and high performance on head information tagging.",
        "One of future work should apply parser combination and reranking approaches to leverage this in producing more accurate parsers.",
        "F1",
        "Bikel's parser",
        "81.8",
        "Stanford parser",
        "83.3",
        "Charniak's parser",
        "83.9",
        "Berkeley parser",
        "85.2",
        "this paper",
        "85.6",
        "Jiang et al. (2009).",
        "87.2",
        "Chen et al. (2009).",
        "88.8"
      ]
    }
  ]
}
