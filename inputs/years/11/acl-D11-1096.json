{
  "info": {
    "authors": [
      "Danilo Croce",
      "Alessandro Moschitti",
      "Roberto Basili"
    ],
    "book": "EMNLP",
    "id": "acl-D11-1096",
    "title": "Structured Lexical Similarity via Convolution Kernels on Dependency Trees",
    "url": "https://aclweb.org/anthology/D11-1096",
    "year": 2011
  },
  "references": [
    "acl-A00-2018",
    "acl-C00-2137",
    "acl-C02-1150",
    "acl-C08-1050",
    "acl-C08-1121",
    "acl-C10-1059",
    "acl-C92-1056",
    "acl-D09-1002",
    "acl-E06-1015",
    "acl-H05-1052",
    "acl-H05-1091",
    "acl-J06-1003",
    "acl-J07-2002",
    "acl-J08-2003",
    "acl-J98-1004",
    "acl-N04-3012",
    "acl-N06-1037",
    "acl-N10-1146",
    "acl-P02-1034",
    "acl-P03-1004",
    "acl-P04-1043",
    "acl-P04-1054",
    "acl-P05-1024",
    "acl-P05-1050",
    "acl-P06-1006",
    "acl-P06-1117",
    "acl-P06-2010",
    "acl-P07-1098",
    "acl-P94-1019",
    "acl-W02-1010",
    "acl-W03-1012",
    "acl-W04-3222",
    "acl-W04-3233",
    "acl-W05-0601",
    "acl-W05-1203",
    "acl-W06-2902",
    "acl-W08-2123",
    "acl-W10-2910"
  ],
  "sections": [
    {
      "text": [
        "Danilo Croce Alessandro Moschitti Roberto Basili",
        "DII DISI DII",
        "00133 Roma, Italy 38123 Povo (TN), Italy 00133 Roma, Italy",
        "croce@info.uniroma2.it moschitti@disi.unitn.it basili@info.uniroma2.it",
        "A central topic in natural language processing is the design of lexical and syntactic features suitable for the target application.",
        "In this paper, we study convolution dependency tree kernels for automatic engineering of syntactic and semantic patterns exploiting lexical similarities.",
        "We define efficient and powerful kernels for measuring the similarity between dependency structures, whose surface forms of the lexical nodes are in part or completely different.",
        "The experiments with such kernels for question classification show an unprecedented results, e.g. 41% of error reduction of the former state-of-the-art.",
        "Additionally, semantic role classification confirms the benefit of semantic smoothing for dependency kernels."
      ]
    },
    {
      "heading": "1. Introduction",
      "text": [
        "A central topic in Natural Language Processing is the design of lexical and syntactic features suitable for the target application.",
        "The selection of effective patterns composed of syntactic dependencies and lexical constraints is typically a complex task.",
        "Additionally, the availability of training data is usually scarce.",
        "This requires the development of generalized features or the definition of semantic similarities between them, e.g. as proposed in (Resnik, 1995; Jiang and Conrath, 1997; Schtze, 1998; Pedersen et al., 2004a; Bloehdorn and Moschitti, 2007b; Davis et al., 2007) or in semi-supervised settings, e.g. (Chapelle et al., 2006).",
        "A semantic similarity can be defined at structural level over a graph, e.g. (Freeman, 1977; Bunke and Shearer, 1998; Brandes, 2001; Zhao et al., 2009), as well as combining structural and lexical similarity",
        "Pedersen et al., 2004a; Budanitsky and Hirst, 2006).",
        "More recent research also focuses on mechanisms to define if two structures, e.g. graphs, are enough similar, as explored in (Mihalcea, 2005; Zhao et al., 2009; Fürstenau and Lapata, 2009; Navigli and Lapata, 2010).",
        "On one hand, previous work shows that there is a substantial lack of automatic methods for engineering lexical/syntactic features (or more in general syntactic/semantic similarity).",
        "On the other hand, automatic feature engineering of syntactic or shallow semantic structures has been carried out by means of structural kernels, e.g. (Collins and Duffy, 2002; Kudo and Matsumoto, 2003; Cumby and Roth, 2003; Cancedda et al., 2003; Daumé III and Marcu, 2004; Toutanova et al., 2004; Shen et al., 2003; Gliozzo et al., 2005; Kudo et al., 2005; Titov and Henderson, 2006; Zelenko et al., 2002; Bunescu and Mooney, 2005; Zhang et al., 2006).",
        "The main idea of structural kernels is to generate structures that in turn represent syntactic or shallow semantic features.",
        "Most notably, the work in (Bloehdorn and Moschitti, 2007b) encodes lexical similarity in such kernels.",
        "This is essentially the syntactic tree kernel (STK) proposed in (Collins and Duffy, 2002) in which syntactic fragments from constituency trees can be matched even if they only differ in the leaf nodes (i.e. they have different surface forms).",
        "This implies matching scores lower than 1, depending on the semantic similarity of the corresponding leaves in the syntactic fragments.",
        "Although this kernel achieves state-of-the-art performance in NLP tasks, such as Question Classification (Bloehdorn and Moschitti, 2007b) and Textual Entailment (Mehdad et al., 2010), it offers clearly possibility of improvement: (i) better possibility to exploit semantic smoothing since, e.g., trivially STK only matches the syntactic structure apple/orange when comparing the big beautiful apple to a nice large orange; and (ii) STK cannot be effectively applied to dependency structures, e.g. see experiments and motivation in (Moschitti, 2006a).",
        "Additionally, to our knowledge, there is no previous study that clearly describes how dependency structures should be converted in trees to be fully and effectively exploitable by convolution kernels.",
        "Indeed, although the work in (Culotta and Sorensen, 2004) defines a dependency tree also using node similarity, it is not a convolution kernel: this results in a much poorer feature space.",
        "In this paper, we propose a study of convolution kernels for dependency structures aiming at jointly modeling syntactic and lexical semantic similarity.",
        "More precisely, we define several dependency trees exploitable by the Partial Tree Kernel (PTK) (Mos-chitti, 2006a) and compared them with STK over constituency trees.",
        "Most importantly, we define an innovative and efficient class of kernels, i.e. the Smoothed Partial Tree Kernels (SPTKs), which can measure the similarity of structural similar trees whose nodes are associated with different but related lexicals.",
        "Given the convolution nature of such kernels any possible node path of lexicals provide a contribution smoothed by the similarity accounted by its nodes.",
        "The extensive experimentation on two datasets of question classification (QC) and semantic role labeling (SRL), shows that: (i) PTK applied to our dependency trees outperforms STK, demonstrating that dependency parsers are fully exploitable for feature engineering based on structural kernels; (ii) SPTK outperforms any previous kernels achieving an unprecedented result of 41% of error reduction with respect to the former state-of-the-art on QC; and (iii) the experiments on SRL confirm that the approach can be applied to different tasks without any tuning and again achieving state-of-the-art accuracy.",
        "In the reminder of this paper, Section 2 provides the background for structural and lexical similarity kernels.",
        "Section 3 introduces SPTK.",
        "Section 4 provides our representation models for dependency trees.",
        "Section 5 presents the experimental evaluation for QC and SRL.",
        "Section 6 derives the conclusions."
      ]
    },
    {
      "heading": "2. Kernel Background",
      "text": [
        "In kernel-based machines, both learning and classification algorithms only depend on the inner product between instances.",
        "This in several cases can be efficiently and implicitly computed by kernel functions by exploiting the following dual formulation: Yji=i..i yi®i<f>(oi)(f)(o) + b = 0, where a and o are two objects, ( is a mapping from the objects to feature vectors xIi and ((oi)((o) = K(oi, o) is a kernel function implicitly defining such mapping.",
        "In case of structural kernels, K determines the shape of the substructures describing the objects above.",
        "The most general kind of kernels used in NLP are string kernels, e.g. (Shawe-Taylor and Cristianini, 2004), the Syntactic Tree Kernels (Collins and Duffy, 2002) and the Partial Tree Kernels (Moschitti, 2006a).",
        "The String Kernels (SK) that we consider count the number of subsequences shared by two strings of symbols, s1 and s2.",
        "Some symbols during the matching process can be skipped.",
        "This modifies the weight associated with the target substrings as shown by the following SK equation:",
        "d(I) = i\\u\\ – i1 + 1 (distance between the first and last character) and A G [0,1] is a decay factor.",
        "It is worth noting that: (a) longer subsequences receive lower weights; (b) some characters can be omitted, i.e. gaps; (c) gaps determine a weight since the exponent of A is the number of characters and gaps between the first and last character; and (c) the complexity of the SK computation is O(mnp) (Shawe-Taylor and Cristianini, 2004), where m and n are the lengths of the two strings, respectively and p is the length of the largest subsequence we want to consider.",
        "Convolution Tree Kernels compute the number of common substructures between two trees T1and T2 without explicitly considering the whole fragment space.",
        "For this purpose, let the set F = {f1, f2,..., } be a tree fragment space and %i (n) be an indicator function, equal to 1 if the target fi is rooted at node n and equal to 0 otherwise.",
        "A tree-kernel function over T1 and T2 is and NT2 are the sets of the T1's and T2's nodes, respectively and A(m,n2) = Ei=1 Xi(n1)Xi(n2).",
        "The latter is equal to the number of common fragments rooted in the n1 and n2 nodes.",
        "The A function determines the richness of the kernel space and thus different tree kernels.",
        "Hereafter, we consider the equation to evaluate STK and PTK .",
        "To compute STK is enough to compute Astk(n1,n2) as follows (recalling that since it is a syntactic tree kernels, each node can be associated with a production rule): (i) if the productions at n1 and n2 are different then ASTK(n1,n2) = 0; (ii) if the productions at n1 and n2 are the same, and n1 and n2 have only leaf children then ASTK(n1 ,n2) = A; and (iii) if the productions at n1 and n2 are the same, and n1 and n2 are not pre-terminals then Astk (n ,n2) = AHj^ (1 + Astk (di ^ )), where 1(n1) is the number of children of n1 and cjnis the j-th child of the node n. Note that, since the productions are the same, 1(n1) = 1(n2) and the computational complexity of STK is O(|NTl ||NT21) but the average running time tends to be linear, i.e. O(|NTl | + |NT21), for natural language syntactic trees (Moschitti, 2006a).",
        "The computation of PTK is carried out by the following Aptk function: if the labels of n1and n2 are different then APTK(ni;n2) = 0; else Aptk (ni,n2) = h21 + 1.",
        "This way, we penalize both larger trees and child subsequences with gaps.",
        "PTK is more general than the STK as if we only consider the contribution of shared subsequences containing all children of nodes, we implement the STK kernel.",
        "The computational complexity of PTK is O(pp|NTl||NT21) (Moschitti, 2006a), where p is the largest subsequence of children that we want consider and p is the maximal outdegree observed in the two trees.",
        "However the average running time again tends to be linear for natural language syntactic trees (Moschitti, 2006a).",
        "Given two text fragments d1 and d2 G D (the text fragment set), a general lexical kernel (Basili et al., 2005) defines their similarity as:",
        "wi edî ,w2 ed2",
        "where w1 and w2 are the weights of the words (features) w1 and w2 in the documents d1 and d2, respectively, and a is a term similarity function, e.g. (Pedersen et al., 2004b; Sahlgren, 2006; Corley and Mihalcea, 2005; Mihalcea et al., 2005).",
        "Technically, any a can be used, provided that the resulting Gram matrix, G = K(d1;d2) Vd1;d2 G D is positive semi-definite (Shawe-Taylor and Cristianini, 2004) (D is typically the training text set).",
        "We determine the term similarity function through distributional analysis (Padó and Lapata, 2007), according to the idea that the meaning of a word can be described by the set of textual contexts in which it appears (Distributional Hypothesis, (Harris, 1964)).",
        "The contexts are words appearing in a n-window with target words: such a space models a generic notion of semantic relatedness, i.e. two words close in the space are likely to be either in paradigmatic or syntagmatic relation as in (Sahlgren, 2006).",
        "The original word-by-word context matrix M is decomposed through Singular Value Decomposition (SVD) (Golub and Kahan, 1965) into the product of three new matrices: U, S, and V so that S is diagonal and M = USVT.",
        "M is approximated by Mi = Ul Sl VlT in which only the first l columns of U and V are used, and only the first l greatest singular values are considered.",
        "This approximation supplies a way to project a generic term wi into the l-dimensional space using W = Ul , where each row corresponds to the representation vectors wIi.",
        "Therefore, given two words w1 and w2, the term similarity function a is estimated as the cosine similarity between the corresponding projections tI1, wI2, i.e a(w1; w2) = ^ww11|'|W-'-22M.",
        "The latent semantic kernels (Siolas and d'Alch Buc, 2000; Cristianini et al., 2001) derive G by applying LSA, resulting in a valid kernel.",
        "Another methods to design a valid kernel is to represent words as word vectors and compute a as their scalar product between such vectors.",
        "For example, in (Bloehdorn et al., 2006), bag of hyponyms and hypernyms (up to a certain level of WordNet hierarchy) were used to build such vectors.",
        "We will refer to such similarity as WL (word list)."
      ]
    },
    {
      "heading": "3. Smoothing Partial Tree Kernel (SPTK)",
      "text": [
        "Combining lexical and structural kernels provides clear advantages on all-vs-all words similarity, which tends to semantically diverge.",
        "Indeed syntax provides the necessary restrictions to compute an effective semantic similarity.",
        "Following this idea, Bloedhorn & Moschitti (2007a) modified step (i) of ASTK computation as follows: (i) if n1 and n2 are pre-terminal nodes with the same number of children, ASTK (n1;n2) =",
        "AH^r^ a(1ex(n1), 1ex(n2)), where lex returns the node label.",
        "This allows to match fragments having same structure but different leaves by assigning a score proportional to the product of the lexical similarities of each leaf pair.",
        "Although it is an interesting kernel, the fact that lexicals must belong to the leaf nodes of exactly the same structures limits its applications.",
        "Trivially, it cannot work on dependency trees.",
        "Hereafter, we define a much more general smoothed tree kernel that can be applied to any tree and exploit any combination of lexical similarities, respecting the syntax enforced by the tree.",
        "where a is any similarity between nodes, e.g. between their lexical labels, and the other variables are the same of PTK.",
        "A completely formal proof of the validity of the Eq.",
        "2 is beyond the purpose of this paper (mainly due to space reason).",
        "Here we give a first sketch: let us consider a as a string matching between node labels and A = ß = 1.",
        "Each recursive step of Eq.",
        "2 can be seen as a summation of (1 +",
        "nji!",
        "Astk(cm),c„2(4))), i.e. the Astk recursive equation (see Sec. 2.2.1), for all subsequences of children cni ).",
        "In other words, PTK is a summation of an exponential number of STKs, which are valid kernels.",
        "It follows that PTK is a kernel.",
        "Note that the multiplication by A and ß elevated to any power only depends on the target fragment.",
        "Thus, it just gives an additional weight to the fragment and does not violate the Mercer's conditions.",
        "In contrast, the multiplication by a(n1, n2) does depend on both comparing examples, i.e. on n1 and n2.",
        "However, if the matrix [a(n1; n2)] Vn1; n2 G f G F is positive semi-definite, a decomposition exists such that a(n1;n2) = 0(n1)0(n2) => Ao(n1;n2) can be written as Y,i=1 <Xn1)Xi(n1)<Xn2)Xi(n2) = i=1 0o(n1)0CT(n2) (see Section 2.2), which proves SPTK to be a valid kernel.",
        "We followed the idea in (Moschitti, 2006a) for efficiently computing SPTK.",
        "We consider Eq.",
        "2 evaluated with respect to sequences of different length p; it follows that",
        "where Ap evaluates the number of common subtrees rooted in subsequences of exactly p children (of n1 and n2) and m = min{1(cn1), 1(cn2)}.",
        "Given the two child sequences s1a = cni and s2b = cn2 (a and b are the last children)",
        "WHNP SQ -.",
        "WP VP ?",
        "::.",
        "what::wAUX NP a::d football::n field::n",
        "rewrite the relation as:",
        "f A(a,b)Dp(|Si|, |S21) if a(a,b) > 0; Ap(sia, S2b) = < .",
        "I 0 otherwise.",
        "Note that Dp satisfies the recursive relation: Dp(k, l) = Ap-i(si[1 : k], s2[1 : /]) + ADp(k, l – 1) +ADp(k – 1, l) – ADp(k – 1, l – 1) By means of the above relation, we can compute the child subsequences of two sequences s1 and s2 in O(p|s1 ||s2|).",
        "Thus the worst case complexity of the SPTK is identical to PTK, i.e. O(pp|N\\||Nt2|), where p is the maximum branching factor of the two trees.",
        "The latter is very small in natural language parse trees and we also avoid the computation of node pairs with non similar labels.",
        "We note that PTK generalizes both (i) SK, allowing the similarity between sequences (node children) structured in a tree and (ii) STK, allowing the computation of STK over any possible pair of subtrees extracted from the original tree.",
        "For this reason, we do not dedicate additional space on the definition of the smoothed SK or smoothed STK, which are in any case important corollary findings of our research.",
        "The most similar kernel to SPTK is the Syntactic Semantic Tree Kernel (SSTK) proposed in (Bloe-hdorn and Moschitti, 2007a; Bloehdorn and Mos-chitti, 2007b).",
        "However, the following aspects show the remarkable innovativeness of SPTK:",
        "• SSTK can only work on constituency trees and not on dependency trees (see (Moschitti,",
        "2006a)).",
        "• The lexical similarity in SSTK is only applied to leaf nodes in exactly the same syntactic",
        "constituents.",
        "Only complete matching of the structure of subtrees is allowed: there is absolutely no flexibility, e.g. the NP structure \"cable television system\" has no match with the NP \"video streaming system\".",
        "SPTK provides matches between all possible relevant subparts, e.g. \"television system\" and \"video system\" (so also exploiting the meaningful similarity between \"video\" and \"television\").",
        "• The similarity in the PTK equation is added such that SPTK still corresponds to a scalar product in the semantic/structure space.",
        "• We have provided a fast evaluation of SPTK with dynamic programming (otherwise the computation would have required exponential time)."
      ]
    },
    {
      "heading": "4. Dependency Tree Structures",
      "text": [
        "The feature space generated by the structural kernels, presented in the previous section, obviously depends on the input structures.",
        "In case of PTK and SPTK different tree representations may lead to engineer more or less effective syntactic/semantic feature spaces.",
        "The next two sections provide our representation models for dependency trees and their discussion.",
        "Given the following sentence:",
        "(s1) What is the width of a football field?",
        "The representation tree for a phrase structure paradigm leaves little room for variations as shown by the constituency tree (CT) in Figure 1.",
        "We apply lemmatization to the lexicals to improve generalization and, at the same time, we add a generalized PoS-tag, i.e. noun (n::), verb (v::), adjective (::a), determiner (::d) and so on, to them.",
        "This is useful to measure similarity between lexicals belonging to the same grammatical category.",
        "In contrast, the conversion of dependency structures in computationally effective trees (for the above kernels) is not straightforward.",
        "We need to decide the role of lexicals, their grammatical functions (GR), PoS-tags and dependencies.",
        "It is natural",
        "SBJ be::v I",
        "NMODwidth::n I ?",
        "::.",
        "NMOD NMOD field::n I I",
        "I I a::d football::n",
        "SBJ VBZ I I",
        "WP be::v NMOD width::n football::n field::n",
        "NMOD DT NMOD NN",
        "to associate edges with dependencies but, since our kernels cannot process labels on the arcs, they must be associated with tree nodes.",
        "The basic idea of our structures is to use (i) one of the three kinds ofinfor-mation above as central node, from which depen-",
        "a::d football::n Figure 5: Lexical Only Centered Tree (LOCT)",
        "WP VBZ DT NN IN DT NN NN I I I I I I I II what::w be::v the::d width::n of::i a::d football::n field::n ?",
        "::.",
        "what::w be::v the::d width::n of::i a::d football::n field::n ?",
        "::.",
        "dencies are drawn and (ii) all the other information as features (in terms of additional nodes) attached to the central nodes.",
        "We define three main trees: the PoS-Tag Centered Tree (PCT), e.g. see Figure 2, where the GR is added as father and the lexical as a child; the GR Centered Tree (GRCT), e.g. see Figure 3, where the PoS-Tags are children of GR nodes and fathers of their associated lexicals; and the Lexical Centered Tree (LCT), e.g. see Figure 4, in which both GR and PoS-Tag are added as the rightmost children.",
        "I I WP be::vNMOD",
        "dimension::n of::iNMODNMOD ice::n hockey::n",
        "To better study the role of the above dependency structures, especially from a performance perspective, we define additional structures: the Lexical Only Centered Tree (LOCT), e.g. see Figure 5, which is an LCT only containing lexical nodes; the Lexical and PoS-Tag Sequences Tree (LPST), e.g. see Figure 6, which ignores the syntactic structure of the sentence being a simple sequence of PoS-Tag nodes, where lexicals are simply added as children; and the Lexical Sequence Tree (LST), where only lexical items are leaves of a single root node.",
        "PTK",
        "of::i PRDNNP",
        "and PSTK applied to it simulates a standard SK and an SK with smoothing, respectively.",
        "Section 2 has already described the kind of features generated by SK, STK and PTK.",
        "However, it is interesting to analyze what happens when SPTK is applied.",
        "For example, given the following sentence syntactically and semantically similar to s1:",
        "(s2) What is the dimension of an ice hockey goal ?",
        "(NMOD (NN)) (NN)))) (P (.",
        "(?::.)))).",
        "If smoothing is applied the matching is almost total, i.e. also the children: width::n/dimension::n, football::n/hockey::n and field::n/goal::n will be matched (with a smoothing equal to the product of their similarities).",
        "The matching using LCT is very interesting: without smoothing, the largest subtree is: (be::v (what::w (SBJ) (WP)) (ROOT)); when smoothing is used only the fragment (NMOD (NN(ice::n)) will not be part of the match.",
        "This suggests that LCT will probably receive the major benefit from smoothing.",
        "Additionally, with respect to all the above structures, LCT is the only one that can produce only lexical fragments, i.e. paths only composed by similar lexical nodes constrained by syntactic dependencies.",
        "All the other trees produce fragments in which lexicals play the role of features of GR or PoS-Tag nodes."
      ]
    },
    {
      "heading": "5. Experiments",
      "text": [
        "The aim of the experiments is to analyze different levels of representation, i.e. structure, for syntactic dependency parses.",
        "At the same time, we compare with the constituency trees and different kernels to derive the best syntactic paradigm for convolution kernels.",
        "Most importantly, the role of lexical similarity embedded in syntactic structures will be investigated.",
        "For this purpose, we first carry out extensive experiments on coarse and fine grained QC and then we verify our findings on a completely different task, i.e.",
        "Argument Classification in SRL.",
        "Tools: for SVM learning, we extended the SVM-",
        "LightTK software (Moschitti, 2006a) (which includes structural kernels in SVMLight (Joachims, 2000)) with the smooth match between tree nodes.",
        "For generating constituency trees, we used the Char-niak parser (Charniak, 2000) whereas we applied LTH syntactic parser (described in (Johansson and Nugues, 2008a)) to generate dependency trees.",
        "Lexical Similarity: we used the Eq.",
        "1 with w1 = w2 = 1 and a is derived with both approaches described in Sec. 2.3.",
        "The first approach is LSA-based: LSA was applied to ukWak (Baroni et al., 2009), which is a large scale document collection made by 2 billion tokens.",
        "More specifically, to build the matrix M, POS tagging is first applied to build rows with pairs (lemma, ::POS), or lemma::POS in brief.",
        "The contexts of such items are the columns of M and are short windows of size [ – 3, +3], centered on the items.",
        "This allows for better capturing syntactic properties of words.",
        "The most frequent 20,000 items are selected along with their 20k contexts.",
        "The entries of M are the point-wise mutual information between them.",
        "The SVD reduction is then applied to M, with a dimensionality cut of l = 250.",
        "The second approach uses the similarity based on word list (WL) as provided in (Li and Roth, 2002).",
        "Models: SVM-LightTK is applied to the different tree representations discussed in Section 4.",
        "Since PTK and SPTK are typically used in our experiments, to have a more compact acronym for each model, we associate the latter with the name of the structure, i.e. this indicates that PTK is applied to it.",
        "Then the presence of the subscript WL and lsa indicates that SPTK is applied along with the corresponding similarity, e.g. LCTWL is the SPTK kernel applied to LCT structure, using WL similarity.",
        "We experiment with multi-classification, which we model through one-vs-all scheme by selecting the category associated with the maximum SVM margin.",
        "The quality of such classification is measured with accuracy.",
        "We determine the statistical signi-cance by using the model described in (Yeh, 2000) and implemented in (Pado, 2006).",
        "The parameterization of each classifier is carried on a held-out set (30% of the training) and concerns with the setting of the trade-off parameter (option -c) and the Leaf Weight (LeW) (see Sec. 5.2), which is used to linearly scale the contribution of the leaf nodes.",
        "In contrast, the cost-factor parameter of the SVM-LightTK is set as the ratio between the num-",
        "Number of Examples",
        "ber of negative and positive examples for attempting to have a balanced Precision/Recall.",
        "For these experiments, we used the UIUC dataset (Li and Roth, 2002).",
        "It is composed by a training set of 5,452 questions and a test set of 500 questions.",
        "Question classes are organized in two levels: 6 coarse-grained classes (like ENTITY or HUMAN) and 50 fine-grained subclasses (e.g. Plant, Food as subclasses of ENTITY).",
        "The outcome of the several kernels applied to several structures for the coarse and fine grained QC is reported in Table 1.",
        "The first column shows the experimented models, obtained by applying PTK/SPTK to the structures described in Sec. 4.",
        "The last two rows are: CT-STK, i.e. STK applied to a constituency tree and BOW, which is a linear kernel applied to lexical vectors.",
        "Column 2, 3 and 4 report the accuracy using no, LS A and WL similarity, where LeW is the amplifying parameter, i.e. a weight associated with the leaves in the tree.",
        "The last three columns refer to the fine grained task.",
        "It is worth nothing that when no similarity is applied: (i) BOW produces high accuracy, i.e. 88.8% but it is improved by STK (the current state-of-the-art in QC (Zhang and Lee, 2003; Moschitti et al., 2007)); (ii) PTK applied to the same tree of STK produces a slightly lower value (non-statistically significant difference); (iii) interestingly, when PTK is instead applied to dependency structures, it improves STK, i.e. 91.60% vs 91.40% (although not significantly); and (iv) LCT, strongly based on lexical nodes, is the least accurate, i.e 90.80% since it is obviously subject to data sparseness (fragments only composed by lexicals are very sparse).",
        "The very important results can be noted when lexical similarity is used, i.e. SPTK is applied: (a) all the syntactic-base structures using both LSA or WL improve the classification accuracy, (b) CT gets the lowest improvement whereas LCT achieves an impressive result of 94.80%, i.e more than 41% of relative error reduction.",
        "It seems that the lexical similar paths when driven by syntax produces accurate features.",
        "Indeed, when syntax is missing such as for the unstructured lexical path of LSTls^, the accuracy does not highly improve or may also decrease.",
        "Additionally, the result of our best model is so high that its errors only refer to questions like What did Jesse Jackson organize ?, where the classifier selected Entity instead of Human category.",
        "These refer to clear cases where a huge amount of background knowledge is needed for deriving the exact solution.",
        "Finally, on the fine grained experiments LCT still produces the most accurate outcome again exceeding the state-of-the-art (Zhang and Lee, 2003), where WL significantly improves on all models (CT included)."
      ]
    },
    {
      "heading": "5. .3 Learning curves",
      "text": [
        "It is interesting to study the impact of syntactic/semantic kernels on the learning generalization.",
        "For this purpose, Fig. 9 reports the learning curve",
        "K>-PCT",
        "^LPST",
        "K>CT",
        "t^LOCT",
        "-■-GRCT",
        "-■-LCT",
        "- • -BOW",
        "//// Il *",
        "jf \\ II /",
        "11/ y ■'",
        "¥ /",
        "-♦-PCT-WL",
        "^LPST-WL",
        "-•-CT-WL",
        "^LOCT-WL",
        "^GRCT-WL",
        "-■-LCT-WL",
        "- • -PCT",
        "/",
        "Hi",
        "Im ' ■J /",
        "Number of Nodes",
        "Table 1: Accuracy of structural several kernels on different structures for coarse and fine grained QC",
        "For each of 648 frames, we applied SVM along with the best models for QC, i.e. GRCT and LCT, to learn its associated binary role classifiers (RC) for a total of 4,254 classifiers.",
        "For example, Figure 12 shows the LCT representation of the first two roles of the following sentence: [Bootleggers]creator, then copy [the /i/m]original [onto hundreds of VHS tapes] goal Table 2 shows the results of the different multi-classifiers.",
        "GRCT and LCT show a large accuracy, i.e. 87.60.",
        "This improves up to 88.74 by activating the LSA similarity.",
        "The combination GRCT ls a+LCT lsa significantly improves the above model, achieving 88.91%.",
        "This is very close to the state-of-the-art of SRL for classification (using a single classifier, i.e. no joint model), i.e. 89.6%, achieved in (Johansson and Nugues, 2008b).",
        "of the previous models without lexical similarity whereas Fig. 10 shows the complete SPTK behavior through the different structures.",
        "We note that when no similarity is used the dependency trees better generalize than constituency trees or non-syntactic structures like LPST or BOW.",
        "When WL is activated, all models outperform the best kernel of the previous pool, i.e. PCT (see dashed line of Fig. 10 or the top curve in Fig. 9).",
        "We plotted the average running time of each computation of FTK/SFTK applied to the different structures.",
        "We divided the examples from QC based on the number of nodes in each example.",
        "Figure 11 shows the elapsed time in function of the number of nodes for different tree representations.",
        "We note that: (i) when the WL is not active, LCT and GRCT are very fast as they impose hierarchical matching of subtrees; (ii) when the similarity is activated, LCT'wl and GRCT wl tend to match many more tree fragments thus their complexity increases.",
        "However, the equations of the curve fit, shown in the figure, suggests that the trend is sub-quadratic (x1J).",
        "Only LPST'wl, which has no structure, matches a very large number of sequences of nodes, when the similarity is active.",
        "This increases the complexity, which results in an order higher than 2.",
        "5.5 FrameNet Role Classification Experiments To verify that our findings are general and that our syntactic/semantic dependency kernels can be effectively exploited for diverse NLP tasks, we experimented with a completely different application, i.e.",
        "FrameNet SRL classification (gold standard boundaries).",
        "We used the FrameNet version 1.3 with the 90/10% split between training and test set (i.e 271,560 and 30,173 examples respectively), as defined in (Johansson and Nugues, 2008b), one of the best system for FrameNet parsing.",
        "We used the LTH dependency parser.",
        "LSA was applied to the BNC corpus, the source of the FrameNet annotations.",
        "COARSE",
        "FINE",
        "NO",
        "LSA",
        "WL",
        "NO",
        "LSA",
        "WL",
        "LeW",
        "Acc.",
        "LeW",
        "Acc.",
        "LeW",
        "Acc.",
        "LeW",
        "Acc.",
        "LeW",
        "Acc.",
        "LeW",
        "Acc.",
        "CT",
        "4",
        "90.80%",
        "2",
        "91.00%",
        "5",
        "92.20%",
        "4",
        "84.00%",
        "5",
        "83.00%",
        "7",
        "86.60%",
        "GRCT",
        "3",
        "91.60%",
        "4",
        "92.60%",
        "2",
        "94.20%",
        "3",
        "83.80%",
        "4",
        "83.20%",
        "2",
        "85.00%",
        "LCT",
        "1",
        "90.80%",
        "1",
        "94.80%",
        "1",
        "94.20%",
        "0.33",
        "85.40%",
        "1",
        "86.20%",
        "0.33",
        "87.40%",
        "LOCT",
        "1",
        "89.20%",
        "1",
        "93.20%",
        "1",
        "91.80%",
        "1",
        "85.40%",
        "1",
        "86.80%",
        "1",
        "87.00%",
        "LST",
        "1",
        "88.20%",
        "1",
        "85.80%",
        "1",
        "89.60%",
        "1",
        "84.00%",
        "1",
        "80.00%",
        "1",
        "85.00%",
        "LPST",
        "3",
        "89.40%",
        "1",
        "89.60%",
        "1",
        "92.40%",
        "3",
        "84.20%",
        "4",
        "82.20%",
        "1",
        "84.60%",
        "PCT",
        "4",
        "91.20%",
        "4",
        "92.20%",
        "5",
        "93.40%",
        "4",
        "84.80%",
        "5",
        "84.00%",
        "5",
        "85.20%",
        "CT-STK",
        "-",
        "91.20%",
        "-",
        "-",
        "-",
        "-",
        "-",
        "82.20%",
        "-",
        "-",
        "-",
        "-",
        "BOW",
        "-",
        "88.80%",
        "-",
        "-",
        "-",
        "-",
        "-",
        "83.20%",
        "-",
        "-",
        "-",
        "-",
        "-",
        "0 LPST-WL X GRCT-WL o GRCT A LCT-WL □ LCT ■ LPST",
        "ï = o",
        "051x2 005 /",
        "o",
        "/♦",
        "7 V =",
        "D.081X",
        "x es",
        "o/",
        "x",
        "X ß",
        "x A",
        "J )",
        "■",
        "y =",
        "0.0 3 0X",
        "* * ■ ■",
        "a □",
        "u Dy =",
        "0.068X",
        "copy::v copy::v bootlegger::n ROOT VBP film::n ROOT VBP",
        "Finally, it should be noted that, to learn and test the SELFJMOTION multi-classifier, containing 14,584 examples, distributed on 22 roles, SVM-SPTK employed 1.5 h and 10 minutes, respectively."
      ]
    },
    {
      "heading": "6. Final Remarks and Conclusion",
      "text": [
        "In this paper, we have proposed a study on representation of dependency structures for the design of effective structural kernels.",
        "Most importantly, we have defined a new class of kernel functions, i.e. SP-TKs, that carry out syntactic and lexical similarities on the above structures.",
        "SPTK exploits the latter by providing generalization trough lexical similarities constrained in them.",
        "This allows for automatically generating feature spaces of generalized syntactic/semantic dependency substructures.",
        "To test our models, we carried out experiments on QC and SRL.",
        "These show that by exploiting the similarity between two sets of words carried out according to their dependency structure leads to an unprecedented result for QC, i.e. 94.8% of accuracy.",
        "In contrast, when no structure is used the accuracy does not significantly improves.",
        "We have also provided a fast algorithm for the computation of SPTK and empirically shown that it can easily scale.",
        "It should be noted that our models are not absolutely restricted to QC and SRL.",
        "Indeed, since most of the NLP applications are based on syntactic and lexical representations, SPTK will have a major impact in most of them, e.g.:",
        "• Question Answering, the high results for QC will positively impact on the overall task.",
        "• SRL, SPTK alone reaches the state-of-the-art (SOA) (only 0.7% less) in FrameNet role classification.",
        "This is very valuable as previous work showed that tree kernels (TK) alone perform lower than models based on manually engineered features for SRL tasks, e.g., (Mos-chitti, 2004; Giuglea and Moschitti, 2004; Giu-glea and Moschitti, 2006; Moschitti, 2006b; Che et al., 2006; Moschitti et al., 2008).",
        "Thus",
        "for the first time in an SRL task, a general tree kernel reaches the same accuracy of heavy manual feature design.",
        "This also suggests an improvement when used in combinations with manual feature vectors.",
        "• Relation Extraction and Pronominal Corefer-ence, whose state-of-the-art for some tasks is achieved with the simple STK-CT (see (Zhang",
        "al., 2008), respectively).",
        "• In word sense disambiguation tasks, SPTK can generalize context according to syntactic and semantic constraints (selectional restrictions) making very effective distributional semantic approaches.",
        "• In Opinion Mining SPTK will allow to match sentiment words within their corresponding syntactic counterparts and improve the state-of-the-art (Johansson and Moschitti, 2010b; Johansson and Moschitti, 2010a).",
        "• Experiments on Recognizing Textual Entailment (RTE) tasks, the use of SSTK (instead of STK-CT) improved the state-of-the-art (Mehdad et al., 2010).",
        "SPTK may provide further enhancement and innovative and effective dependency models.",
        "The above points also suggest many promising future research directions, which we would like to explore."
      ]
    },
    {
      "heading": "Acknowledgements",
      "text": [
        "This work has been partially supported by the EC project FP247758: Trustworthy Eternal Systems via Evolving Software, Data and Knowledge (EternalS).",
        "Kernel",
        "Accuracy",
        "GRCT",
        "87.60%",
        "GRCTlsa",
        "88,61%",
        "LCT",
        "87.61%",
        "LCTlsa",
        "88.74%",
        "GRCT + LCT",
        "87.99%",
        "GRCTlsa + LCTlsa",
        "88.91%"
      ]
    }
  ]
}
