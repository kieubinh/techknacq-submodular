{
  "info": {
    "authors": [
      "Alexander M. Rush",
      "Michael John Collins"
    ],
    "book": "Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics: Human Language Technologies",
    "id": "acl-P11-1008",
    "title": "Exact Decoding of Syntactic Translation Models through Lagrangian Relaxation",
    "url": "https://aclweb.org/anthology/P11-1008",
    "year": 2011
  },
  "references": [
    "acl-A00-2023",
    "acl-D08-1012",
    "acl-D08-1016",
    "acl-D10-1001",
    "acl-D10-1027",
    "acl-E09-1044",
    "acl-H05-1021",
    "acl-J07-2003",
    "acl-J10-3008",
    "acl-N06-1054",
    "acl-P05-1033",
    "acl-P06-1098",
    "acl-P07-1019",
    "acl-P08-1066",
    "acl-W06-1616"
  ],
  "sections": [
    {
      "text": [
        "We describe an exact decoding algorithm for syntax-based statistical translation.",
        "The approach uses Lagrangian relaxation to decompose the decoding problem into tractable sub-problems, thereby avoiding exhaustive dynamic programming.",
        "The method recovers exact solutions, with certificates of optimality, on over 97% of test examples; it has comparable speed to state-of-the-art decoders."
      ]
    },
    {
      "heading": "1. Introduction",
      "text": [
        "Recent work has seen widespread use of synchronous probabilistic grammars in statistical machine translation (SMT).",
        "The decoding problem for a broad range of these systems (e.g., (Chiang, 2005; Marcu et al., 2006; Shen et al., 2008)) corresponds to the intersection of a (weighted) hypergraph with an n-gram language model.",
        "The hypergraph represents a large set of possible translations, and is created by applying a synchronous grammar to the source language string.",
        "The language model is then used to rescore the translations in the hypergraph.",
        "Decoding with these models is challenging, largely because of the cost of integrating an n-gram language model into the search process.",
        "Exact dynamic programming algorithms for the problem are well known (Bar-Hillel et al., 1964), but are too expensive to be used in practice.",
        "Previous work on decoding for syntax-based SMT has therefore been focused primarily on approximate search methods.",
        "This paper describes an efficient algorithm for exact decoding of synchronous grammar models for translation.",
        "We avoid the construction of (Bar-Hillel",
        "'This problem is also relevant to other areas of statistical NLP, for example NL generation (Langkilde, 2000).",
        "Michael Collins",
        "1.",
        "Dynamic programming over the weighted hypergraph.",
        "This step does not require language model integration, and hence is highly efficient.",
        "2.",
        "Application of an all-pairs shortest path algorithm to a directed graph derived from the weighted hypergraph.",
        "The size of the derived directed graph is linear in the size of the hypergraph, hence this step is again efficient.",
        "Informally, the first decoding algorithm incorporates the weights and hard constraints on translations from the synchronous grammar, while the second decoding algorithm is used to integrate language model scores.",
        "Lagrange multipliers are used to enforce agreement between the structures produced by the two decoding algorithms.",
        "In this paper we first give background on hyper-graphs and the decoding problem.",
        "We then describe our decoding algorithm.",
        "The algorithm uses a sub-gradient method to minimize a dual function.",
        "The dual corresponds to a particular linear programming (LP) relaxation of the original decoding problem.",
        "The method will recover an exact solution, with a certificate of optimality, if the underlying LP relaxation has an integral solution.",
        "In some cases, however, the underlying LP will have a fractional solution, in which case the method will not be exact.",
        "The second technical contribution of this paper is to describe a method that iteratively tightens the underlying LP relaxation until an exact solution is produced.",
        "We do this by gradually introducing constraints to step 1 (dynamic programming over the hypergraph), while still maintaining efficiency.",
        "We report experiments using the tree-to-string model of (Huang and Mi, 2010).",
        "Our method gives exact solutions on over 97% of test examples.",
        "The method is comparable in speed to state-of-the-art decoding algorithms; for example, over 70% of the test examples are decoded in 2 seconds or less.",
        "We compare our method to cube pruning (Chiang, 2007), and find that our method gives improved model scores on a significant number of examples.",
        "One consequence of our work is that we give accurate estimates of the number of search errors for cube pruning."
      ]
    },
    {
      "heading": "2. Related Work",
      "text": [
        "A variety of approximate decoding algorithms have been explored for syntax-based translation systems, including cube-pruning (Chiang, 2007; Huang and Chiang, 2007), left-to-right decoding with beam search (Watanabe et al., 2006; Huang and Mi, 2010), and coarse-to-fine methods (Petrov et al., 2008).",
        "Recent work has developed decoding algorithms based on finite state transducers (FSTs).",
        "Iglesias et al.",
        "(2009) show that exact FST decoding is feasible for a phrase-based system with limited reordering (the MJ1 model (Kumar and Byrne, 2005)), and de Gispert et al.",
        "(2010) show that exact FST decoding is feasible for a specific class of hierarchical grammars (shallow-1 grammars).",
        "Approximate search methods are used for more complex reordering models or grammars.",
        "The FST algorithms are shown to produce higher scoring solutions than cube-pruning on a large proportion of examples.",
        "Lagrangian relaxation is a classical technique in combinatorial optimization (Korte and Vygen, 2008).",
        "Lagrange multipliers are used to add linear constraints to an existing problem that can be solved using a combinatorial algorithm; the resulting dual function is then minimized, for example using subgradient methods.",
        "In recent work, dual decomposition – a special case of Lagrangian relaxation, where the linear constraints enforce agreement between two or more models – has been applied to inference in Markov random fields (Wain-wright et al., 2005; Komodakis et al., 2007; Sontag et al., 2008), and also to inference problems in NLP (Rush et al., 2010; Koo et al., 2010).",
        "There are close connections between dual decomposition and work on belief propagation (Smith and Eisner, 2008)."
      ]
    },
    {
      "heading": "3. Background: Hypergraphs",
      "text": [
        "Translation with many syntax-based systems (e.g., (Chiang, 2005; Marcu et al., 2006; Shen et al., 2008; Huang and Mi, 2010)) can be implemented as a two-step process.",
        "The first step is to take an input sentence in the source language, and from this to create a hypergraph (sometimes called a translation forest) that represents the set of possible translations (strings in the target language) and derivations under the grammar.",
        "The second step is to integrate an n-gram language model with this hypergraph.",
        "For example, in the system of (Chiang, 2005), the hypergraph is created as follows: first, the source side of the synchronous grammar is used to create a parse forest over the source language string.",
        "Second, transduction operations derived from synchronous rules in the grammar are used to create the target-language hypergraph.",
        "Chiang's method uses a synchronous context-free grammar, but the hypergraph formalism is applicable to a broad range of other grammatical formalisms, for example dependency grammars (e.g., (Shen et al., 2008)).",
        "A hypergraph is a pair (V, E) where V = {1, 2,..., \\V\\} is a set of vertices, and E is a set of hyperedges.",
        "A single distinguished vertex is taken as the root of the hypergraph; without loss of generality we take this vertex to be v = 1.",
        "Each hyper-edge e G E is a tuple ((v\\, v2, ■ ■ ■, Vk), vq) where v0 G V,mdvi G {2 ...\\V\\} for % = 1... k. The vertex vq is referred to as the head of the edge.",
        "The ordered sequence (v\\, v2, ■ ■ ■ ,Vk) is referred to as the tail of the edge; in addition, we sometimes refer to vi, v2,... vk as the children in the edge.",
        "The number of children k may vary across different edges, but k > 1 for all edges (i.e., each edge has at least one child).",
        "We will use h(e) to refer to the head of an edge e, and t(e) to refer to the tail.",
        "We will assume that the hypergraph is acyclic: intuitively this will mean that no derivation (as defined below) contains the same vertex more than once (see (Martin et al., 1990) for a formal definition).",
        "Each vertex v G V is either a non-terminal in the hypergraph, or a leaf.",
        "The set of non-terminals is",
        "Conversely, the set of leaves is defined as",
        "VL = {v G V :ße G E such that h(e) = v}",
        "Finally, we assume that each v G V has a label l(v).",
        "The labels for leaves will be words, and will be important in defining strings and language model scores for those strings.",
        "The labels for non-terminal nodes will not be important for results in this paper.",
        "We now turn to derivations.",
        "Define an index set X = V U E. A derivation is represented by a vector y = {yr : r G 1} where yv = 1 if vertex v is used in the derivation, yv = 0 otherwise (similarly ye = 1 if edge e is used in the derivation, ye = 0 otherwise).",
        "Thus y is a vector in {0,1}'JL A valid derivation satisfies the following constraints:",
        "• j/i = l (the root must be in the derivation).",
        "We use y to refer to the set of valid derivations.",
        "The set y is a subset of {0,1}'J' (not all members of {0,1}IJI will correspond to valid derivations).",
        "Each derivation y in the hypergraph will imply an ordered sequence of leaves v\\... vn.",
        "We use s(y) to refer to this sequence.",
        "The sentence associated with the derivation is then l(v\\)... l(vn).",
        "In a weighted hypergraph problem, we assume a parameter vector 6 = {9r : r G X}.",
        "The score for any derivation is f(y) = 6 ■ y = J^rei^rVr- Simple bottom-up dynamic programming – essentially the CKY algorithm – can be used to find y* = arg maxyey f(y) under these definitions.",
        "The focus of this paper will be to solve problems involving the integration of a fc'th order language model with a hypergraph.",
        "In these problems, the score for a derivation is modified to be where vx...vn = s(y).",
        "The 9(vi_k+i, ■ ■ ■, Vi) parameters score n-grams of length k. These parameters are typically defined by a language model, for example with k = 3 we would have 9(Vi-2,Vi-i,Vi) = \\ogp{l{Vi)\\l{Vi-2),l{Vi-i)).",
        "The problem is then to find y* = arg max^y f(y) under this definition.",
        "Throughout this paper we make the following assumption when using a bigram language model:",
        "Assumption 3.1 (Bigram start/end assump-tion.j For any derivation y, with leaves s(y) = vii v2, ■ ■ ■, vn, it is the case that: (I) v\\ = 2 and vn = 3; (2) the leaves 2 and 3 cannot appear at any other position in the strings s(y) for y G y; (3) 1(2) = <s> where <s> is the start symbol in the language model; (4) 1(3) = </s> where < / s > is the end symbol.",
        "This assumption allows us to incorporate language model terms that depend on the start and end symbols.",
        "It also allows a clean solution for boundary conditions (the start/end of strings)."
      ]
    },
    {
      "heading": "4. A Simple Lagrangian Relaxation Algorithm",
      "text": [
        "We now give a Lagrangian relaxation algorithm for integration of a hypergraph with a bigram language model, in cases where the hypergraph satisfies the following simplifying assumption:",
        "Assumption 4.1 (The strict ordering assumption.^",
        "For any two leaves v and w, it is either the case that: 1) for all derivations y such that v and w are both in the sequence l(y), vprecedes w; or 2) for all derivations y such that v and w are both in l(y), w precedes v.",
        "Thus under this assumption, the relative ordering of any two leaves is fixed.",
        "This assumption is overly restrictive: the next section describes an algorithm that does not require this assumption.",
        "However deriving the simple algorithm will be useful in developing intuition, and will lead directly to the algorithm for the unrestricted case.",
        "At a high level, the algorithm is as follows.",
        "We introduce Lagrange multipliers u(v) for all v G Vl, with initial values set to zero.",
        "The algorithm then involves the following steps: (1) For each leaf v, find the previous leaf w that maximizes the score 6(w,v) – u(w) (call this leaf a*(v), and define av = 6(a*(v),v) - u(a*(v))).",
        "(2) find the highest scoring derivation using dynamic programming over the original (non-intersected) hypergraph, with leaf nodes having weights 9V + av + u(v).",
        "(3) If the output derivation from step 2 has the same set of bigrams as those from step 1, then we have an exact solution to the problem.",
        "Otherwise, the Lagrange multipliers u(v) are modified in a way that encourages agreement of the two steps, and we return to step 1.",
        "Steps 1 and 2 can be performed efficiently; in particular, we avoid the classical dynamic programming intersection, instead relying on dynamic programming over the original, simple hypergraph.",
        "We now give a formal description of the algorithm.",
        "Define B ç VL x Vl to be the set of all ordered pairs (v, w) such that there is at least one derivation y with v directly preceding w in s(y).",
        "Extend the bit-vector y to include variables y(v, w) for (v, w) G B where y(v,w) = 1 if leaf v is followed by w in s(y), 0 otherwise.",
        "We redefine the index set to be 1 = V U EuB, and define y ç {0,1}IJI to be the set of all possible derivations.",
        "Under assumptions 3.1 and 4.1 above, y = {y : y satisfies constraints CO, Cl, C2} where the constraint definitions are:",
        "• (CO) The yv and ye variables form a derivation in the hypergraph, as defined in section 3.",
        "• (CI) For all v G Vl such that v / 2, yv =",
        "CI states that each leaf in a derivation has exactly one incoming bigram, and that each leaf not in the derivation has 0 incoming bigrams; C2 states that each leaf in a derivation has exactly one outgoing bigram, and that each leaf not in the derivation has 0 outgoing bigrams.",
        "The score of a derivation is now f(y) = 9 -y, i.e., where 9(v,w) are scores from the language model.",
        "Our goal is to compute y* = arg maxyçy f{y).",
        "Initialization: Set u°(v) = 0 for all v e VLAlgorithm: For t = 1... T:",
        "• If yl satisfies constraints C2, return yl,",
        "Next, define y' as",
        "y' = {y '■ y satisfies constraints CO and CI}",
        "In this definition we have dropped the C2 constraints.",
        "To incorporate these constraints, we use Lagrangian relaxation, with one Lagrange multiplier u(v) for each constraint in C2.",
        "The Lagrangian is where ßv = 9V + u(v), ße = 9e, and ß(v,w) = 9(v, w) – u(v).",
        "The dual problem is to find minM L(u) where",
        "Figure 1 shows a subgradient method for solving this problem.",
        "At each point the algorithm finds yl = arg maxyey/ L(«*_1, y), where ul~l are the Lagrange multipliers from the previous iteration.",
        "If yl satisfies the C2 constraints in addition to CO and CI, then it is returned as the output from the algorithm.",
        "Otherwise, the multipliers u(v) are updated.",
        "Intuitively, these updates encourage the values of yv",
        "and T,w.",
        "{v,w)eB y(v>w)t0 be eclual; fonnally, these updates correspond to subgradient steps.",
        "The main computational step at each iteration is to compute argmaxy^y L{ul~l,y) This step is easily solved, as follows (we again use ßv, ße and ß(v\\, v2) to refer to the parameter values that incorporate Lagrange multipliers):",
        "• For all v G Vl, define a*(v) = &rgm&xw:(WtV)eB ß(w,v) and av = ß(a*(v),v).",
        "For all v G V/v define av = 0.",
        "• Using dynamic programming, find values for the yv and ye variables that form a valid derivation, and that maximize",
        "• Set y(v, w) = 1 iff y{w) = 1 and a*(w) = v.",
        "The critical point here is that through our definition of y', which ignores the C2 constraints, we are able to do efficient search as just described.",
        "In the first step we compute the highest scoring incoming bigram for each leaf v. In the second step we use conventional dynamic programming over the hypergraph to find an optimal derivation that incorporates weights from the first step.",
        "Finally, we fill in the y(v, w) values.",
        "Each iteration of the algorithm runs inO(|£| + |£|)time.",
        "There are close connections between Lagrangian relaxation and linear programming relaxations.",
        "The most important formal results are: 1) for any value of u, L(u) > f(y*) (hence the dual value provides an upper bound on the optimal primal value); 2) under an appropriate choice of the step sizes 6l, the subgradient algorithm is guaranteed to converge to the minimum of L(u) (i.e., we will minimize the upper bound, making it as tight as possible); 3) if at any point the algorithm in figure 1 finds a yl that satisfies the C2 constraints, then this is guaranteed to be the optimal primal solution.",
        "Unfortunately, this algorithm may fail to produce a good solution for hypergraphs where the strict ordering constraint does not hold.",
        "In this case it is possible to find derivations y that satisfy constraints CO, Cl, C2, but which are invalid.",
        "As one example, consider a derivation with s(y) = 2, 4, 5, 3 and y(2, 3) = y(4, 5) = y(5, 4) = 1.",
        "The constraints are all satisfied in this case, but the bigram variables are invalid (e.g., they contain a cycle)."
      ]
    },
    {
      "heading": "5. The Full Algorithm",
      "text": [
        "We now describe our full algorithm, which does not require the strict ordering constraint.",
        "In addition, the full algorithm allows a trigram language model.",
        "We first give a sketch, and then give a formal definition.",
        "A crucial idea in the new algorithm is that of paths between leaves in hypergraph derivations.",
        "Previously, for each derivation y, we had defined s(y) = v\\, t>2, • • •, vn to be the sequence of leaves in y.",
        "In addition, we will define where each pi is a path in the derivation between leaves v% and t>j+i.",
        "The path traces through the nonterminals that are between the two leaves in the tree.",
        "For this example g(y) is (1 |,2 |) (2 |,3 |) (3 I), 3, (3 Î) (3 î,4 I) (4 I), 4, (4 |) (4 |,2 Î) (2 î,5 I) (5 I), 5, (5 Î) (5 î,l Î).",
        "States of the form (a j) and (a f) where a is a leaf appear in the paths respectively before/after the leaf a.",
        "States of the form (a, b) correspond to the steps taken in a top-down, left-to-right, traversal of the tree, where down and up arrows indicate whether a node is being visited for the first or second time (the traversal in this case would be 1, 2, 3, 4, 2, 5,1).",
        "The mapping from a derivation y to a path g(y) can be performed using the algorithm in figure 2.",
        "For a given derivation y, define E(y) = {y : ye = 1}, and use E{y) as the set of input edges to this algorithm.",
        "The output from the algorithm will be a set of states S, and a set of directed edges T, which together fully define the path g{y).",
        "In the simple algorithm, the first step was to predict the previous leaf for each leaf v, under a score that combined a language model score with a Lagrange multiplier score (i.e., compute argmaxw ß(w, v) where ß(w,v) = 9(w,v) + u(w)).",
        "In this section we describe an algorithm that for each leaf v again predicts the previous leaf, but in addition predicts the full path back to that leaf.",
        "For example, rather than making a prediction for leaf 5 that it should be preceded by leaf 4, we would also predict the path (4 |)(4 |,2 |) (2 |,5 j)(5 |) between these two leaves.",
        "Lagrange multipliers will be used to enforce consistency between these predictions (both paths and previous words) and a valid derivation.",
        "• DO.",
        "The yv and ye variables form a valid derivation in the original hypergraph.",
        "• Dl.",
        "For all s G SN, ys = Ee:ses(e) Ve (see figure 2 for the definition of 5(e)).",
        "• Lagrangian with Lagrange multipliers for D3-D6: L{y,\\l,u,v) = 9-y",
        "Input: A set E of hyperedges.",
        "Output: A directed graph 5, T where 5 is a set of vertices, and T is a set of edges.",
        "Step 1: Creating 5: Define 5 = UeeES(e) where 5(e) is defined as follows.",
        "Assume e = {{vi, w2,..., vk),v0).",
        "Include the following states in 5(e): (1) {v0 j, v\\ J.)",
        "and (vk T, «oT).",
        "(2) T, 1) for j = 1... k - 1 (if k = 1 then there are no such states).",
        "(3) In addition, for any Vj for j = 1... k such that Vj e VL, add the states {vj |) and {vj j).",
        "Step 2: Creating T: T is formed by including the following directed arcs: (1) Add an arc from (a, b) e 5 to (c, d) e S whenever b = c. (2) Add an arc from (a, b j) G 5 to (c j) G 5 whenever 6 = c. (3) Add an arc from (a |) G 5 to (6 |, c) G 5 whenever a = b.",
        "We first use the algorithm in figure 2 with the entire set of hyperedges, E, as its input.",
        "The result is a directed graph (S, T) that contains all possible paths for valid derivations in V, E (it also contains additional, ill-formed paths).",
        "We then introduce the following definition:",
        "Definition 5.1 A trigram path p is p =",
        "(vi,pi,v2,P2,v3) where: a) Vi,v2,v3 G VL; b) pi is a path (sequence of states) between nodes {v\\ f) and (v2 j) in the graph (S,T); c) p2 is a path between nodes (v2 Î) and (v3 j) in the graph (S, T).",
        "We define V to be the set of all trigram paths in (S, T).",
        "The set V of trigram paths plays an analogous role to the set B of bigrams in our previous algorithm.",
        "We use vi(p),pi(p),v2(p),P2(p),v3(p) to refer to the individual components of a path p. In addition, define Sn to be the set of states in S of the form (a, b) (as opposed to the form (c [) or (c j) where c G Vl).",
        "We now define a new index set, X = V U E U Sn U V, adding variables ys for s G Sn, and yp for p G V. If we take y C {0,1}|J| to be the set of valid derivations, the optimization problem is to find y* = arg m&xy(zy f(y), where f(y) = 9-y, that is,",
        "In particular, we might define 9S = 0 for all s,",
        "p(w3\\wi,w2) is a trigram probability.",
        "The set V is large (typically exponential in size): however, we will see that we do not need to represent the yp variables explicitly.",
        "Instead we will be able to leverage the underlying structure of a path as a sequence of states.",
        "The set of valid derivations is y = {y : y satisfies constraints D0-D6} where the constraints are shown in figure 3.",
        "Dl simply states that ys = 1 iff there is exactly one edge e in the derivation such that s G 5(e).",
        "Constraints D2-D4 enforce consistency between leaves in the trigram paths, and the yvvalues.",
        "Constraints D5 and D6 enforce consistency between states seen in the paths, and the ys values.",
        "The Lagrangian relaxation algorithm is then derived in a similar way to before.",
        "Define",
        "y' = {y '■ y satisfies constraints D0-D2}",
        "We have dropped the D3-D6 constraints, but these will be introduced using Lagrange multipliers.",
        "The resulting Lagrangian is shown in figure 3, and can be written as L(y, X,^,u,v) = ß ■ y where ßv =",
        "l(vi(p)) ~ Esepi(P) u(s) - Esep2(P) v(s).",
        "The dual is L(A, 7, u, v) = max^ey/ L(y, X, 7, u, v); figure 4 shows a subgradient method that minimizes this dual.",
        "The key step in the algorithm at each iteration is to compute• If y* satisfies the constraints D3-D6, return yl, else:",
        "arg maxyey L(y, A, 7, u, v) = arg max^y ß ■ y where ß is defined above.",
        "Again, our definition of y allows this maximization to be performed efficiently, as follows:",
        "1.",
        "For each v G VL, define a* = argmaxp:î,3(p)=î,/3(p), and av = ß{a*v).",
        "(i.e., for each v, compute the highest scoring trigram path ending in v.)",
        "2.",
        "Find values for the yv, ye and ys variables that form a valid derivation, and that maximize f'iy) = Y.vißv+avhv + Y.eßeye + Y.sßsVs 3.",
        "Setyp = 1 iffyV3(p) = 1 andp = a*a(p).",
        "The first step involves finding the highest scoring incoming trigram path for each leaf v. This step can be performed efficiently using the Floyd-Warshall all-pairs shortest path algorithm (Floyd, 1962) over the graph (S, T) ; the details are given in the appendix.",
        "The second step involves simple dynamic programming over the hypergraph (V, E) (it is simple to integrate the ßs terms into this algorithm).",
        "In the third step, the path variables yp are filled in.",
        "We now describe some important properties of the algorithm:",
        "Efficiency.",
        "The main steps of the algorithm are: 1) construction of the graph (S,T); 2) at each iteration, dynamic programming over the hypergraph (V,E); 3) at each iteration, all-pairs shortest path algorithms over the graph (S, T).",
        "Each of these steps is vastly more efficient than computing an exact intersection of the hypergraph with a language model.",
        "Exact solutions.",
        "By usual guarantees for Lagrangian relaxation, if at any point the algorithm returns a solution yl that satisfies constraints D3-D6, then y* exactly solves the problem in Eq.",
        "1.",
        "Upper bounds.",
        "At each point in the algorithm, L(Xt,ryt,ut,vt) is an upper bound on the score of the optimal primal solution, f(y*).",
        "Upper bounds can be useful in evaluating the quality of primal solutions from either our algorithm or other methods such as cube pruning.",
        "Simplicity of implementation.",
        "Construction of the (S,T) graph is straightforward.",
        "The other steps – hypergraph dynamic programming, and all-pairs shortest path – are widely known algorithms that are simple to implement."
      ]
    },
    {
      "heading": "6. Tightening the Relaxation",
      "text": [
        "The algorithm that we have described minimizes the dual function L(A, 7, u, v).",
        "By usual results for Lagrangian relaxation (e.g., see (Korte and Vygen, 2008)), L is the dual function for a particular LP relaxation arising from the definition of y' and the additional constaints D3-D6.",
        "In some cases the LP relaxation has an integral solution, in which case the algorithm will return an optimal solution yt7In other cases, when the LP relaxation has a fractional solution, the subgradient algorithm will still converge to the minimum of L, but the primal solutions y* will move between a number of solutions.",
        "We now describe a method that incrementally adds hard constraints to the set y', until the method returns an exact solution.",
        "For a given y G y', for any v with yv = 1, we can recover the previous two leaves (the trigram ending in v) from either the path variables yp, or the hypergraph variables ye.",
        "Specifically, define V-i(v, y) to be the leaf preceding v in the trigram path p with yp = 1 and vi{v) = v, and V-2(v,y) to be the leaf two positions before v in the trigram path p with yp = 1 and vs(p) = v. Similarly, define v'_1(v, y) and v'_2(v, y) to be the preceding two leaves under the ye variables.",
        "If the method has not converged, these two trigram definitions may not be consistent.",
        "For a consistent solution, we require V-\\{v,y) = v'_1(v,y) and V-2(v,y) = v'_2(v,y) for all v with yv = 1.",
        "Unfortunately, explicitly enforcing all of these constraints would require exhaustive dynamic programming over the hypergraph using the (Bar-Hillel et al., 1964) method, something we wish to avoid.",
        "Instead, we enforce a weaker set of constraints, which require far less computation.",
        "Assume some function 7r : Vl – >■ {1,2,.. .q} that partitions the set of leaves into q different partitions.",
        "Then we will add the following constraints to y':",
        "ir(v-i(v,y)) = ir(v'_i(v,y)) ir(v-2(v,y)) = n(v'_2(v,y)) for all v such that yv = 1.",
        "Finding arg max^y 6 ■ y under this new definition of y' can be performed using the construction of (Bar-Hillel et al., 1964), with q different lexical items (for brevity we omit the details).",
        "This is efficient ifq is small.",
        "The remaining question concerns how to choose a partition 7r that is effective in tightening the relaxation.",
        "To do this we implement the following steps: 1) run the subgradient algorithm until L is close to convergence; 2) then run the subgradient algorithm for m further iterations, keeping track of all pairs of leaf nodes that violate the constraints (i.e., pairs a = v-i(v,y)/b = v^_1(v,y) or a = v-2(v,y)/b = v'_2{v,y) such that a / 6); 3) use a graph coloring algorithm to find a small partition that places all pairs (a, b) into separate partitions; 4) continue running Lagrangian relaxation, with the new constraints added.",
        "We expand 7r at each iteration to take into account new pairs (a, b) that violate the constraints.",
        "In related work, Sontag et al.",
        "(2008) describe a method for inference in Markov random fields where additional constraints are chosen to tighten an underlying relaxation.",
        "Other relevant work in NLP includes (Tromble and Eisner, 2006; Riedel and Clarke, 2006).",
        "Our use of partitions 7r is related to previous work on coarse-to-fine inference for machine translation (Petrov et al., 2008)."
      ]
    },
    {
      "heading": "7. Experiments",
      "text": [
        "We report experiments on translation from Chinese to English, using the tree-to-string model described",
        "Figure 5: Results showing percentage of examples that are decoded in less than t seconds, for t = 0.5,1.0, 2.0,... , 32.0.",
        "LR = Lagrangian relaxation; DP = exhaustive dynamic programming; ILP = integer linear programming; LP = linear programming (LP does not recover an exact solution).",
        "The (I)LP experiments were carried out using Gurobi, a high-performance commercial-grade solver.",
        "in (Huang and Mi, 2010).",
        "We use an identical model, and identical development and test data, to that used by Huang and Mi.",
        "The translation model is trained on 1.5M sentence pairs of Chinese-English data; a trigram language model is used.",
        "The development data is the newswire portion of the 2006 NIST MT evaluation test set (616 sentences).",
        "The test set is the newswire portion of the 2008 NIST MT evaluation test set (691 sentences).",
        "We ran the full algorithm with the tightening method described in section 6.",
        "We ran the method for a limit of 200 iterations, hence some examples may not terminate with an exact solution.",
        "Our method gives exact solutions on 598/616 development set sentences (97.1%), and 675/691 test set sentences (97.7%).",
        "In cases where the method does not converge within 200 iterations, we can return the best primal solution y* found by the algorithm during those iterations.",
        "We can also get an upper bound on the difference f(y*) – f{yl) using mint L(ut) as an upper bound on f(y*).",
        "Of the examples that did not converge, the worst example had a bound that was 1.4% of f(yf') (more specifically, /(y*) was -24.74, and the upper bound on f(y*) – f{yl) was 0.34).",
        "Figure 5 gives information on decoding time for our method and two other exact decoding methods: integer linear programming (using constraints D0-D6), and exhaustive dynamic programming using the construction of (Bar-Hillel et al., 1964).",
        "Our method is clearly the most efficient, and is comparable in speed to state-of-the-art decoding algorithms.",
        "Time",
        "%age",
        "%age",
        "%age",
        "%age",
        "(LR)",
        "(DP)",
        "(ILP)",
        "(LP)",
        "0.5s",
        "37.5",
        "10.2",
        "8.8",
        "21.0",
        "1.0s",
        "57.0",
        "11.6",
        "13.9",
        "31.1",
        "2.0s",
        "72.2",
        "15.1",
        "21.1",
        "45.9",
        "4.0s",
        "82.5",
        "20.7",
        "30.7",
        "63.7",
        "8.0s",
        "88.9",
        "25.2",
        "41.8",
        "78.3",
        "16.0s",
        "94.4",
        "33.3",
        "54.6",
        "88.9",
        "32.0s",
        "97.8",
        "42.8",
        "68.5",
        "95.2",
        "Median time",
        "0.79s",
        "77.5s",
        "12.1s",
        "2.4s",
        "We also compare our method to cube pruning (Chiang, 2007; Huang and Chiang, 2007).",
        "We reimplemented cube pruning in C++, to give a fair comparison to our method.",
        "Cube pruning has a parameter, b, dictating the maximum number of items stored at each chart entry.",
        "With b = 50, our decoder finds higher scoring solutions on 50.5% of all examples (349 examples), the cube-pruning method gets a strictly higher score on only 1 example (this was one of the examples that did not converge within 200 iterations).",
        "With b = 500, our decoder finds better solutions on 18.5% of the examples (128 cases), cube-pruning finds a better solution on 3 examples.",
        "The median decoding time for our method is 0.79 seconds; the median times for cube pruning with b = 50 and b = 500 are 0.06 and 1.2 seconds respectively.",
        "Our results give a very good estimate of the percentage of search errors for cube pruning.",
        "A natural question is how large b must be before exact solutions are returned on almost all examples.",
        "Even at b = 1000, we find that our method gives a better solution on 95 test examples (13.7%).",
        "Figure 5 also gives a speed comparison of our method to a linear programming (LP) solver that solves the LP relaxation defined by constraints D0-D6.",
        "We still see speed-ups, in spite of the fact that our method is solving a harder problem (it provides integral solutions).",
        "The Lagrangian relaxation method, when run without the tightening method of section 6, is solving a dual of the problem being solved by the LP solver.",
        "Hence we can measure how often the tightening procedure is absolutely necessary, by seeing how often the LP solver provides a fractional solution.",
        "We find that this is the case on 54.0% of the test examples: the tightening procedure is clearly important.",
        "Inspection of the tightening procedure shows that the number of partitions required (the parameter q) is generally quite small: 59% of examples that require tightening require q < 6; 97.2% require q < 10."
      ]
    },
    {
      "heading": "8. Conclusion",
      "text": [
        "We have described a Lagrangian relaxation algorithm for exact decoding of syntactic translation models, and shown that it is significantly more efficient than other exact algorithms for decoding treeto-string models.",
        "There are a number of possible ways to extend this work.",
        "Our experiments have focused on tree-to-string models, but the method should also apply to Hiero-style syntactic translation models (Chiang, 2007).",
        "Additionally, our experiments used a trigram language model, however the constraints in figure 3 generalize to higher-order language models.",
        "Finally, our algorithm recovers the 1-best translation for a given input sentence; it should be possible to extend the method to find k-best solutions.",
        "A Computing the Optimal Trigram Paths",
        "Esepi(P) u(s) -J2seP2(p) v(s)- Here h is a function that computes language model scores, and the other terms involve Lagrange mulipliers.",
        "Our task is to compute o* for all v G VL.",
        "It is straightforward to show that the S, T graph is acyclic.",
        "This will allow us to apply shortest path algorithms to the graph, even though the weights u(s) and v(s) can be positive or negative.",
        "For any pair v\\,v2 G VL, define V{v\\, v2) to be the set of paths between (v^ ]) and (v2 j) in the graph S, T. Each path p gets a score scoreu(p) = -£sepw(s)-Next, define p*u{v\\,v2) = argmaxj,e7>(^^2) scoreu(p), and score*u(v\\, v2) = scoreu(p*).",
        "We assume similar definitions forp*(«i, v2) and score*v(v\\, v2).",
        "Thep* and score*u values can be calculated using an all-pairs shortest path algorithm, with weights u(s) on nodes in the graph.",
        "Similarly, p*v and score*v can be computed using all-pairs shortest path with weights v(s) on the nodes.",
        "Having calculated these values, define T(v) for any leaf v to be the set of trigrams (x, y, v) such that: 1) x,y e VL;2) there is a path from (x ]) to (y J.)",
        "and from (y j) to (v j) in the graph S, T. Then we can calculate T(v).",
        "Acknowledgments Alexander Rush and Michael Collins were supported under the GALE program of the Defense Advanced Research Projects Agency, Contract No.",
        "HR0011-06-C-0022.",
        "Michael Collins was also supported by NSF grant IIS-0915176.",
        "We also thank the anonymous reviewers for very helpful comments; we hope to fully address these in an extended version of the paper."
      ]
    }
  ]
}
