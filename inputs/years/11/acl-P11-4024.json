{
  "info": {
    "authors": [
      "Balaji Soundrarajan",
      "Thomas Ginter",
      "Scott DuVall"
    ],
    "book": "Proceedings of the ACL-HLT 2011 System Demonstrations",
    "id": "acl-P11-4024",
    "title": "An Interface for Rapid Natural Language Processing Development in UIMA",
    "url": "https://aclweb.org/anthology/P11-4024",
    "year": 2011
  },
  "references": [],
  "sections": [
    {
      "text": [
        "Balaji R. Soundrarajan, Thomas Ginter, Scott L. DuVall",
        "This demonstration presents the Annotation Librarian, an application programming interface that supports rapid development of natural language processing (NLP) projects built in Apache Unstructured Information Management Architecture (UIMA).",
        "The flexibility of UIMA to support all types of unstructured data - images, audio, and text - increases the complexity of some of the most common NLP development tasks.",
        "The Annotation Librarian interface handles these common functions and allows the creation and management of annotations by mirroring Java methods used to manipulate Strings.",
        "The familiar syntax and NLP-centric design allows developers to adopt and rapidly develop NLP algorithms in UIMA.",
        "The general functionality of the interface is described in relation to the use cases that necessitated its creation."
      ]
    },
    {
      "heading": "1. Introduction",
      "text": [
        "In the days when public libraries were the center of information exchange, the job of the librarian was to serve as an interface between the complex library system and the average user.",
        "The librarian made it possible for one to access specific sources of information without memorizing the Dewey Decimal System or flipping through the card catalog.",
        "Analogous to the great librarians of yesteryear, the Annotation Librarian serves the average Java developer in the creation and management of annotations within natural language processing (NLP) projects built using the open source Apache Unstructured Information Management Architecture (UIMA).",
        "Many NLP tasks are performed in processing steps that build upon one another.",
        "Systems designed in this fashion are called pipelines because text is processed and then passed from one step to the next like water flowing through a pipe.",
        "Each step in the pipeline adds structured data on top of the text called annotations.",
        "An annotation can be as simple as a classification of a span of text or complex with attributes and mappings to coded values.",
        "As pipeline systems have caught on, the ability to standardize functionality in and even across pipelines has emerged.",
        "UIMA provides a powerful infrastructure for the storage, transport, and retrieval of document and annotation knowledge accumulated in NLP pipeline systems (Ferrucci 2004).",
        "UIMA provides tools that allow testing and visualizing system results, integration with Eclipse, and use of standard XML description files for maintainability and interoperability.",
        "Because UIMA provides the underlying data model for storing meta-data and annotations with document text and the interface for interacting between processing steps, it has become a popular platform for the development of reusable NLP systems (D'Avolio 2010, Coden 2009, Savova 2008).",
        "The most notable example of UIMA capabilities is Watson, the question-answering system that competed and won two Jeopardy!",
        "matches against the all-time-winning human champions (Ferrucci 2010).",
        "In addition to its successful implementations in NLP, UIMA supports all types of unstructured information - video, audio, images, etc - and so all UIMA constructs generalize beyond text.",
        "While handling multiple data types increases the utility of the framework, developers new to UIMA may feel they need to understand the entire framework before being able to distinguish and focus solely on text.",
        "The Annotation Librarian aids both novice and experienced UIMA developers by providing intuitive and NLP-centric functionality."
      ]
    },
    {
      "heading": "2. System Overview",
      "text": [
        "The Annotation Librarian was developed as an interface that synthesizes many of the most frequent annotation management tasks encountered in NLP system development and presents them in a manner easily accessed for those familiar with general Java development methods.",
        "It provides convenience methods that mirror Java String manipulation, allowing developers to seamlessly combine document text and annotations with the same commands familiar to anyone who has parsed a String or written a regular expression.",
        "Advanced functionality allows developers to examine spatial relationships among annotations and perform annotation pattern matching.",
        "In this demonstration, we present the general functionality of the Annotation Librarian in the context of the health care research projects that necessitated the creation of the interface.",
        "The interface does not replace the need for NLP algorithms - developers have a plethora of patterns and decision rules, symbolic grammars, and machine learning techniques to create annotations.",
        "The Annotation Toolkit, though, provides a convenient way for developers to use existing annotations in their algorithms.",
        "This feeds the pipeline workflow that allows more complex annotations to be built in later processing steps using the annotations created in earlier steps.",
        "The Annotation Librarian was developed and modified in response to four research projects in the health care domain that relied on NLP extraction of concepts from clinical text.",
        "The diversity of the different tasks in each of these use cases allowed the interface to include functionality common to different types of NLP system development.",
        "Interface functionality will be described as groups of related methods in the context of the four research projects and cover pattern matching, span overlap, relative position, annotation modification, and retrieval.",
        "All projects received Institutional Review Board approval for data use and only synthetic documents, not real patient records, are shown in the examples presented in this paper."
      ]
    },
    {
      "heading": "3. Pattern Matching",
      "text": [
        "Name entity recognition and semantic classification tasks often require advanced concept identification techniques.",
        "Identifying mentions of prescriptions in a document using regular expressions, for example, would require hundreds of thousands of patterns for names of medicines and have to account for misspelling, abbreviations, and acronyms.",
        "Regular expressions are commonly used to solve simple NLP tasks, though, and can be utilized as part of a more complex information extraction strategy, such as understanding the context in which a term is used in the text (Garvin 2011, McCrae 2008, Frenz 2007, Chapman 2001).",
        "Negex (Chapman 2001) is an algorithm for identifying words before or after a term that suggest, for example, that a particular symptom is not present in a patient: \"the patient has no fever.\"",
        "Other methods for understanding the context around terms include the use of an inclusion and exclusion list (Akbar 2009), temporal locality search (Grouin 2009), window search (Li 2009), and combinations of the above techniques (Hamon 2009).",
        "The Annotation Librarian allows patterns to be built using existing annotations along with document text.",
        "This functionality combines the power of finding concepts that require complex means with the simplicity of regular expressions.",
        "The syntax mirrors that of the Java Pattern and Matcherclasses, but allows for an extended regular expression grammar to identify Annotations.",
        "Pattern matching is accomplished in three phases: the input pattern is compiled, the document and annotations are analyzed for matches, and matches are returned along with span information.",
        "A project identifying positive microbiology cultures will illustrate the use of pattern matching with the Annotation Librarian.",
        "Clinicians order microbiology cultures to determine whether a patient has a bacterial infection and which antibiotics would be most effective at treating the infection.",
        "Susceptibility is the measure of whether an antibiotic can effectively treat an organism or whether the organism is resistant to it.",
        "A sample of microbiology report text is shown in Figure 1 and visualized annotations for the same sample are shown in Figure 2.",
        "http://download.oracle.com/javase/6/docs/api/java/util/regex/ Pattern.html http://download.oracle.com/javase/6/docs/api/java/util/regex/ Matcher.html",
        "CULTURE RESULTS:"
      ]
    },
    {
      "heading": "1.. MODERATE STAPHYLOCOCCUS AUREUS Comment: CIPROFLOXACIN = S",
      "text": [
        "ERYTHROMICIN = S",
        "Comment: GENTAMICIN 500 synergy screen -> RESISTANT Confirmed sensitive to Penicillin",
        "ANTIBIOTIC SUSCEPTIBILITY TESTS RESULTS: 1.",
        "STAPHYLOCOCCUS AUREUS : 2.",
        "ESCHERICHIA COLI",
        "AMPICLN S",
        "PENICLN S",
        "Figure 1 : Microbiology Report Text"
      ]
    },
    {
      "heading": "1.. <ORGANISM> Comment: <DRUGj = <S^SCEPTIBIUTY>)",
      "text": [
        "|<DRUG>i = INSUSCEPTIBILITY^"
      ]
    },
    {
      "heading": "2.. <ORGANISM>",
      "text": [
        "Comment: <DRUG> 500 synergy screen <SUSCEPTIBILITY> Confirmed <SUSCEPTIBILITY> to <DRUG>",
        "ANTIBIOTIC SUSCEPTIBILITY TESTS RESULTS:"
      ]
    },
    {
      "heading": "1.. <ORGANISM >j",
      "text": [
        "Figure 2: Annotated Report",
        "To demonstrate pattern matching in this sample, the simple pattern of a drug annotation followed by an equals sign and then by a susceptibility annotation will be used."
      ]
    },
    {
      "heading": "3. .1 Pattern Compilation",
      "text": [
        "The pattern matching process begins when a new instance of an AnnotationPattern is created from the static compile method.",
        "AnnotationPattern is analogous to the Java Pattern class.",
        "AnnotationPattern susceptibilityPattern = AnnotationPattern.compilepattern\") ;",
        "The method takes advantage of the UIMA implementation of annotations.",
        "Each annotation is an instance of a class that inherits from the UIMA class Annotation.",
        "UIMA allows developers to create new types of annotations (in this example Organism, Antibiotic, and Susceptibility) that become Java classes.",
        "The compile method input string pattern uses XML tags to represent Annotation classes and tag attributes to denote the name of method calls and return values in the format of:",
        "<AnnotationClass methodName=\"expected value\" />",
        "When the extra constraint of matching on some method return values is not needed, the tag attribute is left blank.",
        "Portions of the pattern that are not contained in XML tags are compiled as Java regular expressions.",
        "For our example, the input pattern would be:",
        "<Antibiotic /> = <Susceptibility />",
        "or further constrained as:",
        "<Antibiotic getMedName=\"ciprofloxacin\" /> = <Susceptibility getValue=x,S\" />",
        "which would only match if the particular medication (ciprofloxacin) and susceptibility (S) matched as well.",
        "The pattern is converted into a finite state machine (FSM) in a process described by Fegaras (2005).",
        "With our pattern, a four-state FSM would be generated.",
        "To arrive in State 1, an Antibiotic annotation must match.",
        "To arrive in State 2, a regular expression for \"=\" must match.",
        "The Final State is reached when a matching Susceptibility annotation is found.",
        "Any other input would result in a transition back to the Start State.",
        "»{^T^)_= Susceptibility",
        "Documented at http://uima.apache.org/d/uimaj-2.3.1/api/index.html",
        "Match Analysis",
        "The second phase of pattern matching processes the document text and annotation set to determine if any matches can be found.",
        "This phase is triggered by a call to the static matcher method that returns a new instance of an AnnotationMatcher object.",
        "AnnotationMatcher is analogous to the Java Matcher class.",
        "AnnotationMatcher suscMatcher = susceptibilityPattern.matcher(cas) ;",
        "This phase just checks to ensure that each annotation type has at least one instance in the document.",
        "Otherwise, a pattern match is not possible.",
        "Here, the cas parameter refers to the UIMA",
        "Common Analysis Structure, the object containing the document and annotation information.",
        "The final phase of pattern matching involves a call to the AnnotationMatcher find method.",
        "This call results in a FSM traversal at the starting position parameter.",
        "Duplicate match candidates starting at the same point are pooled in each state.",
        "The candidate pool in each state is traversed with a binary search algorithm, which reduces overall traversal time.",
        "Note the following example in which a relationship is created through a new user-defined Annotation class type.",
        "while(suscMatcher.find(position)) {",
        "AntibioticSusceptibility annotation = new AntibioticSusceptibility(cas) ; annotation.setBegin(suscMatcher.start()) ; annotation.setEnd(suscMatcher.end()) ; annotation.addToIndexes() ; position = matcher.end() ; }//while",
        "Similar to the Java Matcher find method, the first match is found from the starting position.",
        "The start and end positions are also set within the AnnotationMatcher instance object, which facilitates the creation of new annotations that span the complete pattern.",
        "The Annotation Librarian pattern matching functionality allows the inclusion of annotations, which provides an added level of power beyond regular expressions on text data only."
      ]
    },
    {
      "heading": "4. Retrieval",
      "text": [
        "The retrieval methods allow developers to interact with annotations and metadata.",
        "This set of methods includes the ability to get the file name and path of the document, get all annotations in the document, and get all annotations of just a particular type.",
        "getDocumentPath() getAHAnnotations ( ) getAHAnnotationsOfType ( int type )",
        "Ejection fraction is a heart health measurement.",
        "An NLP system was developed to identify the ejection fraction from echocardiogram reports.",
        "In this project, the Annotation Librarian facilitated the extraction of specific annotation types (the section the concept was found in) in order to discover relevant concept-value pairs.",
        "In Figure 4, ejection fraction annotations are shown in red and quantitative and qualitative values in blue.",
        "Because \"systolic function\" can be used to report ejection fraction, but only when referring to the left side of the heart, it was important to retrieve the section annotations and check the header."
      ]
    },
    {
      "heading": "5. Annotation Modification",
      "text": [
        "The annotation modification methods allow previous annotations to be altered by trimming whitespace and removing punctuation.",
        "While these are trivial tasks performed on Java Strings, an annotation is just a pointer to the text.",
        "Updating the annotation with the correct character span requires understanding of UIMA functions and can introduce errors if not done carefully.",
        "The Annotation Librarian ensures accuracy by handling these tasks with straightforward programmatic calls.",
        "trim( Annotation annotation ) removePunctuation( Annotation annotation )",
        "Identifying the organisms from the microbiology reports relied on splitting template text.",
        "The project described in Section 3 for pattern matching utilized the Annotation Librarian functionality to clean up spurious characters and whitespace included in annotations."
      ]
    },
    {
      "heading": "6. Span Overlap",
      "text": [
        "This set of methods describes how annotations relate to each other spatially by answering questions such as: Does one annotation completely contain the other?",
        "Do the annotations overlap in the text?",
        "Do they both cover the same span of text?",
        "overlaps( Annotation al, Annotation a2 ) contains ( Annotation al, Annotation a2 ) coversSameSpan( Annotation al, Annotation a2 )",
        "MEASUREMENTS:",
        "Systolic Pressure: 120 mmHg",
        "Diastolic Pressure: 80 mmHg",
        "Ejection Fraction: [75%]",
        "OTHER CONCLUSIONS:",
        "Left Ventricle: The LV is normal in size with a [normal[ejection fraction at 75%T]",
        "Right Ventricle: Normal systolic function.",
        "In a system built for identifying medications in discharge summaries, the brand and generic names would often both be listed.",
        "Name entity recognition would end up mapping at multiple granularities - brand name only, generic name only, brand and generic name combinations, and even name and dose combinations.",
        "The span overlap methods were used to identify and combine overlapping names.",
        "Figure 5 shows the annotations that were found and resolved using span overlaps.",
        "ALLERGIES: Penicillin).",
        "MEDICATIONS ON ADMISSION: Valium (diazepam) 5 mg Lasix (furosemide) 40 mg b.i.d.",
        "Claritin (loratadine) 1 pill po prn.",
        "HOSPITAL COURSE: The patient was admitted for a brain hemorrhage and was placed on Lasix."
      ]
    },
    {
      "heading": "7. Relative Position",
      "text": [
        "The relative position methods allow developers to access annotations based on their position in the text to each other.",
        "These methods can determine the next or previous adjacent annotation or the text that exists between two annotations.",
        "Often, a task required determining which concepts were found in the same sentence or finding all concepts in a certain section.",
        "Methods in this set provide functionality to find annotations that covering the span of another annotations or all annotations contained within the span of another annotation.",
        "getContainingAnnotations( Annotation al ) getNextClosest( Annotation al ) getPreviousClosest( Annotation al ) getTextBetween( Annotation al, Annotation a2 )",
        "As part of a project to determine coreference in disease outbreak reports, the ability to determine relative position facilitated coreference resolution.",
        "It was also necessary to determine relationships between certain types of annotations from the window of the text.",
        "The Annotation Librarian simplified the task of determining co-location by providing the functionality within a single method call.",
        "Text between two Annotation objects was similarly identified with a single method call.",
        "WHO declares swine flu crisis a health emergency",
        "The World Health Organization has declared the swine flu outbreak in North America a \"public health emergency of international concern\".",
        "i I Margaret Chan, WHO director-general, made the decision late on Saturday after consulting influenza experts during an emergency meeting.",
        "She earlier told reporters the outbreak had \"pandemic potential.\"",
        "I I But her agency held off raising its pandemic alert level, citing the need for more information."
      ]
    },
    {
      "heading": "8. Conclusion",
      "text": [
        "The Annotation Librarian was developed and modified over a number of different NLP use cases.",
        "Because of the diversity of tasks in each of these use cases, the toolkit includes functionality common to various types of NLP system development.",
        "It includes over two-dozen functions that were used more than one hundred times in each of the four systems listed above.",
        "Use of this interface reduced the amount of repeated code; it simplified common tasks, and provided an intuitive interface for NLP-centric annotation management without requiring the presence of an NLP developer who has intimate knowledge of the UIMA data structure.",
        "The extended capability provided by the pattern matching methods allows system developers to capitalize on the pipeline approach to NLP development in determining patterns.",
        "The ability to use annotations along with text significantly increases the types of patterns that can be identified without complex regular expressions."
      ]
    },
    {
      "heading": "9. Future Plans",
      "text": [
        "The Annotation Librarian has been enhanced over the course of a number of biomedical NLP use cases and we plan to continue to enhance the interface as new use cases arise.",
        "Some planned enhancements include performance improvements and expanding the AnnotationPattern input pattern syntax to include regular expressions for method return values and annotation class names.",
        "We plan to provide additional functionality such as pattern frequency counts.",
        "We see the ability for the Annotation Librarian to help identify patterns through active learning or unsupervised techniques.",
        "In this way, relationships between annotations could be inferred based on those existing in the document set.",
        "Such functionality would also provide the ability for more intelligent analysis of future document sets or observation systems by allowing previously identified relationships to be utilized in other use cases."
      ]
    },
    {
      "heading": "Acknowledgments",
      "text": [
        "This work was supported using resources and facilities at the VA Salt Lake City Health Care System with funding support from the VA Informatics and Computing Infrastructure (VINCI), VA HSR HIR 08-204 and the Consortium for Healthcare Informatics Research (CHIR), VA HSR HIR 08-374.",
        "Views expressed are those of the authors and not necessarily those of the Department of Veterans Affairs."
      ]
    }
  ]
}
