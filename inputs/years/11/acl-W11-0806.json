{
  "info": {
    "authors": [
      "William Schuler",
      "Aravind K. Joshi"
    ],
    "book": "Proceedings of the Workshop on Multiword Expressions: from Parsing and Generation to the Real World",
    "id": "acl-W11-0806",
    "title": "Tree-Rewriting Models of Multi-Word Expressions",
    "url": "https://aclweb.org/anthology/W11-0806",
    "year": 2011
  },
  "references": [
    "acl-P94-1022",
    "acl-T75-2013",
    "acl-W04-0411"
  ],
  "sections": [
    {
      "text": [
        "Multi-word expressions (MWEs) account for a large portion of the language used in day-to-day interactions.",
        "A formal system that is flexible enough to model these large and often syntactically-rich non-compositional chunks as single units in naturally occurring text could considerably simplify large-scale semantic annotation projects, in which it would be undesirable to have to develop internal compositional analyses of common technical expressions that have specific idiosyncratic meanings.",
        "This paper will first define a notion of functor-argument decomposition on phrase structure trees analogous to graph coloring, in which the tree is cast as a graph, and the elementary structures of a grammar formalism are colors.",
        "The paper then presents a formal argument that tree-rewriting systems, a class of grammar formalism that includes Tree Adjoining Grammars, are able to produce a proper superset of the functor-argument decompositions that string-rewriting systems can produce."
      ]
    },
    {
      "heading": "1. Introduction",
      "text": [
        "Multi-word expressions (MWEs), whose structure and meaning cannot be derived from their component words as they occur independently, account for a large portion of the language used in day-to-day interactions.",
        "Indeed, the relatively low frequency of comparable single-word paraphrases for elementary spatial relations like 'in front of' (compare to 'before') or 'next to' (compare to 'beside') suggest a fundamentality of expressions, as opposed to words, as a basic unit of meaning in language (Becker, 1975; Fillmore, 2003).",
        "Other examples of MWEs are idioms such as 'kick the bucket' or 'spill the beans', which have figurative meanings as expressions that sometimes even allow modification ('spill some of the beans') and variation in sentence forms ('which beans were spilled?",
        "'), but are not available when the component words of the MWE occur independently.",
        "A formal system that is flexible enough to model these large and often syntactically-rich non-compositional chunks as single units in naturally occurring text could considerably simplify large-scale semantic annotation projects, in which it would be undesirable to have to develop internal compositional analyses of common technical expressions that have specific idiosyncratic meanings.",
        "Models have been proposed for MWEs based on string-rewriting systems such as HPSG (Sag et al., 2002), which model compositionality as string adjacency of a functor and an argument substring.",
        "This string-rewriting model of compositionality essentially treats each projection of a head word as a functor, each capable of combining with an argument to yield a higher-level projection or functor.",
        "The set of projections from a lexical head can therefore be thought of as a single elementary structure: an nary functor, subsuming the arguments of the individual functors at each projection.",
        "This kind of approach is intuitive for fully-compositional analyses (e.g. in which a transitive verb like 'hold' is a functor and a NP complement like 'the basket' is an argument), but is less natural when applied to substrings of MWEs (e.g. treating pick as a functor and up as an argument in the verb-particle MWE pick ... up), since some of these arguments do not have any semantic significance (in the pick .. .up example , there is no coherent meaning for Up such that [pick X up] = Pick([X], Up)).",
        "This paper will argue that tree-rewriting systems, a class of grammar formalisms that includes Tree Adjoining Grammars (Joshi, 1985; Joshi and Sch-abes, 1997), are a more natural candidate for modeling MWEs since they can model entire fragments of phrase structure trees as elementary (locally non-compositional) semantic building blocks, in addition to the set of head-projections used in string-rewriting",
        "I the bucket",
        "proverbial",
        "Figure 1: Composition of elementary trees for idiom MWE 'kick the bucket' and adjective 'proverbial,' with the same semantics as an adverb 'proverbially' adjoining at the VP.",
        "systems.",
        "This allows more flexibility in defining the functor-argument decomposition of a given phrase structure tree.",
        "This will be demonstrated by reducing the functor-argument decompositions (compositional accounts of semantics assigned to portions of phrase structure trees) of string-rewriting systems to a special case of functor-argument decompositions of tree-rewriting systems.",
        "Discussion in this paper will focus on string-rewriting systems augmented with unification (such as HPSG) because in this framework the issue of multi-word expressions has been discussed (Sag et al., 2002).",
        "The arguments in this paper also apply to other string rewriting systems such as catego-rial grammars (Ajdukiewicz, 1935; Bar-Hillel, 1953; Steedman, 2000), but in these formalisms the issues concerning MWEs have not been extensively developed.",
        "Essentially, this paper formalizes the intuition (Abeille, 1993) that the extended domain of locality of tree-rewriting systems allows them to provide a compositional account of the semantics assigned to multi-word or idiomatic portions of phrase structure trees using elementary units that, after composition, may end up partially discontinuous in these trees.",
        "For example, a portion of a phrase structure tree for 'kick the bucket' with a single interpretation equivalent to 'die' can be modified through adjunction of the adjective 'proverbial' at the noun constituent 'bucket' without postulating separate semantics for 'kick' (see Figure 1)."
      ]
    },
    {
      "heading": "2. Definitions",
      "text": [
        "String rewriting systems are sets of rules for replacing symbols with other symbols in strings.",
        "A rewriting of some start symbol into a set of lexical symbols is called a derivation.",
        "Rewrite rules in a string rewriting system can be defined to have designated functor and argument symbols.",
        "Any derivation t can therefore yield a functor-argument decomposition D(t), essentially defining a set of semantic functor-argument dependencies among structured elementary categories.",
        "For simplicity, a functor-argument decomposition will be defined as a mapping from the constituent nodes in a phrase structure tree to the nodes in the elementary structures used to derive that tree.",
        "This can be thought of as a coloring of phrase structure nodes, in which colors correspond to elementary structures in the rewriting system.",
        "The elementary structures used in such a decomposition may then be considered nary functors, which may take several arguments, each of a different color.",
        "In string-rewriting systems such as HPSG, these nary functors consist of a head word and its projections, and the arguments of the functor are the non-projecting child of each such projection.",
        "Figure 2 shows feature-based and categorial analyses for the MWE '...to the ...power' (as in 'raise Y to the X power') which is taken here to have unambiguous meaning (in a technical context) as YX or Pow(Y, X), and is analyzed here to wrap around an ordinal number argument X and then adjoin onto a verb phrase 'raise Y' as a modifier.",
        "Because their elementary structures are projected up from individual head words, these systems prohibit an analysis of this MWE as a single wrapping functor.",
        "Instead, MWEs like this must be decomposed into individual functor words (e.g. power) and argument words (e.g. the, and to).",
        "Tree-rewriting systems, on the other hand, allow elementary structures to contain nodes which are neither projections nor argument sites.",
        "This permits an analysis of 'to the .",
        ".",
        ".",
        "power' as a single functor wrapped around its argument (see Figure 3), without having to specify functor-argument relations between power, to, and the.",
        "More generally, string-rewriting systems use elementary structures (n-ary functors) that originate at the lexical item and exhibit a bottom-up branching structure, branching to an argument site and a higher level projection at each step.",
        "In contrast, tree-rewriting systems use elementary structures that originate at a phrasal or clausal node and exhibit label : PP",
        "Figure 2: Elementary structures for a verb-phrase-modifying preposition in a functor-argument analysis derived from a feature structure grammar.",
        "Here, e indicates the origin node and boxed numbers indicate coindexations.",
        "a top-down branching structure that mirrors that of a phrase structure tree.",
        "As one might expect, there are tree-rewriting systems (namely those whose elementary structures contain multiple lexical items) that can produce functor-argument decompositions ('colorings') of a phrase structure tree which cannot be produced by a string-rewriting system.",
        "More surprisingly however, this paper will show that the converse is not true: in other words, for any string-rewriting system there always exists a tree-rewriting system that can produce the same functor-argument decomposition of a phrase structure tree.",
        "Thus, the set of functor-argument decompositions that can be produced by tree-rewriting systems is a proper superset of those that can be produced by string-rewriting systems.",
        "Figure 3: Elementary structure for a verb-phrase-modifying prepositional phrase 'to the ...power' in a tree-rewriting system, derived from a tree-adjoining grammar.",
        "Here, e indicates the origin node, o indicates a non-argument node (or lexical 'anchor'), and boxed numbers indicate coindexations.",
        "This is surprising because, taken as a class, there is no inherent difference in recognition complexity between string-rewriting systems and tree-rewriting systems (as may be the case between specific members of these classes, say between CGs and TAGs), since both are worst-case exponential if unconstrained coindexation of structure is allowed (as in unification grammars).",
        "This is also surprising because, since they branch upward, the elementary structures of string-rewriting systems can specify complex functors as arguments, which the downward-branching elementary structures of tree-rewriting systems cannot.",
        "However, this paper will show that this ability to specify complex functors as arguments does not confer any additional flexibility in calculating functor-argument decompositions of phrase structure trees, and can be factored out with no loss in expressivity."
      ]
    },
    {
      "heading": "3. Reduction of string-rewriting",
      "text": [
        "systems to tree-rewriting systems",
        "The first step will be to define an nary functor in a string-rewriting system as a kind of elementary structure a (a tree in fact), whose nodes aM branch 'upward' into substructure nodes (connected by departing arcs labeled L, R, or p,) specifying a left or right argument category (aM.L or aM.R) and a projected category (aß.p), rather than branching 'downward' into left and right child constituents as in an ordinary phrase structure tree.",
        "In order to extend this reduction to feature-based systems, these elementary structures will also be augmented with coindex-ation sets I of elementary structure nodes that must be identical (in terms of labels and departing arcs) in any functor-argument decomposition of a phrase structure tree.",
        "e NP-m...::^K.y..",
        "Figure 4: Decomposition ('coloring') of a phrase structure tree t for the sentence 'Cube raises the sum to the third power', using elementary structures a and ß shown at right.",
        "Dotted lines from phrase structure tree nodes Tn to elementary structure nodes aM indicate that aM generates Tn in the functor-argument decomposition: aM G Dpa (tv ).",
        "Dashed lines from elementary structure nodes ßv to other elementary structure nodes aM indicate that aM is among the nodes identified with ßv as arguments of ß in the decomposition.",
        "Boxed identifiers indicated coindices between nodes ßv and ßv' in ß such that 3/ G ß .",
        "ßv, ßv' GI.",
        "Figure 4 shows a functor-argument decomposition (or 'coloring') of a phrase structure tree using these upward-branching elements.",
        "The upward-branching elementary structures used in any such decomposition can then be converted into a normal form in which all argument nodes are atomic (have no departing arcs), using the following transformations of elementary structures to equivalent structures that fit together generate the same functor-argument decomposition.",
        "This is done by simultaneously excising 'matched' material from both the argument branch of an elementary structure and the top of the elementary structure that is its argument in the given decomposition.",
        "The use of coindexation sets complicates this transformation somewhat.",
        "Initial configurations of coindexation sets in upward-branching elementary structures can be exhaustively partitioned into three classes, defined with respect to the 'trunk' of the elementary structure, which is the set of nodes connected to the origin by paths containing only p arcs.",
        "These classes are:",
        "1. coindexations with more than one coindexed node on the trunk,",
        "2. coindexations with fewer than one coindexed node on the trunk, and"
      ]
    },
    {
      "heading": "3.. coindexations with exactly one coindexed node",
      "text": [
        "on the trunk.",
        "Elementary structures in the first class, with more than one coindexed node on the trunk, are equivalent to graphs with directed cycles, and are ordinarily excluded from feature-based analyses, so they will be ignored here.",
        "Elementary structures in the second class, with fewer than one coindexed node on the trunk, can be converted to equivalent structures with no coindices (which trivially satisfies the above argument-atomicity requirement), using the simultaneous excision of 'matched' structure in functor and argument structures described above, by simply extending this to cover the portion of the argument elementary structure that extends all the way to the top of the trunk.",
        "Elementary structures in the third class, with exactly one coindexed node on the trunk, can be converted to equivalent structures that satisfy argument-atomicity using a three-step process.",
        "First, the upward-branching substructures above these coindexed nodes (if any) are unified, so the arcs departing from each coindexed node will be recursively identical (this must be possible in any feature-based grammar, or the coindexation would be ill-formed, and should therefore be excluded).",
        "The coin-dexation is then recursively slid up along the p arc departing from each such node, until the coindexation set contains nothing but atomic categories (with no departing arcs).",
        "Finally, the argument nodes are made to be atomic using the simultaneous excision of 'matched' structure in functor and argument structures described above, leaving an (atomic) coindex-ation at each (atomic) argument position in each affected branch.",
        "Elementary structures with multiple class 3 coin-dexation sets I and I' (which cannot be deleted as described above for class 2 sets) can be transformed into structures with a single coindexation set I by copying the portion of the trunk between the (unique) on-trunk members of each initial set I and I' onto every other node in the set I' that contains the lower trunk node (this copy should include the coindex belonging to I).",
        "The coindexation set I' containing the lower on-trunk node is then simply deleted.",
        "The normal-form upward-branching structures resulting from this transformation can now be converted into downward-branching elementary trees in a tree-rewriting system (with coindexed nodes corresponding to 'root' and 'foot' nodes as defined for tree-adjoining grammars) by simply replacing each pair of argument and conclusion arcs with a pair of left-child and right-child arcs departing the conclusion node.",
        "Since the normal form for upward-branching elementary structures allows only atomic arguments, this redrawing of arcs must result in well-formed downward-branching elementary trees in every case.",
        "In particular, this conversion results in a subset of tree-rewriting systems in which each (binary) branch of every elementary tree must have exactly one argument position and one non-argument position among its two children.",
        "This is a special case of a more general class of tree-rewriting systems, which may have two argument positions or no argument positions among the children at each binary branch.",
        "Such trees are not equivalent to trees with a single argument position per branch, because they will result in different functor-argument decompositions ('colorings') of a target phrase structure tree.",
        "Moreover, it is precisely these non-string-rewriting-equivalent elementary trees that are needed to model the local non-compositionality of larger multi-word expressions like 'threw X to the lions' (see Figure 5), because only downward branches with multiple nontheo lionso",
        "Figure 5: Elementary structure for MWE idiom 'threw .",
        ".",
        ".to the lions' allowing modification to both VP, PP and NP sub-constituents (e.g. 'threw your friends today right to the proverbial lions).",
        "argument children can produce the multilevel subtrees containing the word 'threw' and the word 'lions' in the same elementary unit."
      ]
    },
    {
      "heading": "4. Conclusion",
      "text": [
        "This paper has shown that tree-rewriting systems are able to produce a superset of the functor-argument decompositions that can be produced by string-rewriting systems such as categorial grammars and feature-structure grammars such as HPSG.",
        "This superset additionally allows elementary units to contain multiple (lexical) leaves, which a string-rewriting system cannot.",
        "This makes tree-rewriting systems ideally suited to the analysis of natural language texts that contain many multi-word expressions with idiosyncratic (non-compositional) meanings.",
        "Although neither the tree-rewriting nor the string-rewriting analyses defined above can be generated in guaranteed polynomial time (since they may require the construction of unbounded stacks of unrecognized structure during bottom-up recognition), they can both be made polynomial (indeed, cubic) by the introduction of 'regular form' constraints (Rogers, 1994), which limit this stack in the same way in both cases.",
        "In contrast with representations like that of (Villavicencio et al., 2004), in which concepts are distributed over several lexical entries, a tree-rewriting representation such as the one described in this paper allows only a single lexical entry to be listed for each concept.",
        "For example:",
        "(using the notation '!'",
        "and '*' for substitution sites and foot nodes, respectively).",
        "It is anticipated that this will simplify the organization of lexical resources for multi-word expressions."
      ]
    }
  ]
}
