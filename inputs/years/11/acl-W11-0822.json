{
  "info": {
    "authors": [
      "Vitor De Araujo",
      "Carlos Ramisch",
      "Aline Villavicencio"
    ],
    "book": "Proceedings of the Workshop on Multiword Expressions: from Parsing and Generation to the Real World",
    "id": "acl-W11-0822",
    "title": "Fast and Flexible MWE Candidate Generation with the mwetoolkit",
    "url": "https://aclweb.org/anthology/W11-0822",
    "year": 2011
  },
  "references": [
    "acl-C10-2120",
    "acl-C10-3015"
  ],
  "sections": [
    {
      "text": [
        "Vitor De Araujo* Carlos Ramisch* Aline Villavicencio*",
        "4 Institute of Informatics, Federal University of Rio Grande do Sul, Brazil V GETALP - LIG, University of Grenoble, France",
        "{vbuaraujo,ceramisch,avillavicencio}@inf.ufrgs.br",
        "We present an experimental environment for computer-assisted extraction of Multiword Expressions (MWEs) from corpora.",
        "Candidate extraction works in two steps: generation and filtering.",
        "We focus on recent improvements in the former, for which we increased speed and flexibility.",
        "We present examples that show the potential gains for users and applications."
      ]
    },
    {
      "heading": "1. Project Description",
      "text": [
        "The mwetoolkit was presented and demonstrated in Ramisch et al.",
        "(2010b) and in Ramisch et al.",
        "(2010a), and applied to several languages (Linardaki et al., 2010) and domains (Ramisch et al., 2010c).",
        "It is a downloadable open-source set of command-line tools mostly written in Python.",
        "Our target users are researchers with a background in computational linguistics.",
        "The system performs language-and type-independent candidate extraction in two steps:"
      ]
    },
    {
      "heading": "1.. Candidate generation",
      "text": [
        "• Pattern matching",
        "• n-gram counting"
      ]
    },
    {
      "heading": "2.. Candidate filtering",
      "text": [
        "• Thresholds, stopwords and patterns",
        "• Association measures, classifiers",
        "The main contribution of our tool, rather than a novel approach to MWE extraction, is an environment that systematically integrates the functionalities found in other tools, that is, sophisticated corpus queries like in CQP (Christ, 1994) and Manatee (Rychly and Smrz, 2004), candidate generation like in Text::NSP (Banerjee and Pedersen, 2003), and filtering like in UCS (Evert, 2004).",
        "The pattern matching and n-gram counting steps are the focus of the improvements described in this paper."
      ]
    },
    {
      "heading": "2. An Example",
      "text": [
        "Our toy corpus, consisting of the first 20K sentences of English Europarl v3, was POS-tagged and lem-matized using the TreeTagger and converted into XML.",
        "As MWEs encompass several phenomena (Sag et al., 2002), we define our target word sequences through the patterns shown in figure 1.",
        "The first represents sequences with an optional (?)",
        "determiner DET, any number (*) of adjectives A and one or more (+) nouns N. This shallow pattern roughly corresponds to noun phrases in English.",
        "The second defines expressions in which a repeated noun is linked by a preposition PRP.",
        "The backw element matches a previous word, in this example the same lemma as the noun identified as noun1.",
        "After corpus indexing and n-gram pattern matching, the resulting unique candidates are returned.",
        "Examples of candidates captured by the first pattern are complicated administrative process, the clock, the War Crimes Tribunal.",
        "The second pattern captures hand in hand, eye to eye, word for word."
      ]
    },
    {
      "heading": "3. New Features",
      "text": [
        "Friendlier User Interface In the previous version, one needed to manually invoke the Python scripts passing the correct options.",
        "The current version provides an interactive command-based interface which allows simple commands to be run on data files, while keeping the generation of intermediary files and the pipelining between the different phases of MWE extraction implicit.",
        "At the end, a user may want to save the session and restart the work later.",
        "Regular Expression Support While in the previous version only wildcard words were possible, now we support all the operators shown in figure 1 plus repetition interval (2,3), multiple choice (either) and in-word wildcards like writ* matching written, writing, etc.",
        "All these extensions allow for much more powerful candidate patterns to be expressed.",
        "This means that one can also use syntax annotation if the text is parsed: if two words separated by n words share a syntactic head, they are extracted.",
        "Multiattribute patterns are correctly handled during pattern matching, in spite of individual per-attribute indices.",
        "Some scripts may fuse the individual indices on the fly, producing a combined index (e.g. n-gram counting).",
        "Faster processing Candidate generation was not able to deal with large corpora such as Europarl and the BNC.",
        "The first optimization concerns pattern matching: instead of using the XML corpus and external matching procedures, now we match candidates using Python's builtin regular expressions directly on the corpus index.",
        "On a small corpus the current implementation takes about 72% the original time to perform pattern-based generation.",
        "On the BNC, extraction of the two example patterns shown before took about 4.5 hours and 1 hour, respectively.",
        "The second optimization concerns the creation of the index.",
        "The previous script allowed a static index to be created from the XML corpus, but it was not scalable.",
        "Thus, we have rewritten index routines in C. We still assume that the index must fit in main memory, but the new routines provide faster indexing with reasonable memory consumption, proportional to the corpus size.",
        "These scripts are still experimental and need extensive testing.",
        "With the C index routines, indexing the BNC corpus took about 5 minutes per attribute on a 3GB RAM computer."
      ]
    },
    {
      "heading": "4. Future Improvements",
      "text": [
        "Additionally to evaluation on several tasks and languages, we intend to develop several improvements to the tool.",
        "First, we would like to rewrite the pattern matching routines in C to speed the process up and reduce memory consumption.",
        "Second, we would like to test several heuristics to handle nested candidates (current strategy returns all possible matches).",
        "Third, we would like to perform more tests on using regular expressions to extract candidates based on their syntax annotation.",
        "Fourth, we would like to improve candidate filtering (not emphasized in this paper) by testing new association measures, filters, context-based measures, etc.",
        "Last but most important, we are planning a new release version and therefore we need extensive testing and documentation."
      ]
    }
  ]
}
