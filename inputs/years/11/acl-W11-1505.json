{
  "info": {
    "authors": [
      "Tomaž Erjavec"
    ],
    "book": "Proceedings of the 5th ACL-HLT Workshop on Language Technology for Cultural Heritage, Social Sciences, and Humanities",
    "id": "acl-W11-1505",
    "title": "Automatic linguistic annotation of historical language: ToTrTaLe and XIX century Slovene",
    "url": "https://aclweb.org/anthology/W11-1505",
    "year": 2011
  },
  "references": [
    "acl-L08-1451"
  ],
  "sections": [
    {
      "text": [
        "Tomaz Erjavec",
        "tomaz.erjavec@ijs.si",
        "The paper describes a tool developed to process historical (Slovene) text, which annotates words in a TEI encoded corpus with their modern-day equivalents, mor-phosyntactic tags and lemmas.",
        "Such a tool is useful for developing historical corpora of highly-inflecting languages, enabling full text search in digital libraries of historical texts, for modernising such texts for today's readers and making it simpler to correct OCR transcriptions."
      ]
    },
    {
      "heading": "1. Introduction",
      "text": [
        "Basic processing of written language, in particular tokenisation, tagging and lemmatisation, is useful in a number of applications, such as enabling full-text search, corpus-linguistic studies, and adding further layers of annotation.",
        "Support for lemmati-sation and morphosyntactic tagging is well-advanced for modern-day languages, however, the situation is very different for historical language varieties, where much less - if any - resources exist to train high-quality taggers and lemmatisers.",
        "Historical texts also bring with them a number of challenges not present with modern language:",
        "• due to the low print quality, optical character recognition (OCR) produces much worse results than for modern day texts; currently, such texts must be hand-corrected to arrive at acceptable quality levels;",
        "• full-text search is difficult, as the texts are not lemmatised and use different orthographic conventions and archaic spellings, typically not familiar to non-specialists;",
        "• comprehension can also be limited, esp.",
        "when the text uses an alphabet different from the contemporary norm.",
        "This paper describes a tool to help alleviate the above problems.",
        "The tool implements a pipeline, where it first tokenises the text and then attempts to transcribe the archaic words to their modern day equivalents.",
        "For here on, the text is tagged and lemmatised using the models for modern Slovene.",
        "Such an approach is not new, as it straightforwardly follows from a situation where good language models are available for contemporary language, but not for its historical variants.",
        "The focus of the research in such cases is on the mapping from historical words to modern ones, and such approaches have already been attempted for other languages, e.g. for English (Rayson et al.",
        "2007), German (Pilz et al.",
        "2008), Spanish (Sânchez-Marco et al.",
        "2010) and Icelandic (Rögn-valdsson and Helgadöttir, 2008).",
        "These studies have mostly concentrated on mapping historical variants to modern words or evaluating PoS tagging accuracy and have dealt with Germanic and Romance languages.",
        "This paper discusses the complete annotation process, including lemmatisa-tion, and treats a Slavic language, which has substantially different morphology; in Slovene, words belong to complex inflectional paradigms, which makes tagging and lemmatisation models quite complex, esp.",
        "for unknown words.",
        "The paper also discusses structural annotations supported by the tool, which takes as input a document encoded according to (a subset of) the Text Encoding Initiative Guidelines, TEI P5 (Burnard and Bauman, 2007) and also produces output in this format.",
        "An example of the tool input fragment and the corresponding output is given in Figure 1."
      ]
    },
    {
      "heading": "2. The ToTrTaLe tool",
      "text": [
        "The annotation tool implements a pipeline architecture and is essentially a wrapper program that calls a number of further processing modules.",
        "The tool is based on the ToTaLe tool (Erjavec et al., 2005), which performs Tokenisation, Tagging and Lemmatisation on modern text; as the present tool extends this with Transcription, it is called To-TrTaLe, and comprises the following modules:"
      ]
    },
    {
      "heading": "1.. extracting processing chunks from source TEI",
      "text": []
    },
    {
      "heading": "2.. tokenisation",
      "text": []
    },
    {
      "heading": "3.. extracting text to be annotated",
      "text": []
    },
    {
      "heading": "4.. transcription to modern word-forms",
      "text": []
    },
    {
      "heading": "5.. part-of-speech tagging",
      "text": []
    },
    {
      "heading": "6.. lemmatisation",
      "text": []
    },
    {
      "heading": "7.. TEI output",
      "text": [
        "While the tool and its modules make some language specific assumption, they are rather broad, such as that text tokens are (typically) separated by space; otherwise, the tool relies on external language resources, so it could be made to work with most European languages, although it is especially suited for the highly-inflecting ones.",
        "The tool is written in Perl and is reasonably fast, i.e. it processes about 100k words per minute on a Linux server.",
        "The greatest speed bottleneck is the tool start-up, mostly the result of the lemmatisation module, which for Slovene contains thousands of rules and exceptions.",
        "In the rest of this section we present the modules of ToTrTaLe, esp.",
        "as they relate to processing of historical language.",
        "In the first step, the top-level elements of the TEI file that contain text to be processed in one chunk are identified and passed on for linguistic processing.",
        "This step serves two purposes.",
        "Certain TEI elements, in particular the <teiHeader>, which contains the meta-data of the document, should not be analysed but simply passed on to the output (except for recording the fact that the text has been linguistically annotated).",
        "Second, the processors in certain stages keep the text and annotations in memory.",
        "As a TEI document can be arbitrarily large the available physical memory can be exhausted, leading to severe slowdown or even out-of-memory errors.",
        "It is therefore possible to specify which elements (such as <body> or <div>) should be treated as chunks to be processed in one annotation run.",
        "The multilingual tokenisation module mlTokenis written in Perl and in addition to splitting the input string into tokens has also the following features:",
        "• assigns to each token its token type, e.g. XML tag, sentence final punctuation, digit, abbreviation, URL, etc.",
        "• preserves (subject to a flag) white-space, so that the input can be reconstituted from the output.",
        "The tokeniser can be fine-tuned by putting punctuation into various classes (e.g. word-breaking vs. non-breaking) and also uses several language-dependent resource files, in particular a list of abbreviations (\"words\" ending in period, which is a part of the token and does not necessarily end a sentence), list of multi-word units (tokens consisting of several space-separated \"words\") and a list of (right or left) clitics, i.e. cases where one \"word\" should be treated as several tokens.",
        "These resource files are esp.",
        "important in the context of processing historical language, as it often happens that words that used to be written apart and now written together or vice-versa.",
        "Such words are put in the appropriate resource file, so that their tokenisation is normalised.",
        "Examples of multi-word and split tokens are given in Figure 1.",
        "A TEI encoded text can contain a fair amount of markup, which we, as much as possible, aim to preserve in the output.",
        "However, most of the markup should be ignored by the annotation modules, or, in certain cases, even the content of an element should be ignored; this goes esp.",
        "for markup found in text-critical editions of historical texts.",
        "For example, the top and bottom of the page can contain a running header, page number and catchwords (marked up in <fw> \"forme work\" elements), which should typically not be annotated as they are not linguistically interesting and would furthermore break the continuity of the text.",
        "The text might also contain editorial corrections (marked up as <choice> <sic>mistyped text</sic> <corr>corrected text</corr> </choice>), where, arguably, only the corrected text should be taken into account in the linguistic annotation.",
        "This module extracts the text that should be passed on to the annotation modules, where the elements to be ignored are specified in a resource file.",
        "This solution does take care of most situations encountered so far in our corpora but is not completely general.",
        "As discussed in Bennet et al.",
        "(2010), there are many cases where adding token (and sentence) tags to existing markup breaks XML well-formedness or TEI validity, such as sentences crossing structural boundaries or word-internal TEI markup.",
        "A general \"solution\" to the problem is stand-off markup, where the annotated text is kept separate from the source TEI, but that merely postpones the problem of how to treat the two as a unit.",
        "And while TEI does offer solutions to such problems, implementing processing of arbitrary TEI in-place markup would, however, require much further research.",
        "So ToTrTaLe adds the linguistic mark-up in-place, but does so correctly only for a restricted, although still useful, set of TEI element configurations.",
        "The transcription of archaic word-forms to their modern day equivalents is the core module which distinguishes our processing of historical language as opposed to its contemporary form.",
        "The transcription process relies on three resources:",
        "• a lexicon of modern-day word-forms;",
        "• a lexicon of historical word-forms, with associated modern-day equivalent word-form(s);",
        "• a set of transcription patterns.",
        "In processing historical texts, the word-form tokens are first normalised, i.e. de-capitalised and diacritic marks over vowels removed; the latter is most likely Slovene specific, as modern-day Slovene, unlike the language of the 19th century, does not use vowel diacritics.",
        "To determine the modern-day word-form, the historical lexicon is checked first.",
        "If the normalized word-form is an entry of the historical lexicon, the equivalent modern-day word-form has also been identified; if not, it is checked against the modern-day lexicon.",
        "This order of searching the lexica is important, as the modern lexicon can contain word-forms which have an incorrect meaning in the context of historical texts, so the historical lexicon also serves to block such meanings.",
        "If neither lexicon contains the word, the transcription patterns are tried.",
        "Many historical spelling variants can be traced to a set of rewrite rules or \"patterns\" that locally explain the difference between the contemporary and the historical spelling.",
        "For Slovene, a very prominent pattern is e.g. r^er as exemplified by the pair brz^berz, where the left side represents the modern and the right the historical spelling.",
        "Such patterns are operationalized by the finite-state \"Variant aware approximate matching\" tool Vaam, (Gotscharek et al.",
        "2009; Reffle, 2011), which takes as input a historical word-form, the set of patters, and a modern-day lexicon and efficiently returns the modern-day word-forms that can be computed from the archaic one by applying one or more patterns.",
        "The output list is ranked, preferring candidates where a small number of pattern applications is needed for the rewrite operation.It should be noted that the above process of transcription is non-deterministic.",
        "While this rarely happens in practice, the historical word-form can have several modern-day equivalents.",
        "More importantly, the Vaam module will typically return several possible alternative modernisations, of which only one is correct for the specific use of the word in context.",
        "We currently make use of frequency based heuristics to determine the \"best\" transcription, but more advanced models are possible, which would postpone the decision of the best candidate until the tagging and lemmatization has been performed.",
        "We currently use a set of about 100 transcription patterns, which were obtained by corpus inspection, using a dedicated concordancer.",
        "For tagging words in the text with their context disambiguated morphosyntactic annotations we use TnT (Brants, 2000), a fast and robust tri-gram tagger.",
        "The tagger has been trained on jos1M, the 1 million word JOS corpus of contemporary Slovene (Erjavec and Krek, 2008), and is also given a large background lexicon extracted from the 600 million word FidaPLUS reference corpus of contemporary Slovene (Arhar and Gorjanc, 2007).",
        "Automatic lemmatisation is a core application for many language processing tasks.",
        "In inflectionally rich languages assigning the correct lemma (base form) to each word in a running text is not trivial, as, for instance, Slovene adjectives inflect for gender, number and case (3x3x6) with a complex configuration of endings and stem modifications.",
        "For our lemmatiser we use CLOG (Manandhar et al., 1998, Erjavec and Dzeroski, 2004), which implements a machine learning approach to the automatic lemmatisation of (unknown) words.",
        "CLOG learns on the basis of input examples (pairs wordform/lemma, where each morphosyntactic tag is learnt separately) a first-order decision list, essentially a sequence of if-then-else clauses, where the defined operation is string concatenation.",
        "The learnt structures are Prolog programs but in order to minimise interface issues we made a converter from the Prolog program into one in Perl.",
        "An interesting feature of CLOG is that it does not succeed in lemmatising just any word-form.",
        "With historical texts it almost invariably fails in lemma-tising truly archaic words, making it a good selector for new entries in the historical lexicon.",
        "The lemmatiser was trained on a lexicon extracted from the jos1M corpus, and the lemmatisation of contemporary language is quite accurate, with 92% on unknown words.",
        "However, as mentioned, the learnt model, given that there are 2,000 separate classes, is quite large: the Perl rules have about 2MB, which makes loading the lemmatiser slow.",
        "The final stage of processing is packing the original file with the added annotations into a valid TEI document.",
        "This is achieved by combining Perl processing with XSLT scripts.",
        "The last step in the processing is the validation of the resulting XML file against a TEI schema expressed in Relax NG.",
        "A validation failure indicates that the input document breaks some (possibly implicit) mark-up assumptions - in this case either the input document must be fixed, or, if the encoding choices were valid, the program should be extended to deal also with such cases."
      ]
    },
    {
      "heading": "3. Conclusions",
      "text": [
        "The paper gave an overview of the ToTrTaLe tool, which performs basic linguistic annotation on TEI encoded historical texts.",
        "Some future work on the tool has already been mentioned, in particular exploring ways of flexibly connecting transcription to tagging and lemmatisation, as well as supporting more complex TEI encoded structures.",
        "While the tool itself is largely language independent, it does need substantial language resources to operationalize it for a language.",
        "Specific for historical language processing are a corpus of transcribed historical texts, a lexicon of historical word forms and a pattern set.",
        "The paper did not discuss these language resources, although it is here that most work will be invested in the future.",
        "The corpus we have used so far for Slovene lexicon building comes from the AHLib digital library (Prune, 2007; Erjavec 2005), which contains 2 million words of 19th century texts; we now plan to extend this with older material, predominantly from the 18th century.",
        "The ongoing process of creating the Slovene historical lexicon is described in Erjavec et al., (2010), while the model of a TEI encoded lexicon containing not only historical word-forms, but also all the other lexical items needed to feed the tool (such as multi-word units) is presented in Erjavec et al.",
        "(2011).",
        "As we extend the corpus, we will also obtain new words, which will be automatically annotated with ToTrTaLe and then manually corrected, feeding into the lexicon building process.",
        "For the patterns, the extension of the corpus will no doubt show the need to extend also the pattern set.",
        "Most likely this will be done by corpus inspection, via a dedicated concordancer, although alternative methods of pattern identification are possible.",
        "In particular, once when a substantial list of pairs historical word-form / contemporary word-form becomes available, automatic methods can be used to derive a list of patterns, ranked by how productive they are (Pilz et al., 2008; Oravecz et al.",
        "2010)."
      ]
    },
    {
      "heading": "Acknowledgements",
      "text": [
        "The author thanks the anonymous reviewers for their useful comments and suggestions.",
        "The work presented in this paper has been supported by the EU IMPACT project \"Improving Access to Text\" and the Google Digital Humanities Research Award \"Language models for historical Slovenian\"."
      ]
    }
  ]
}
