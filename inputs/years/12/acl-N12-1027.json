{
  "info": {
    "authors": [
      "Andreas Maletti"
    ],
    "book": "NAACL",
    "id": "acl-N12-1027",
    "title": "Every sensible extended top-down tree transducer is a multi bottom-up tree transducer",
    "url": "https://aclweb.org/anthology/N12-1027",
    "year": 2012
  },
  "references": [
    "acl-C08-1138",
    "acl-J07-2003",
    "acl-J08-3004",
    "acl-N10-1130",
    "acl-P03-2041",
    "acl-P08-1023",
    "acl-P08-1064",
    "acl-P09-1103",
    "acl-P10-1108",
    "acl-P11-1083",
    "acl-W10-2501"
  ],
  "sections": [
    {
      "text": [
        "2012 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, pages 263?273, Montre?al, Canada, June 3-8, 2012. c?2012 Association for Computational Linguistics Every sensible extended top-down tree transducer is a multi bottom-up tree transducer"
      ]
    },
    {
      "heading": "Abstract",
      "text": [
        "A tree transformation is sensible if the size of each output tree is uniformly bounded by a linear function in the size of the corresponding input tree.",
        "Every sensible tree transformation computed by an arbitrary weighted extended top-down tree transducer can also be computed by a weighted multi bottom-up tree transducer.",
        "This further motivates weighted multi bottom-up tree transducers as suitable translation models for syntax-based machine translation."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "Several different translation models are used in syntax-based statistical machine translation.",
        "Koehn (2010) presents an introduction to statistical machine translation, and Knight (2007) presents an overview of syntax-based statistical machine translation.",
        "The oldest and best-studied tree transformation device is the top-down tree transducer of Rounds (1970) and Thatcher (1970).",
        "G?cseg and Steinby (1984) and F?l?p and Vogler (2009) present the existing results on the unweighted and weighted model, respectively.",
        "Knight (2007) promotes the use of weighted extended top-down tree transducers (XTOP), which have also been implemented in the toolkit TIBURON by May and Knight (2006) [more detail is reported by May (2010)].",
        "In the context of bimorphisms, Arnold and Dauchet (1976) investigated XTOP, and Lilin (1978) and Arnold and Dauchet (1982) investigated multi bottom-up tree ?The author was supported by the German Research Foundation (DFG) grant MA 4959/1-1.",
        "transducers (MBOT) [as k-morphisms].",
        "Recently, weighted XTOP and MBOT, which are the central devices in this contribution, were investigated by Maletti (2011a) in the context of statistical machine translation.",
        "Several tree transformation devices are used as translation models in statistical machine translation.",
        "Chiang (2007) uses synchronous context-free grammars, which force translations to be very similar as observed by Eisner (2003) and Shieber (2004).",
        "This deficiency is overcome by synchronous tree substitution grammars, which are stateless linear and nondeleting XTOP.",
        "Recently, Maletti (2010b) proposed MBOT, and Zhang et al. (2008b) and Sun et al. (2009) proposed the even more powerful synchronous tree-sequence substitution grammars.",
        "Those two models allow certain translation discontinuities, and the former device also offers computational benefits over linear and nondeleting XTOP as argued by Maletti (2010b).",
        "The simplicity of XTOP makes them very appealing as translation models.",
        "In 2010 the ATANLP participants [workshop at ACL] identified ?copying?",
        "as the most exciting and promising feature of XTOP, but unrestricted copying can lead to an undesirable explosion of the size of the translation.",
        "According to Engelfriet and Maneth (2003) a tree transformation has linear size-increase if the size of each output tree is linearly bounded by the size of its corresponding input tree.",
        "The author believes that this is a very sensible restriction that intuitively makes sense and at the same time suitably limits the copying power of XTOP.",
        "We show that every sensible tree transformation",
        "that can be computed by an XTOP can also be computed by an MBOT.",
        "For example, linear XTOP (i.e., no copying) compute only sensible tree transformations, and Maletti (2008) shows that for each linear XTOP there exists an equivalent MBOT.",
        "Here, we do not make any restrictions on the XTOP besides some sanity conditions (see Section 3).",
        "In particular, we consider copying XTOP.",
        "If we accept the restriction to linear size-increase tree transformation, then our main result further motivates MBOT as a suitable translation model for syntax-based machine translation because MBOT can implement each reasonable (even copying) XTOP.",
        "In addition, our result allows us to show that each reasonable XTOP preserves regularity under backward application.",
        "As demonstrated by May et al. (2010) backward application is the standard application of XTOP in the machine translation pipeline, and preservation of regularity is the essential property for several of the evaluation algorithms of May et al. (2010)."
      ]
    },
    {
      "heading": "2 Notation",
      "text": [
        "We start by introducing our notation for trees, whose nodes are labeled by elements of an alphabet ?",
        "and a set V .",
        "However, only leaves can be labeled by elements of V .",
        "For every set T , we let ?",
        "(T ) = {?",
        "(t1, .",
        ".",
        ".",
        ", tk) |?",
        "?",
        "?, t1, .",
        ".",
        ".",
        ", tk ?",
        "T} , which contains all trees with a ?-labeled root and direct successors in T .",
        "The set T?",
        "(V ) of ?-trees with V leaves is the smallest set T such that V ?",
        "?",
        "(T ) ?",
        "T .",
        "We use X = {x1, x2, .",
        ".",
        ". }",
        "as a set of formal variables.",
        "Each node of the tree t ?",
        "T?",
        "(V ) is identified by a position p ?",
        "N+, which is a sequence of positive integers.",
        "The root is at position ?",
        "(the empty string), and the position ip with i ?",
        "N+ and p ?",
        "N?+ is the position p in the i-th direct subtree.",
        "The set pos(t) contains all positions of t, and the size of t is |t |= |pos(t)|.",
        "For each p ?",
        "pos(t), the label of t at p is t(p).",
        "Given a set L ?",
        "?",
        "?V of labels, we let posL(t) = {p ?",
        "pos(t) |t(p) ?",
        "L} be the positions with L-labels.",
        "We write posl(t) for pos{l}(t) for each l ?",
        "L. Finally, we write t[u]p for the tree obtained from t by replacing the subtree at position p by the tree u ?",
        "T?",
        "(V ).",
        "The following notions refer to the variables X .",
        "The tree t ?",
        "T?",
        "(V ) [potentially V ?",
        "X = ?]",
        "is",
        "the same tree with x2 replaced by ?He?.",
        "contains the variables that occur in t. A substitution ?",
        "is a mapping ?",
        ": X ?",
        "T?",
        "(V ).",
        "When applied to t, it returns the tree t?, which is obtained from t by replacing all occurrences of x ?",
        "X in t by ?(x).",
        "Our notions for trees are illustrated in Figure 1.",
        "Finally, we present weighted tree grammars (WTG) as defined by F?l?p and Vogler (2009), who defined it for arbitrary semirings as weight structures.",
        "In contrast, our weights are always nonnegative reals, which form the semiring (R+,+, ?, 0, 1) and are used in probabilistic grammars.",
        "For each weight assignment f : T ?",
        "R+, we let",
        "WTG offer an efficient representation of weighted forests (i.e., set of weighted trees), which is even more efficient than the packed forests of Mi et al. (2008) because they can be minimized efficiently using an algorithm of Maletti and Quernheim (2011).",
        "In particular, WTG can share more than equivalent subtrees and can even represent infinite sets of trees.",
        "A WTG is a system G = (Q,?, q0, P,wt) with ?",
        "a finite set Q of states (nonterminals), ?",
        "an alphabet ?",
        "of symbols, ?",
        "a starting state q0 ?",
        "Q, ?",
        "a finite set P of productions q ?",
        "r, where q ?",
        "Q and r ?",
        "T?",
        "(Q) \\Q, and ?",
        "a mapping wt: P ?",
        "R+ that assigns production weights.",
        "Without loss of generality, we assume that we can distinguish states and symbols (i.e., Q ?",
        "?",
        "= ?).",
        "For all ?, ?",
        "?",
        "T?",
        "(Q) and a production ?",
        "= q ?",
        "r,",
        "are required in the translation from English to Arabic.",
        "we write ?",
        "?",
        "?G ?",
        "if ?",
        "= ?",
        "[q]p and ?",
        "= ?",
        "[r]p, where p is the lexicographically least element of posQ(?).",
        "The WTG G generates the weighted tree lan",
        "for every t ?",
        "T?.",
        "Each such language is regular, and Reg(?)",
        "contains all those languages over the alphabet ?.",
        "A thorough introduction to tree languages is presented by G?cseg and Steinby (1984) and G?cseg and Steinby (1997) for the unweighted case and by F?l?p and Vogler (2009) for the weighted case."
      ]
    },
    {
      "heading": "3 Extended top-down tree transducers",
      "text": [
        "We start by introducing the main model of this contribution.",
        "Extended top-down tree transducers (XTOP) are a generalization of the top-down tree transducers (TOP) of Rounds (1970) and Thatcher (1970).",
        "XTOP allow rules with several (non-state and non-variable) symbols in the left-hand side (as in the rule of Figure 3), whereas a TOP rule contains exactly one symbol in the left-hand side.",
        "Shieber (2004) and Knight (2007) identified that this extension is essential for many NLP applications because without it linear (i.e., non-copying) cannot compute rotations (see Figure 2).",
        "In the form of bimorphisms XTOP were investigated by Arnold and Dauchet (1976) and Arnold and Dauchet (1982) in the 1970s, and Knight (2007) invigorated research.",
        "As demonstrated by Graehl et al. (2009) the most general XTOP model includes copying, deletion, and regular lookahead in the spirit of Engelfriet (1977).",
        "More powerful models (such as synchronous tree-sequence substitution grammars and multi bottom-up tree transducers) can handle translation discontinuities naturally as evidenced by Zhang et al. (2008a) and Maletti (2011b), but",
        "XTOP need copying and deletion to handle them.",
        "Copying essentially allows an XTOP to translate certain parts of the input several times and was identified by the ATANLP 2010 participants as one of the most interesting and promising features of XTOP.",
        "Currently, the lookahead feature is not used in machine translation, but we need it later on in the theoretical development.",
        "Given an alphabet Q and a set T , we let",
        "in which the root always has exactly one successor from T in contrast to Q(T ).",
        "We treat elements of Q[T?",
        "(V )] as special trees of T?",
        "?Q(V ).",
        "Moreover, we let 1??",
        "(t) = 1 for every t ?",
        "T?.",
        "XTOP with regular lookahead (XTOPR) were also studied by Knight and Graehl (2005) and Graehl et al. (2008).",
        "Formally, an XTOPR is a system",
        "?",
        "a finite set Q of states, ?",
        "alphabets ?",
        "and ?",
        "of input and output symbols, ?",
        "a starting state q0 ?",
        "Q, ?",
        "a finite set R of rules of the form ` ?",
        "r with",
        "The XTOPR M is linear [respectively, nondeleting] if r is linear [respectively, var(`) = var(r)] for every rule ` ?",
        "r ?",
        "R. It has no lookahead (XTOP) if c(?, x) = 1??",
        "for all ?",
        "?",
        "R and x ?",
        "X .",
        "Figure 3 shows a rule of a linear and nondeleting XTOP.",
        "The lookahead can be used to restrict rule applications.",
        "It can inspect subtrees that are deleted by a",
        "rule application, so for each rule ?",
        "= ` ?",
        "r, we let del(?)",
        "= var(`) \\ var(r) be the set of deleted variables in ?.",
        "If we suppose that a variable x ?",
        "del(?)",
        "matches to an input subtree t, then the weight of the lookahead c(?, x)(t), which we also write c?,x(t), is applied to the derivation.",
        "If it is 0, then this lookahead essentially prohibits the application of ?.",
        "It is important that the lookahead is regular (i.e., there exists a WTG accepting it).",
        "The toolkit TIBURON by May and Knight (2006) implements XTOP together with a number of essential operations.",
        "Lookahead is not implemented in TIBURON, but it can be simulated using a composition of two XTOP, in which the first XTOP performs the lookahead and marks the results, so that the second XTOP can access the lookahead information.",
        "As for WTG the semantics for the XTOPR",
        "where p ?",
        "posQ(?)",
        "is the lexicographically least Q-labeled position in ?.",
        "Figure 4 illustrates a derivation step.",
        "The XTOPR M computes a weighted tree transformation by applying rewrite steps to the tree q0(t), where t ?",
        "T?",
        "is the input tree, until an output tree u ?",
        "T?",
        "has been produced.",
        "The weight of a particular derivation is obtained by multiplying the weights of the rewrite steps.",
        "The weight of the transformation from t to u is obtained by summing all weights of the derivations from q0(t) to u. Formally1, the weighted tree transformation computed by M in state q ?",
        "Q is",
        "for every t ?",
        "T?",
        "and u ?",
        "T?.",
        "The XTOPR M computes the weighted tree transformation ?",
        "q0M .",
        "Two XTOPR M and N are equivalent, if ?M = ?N .",
        "The sum (1) can be infinite, which we avoid by simply requiring that all our XTOPR are producing, which means that r /?",
        "Q[X] for every rule ` ?",
        "r ?",
        "R.2 In a producing XTOPR each rule application produces at least one output symbol, which limits the number n of rule applications to the size of the output tree u.",
        "A detailed exposition to XTOPR is presented by Arnold and Dauchet (1982) and Graehl et al. (2009) for the unweighted case and by F?l?p and Vogler (2009) for the weighted case.",
        "The XTOPR Mex computes the tree transformation that turns the input tree ?n(?)",
        "into the fully balanced binary tree u of the same height with weight 2(2 n).",
        "An example derivation is presented in Figure 5.",
        "Unrestricted copying (as in Example 1) yields very undesirable phenomena and is most likely not needed in the machine translation task.",
        "In fact, it is almost universally agreed that a translation model should be ?linear-size increase?, which means that",
        "ditions on the XTOPR or the used weight structures to guarantee a well-defined semantics.",
        "the size of each output tree should be linearly bounded in the size of the corresponding input tree according to Aho and Ullman (1971) and Engelfriet and Maneth (2003).",
        "Definition 2.",
        "A mapping ?",
        ": T?",
        "?",
        "T?",
        "?",
        "R+ is linear-size increase if there exists an integer n ?",
        "N such that |u |?",
        "n ?",
        "|t |for all (t, u) ?",
        "supp(?).",
        "An XTOPR M is sensible if ?M is linear-size increase.",
        "?Sensible?",
        "is not a syntactic property of an XTOPR as it does not depend on the actual rules, but only on its computed weighted tree transformation.",
        "The XTOP Mex of Example 1 is not sensible because |u |= 2|t |?",
        "1 for every (t, u) ?",
        "?Mex .",
        "Intuitively, the number of times that Mex can use the copying rule ??",
        "is not uniformly bounded.",
        "We need an auxiliary result in the main part.",
        "Let ?",
        ": T?",
        "?",
        "T?",
        "?",
        "R+ be a weighted tree transformation.",
        "We need the weighted tree language ?",
        "?1(u) : T?",
        "?",
        "R+ of input trees weighted by their translation weight to a given output tree u ?",
        "T?.",
        "Formally,",
        "?)",
        "is regular.",
        "Proof sketch.",
        "We use some properties that are only defined in the next sections (for proof economy).",
        "It is recommended to skip this proof on the first reading and revisit it later.",
        "Maletti (2010a) shows that we can construct an XTOPR M ?",
        "such that",
        "for every t ?",
        "T?",
        "and u ?",
        "T?.",
        "This operation is called ?output product?",
        "by Maletti (2010a).",
        "The obtained XTOPR M ?",
        "is also producing, so we know that M ?",
        "can take at most |u?",
        "|rewrite steps to derive u?.",
        "Since M ?",
        "can only produce the output tree u?, this also limits the total number of rule applications in any successful derivation.",
        "Consequently, M ?",
        "can only apply a copying rule at most |u?",
        "|times, which shows that M ?",
        "is finitely copying (see Definition 8).",
        "By Theorem 11 we can implement M ?",
        "by an equivalent MBOT M ??",
        "(i.e., ?M ??",
        "= ?M ?",
        "; see Section 5), for which we know by Theorem 14",
        "lar.",
        "Finally, let us illustrate the overall structure of our arguments to show that every sensible XTOPR can be implemented by an equivalent MBOT.",
        "We first normalize the given XTOPR such that the semantic property ?sensible?",
        "yields a syntactic property called ?finitely copying?",
        "(see Section 4).",
        "In a second step, we show that each finitely copying XTOPR can be implemented by an equivalent MBOT (see Section 5).",
        "Figure 6 illustrates these steps towards our main result.",
        "In the final section, we derive some consequences from our main result (see Section 6).",
        "4 From sensible to finite copying First, we adjust a normal form of Engelfriet and Maneth (2003) to our needs.",
        "This section borrows heavily from Aho and Ullman (1971) and Engelfriet and Maneth (2003), where ?sensible?",
        "(unweighted) deterministic macro tree transducers (MAC) [see Engelfriet and Vogler (1985)] are considered.",
        "Our setting is simpler on the one hand because XTOPR do not have context parameters as MAC, but more difficult on the other hand because we consider nondeterministic and weighted transducers.",
        "Intuitively, a sensible XTOPR cannot copy a lot since the size of each output tree is linearly bounded in the size of the corresponding input tree.",
        "However, the actual presentation of the XTOPR M might con",
        "tain rules that allow unbounded copying.",
        "This unbounded copying might not manifest due to the lookahead restrictions or due to the fact that those rules cannot be used in a successful derivation.",
        "The purpose of the normal form is the elimination of those artifacts.",
        "To this end, we eliminate all states (except the initial state) that can only produce finitely many outputs.",
        "Such a state can simply be replaced by one of the output trees that it can produce and an additional lookahead that checks whether the current input tree indeed allows that translation (and inserts the correct translation weight).",
        "Normalized XTOPR are called ?proper?, and we define this property next.",
        "For the rest of this section, let M = (Q,?,?, q0, R, c,wt) be the considered sensible XTOPR.",
        "Without loss of generality, we assume that the state q0 does not occur in the right-hand sides of rules.",
        "Moreover, we write ?",
        "?",
        "?M ?",
        "if there exist nonzero weights w1, .",
        ".",
        ".",
        ", wn ?",
        "R+ \\ {0} and rules ?1, .",
        ".",
        ".",
        ", ?n ?",
        "R with",
        "In essence, ?",
        "?",
        "?M ?",
        "means that M can transform ?",
        "into ?",
        "(in the unweighted setting).",
        "where s, t ?",
        "T?",
        "are input trees, ?",
        "?",
        "T?(Q[T?",
        "]), p ?",
        "pos(?",
        "), and u ?",
        "T?",
        "is an output tree.",
        "The derivation in Definition 4 is illustrated in Figure 7.",
        "In other words, a proper state is reachable from the initial state and can transform infinitely many input trees into infinitely many output trees.",
        "The latter is an immediate consequence of Definition 4 since each input tree can be transformed into only finitely many output trees due to sensibility.",
        "The restriction includes the lookahead (because we require that the rewrite step weights are nonzero), which might further restrict the input trees.",
        "Example 5.",
        "The state q of the XTOP Mex is proper because we already demonstrated that it can transform infinitely many input trees into infinitely many output trees.",
        "The XTOPR M is proper if all its states except the initial state q0 are proper.",
        "Next, we show that each XTOPR can be transformed into an equivalent proper XTOPR using a simplified version of the construction of Lemma 5.4 by Engelfriet and Maneth (2003).",
        "Mind that we generally assume that all considered XTOPR are producing.",
        "Theorem 6.",
        "For every XTOPR there exists an equivalent proper XTOPR.",
        "Proof sketch.",
        "The construction is iterative.",
        "Suppose that M is not yet proper.",
        "Then there exists a state q ?",
        "Q, which can produce only finitely many outputs U .",
        "It can be decided whether a state is proper using Theorem 4.5 of Drewes and Engelfriet (1998), and in case it is proper, the set U can also be computed effectively.",
        "The cited theorem applies to unweighted XTOPR, but it can be applied also in our setting because?",
        "?M in Definition 4 disregards weights.",
        "Now we consider each u ?",
        "U individually.",
        "Clearly, (?",
        "qM ) ?1(u) is regular by Theorem 3.",
        "For each u and each occurrence of q in the right-hand side of a rule ?",
        "?",
        "R of M , we create a copy ??",
        "of ?, in which the selected occurrence of q(x) is replaced by u and the new lookahead is c(?",
        "?, x) = c(?, x) ?",
        "(?",
        "qM ) ?1(u), which restricts the input tree appropriately and includes the adjustment of the weights.",
        "Since regular weighted tree languages are closed under HADAMARD products [see F?l?p and Vogler (2009)], the lookahead c(?, x) ?",
        "(?",
        "qM ) ?1(u) is again regular.",
        "Essentially, we precompute the action of q as much as possible, and immediately output one of the finitely many output trees, check that the input tree has the required shape using the look-ahead, and charge the weight for the precomputed transformation again using the look-ahead.",
        "This process is done for each occurrence, so if a rule contains two occurrences of q, then the process must be",
        "done twice to this rule.",
        "In this way, we eventually purge all occurrences of q from the right-hand sides of rules of M without changing the computed transformation.",
        "Since q 6= q0 and q is now unreachable, it is useless and can be deleted, which removes one non-proper state.",
        "This process is repeated until all states except the initial state q0 are proper.",
        "Clearly, the construction of Theorem 6 applied to a sensible XTOPR M yields a sensible proper XTOPR M ?",
        "since the property ?sensible?",
        "refers to the computed transformation and ?M = ?M ?",
        ".",
        "Let us illustrate the construction on a small example.",
        "Example 7.",
        "Let ?",
        "be the rule displayed in Figure 3, and let us assume that the state qVB is not proper.",
        "Moreover, suppose that qVB can yield the output tree u and that we already computed the translation options that yield u.",
        "Let t1, .",
        ".",
        ".",
        ", tn ?",
        "T?",
        "be those translation options.",
        "Then we create the copy ??",
        "q0(S(x1,VP(x2, x3)))?",
        "S(u, qNP(x1), qNP(x3)) of the rule ?",
        "with lookahead c?(?",
        "?, x) such that",
        "In general, there can be infinitely many input trees ti that translate to a selected output tree u, so we cannot simply replace the variable in the left-hand side by all the options for the input tree.",
        "This is the reason why we use the lookahead because the set ?",
        "?1M (u) is a regular weighted tree language.",
        "From now on, we assume that the XTOPR M is proper.",
        "Next, we want to invoke Theorem 7.1 of Engelfriet and Maneth (2003) to show that a proper sensible XTOPR is finitely copying.",
        "Engelfriet and Maneth (2003) present a formal definition of finite copying, but we only present a high-level description of it.",
        "Definition 8.",
        "The XTOPR M is finitely copying if there is a copying bound n ?",
        "N such that no input subtree is copied more than n times in any derivation q(t)?",
        "?M u with q ?",
        "Q, t ?",
        "T?, and u ?",
        "T?.",
        "Example 9.",
        "The XTOP of Example 1 is not finitely copying as the input subtree ?",
        "is copied 2n times if the input tree is ?n(?).",
        "Clearly, this shows that there is no uniform bound on the number of copies.",
        "It is worth noting that the properties ?sensible?",
        "and ?finitely copying?",
        "are essentially unweighted properties.",
        "They largely disregard the weights and a weighted XTOPR does have one of those properties if and only if its associated unweighted XTOPR has it.",
        "We now use this tight connection to lift Theorem 7.1 of Engelfriet and Maneth (2003) from the unweighted (and deterministic) case to the weighted (and nondeterministic) case.",
        "Theorem 10.",
        "If a proper XTOPR is sensible, then it is finitely copying.",
        "Proof.",
        "Let M be the input XTOPR.",
        "Since M is sensible, its associated unweighted XTOPR N , which is obtained by setting all weights to 1 and computing in the BOOLEAN semiring, is sensible.",
        "Consequently,N is finitely copying by Theorem 7.1 of Engelfriet and Maneth (2003).",
        "Thus, also M is finitely copying, which concludes the proof.",
        "We remark that Theorem 7.1 of Engelfriet and Maneth (2003) only applies to deterministic XTOPR, but the essential pumping argument, which is Lemma 6.2 of Engelfriet and Maneth (2003) also works for nondeterministic XTOPR.",
        "Essentially, the pumping argument shows the contraposition.",
        "If M is not finitely copying, then M can copy a certain subtree an arbitrarily often.",
        "Due to the properness of M , all these copies have an impact on the output tree, which yields that its size grows beyond any uniform linear bound, which in turn demonstrates that M is not sensible.",
        "We showed that each sensible XTOPR can be implemented by a finitely copying XTOPR via the construction of the proper normal form.",
        "This approach actually yields a characterization because finitely copying XTOPR are trivially sensible by Theorem 4.19 of Engelfriet and Maneth (2003).",
        "5 From finite copying to an MBOT We complete the argument by showing how to implement a finitely copying XTOPR by a weighted multi bottom-up tree transducer (MBOT).",
        "First, we recall the MBOT, which was introduced by Arnold and Dauchet (1982) and Lilin (1978) in the unweighted case.",
        "Engelfriet et al. (2009) give an English presentation.",
        "We present the linear and nondeleting MBOT of Engelfriet et al. (2009).",
        "A weighted multi bottom-up tree transducer is a",
        "system M = (Q,?,?, F,R,wt) with ?",
        "an alphabet Q of states, ?",
        "alphabets ?",
        "and ?",
        "of input and output symbols, ?",
        "a set F ?",
        "Q of final states, ?",
        "a finite set R of rules of the form ` ?",
        "r where ` ?",
        "T?",
        "(Q(X)) and r ?",
        "Q(T?",
        "(X)) are linear and var(`) = var(r), and ?",
        "wt: R?",
        "R+ assigning rule weights.",
        "We now use T?",
        "(Q(X)) and Q(T?",
        "(X)) instead of T?",
        "(Q[X]) and Q[T?",
        "(X)], which highlights the difference between XTOPR and MBOT.",
        "First, MBOT are a bottom-up device, which yields that ?",
        "and ?",
        "as well as ` and r exchange their place.",
        "More importantly, MBOT can use states with more than 1 successor (e.g, Q(X) instead of Q[X]).",
        "An example rule is displayed in Figure 8.",
        "Let M = (Q,?,?, F,R,wt) be an MBOT such thatQ?(???)",
        "= ?.3 We require that r /?",
        "Q(X) for each rule ` ?",
        "r ?",
        "R to guarantee finite derivations and thus a well-defined semantics.4 As before, we present a rewrite semantics.",
        "Let ?, ?",
        "?",
        "T?(Q(T?",
        ")), and let ?",
        "= ` ?",
        "r be a rule.",
        "We write ?",
        "?",
        "?M ?",
        "if there exists a substitution ?",
        ": X ?",
        "T?",
        "such that ?",
        "= ?[`?",
        "]p and ?",
        "= ?[r?",
        "]p, where p ?",
        "pos(?)",
        "be is the lexicographically least reducible position in ?.",
        "A rewrite step is illustrated in Figure 8.",
        "conditions on the MBOT or the used weight structure.",
        "The weighted tree transformation computed byM in state q ?",
        "Q is",
        "for all t ?",
        "T?",
        "and u1, .",
        ".",
        ".",
        ", uk ?",
        "T?.",
        "The semantics of M is ?M (t, u) =",
        "and u ?",
        "T?.",
        "We move to the last step for our main result, in which we show how to implement each finitely copying XTOPR by an MBOT using a weighted version of the construction in Lemma 15 of Maletti (2008).",
        "The computational benefits (binarization, composition, efficient parsing, etc.)",
        "of MBOT over XTOPR are described by Maletti (2011a).",
        "Theorem 11.",
        "Every finitely copying XTOPR can be implemented by an MBOT.",
        "Proof sketch.",
        "We plan to utilize Theorem 18 of Engelfriet et al. (2009), which proves the same statement in the unweighted and deterministic case.",
        "Again, the weights are not problematic, but we need to remove the nondeterminism before we can apply it.",
        "This is achieved by a decomposition into two XTOPR.",
        "The first XTOPR annotates the input tree with the rules that the second XTOPR is supposed to use.",
        "Thus, the first XTOPR remains nondeterministic, but the second XTOPR, which simply executes the annotated rules, is now deterministic.",
        "This standard approach due to Engelfriet (1975) is used in many similar constructions.",
        "Suppose that n is a copying bound for the input XTOPR M , which means that no more than n rules are applied to each input symbol.",
        "The first XTOPR is actually a nondeterministic linear and nondeleting XTOP that annotates each input tree symbol with exactly n rules of M that are consistent with the state behavior of M .",
        "Moreover, the annotation also prescribes with which of n rules the processing should continue at each subtree.",
        "Since we know all the rules that will potentially be applied for a certain symbol, we can make the assignment such that no annotated rule is used twice in the same derivation.",
        "The details for this construction can be found in Lemma 15 of Maletti (2008).",
        "In this way, we obtain a weighted linear and nondeleting XTOP M1, which includes the look-ahead,",
        "and an unweighted deterministic XTOP M2.",
        "Only the weight and lookahead of rules that are actually executed are applied (e.g., although we annotate n rules at the root symbol, we only execute the first rule and thus only apply its weight and lookahead).",
        "The lookahead of different rules is either resolved (i.e., pushed to the next rules) or multiplied using the HADAMARD product [see F?l?p and Vogler (2009)], which preserves regularity.",
        "This process is also used by Seemann et al. (2012).",
        "Now we can use Theorem 4 of Maletti (2011a) to obtain an MBOT N1 that is equivalent to M1.",
        "Similarly, we can use Theorem 18 of Engelfriet et al. (2009) to obtain an MBOT N2 that is equivalent to M2.",
        "Since MBOT are closed under composition by Theorem 23 of Engelfriet et al. (2009), we can compose N1 andN2 to obtain a single MBOTN that is equivalent to M .",
        "Corollary 12.",
        "For every sensible producing XTOPR there exists an equivalent MBOT.",
        "Proof.",
        "Theorem 6 shows that there exists an equivalent proper XTOPR, which must be finitely copying by Theorem 10.",
        "This last fact allows us to construct an equivalent MBOT by Theorem 11."
      ]
    },
    {
      "heading": "6 Preservation of regularity",
      "text": [
        "Finally, we present an application of Corollary 12 to solve an open problem.",
        "The translation model is often used in a backwards manner in a machine translation system as demonstrated, for example, by May et al. (2010), which means that an output tree is supplied and the corresponding input trees are sought.",
        "This starting output tree is typically the best parse of the string that we want to translate.",
        "However, instead of a single tree, we want to use all parses of this sentence together with their parse scores.",
        "Those parses form a regular weighted tree language, and applying them backwards to the translation model yields another weighted tree language L of corresponding input trees.",
        "For an efficient representation and efficient modification algorithms (such a k-best extraction) we would like L to be regular.",
        "However, F?l?p et al. (2011) demonstrate that the backward application of a regular weighted tree language to an XTOPR is not necessarily regular.",
        "The counterexample uses a variant of the XTOP of Example 1 and is thus not sensible.",
        "Theorem 14 of Maletti (2011a) shows that MBOT preserve regularity under backward application.",
        "Corollary 13.",
        "Sensible XTOPR preserve regularity under backward application.",
        "Conclusion We demonstrated that each sensible XTOPR can be implemented by an MBOT.",
        "The latter formalism offers many computational advantages, so that the author believes that MBOT should be used instead of XTOP.",
        "We used real number weights, but the author believes that our results carry over to at least all zero-sum and zero-divisor free semirings [see Hebisch and Weinert (1998) and Golan (1999)], which are semirings such that (i) a+ b = 0 implies a = 0 and (ii) a ?",
        "b = 0 implies 0 ?",
        "{a, b}.",
        "Whether our results hold in other semirings (such as the semiring of all reals where ?1 + 1 = 0) remains an open question."
      ]
    }
  ]
}
