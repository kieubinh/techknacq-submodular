{
  "info": {
    "authors": [
      "Enrique Flores",
      "Alberto Barrón-Cedeño",
      "Paolo Rosso",
      "Lidia Moreno"
    ],
    "book": "NAACL",
    "id": "acl-N12-3001",
    "title": "DeSoCoRe: Detecting Source Code Re-Use across Programming Languages",
    "url": "https://aclweb.org/anthology/N12-3001",
    "year": 2012
  },
  "references": [],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "Source code reuse has become an important problem in academia.",
        "The amount of code available makes necessary to develop systems supporting education that could address the problem of detection of source code re-use.",
        "We present the DeSoCoRe tool based on techniques of Natural Language Processing (NLP) applied to detect source code re-use.",
        "DeSoCoRe compares two source codes at the level of methods or functions even when written in different programming languages.",
        "The system provides an understandable output to the human reviewer in order to help a teacher to decide whether a source code is re-used."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "Identifying whether a work has been reused has received increasing interest in recent years.",
        "As for documents in natural language, the amount of source code on Internet is increasing; facilitating the reuse of all or part of previously implemented programs.1 If no reference to the original work is included, plagiarism would be committed.",
        "The interest for detecting software reuse is great discouraging academic cheating.",
        "Many online tools exist for detecting reuse in text, such as Churnalism2.",
        "To the best of our knowledge the unique online service to detecting reuse in ?Screencast available at: http://vimeo.com/33148670.",
        "The",
        "source code is JPlag3.",
        "This tool can process different programming languages, but at monolingual level.",
        "This paper presents the DeSoCoRe tool for detection source code reuse across programming languages.",
        "We estimate the similarity between two source codes independently of the programming language using NLP techniques.",
        "In fact, programming languages are similar to natural languages; both can be represented as strings of symbols (characters, words, phrases, etc.).",
        "DeSoCoRe aims at supporting a reviewer in the process of detecting highly similar source code functions.",
        "It allows to visualize the matches detected between two source codes d and dq.",
        "The programs are represented as a graph.",
        "An edge exists between a function in dq and a function in d if reuse between them is suspected.",
        "The code chunks are displayed to the user for further review.",
        "With the information provided, the reviewer can decide whether a fragment is reused or not."
      ]
    },
    {
      "heading": "2 Related Work",
      "text": [
        "In the previous section we mention only one online tool but many research works for source code reuse detection exist.",
        "Two main approaches have been explored: content-based and structure-based.",
        "Content-based approaches are based on analysis of strings within the source codes.",
        "The pioneering work of (Halstead, 1972) is based on units count-ings.",
        "He counts the total number of operands, total number of different operands and number of operators, among others.",
        "spectrum proposed by Faidhi and Robinson.",
        "Structure-based approaches, the most used up to date, focus the analysis on the code structure (execution tree) in order to estimate the level of similarity between two source codes.",
        "A seminal model is the proposed by (Whale, 1990b).",
        "This approach codifies branches, repeats, and statements in order to estimate the similarity between two programs.",
        "This model has inspired several other tools, such as Plague (Whale, 1990a) and its further developments YAP[1,2,3] (Wise, 1992).",
        "JPlag (Prechelt et al., 2002) combines both approaches.",
        "In the first stage, it exploits syntax in order to normalize variables and function names.",
        "In the second stage, it looks for common strings between programs.",
        "This work attempts to detect several levels of obfuscation4.",
        "It achieves better results than JPlag for highly obfuscated cases but worst results with low degree of obfuscation.",
        "JPlag is able to detect source code reuse in different programming languages although at monolingual level; that is, one programming language at a time.",
        "None of the reviewed approaches is able 4Obfuscation in reuse can be considered as reformulation, which inserts noise.",
        "to perform cross-language analysis.",
        "To the best of our knowledge the only approach to analyze cross-language source code reuse is the one of (Arwin and Tahaghoghi, 2006).",
        "Instead of processing source code, this approach compares intermediate code produced by a compiler which includes noise in the detection process.",
        "The comparison is in fact monolingual and compiler dependent.",
        "The resulting tool, Xplag, allows to compute similarity between codes in Java and C."
      ]
    },
    {
      "heading": "3 Architecture",
      "text": [
        "As shown in Figure 1, DeSoCoRe consists of three general modules.",
        "As input user gives a pair of source codes (d, dq).",
        "The source code splitter is responsible for dividing the codes in functions.",
        "To split each code into functions we have developed syntactic an-alyzers for Python and for C syntax family language: C, C++, Java, C#, etc.",
        "The next module compares the functions of dq against the functions of d. To make this comparison we have divided the module into three sub-modules: (a) Pre-processing: line breaks, tabs and spaces removal as well as case folding; (b) Features extraction: character n-grams extraction, weighting based on normalized term frequency (tf ); and (c) Comparison: a cosine similarity estimation.",
        "As output, we obtain a similarity value in the range [0-1] for all the pairs of functions between the source codes.",
        "We carried out several experiments in order to find the best way to detect reuse in source codes.",
        "These experiments were inspired by what proposed in (Faidhi and Robinson, 1987).",
        "They describes the modifications that a programmer makes to hide the reuse of source code as Figure 2 shows.",
        "These levels are: (i) changes in comments and indentation;",
        "(ii) changes in identifiers; (iii) changes in declarations; (iv) changes in program modules; (v) changes in the program statements; (vi) changes in the decision logic.",
        "As result of these experiments we obtained best configuration of our system to use the entire source code and to apply 3-grams (Flores et al., 2011).",
        "Once the similarity value has been calculated for all the possible pairs, the pair selector decides what pairs are good source reused candidates.",
        "This module has to discard the pairs which have obtained a similarity value lower than a threshold established by the user.",
        "As output DeSoCoRe returns the suspicious pairs that have been re-used."
      ]
    },
    {
      "heading": "4 Demonstration",
      "text": [
        "In order to interact with our developed system, we provide a Java applet interface.",
        "It is divided in two interfaces: (i) input screen: which allows the user for inserting two source codes, select their programming language and additionally to select a value for the similarity threshold;5 (ii) output screen: which shows the results divided in two sections: (a) a graphical visualization of the codes; and (b) a plain text representation of the codes.",
        "In the first section we have used the Prefuse Library6 in order to draw a graph representing the similarity between the functions of the source codes.",
        "The painted graph consists of two red nodes which represent each source code.",
        "Their functions are represented by purple nodes and connected to the source code node with edges.",
        "If any of these functions has been selected by the system as re-used, its nodes will be connected to a node from the other source code.",
        "Finally, a node is marked in red if it composes a potential case of reuse.",
        "When a function is pointed, the plain text section displays the source code.",
        "Also, if this function has any potential case of re-use, the function and the potential reused function will be shown to perform a manual review of the codes.",
        "In order to be introduced to DeSoCoRe an example is provided and can be accessed clicking on the Example button.",
        "Figure 3 shows an example of two supicious source codes: one in C++ and one in Java.",
        "The user is able to start the estimation of similarity clicking on Estimate!",
        "button.",
        "After similarity estimation, the result is displayed as in Figure 3(a).",
        "For exploratory purpouses, example source codes are available through the Example button.",
        "The user is able to start the estimation of similarity clicking on Estimate!",
        "button.",
        "Figure 3(b) shows an example of potential cases of reuse.",
        "The function crackHTTPAuth is selected in the right source code node, and the selected as possible case of reuse is marked on orange.",
        "The plain text representation of these two parts of source code shows that they are practically identical."
      ]
    },
    {
      "heading": "5 Conclusions and Future Work",
      "text": [
        "The main goal of this research work is to provide a helpful tool for source code reviewers in order to help them to decide wheter or not a source code has been re-used.",
        "DeSoCoRe is the first online tool which it can detect source code reuse across languages as far of our knowledge.",
        "We have developed a methodology for detecting source code reuse across languages, and have shown their functionality by presenting DeSoCoRe tool, which works between and within programming languages.",
        "This makes our tool a valuable cross-lingual source code detector.",
        "DeSoCoRe allows comparing source codes written in Python, Java and C syntax family languages: C, C++ or C#.",
        "We plan in the next future to extend its functionality to other common programming languages.",
        "As future work we aim at allowing for the comparison at fragment level, where a fragment is considered a part of a function, a group of functions."
      ]
    },
    {
      "heading": "Acknowledgments",
      "text": [
        "This work was done in the framework of the VLC/ CAMPUS Microcluster on Multimodal Interaction in Intelligent Systems and it has been partially funded by the European Commission as part of the WiQ-Ei IRSES project (grant no.",
        "269180) within the FP 7 Marie Curie People Framework, and by MICINN as part of the Text-Enterprise 2.0 project (TIN2009-13391-C0403) within the Plan I+D+i.",
        "The research work of the second author is funded by the CONACyT-Mexico 192021 grant.",
        "(a) Input screen: user have to select each language manually.",
        "(b) Output screen: the reused functions are connected using an edge and their codes are shown in the text areas below."
      ]
    }
  ]
}
