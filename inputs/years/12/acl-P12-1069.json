{
  "info": {
    "authors": [
      "Katsuhiko Hayashi",
      "Taro Watanabe",
      "Masayuki Asahara",
      "Yuji Matsumoto"
    ],
    "book": "ACL",
    "id": "acl-P12-1069",
    "title": "Head-driven Transition-based Parsing with Top-down Prediction",
    "url": "https://aclweb.org/anthology/P12-1069",
    "year": 2012
  },
  "references": [
    "acl-C04-1040",
    "acl-D08-1059",
    "acl-D10-1125",
    "acl-D11-1137",
    "acl-E06-1011",
    "acl-H05-1066",
    "acl-J03-1006",
    "acl-J08-4003",
    "acl-J87-1004",
    "acl-J95-2002",
    "acl-N10-1115",
    "acl-P04-1015",
    "acl-P07-1022",
    "acl-P10-1001",
    "acl-P10-1110",
    "acl-P10-2035",
    "acl-P11-2033",
    "acl-P99-1059",
    "acl-W04-0308",
    "acl-W06-2922"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "This paper presents a novel top-down head-driven parsing algorithm for data-driven projective dependency analysis.",
        "This algorithm handles global structures, such as clause and coordination, better than shift-reduce or other bottom-up algorithms.",
        "Experiments on the English Penn Treebank data and the Chinese CoNLL-06 data show that the proposed algorithm achieves comparable results with other data-driven dependency parsing algorithms."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "Transition-based parsing algorithms, such as shift-reduce algorithms (Nivre, 2004; Zhang and Clark, 2008), are widely used for dependency analysis because of the efficiency and comparatively good performance.",
        "However, these parsers have one major problem that they can handle only local information.",
        "Isozaki et al. (2004) pointed out that the drawbacks of shift-reduce parser could be resolved by incorporating top-down information such as root finding.",
        "This work presents an O(n2) top-down head-driven transition-based parsing algorithm which can parse complex structures that are not trivial for shift-reduce parsers.",
        "The deductive system is very similar to Earley parsing (Earley, 1970).",
        "The Earley prediction is tied to a particular grammar rule, but the proposed algorithm is data-driven, following the current trends of dependency parsing (Nivre, 2006; McDonald and Pereira, 2006; Koo et al., 2010).",
        "To do the prediction without any grammar rules, we introduce a weighted prediction that is to predict lower nodes from higher nodes with a statistical model.",
        "To improve parsing flexibility in deterministic parsing, our top-down parser uses beam search algorithm with dynamic programming (Huang and Sagae, 2010).",
        "The complexity becomes O(n2 ?",
        "b) where b is the beam size.",
        "To reduce prediction errors, we propose a lookahead technique based on a FIRST function, inspired by the LL(1) parser (Aho and Ullman, 1972).",
        "Experimental results show that the proposed top-down parser achieves competitive results with other data-driven parsing algorithms."
      ]
    },
    {
      "heading": "2 Definition of Dependency Graph",
      "text": [
        "A dependency graph is defined as follows.",
        "Definition 2.1 (Dependency Graph) Given an input sentence W = n0 .",
        ".",
        ".nn where n0 is a special root node $, a directed graph is defined as GW = (VW , AW ) where VW = {0, 1, .",
        ".",
        ".",
        ", n} is a set of (indices of) nodes and AW ?",
        "VW ?",
        "VW is a set of directed arcs.",
        "The set of arcs is a set of pairs",
        "?",
        "There is no node x such that (x, 0) ?",
        "AW .",
        "?",
        "If (x, y) ?",
        "AW then there is no node x?",
        "such that (x?, y) ?",
        "AW and x?",
        "?= x. ?",
        "There is no subset of arcs {(x0, x1), (x1, x2),",
        ".",
        ".",
        ".",
        ", (xl?1, xl)} ?",
        "AW such that x0 = xl.",
        "These conditions are refered to ROOT, SINGLE-HEAD, and ACYCLICITY, and we call an well-formed directed graph as a dependency graph.",
        "for every arc (x, y) ?",
        "AW and node l in x < l < y or y < l < x, there is a path x ??",
        "l or y ??",
        "l. The proposed algorithm in this paper is for projective dependency graphs.",
        "If a projective dependency graph is connected, we call it a dependency tree, and if not, a dependency forest."
      ]
    },
    {
      "heading": "3 Top-down Parsing Algorithm",
      "text": [
        "Our proposed algorithm is a transition-based algorithm, which uses stack and queue data structures.",
        "This algorithm formally uses the following state: ?",
        ": ?i, h, j, S?",
        ": pi where ?",
        "is a step size, S is a stack of trees sd|...|s0 where s0 is a top tree and d is a window size for feature extraction, i is an index of node on the top of the input node queue, h is an index of root node of s0, j is an index to indicate the right limit (j ?",
        "1 inclusive) of predy, and pi is a set of pointers to predictor states, which are states just before putting the node in h onto stack S. In the deterministic case, pi is a singleton set except for the initial state.",
        "This algorithm has four actions, predictx(predx), predicty(predy), scan and complete(comp).",
        "The deductive system of the top-down algorithm is shown in Figure 1.",
        "The initial state p0 is a state initialized by an artificial root node n0.",
        "This algorithm applies one action to each state selected from applicable actions in each step.",
        "Each of three kinds of actions, pred, scan, and comp, occurs n times, and this system takes 3n steps for a complete analysis.",
        "Action predx puts nk onto stack S selected from the input queue in the range, i ?",
        "k < h, which is to the left of the root nh in the stack top.",
        "Similarly, action predy puts a node nk onto stack S selected from the input queue in the range, h < i ?",
        "k < j, which is to the right of the root nh in the stack top.",
        "The node ni on the top of the queue is scanned if it is equal to the root node nh in the stack top.",
        "Action comp creates a directed arc (h?, h) from the root h?",
        "of s?0 on a predictor state q to the root h of s0 on a current state p if h < i 1.",
        "The precondition i < h of action predx means that the input nodes in i ?",
        "k < h have not been predicted yet.",
        "Predx, scan and predy do not conflict with each other since their preconditions i < h, i = h and h < i do not hold at the same time.",
        "However, this algorithm faces a predy-comp conflict because both actions share the same precondition h < i, which means that the input nodes in",
        "step state stack queue action state information",
        "and write the stack with its topmost element to the right, and the queue with its first element to the left.",
        "In this example, we set the window size d to 1, and write the descendants of trees on stack elements s0 and s1 within depth 1. parser constructs left and right children of a head node in a left-to-right direction by scanning the head node prior to its right children.",
        "Figure 2 shows an example for parsing a sentence ?I saw a girl?."
      ]
    },
    {
      "heading": "4 Correctness",
      "text": [
        "To prove the correctness of the system in Figure 1 for the projective dependency graph, we use the proof strategy of (Nivre, 2008a).",
        "The correct deductive system is both sound and complete.",
        "Theorem 4.1 The deductive system in Figure 1 is correct for the class of dependency forest.",
        "Proof 4.1 To show soundness, we show that Gp0 = (VW , ?",
        "), which is a directed graph defined by the axiom, is well-formed and projective, and that every transition preserves this property.",
        "?",
        "ROOT: The node 0 is a root in Gp0 , and the node 0 is on the top of stack of p0.",
        "The two pred actions put a word onto the top of stack, and predict an arc from root or its descendant to the child.",
        "The comp actions add the predicted arcs which include no arc of (x, 0).",
        "?",
        "SINGLE-HEAD: Gp0 is single-head.",
        "A node y is no longer in stack and queue after a comp action creates an arc (x, y).",
        "The node y cannot make any arc (x?, y) after the removal.",
        "?",
        "ACYCLICITY: Gp0 is acyclic.",
        "A cycle is created only if an arc (x, y) is added when there is a directed path y ??",
        "x.",
        "The node x is no longer in stack and queue when the directed path y ??",
        "x was made by adding an arc (l, x).",
        "There is no chance to add the arc (x, y) on the directed path y ??",
        "x. ?",
        "PROJECTIVITY: Gp0 is projective.",
        "Projec-tivity is violated by adding an arc (x, y) when there is a node l in x < l < y or y < l < x with the path to or from the outside of the span x and y.",
        "When predy creates an arc relation from x to y, the node y cannot be scanned before all nodes l in x < l < y are scanned and completed.",
        "When predx creates an arc relation from x to y, the node y cannot be scanned before all nodes k in k < y are scanned and completed, and the node x cannot be scanned before all nodes l in y < l < x are scanned and completed.",
        "In those processes, the node l in x < l < y or y < l < x does not make a path to or from the outside of the span x and y, and a path x ??",
        "l or y ??",
        "l is created.",
        "2 To show completeness, we show that for any sentence W , and dependency forest GW = (VW , AW ), there is a transition sequence C0,m such that Gpm = GW by an inductive method.",
        "?",
        "If |W |= 1, the projective dependency graph for W is GW = ({0}, ?)",
        "and Gp0 = GW .",
        "?",
        "Assume that the claim holds for sentences with length less or equal to t, and assume that",
        "graph GW ?",
        "is defined as (VW ?",
        "t, A?t) where",
        "dow size d is set to 2.",
        "Each x.h, x.l and x.r denotes root, left and right child nodes of a stack element x.",
        "A?t = AW ?",
        "{(x, y)|x = t?",
        "y = t}.",
        "If GW is a dependency forest, then GW ?",
        "is also a dependency forest.",
        "It is obvious that there is a transition sequence for constructing GW except arcs which have a node t as a head or a dependent2.",
        "There is a state pq = q : ?i, x, t + 1?",
        ": for i and x (0 ?",
        "x < i < t + 1).",
        "When x is the head of t, predy to t creates a state",
        "t by predx and there is a transition sequence for constructing a tree rooted by y.",
        "After constructing a subtree rooted by t and spaned from i to t, t is scaned, and then comp creates an arc from x to t. It is obvious that the remaining transition sequence exists.",
        "Therefore, we can construct a transition sequence C0,m such that",
        "The deductive sysmtem in Figure 1 is both sound and complete.",
        "Therefore, it is correct.",
        "2"
      ]
    },
    {
      "heading": "5 Weighted Parsing Model 5.1 Stack-based Model",
      "text": [
        "The proposed algorithm employs a stack-based model for scoring hypothesis.",
        "The cost of the model is defined as follows: cs(i, h, j, S) = 's ?",
        "fs,act(i, h, j, S) (1) where 's is a weight vector, fs is a feature function, and act is one of the applicable actions to a state ?",
        ": ?i, h, j, S?",
        ": pi.",
        "We use a set of feature templates of (Huang and Sagae, 2010) for the model.",
        "As shown in Figure 3, left children s0.l and s1.l of trees on 2This transition sequence is defined for GW ?",
        ", but it is possible to be regarded as the definition for GW as long as the transition sequence is indifferent from the node t. Algorithm 1 Top-down Parsing with Beam Search",
        "1: input W = n0, .",
        ".",
        ".",
        ",nn 2: start?",
        "?1, 0, n + 1,n0?",
        "3: buf [0]?",
        "{start} 4: for ??",
        "1 .",
        ".",
        ".",
        "3n do 5: hypo?",
        "{} 6: for each state in buf [??",
        "1] do 7: for act?applicableAct(state) do 8: newstates?actor(act, state) 9: addAll newstates to hypo 10: add top b states to buf [?]",
        "from hypo 11: return best candidate from buf [3n]",
        "stack for extracting features are different from those of Huang and Sagae (2010) because in our parser the left children are generated from left to right.",
        "As mentioned in Section 1, we apply beam search and Huang and Sagae (2010)'s DP techniques to our top-down parser.",
        "Algorithm 1 shows the our beam search algorithm in which top most b states are preserved in a buffer buf [?]",
        "in each step.",
        "In line 10 of Algorithm 1, equivalent states in the step ?",
        "are merged following the idea of DP.",
        "Two states ?i, h, j, S?",
        "and ?i?, h?, j?, S??",
        "in the step ?",
        "are equivalent, notated ?i, h, j, S?",
        "?",
        "?i?, h?, j?, S?",
        "?, iff fs,act(i, h, j, S) = fs,act(i?, h?, j?, S?).",
        "(2) When two equivalent predicted states are merged, their predictor states in pi get combined.",
        "For further details about this technique, readers may refer to (Huang and Sagae, 2010)."
      ]
    },
    {
      "heading": "5.2 Weighted Prediction",
      "text": [
        "The step 0 in Figure 2 shows an example of prediction for a head node ?$0?, where the node ?saw2?",
        "is selected as its child node.",
        "To select a probable child node, we define a statistical model for the prediction.",
        "In this paper, we integrate the cost from a graph-based model (McDonald and Pereira, 2006) which directly models dependency links.",
        "The cost of the 1st-order model is defined as the relation between a child node c and a head node h: cp(h, c) = ?p ?",
        "fp(h, c) (3) where ?p is a weight vector and fp is a features function.",
        "Using the cost cp, the top-down parser selects a probable child node in each prediction step.",
        "When we apply beam search to the top-down parser, then we no longer use ?",
        "but ?",
        "on predx and",
        "predy in Figure 1.",
        "Therefore, the parser may predict many nodes as an appropriate child from a single state, causing many predicted states.",
        "This may cause the beam buffer to be filled only with the states, and these may exclude other states, such as scanned or completed states.",
        "Thus, we limit the number of predicted states from a single state by prediction size implicitly in line 10 of Algorithm 1.",
        "To improve the prediction accuracy, we introduce a more sophisticated model.",
        "The cost of the sibling 2nd-order model is defined as the relationship between c, h and a sibling node sib: cp(h, sib, c) = ?p ?",
        "fp(h, sib, c).",
        "(4) The 1st- and sibling 2nd-order models are the same as McDonald and Pereira (2006)'s definitions, except the cost factors of the sibling 2nd-order model.",
        "The cost factors for a tree structure in Figure 4 are defined as follows:",
        "cp(h, ry, ry+1).",
        "This is different from McDonald and Pereira (2006) in that the cost factors for left children are calculated from left to right, while those in McDonald and Pereira (2006)'s definition are calculated from right to left.",
        "This is because our top-down parser generates left children from left to right.",
        "Note that the cost of weighted prediction model in this section is incrementally calculated by using only the information on the current state, thus the condition of state merge in Equation 2 remains unchanged."
      ]
    },
    {
      "heading": "5.3 Weighted Deductive System",
      "text": [
        "We extend deductive system to a weighted one, and introduce forward cost and inside cost (Stolcke, 1995; Huang and Sagae, 2010).",
        "The forward cost is the total cost of a sequence from an initial state to the end state.",
        "The inside cost is the cost of a top tree s0 in stack S. We define these costs using a combination of stack-based model and weighted prediction model.",
        "The forward and inside costs of the combination model are as follows:",
        "where cfws and cins are a forward cost and an inside cost for stack-based model, and cfwp and cinp are a forward cost and an inside cost for weighted prediction model.",
        "We add the following tuple of costs to a state: (cfws , cins , cfwp , cinp ).",
        "For each action, we define how to efficiently calculate the forward and inside costs3 , following Stolcke (1995) and Huang and Sagae (2010)'s works.",
        "In either case of predx or predy,",
        "In the case of scan, (cfws , cins , cfwp , cinp )",
        "as equation 4 but a 1st-order one for weighted prediction.",
        "Pred takes either predx or predy.",
        "Beam search is performed based on the following linear order for the two states p and p?",
        "at the same step, which have (cfw, cin) and (c?fw, c?in) respectively: p ?",
        "p?",
        "iff cfw < c?fw or cfw = c?fw ?",
        "cin < c?in.",
        "(9) We prioritize the forward cost over the inside cost since forward cost pertains to longer action sequence and is better suited to evaluate hypothesis states than inside cost (Nederhof, 2003)."
      ]
    },
    {
      "heading": "5.4 FIRST Function for Lookahead",
      "text": [
        "Top-down backtrack parser usually reduces backtracking by precomputing the set FIRST(?)",
        "(Aho and Ullman, 1972).",
        "We define the set FIRST(?)",
        "for our top-down dependency parser:",
        "where t?",
        "is a POS-tag, Tree is a correct dependency tree which exists in Corpus, a function lmdescendant(Tree, t?)",
        "returns the set of the leftmost descendant node ld of each nodes in Tree whose POS-tag is t?, and ld.t denotes a POS-tag of ld.",
        "Though our parser does not backtrack, it looks ahead when selecting possible child nodes at the prediction step by using the function FIRST.",
        "In case of predx:",
        "where ni.t is a POS-tag of the node ni on the top of the queue, and nk.t is a POS-tag in kth position of an input nodes.",
        "The case for predy is the same.",
        "If there are no nodes which satisfy the condition, our top-down parser creates new states for all nodes, and pushes them into hypo in line 9 of Algorithm 1."
      ]
    },
    {
      "heading": "6 Time Complexity",
      "text": [
        "Our proposed top-down algorithm has three kinds of actions which are scan, comp and predict.",
        "Each scan and comp actions occurs n times when parsing a sentence with the length n. Predict action also occurs n times in which a child node is selected from a node sequence in the input queue.",
        "Thus, the algorithm takes the following times for prediction:",
        "As n2 for prediction is the most dominant factor, the time complexity of the algorithm is O(n2) and that of the algorithm with beam search is O(n2 ?",
        "b)."
      ]
    },
    {
      "heading": "7 Related Work",
      "text": [
        "Alshawi (1996) proposed head automaton which recognizes an input sentence top-down.",
        "Eisner and Satta (1999) showed that there is a cubic-time parsing algorithm on the formalism of the head automaton grammars, which are equivalently converted into split-head bilexical context-free grammars (SBCFGs) (McAllester, 1999; Johnson, 2007).",
        "Although our proposed algorithm does not employ the formalism of SBCFGs, it creates left children before right children, implying that it does not have spurious ambiguities as well as parsing algorithms on the SBCFGs.",
        "Head-corner parsing algorithm (Kay, 1989) creates dependency tree top-down, and in this our algorithm has similar spirit to it.",
        "Yamada and Matsumoto (2003) applied a shift-reduce algorithm to dependency analysis, which is known as arc-standard transition-based algorithm (Nivre, 2004).",
        "Nivre (2003) proposed another transition-based algorithm, known as arc-eager algorithm.",
        "The arc-eager algorithm processes right-dependent top-down, but this does not involve the prediction of lower nodes from higher nodes.",
        "Therefore, the arc-eager algorithm is a totally bottom-up algorithm.",
        "Zhang and Clark (2008) proposed a combination approach of the transition-based algorithm with graph-based algorithm (McDonald and Pereira, 2006), which is the same as our combination model of stack-based and prediction models."
      ]
    },
    {
      "heading": "8 Experiments",
      "text": [
        "Experiments were performed on the English Penn Treebank data and the Chinese CoNLL-06 data.",
        "For the English data, we split WSJ part of it into sections 02-21 for training, section 22 for development and section 23 for testing.",
        "We used Yamada and Matsumoto (2003)'s head rules to convert phrase structure to dependency structure.",
        "For the Chinese data,",
        "length, comparing with top-down, 2nd-MST and shift-reduce parsers (beam size: 8, pred size: 5) we used the information of words and fine-grained POS-tags for features.",
        "We also implemented and experimented Huang and Sagae (2010)'s arc-standard shift-reduce parser.",
        "For the 2nd-order Eisner-Satta algorithm, we used MSTParser (McDonald, 2012).",
        "We used an early update version of averaged per-ceptron algorithm (Collins and Roark, 2004) for training of shift-reduce and top-down parsers.",
        "A set of feature templates in (Huang and Sagae, 2010) were used for the stack-based model, and a set of feature templates in (McDonald and Pereira, 2006) were used for the 2nd-order prediction model.",
        "The weighted prediction and stack-based models of top-down parser were jointly trained."
      ]
    },
    {
      "heading": "8.1 Results for English Data",
      "text": [
        "During training, we fixed the prediction size and beam size to 5 and 16, respectively, judged by pre-accuracy complete root",
        "25 iterations of perceptron training, we achieved 92.94 unlabeled accuracy for top-down parser with the FIRST function and 93.01 unlabeled accuracy for shift-reduce parser on development data by setting the beam size to 8 for both parsers and the prediction size to 5 in top-down parser.",
        "These trained models were used for the following testing.",
        "We compared top-down parsing algorithm with other data-driven parsing algorithms in Table 1.",
        "Top-down parser achieved comparable unlabeled accuracy with others, and outperformed them on the sentence complete rate.",
        "On the other hand, top-down parser was less accurate than shift-reduce",
        "portion is the head of the underlined portion.",
        "Bottom-up parsers often mistake to capture the relation.",
        "parser on the correct root measure.",
        "In step 0, top-down parser predicts a child node, a root node of a complete tree, using little syntactic information, which may lead to errors in the root node selection.",
        "Therefore, we think that it is important to seek more suitable features for the prediction in future work.",
        "Figure 5 presents the parsing time against sentence length.",
        "Our proposed top-down parser is theoretically slower than shift-reduce parser and Figure 5 empirically indicates the trends.",
        "The dominant factor comes from the score calculation, and we will leave it for future work.",
        "Table 2 shows the oracle score for test data, which is the score of the highest accuracy parse selected for each sentence from results of several parsers.",
        "This indicates that the parses produced by each parser are different from each other.",
        "However, the gains obtained by the combination of top-down and 2nd-MST parsers are smaller than other combinations.",
        "This is because top-down parser uses the same features as 2nd-MST parser, and these are more effective than those of stack-based model.",
        "It is worth noting that as shown in Figure 5, our O(n2?b) (b = 8) top-down parser is much faster than O(n3) Eisner-Satta CKY parsing."
      ]
    },
    {
      "heading": "8.2 Results for Chinese Data (CoNLL-06)",
      "text": [
        "We also experimented on the Chinese data.",
        "Following English experiments, shift-reduce parser was trained by setting beam size to 16, and top-down parser was trained with the beam size and the prediction size to 16 and 5, respectively.",
        "Table 3 shows the results on the Chinese test data when setting beam size to 8 for both parsers and prediction size to 5 in top-down parser.",
        "The trends of the results are almost the same as those of the English results."
      ]
    },
    {
      "heading": "8.3 Analysis of Results",
      "text": [
        "Table 4 shows two interesting results, on which top-down parser is superior to either shift-reduce parser or 2nd-MST parser.",
        "The sentence No.717 contains an adverbial clause structure between the subject and the main verb.",
        "Top-down parser is able to handle the long-distance dependency while shift-reudce parser cannot correctly analyze it.",
        "The effectiveness on the clause structures implies that our head-driven parser may handle non-projective structures well, which are introduced by Johansonn's head rule (Jo-hansson and Nugues, 2007).",
        "The sentence No.127 contains a coordination structure, which it is difficult for bottom-up parsers to handle, but, top-down parser handles it well because its top-down prediction globally captures the coordination."
      ]
    },
    {
      "heading": "9 Conclusion",
      "text": [
        "This paper presents a novel head-driven parsing algorithm and empirically shows that it is as practical as other dependency parsing algorithms.",
        "Our head-driven parser has potential for handling non-projective structures better than other non-projective dependency algorithms (McDonald et al., 2005; At-tardi, 2006; Nivre, 2008b; Koo et al., 2010).",
        "We are in the process of extending our head-driven parser for non-projective structures as our future work."
      ]
    },
    {
      "heading": "Acknowledgments",
      "text": [
        "We would like to thank Kevin Duh for his helpful comments and to the anonymous reviewers for giving valuable comments."
      ]
    }
  ]
}
