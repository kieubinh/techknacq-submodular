{
  "info": {
    "authors": [
      "Brian Roark",
      "Cyril Allauzen",
      "Michael Riley"
    ],
    "book": "ACL",
    "id": "acl-P13-1005",
    "title": "Smoothed marginal distribution constraints for language modeling",
    "url": "https://aclweb.org/anthology/P13-1005",
    "year": 2013
  },
  "references": [
    "acl-C00-2137",
    "acl-D07-1049",
    "acl-P08-1058",
    "acl-P12-3011"
  ],
  "sections": [
    {
      "text": [
        "Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics, pages 43?52, Sofia, Bulgaria, August 4-9 2013. c?2013 Association for Computational Linguistics Smoothed marginal distribution constraints for language modeling"
      ]
    },
    {
      "heading": "Abstract",
      "text": [
        "We present an algorithm for re-estimating parameters of backoff n-gram language models so as to preserve given marginal distributions, along the lines of well-known Kneser-Ney (1995) smoothing.",
        "Unlike Kneser-Ney, our approach is designed to be applied to any given smoothed backoff model, including models that have already been heavily pruned.",
        "As a result, the algorithm avoids issues observed when pruning Kneser-Ney models (Siivola et al., 2007; Chelba et al., 2010), while retaining the benefits of such marginal distribution constraints.",
        "We present experimental results for heavily pruned backoff n-gram models, and demonstrate perplexity and word error rate reductions when used with various baseline smoothing methods.",
        "An open-source version of the algorithm has been released as part of the OpenGrm ngram library.1"
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "Smoothed n-gram language models are the de-facto standard statistical models of language for a wide range of natural language applications, including speech recognition and machine translation.",
        "Such models are trained on large text corpora, by counting the frequency of n-gram collocations, then normalizing and smoothing (regularizing) the resulting multinomial distributions.",
        "Standard techniques store the observed n-grams and derive probabilities of unobserved n-grams via their longest observed suffix and ?backoff?",
        "costs associated with the prefix histories of the unobserved suffixes.",
        "Hence the size of the model grows with the number of observed n-grams, which is very large for typical training corpora.",
        "Natural language applications, however, are commonly used in scenarios requiring relatively small footprint models.",
        "For example, applications running on mobile devices or in low latency streaming scenarios may be required to limit the complexity of models and algorithms to achieve the desired operating profile.",
        "As a result, statistical language models ?",
        "an important component of many such applications ?",
        "are often trained on very large corpora, then modified to fit within some pre-specified size bound.",
        "One method to achieve significant space reduction is through randomized data structures, such as Bloom (Talbot and Osborne, 2007) or Bloomier (Talbot and Brants, 2008) filters.",
        "These data structures permit efficient querying for specific n-grams in a model that has been stored in a fraction of the space required to store the full, exact model, though with some probability of false positives.",
        "Another common approach ?",
        "which we pursue in this paper ?",
        "is model pruning, whereby some number of the n-grams are removed from explicit storage in the model, so that their probability must be assigned via backoff smoothing.",
        "One simple pruning method is count thresholding, i.e., discarding n-grams that occur less than k times in the corpus.",
        "Beyond count thresholding, the most widely used pruning methods (Seymore and Rosenfeld, 1996; Stolcke, 1998) employ greedy algorithms to reduce the number of stored n-grams by comparing the stored probabilities to those that would be assigned via the backoff smoothing mechanism, and removing those with the least impact according to some criterion.",
        "While these greedy pruning methods are highly effective for models estimated with most common smoothing approaches, they have been shown to be far less effective with Kneser-Ney trained language models (Siivola et al., 2007; Chelba et al., 2010), leading to severe degradation in model quality relative to other standard smoothing meth",
        "smoothed models in contrast to other common smoothing methods.",
        "Data: English Broadcast News, 128M words training; 692K words test; 143K word vocabulary.",
        "4-gram language models, pruned using Stolcke (1998) relative entropy pruning to approximately 1.3% of the original size of 31,095,260 n-grams.",
        "ods.",
        "Thus, while Kneser-Ney may be the preferred smoothing method for large, unpruned models ?",
        "where it can achieve real improvements over other smoothing methods ?",
        "when relatively sparse, pruned models are required, it has severely diminished utility.",
        "Table 1 presents a slightly reformatted version of Table 3 from Chelba et al. (2010).",
        "In their experiments (see Table 1 caption for specifics on training/test setup), they trained 4-gram Broadcast News language models using a variety of both backoff and interpolated smoothing methods and measured perplexity before and after Stolcke (1998) relative entropy based pruning.",
        "With this size training data, the perplexity of all of the smoothing methods other than Kneser-Ney degrades from around 120 with the full model to around 200 with the heavily pruned model.",
        "Kneser-Ney smoothed models have lower perplexity with the full model than the other methods by about 5 points, but degrade with pruning to far higher perplexity, between 270-285.",
        "The cause of this degradation is Kneser-Ney's unique method for estimating smoothed language models, which will be presented in more detail in Section 3.",
        "Briefly, the smoothing method reesti-mates lower-order n-gram parameters in order to avoid overestimating the likelihood of n-grams that already have ample probability mass allocated as part of higher-order n-grams.",
        "This is done via a marginal distribution constraint which requires the expected frequency of the lower-order n-grams to match their observed frequency in the training data, much as is commonly done for maximum entropy model training.",
        "Goodman (2001) proved that, under certain assumptions, such constraints can only improve language models.",
        "Lower-order n-gram parameters resulting from Kneser-Ney are not relative frequency estimates, as with other smoothing methods; rather they are parameters estimated specifically for use within the larger smoothed model.",
        "There are (at least) a couple of reasons why such parameters do not play well with model pruning.",
        "First, the pruning methods commonly use lower order n-gram probabilities to derive an estimate of state marginals, and, since these parameters are no longer smoothed relative frequency estimates, they do not serve that purpose well.",
        "For this reason, the widely-used SRILM toolkit recently provided switches to modify their pruning algorithm to use another model for state marginal estimates (Stolcke et al., 2011).",
        "Second, and perhaps more importantly, the marginal constraints that were applied prior to smoothing will not in general be consistent with the much smaller pruned model.",
        "For example, if a bigram parameter is modified due to the presence of some set of trigrams, and then some or all of those trigrams are pruned from the model, the bigram associated with the modified parameter will be unlikely to have an overall expected frequency equal to its observed frequency anymore.",
        "As a result, the resulting model degrades dramatically with pruning.",
        "In this paper, we present an algorithm that imposes marginal distribution constraints of the sort used in Kneser-Ney modeling on arbitrary smoothed backoff n-gram language models.",
        "Our approach makes use of the same sort of derivation as the original Kneser-Ney modeling, but, among other differences, relies on smoothed estimates of the empirical relative frequency rather than the unsmoothed observed frequency.",
        "The algorithm can be applied after the smoothed model has been pruned, hence avoiding the pitfalls associated with Kneser-Ney modeling.",
        "Furthermore, while Kneser-Ney is conventionally defined as a variant of absolute discounting, our method can be applied to models smoothed with any backoff smoothing, including mixtures of models, widely",
        "used for domain adaptation.",
        "We next establish formal preliminaries and our smoothed marginal distribution constraints method."
      ]
    },
    {
      "heading": "2 Preliminaries",
      "text": [
        "N-gram language models are typically presented mathematically in terms of words w, the strings (histories) h that precede them, and the suffixes of the histories (backoffs) h?",
        "that are used in the smoothing recursion.",
        "Let V be a vocabulary (alphabet), and V ?",
        "a string of zero or more symbols drawn from V .",
        "Let V k denote the set of strings w ?",
        "V ?",
        "of length k, i.e., |w |= k. We will use variables u, v, w, x, y, z ?",
        "V to denote single symbols from the vocabulary; h, g ?",
        "V ?",
        "to denote history sequences preceding the specific word; and h?, g?",
        "?",
        "V ?",
        "the respective backoff histories of h and g as typically defined (see below).",
        "For a string",
        "conditional probability of each word wi in the sequence given the k words that preceded it, depending on the order of the Markov model.",
        "Let hki = wi?k .",
        ".",
        ".",
        "wi?1 be the previous k words in the sequence.",
        "Then the smoothed model is defined recursively as follows:",
        "where c(hkiwi) is the count of the n-gram sequence wi?k .",
        ".",
        ".",
        "wi in the training corpus; P is a regularized probability estimate that provides some probability mass for unobserved n-grams; and ?",
        "(hki ) is a factor that ensures normalization.",
        "Note that for h = hki , the typically defined backoff history h?",
        "= hk?1i , i.e., the longest suffix of h that is not h itself.",
        "When we use h?",
        "and g?",
        "(for notational convenience) in future equations, it is this definition that we are using.",
        "There are many ways to estimate P, including absolute discounting (Ney et al., 1994), Katz (1987) and Witten and Bell (1991).",
        "Interpolated models are special cases of this form, where the P is determined using model mixing, and the ?",
        "parameter is exactly the mixing factor value for the lower order model.",
        "N-gram language models allow for a sparse representation, so that only a subset of the possible n-grams must be explicitly stored.",
        "Probabilities for the rest of the n-grams are calculated through the ?otherwise?",
        "semantics in the equation above.",
        "For an n-gram language model G, we will say that an n-gram hw ?",
        "G if it is explicitly represented in the model; otherwise hw 6?",
        "G. In the standard ngram formulation above, the assumption is that if c(hkiwi) > 0 then the n-gram has a parameter; yet with pruning, we remove many observed n-grams from the model, hence this is no longer the appropriate criterion.",
        "We reformulate the standard equation as follows:",
        "where ?",
        "(hkiwi) is the parameter associated with the n-gram hkiwi and ?",
        "(hki , hk?1i ) is the backoff cost associated with going from state hki to state hk?1i .",
        "We assume that, if hw ?",
        "G then all prefixes and suffixes of hw are also in G. Figure 1 presents a schema of an automaton representation of an n-gram model, of the sort used in the OpenGrm library (Roark et al., 2012).",
        "States represent histories h, and the words w, whose probabilities are conditioned on h, label the arcs, leading to the history state for the subsequent word.",
        "State labels are provided in Figure 1 as a convenience, to show the (implicit) history encoded by the state, e.g., ?xyz?",
        "indicates that the state represents a history with the previous three symbols being x, y and z.",
        "Failure arcs, labeled with a ?",
        "in Figure 1, encode an ?otherwise?",
        "semantics and have as destination the origin state's backoff history.",
        "Many higher order states will back off to the same lower order state, specifically those that share the same suffix.",
        "Note that, in general, the recursive definition of backoff may require the traversal of several back",
        "are presented for convenience, to specify the history implicitly encoded by the state.",
        "off arcs before emitting a word, e.g., the highest order states in Figure 1 needing to traverse a couple of ?",
        "arcs to reach state ?z?.",
        "We can define the backoff cost between a state hki and any of its suffix states as follows.",
        "Let ?",
        "(h, h) = 1 and for",
        "If hkiw 6?",
        "G then the probability of that n-gram will be defined in terms of backoff to its longest suffix hk?mi w ?",
        "G. Let hwG denote the longest suffix of h such that hwGw ?",
        "G. Note that this is not necessarily a proper suffix, since hwG could be h itself or it could be .",
        "Then",
        "which is equivalent to equation 1."
      ]
    },
    {
      "heading": "3 Marginal distribution constraints",
      "text": [
        "Marginal distribution constraints attempt to match the expected frequency of an n-gram with its observed frequency.",
        "In other words, if we use the model to randomly generate a very large corpus, the n-grams should occur with the same rela",
        "tive frequency in both the generated and original (training) corpus.",
        "Standard smoothing methods overgenerate lower-order n-grams.",
        "Using standard n-gram notation (where g?",
        "is the backoff history for g), this constraint is stated in Kneser and Ney (1995) as",
        "where P?",
        "is the empirical relative frequency estimate.",
        "Taking this approach, certain base smoothing methods end up with very nice, easy to calculate solutions based on counts.",
        "Absolute discounting (Ney et al., 1994) in particular, using the above approach, leads to the well-known Kneser-Ney smoothing approach (Kneser and Ney, 1995; Chen and Goodman, 1998).",
        "We will follow this same approach, with a couple of changes.",
        "First, we will make use of regularized estimates of relative frequency P rather than raw relative frequency P?.",
        "Second, rather than just looking at observed histories h that back off to h?, we will look at all histories (observed or not) of the length of the longest history in the model.",
        "For notational simplicity, suppose we have an n+1-gram model, hence the longest history in the model is of length n. Assume the length of the particular backoff history |h?",
        "|= k. Let V n?kh?",
        "be the set of strings h ?",
        "V n with h?",
        "as a suffix.",
        "Then we can restate the marginal distribution constraint in equation 3 as",
        "Next we solve for ?",
        "(h?w) parameters used in equation 1.",
        "Note that h?",
        "is a suffix of any h ?",
        "V n?kh?, so conditioning probabilities on h and h?",
        "is the same as conditioning on just h. Each of the following derivation steps simply relies on the chain rule or definition of conditional probability, as well as pulling terms out of the summation.",
        "Then, multiplying both sides by the normalizing denominator on the right-hand side and using equation 2 to substitute ?",
        "(h, hwG) ?",
        "(hwGw) for",
        "Note that we are only interested in h?w ?",
        "G, hence there are two disjoint subsets of histories h ?",
        "V n?kh?",
        "that are being summed over: those such that hwG = h?",
        "and those such that |hwG |> |h?|.",
        "We next separate these sums in the next step of the derivation:",
        "Finally, we solve for ?",
        "(h?w) in the second sum on the right-hand side of equation 7, yielding the formula in equation 8.",
        "Note that this equation is the correlate of equation (6) in Kneser and Ney",
        "(1995), modulo the two differences noted earlier: use of smoothed probability P rather than raw relative frequency; and summing over all history sub-strings in V n?kh?",
        "rather than just those with count greater than zero, which is also a change due to smoothing.",
        "Keep in mind, P is the target expected frequency from a given smoothed model.",
        "Kneser-Ney models are not useful input models, since their P n-gram parameters are not relative frequency estimates.",
        "This means that we cannot simply ?repair?",
        "pruned Kneser-Ney models, but must use other smoothing methods where the smoothed values are based on relative frequency estimation.",
        "There are, in addition, two other important differences in our approach from that in Kneser and Ney (1995), which would remain as differences even if our target expected frequency were the unsmoothed relative frequency P?",
        "instead of the smoothed estimate P. First, the sum in the numerator is over histories of length n, the highest order in the n-gram model, whereas in the Kneser-Ney approach the sum is over histories that immediately back off to h?, i.e., from the next highest order in the n-gram model.",
        "Thus the unigram distribution is with respect to the bigram model, the bigram model is with respect to the trigram model, and so forth.",
        "In our optimization, we sum instead over all possible history sequences of length n. Second, an early assumption made in Kneser and Ney (1995) is that the denominator term in their equation (6) (our Eq.",
        "8) is constant across all words for a given history, which is clearly false.",
        "We do not make this assumption.",
        "Of course, the probabilities must be normalized, hence the final values of ?",
        "(h?w) will be proportional to the values in Eq.",
        "8.",
        "We briefly note that, like Kneser-Ney, if the baseline smoothing method is consistent, then the amount of smoothing in the limit will go to zero and our resulting model will also be consistent.",
        "The smoothed relative frequency estimate P and higher order ?",
        "values on the right-hand side of Eq.",
        "8 are given values (from the input smoothed model and previous stages in the algorithm, respectively), implying an algorithm that estimates highest orders of the model first.",
        "In addition, steady state history probabilities P(h) must be calculated.",
        "We turn to the estimation algorithm next."
      ]
    },
    {
      "heading": "4 Model constraint algorithm",
      "text": [
        "Our algorithm takes a smoothed backoff n-gram language model in an automaton format (see Figure 1) and returns a smoothed backoff n-gram language model with the same topology.",
        "For all n-grams in the model that are suffixes of other n-grams in the model ?",
        "i.e., that are backed-off to ?",
        "we calculate the weight provided by equation 8 and assign it (after normalization) to the appropriate n-gram arc in the automaton.",
        "There are several important considerations for this algorithm, which we address in this section.",
        "First, we must provide a probability for every state in the model.",
        "Second, we must memoize summed values that are used repeatedly.",
        "Finally, we must iterate the calculation of certain values that depend on the n-gram weights being re-estimated."
      ]
    },
    {
      "heading": "4.1 Steady state probability calculation",
      "text": [
        "The steady state probability P(h) is taken to be the probability of observing h after a long word sequence, i.e., the state's relative frequency in a long sequence of randomly-generated sentences from the model:",
        "where P?",
        "is the corpus probability derived as follows: The smoothed n-gram probability model",
        "are the sentence initial and final words, by P(s) =?l",
        "where ?",
        "parameterizes the corpus length distribution.2 Assuming the n-gram language model automaton G has a single final state </s> into 2P?",
        "models words in a corpus rather than a single sentence since Equation 9 tends to zero as m ?",
        "?",
        "otherwise.",
        "In Markov chain terms, the corpus distribution is made irreducible to allow a non-trivial stationary distribution.",
        "which all </s> arcs enter, adding a ?",
        "weighted arc from the </s> state to the initial state and having a final weight 1 ?",
        "?",
        "in order to leave the automaton at the </s> state will model this corpus distribution.",
        "According to Eq.",
        "9, P (h) is then the stationary distribution of the finite irreducible Markov Chain defined by this altered automaton.",
        "There are many methods for computing such a stationary distribution; we use the well-known power method (Stewart, 1999).",
        "One difficulty remains to be resolved.",
        "The backoff arcs have a special interpretation in the automaton: they are traversed only if a word fails to match at the higher order.",
        "These failure arcs must be properly handled before applying standard stationary distribution calculations.",
        "A simple approach would be for each word w?",
        "and state h such that hw?",
        "/?",
        "G, but h?w?",
        "?",
        "G, add a w?",
        "arc from state h to h?w?",
        "with weight ?",
        "(h, h?)?(h?w?)",
        "and then remove all failure arcs (see Figure 2a).",
        "This however results in an automaton with |V |arcs leaving every state, which is unwieldy with larger vocabularies and n-gram orders.",
        "Instead, for each word w and state h such that hw ?",
        "G, add a w arc from state h to h?w with weight ??",
        "(h, h?)?",
        "(h?w) and then replace all failure labels with labels (see Figure 2b).",
        "In this case, the added negatively-weighted arcs compensate for the excess probability mass allowed by the epsilon arcs3.",
        "The number of added arcs is no more than found in the original model."
      ]
    },
    {
      "heading": "4.2 Accumulation of higher order values",
      "text": [
        "We are summing over all possible histories of length n in equation 8, and the steady state probability calculation outlined in the previous section includes the probability mass for histories h 6?",
        "G. The probability mass of states not inG ends up being allocated to the state representing their longest suffix that is explicitly in G. That is the state that would be active when these histories are encountered.",
        "Hence, once we have calculated the steady state probabilities for each state in the smoothed model, we only need to sum over states explicitly in the model.",
        "As stated earlier, the use of ?",
        "(hwGw) in the numerator of equation 8 for hwG that are larger than h?",
        "implies that the longer n-grams must be 3Since each negatively-weighted arc leaving a state exactly cancels an epsilon arc followed by a matching positively-weighted arc in each iteration of the power method, convergence is assured.",
        "removal: add w?",
        "arc (red), delete ?",
        "arc; (b) ?",
        "replacement: add w arc (red), replace ?",
        "by (red) re-estimated first.",
        "Thus we process each history length in descending order, finishing with the unigram state.",
        "Since we assume that, for every ngram hw ?",
        "G, every prefix and suffix is also in G, we know that if h?w 6?",
        "G then there is no history h such that h?",
        "is a suffix of h and hw ?",
        "G. This allows us to recursively accumulate the ?",
        "(h, h?)",
        "P(h) in the denominator of Eq.",
        "8.",
        "For every n-gram, we can accumulate values required to calculate the three terms in equation 8, and pass them along to calculate lower order ngram values.",
        "Note, however, that a naive implementation of an algorithm to assign these values is O(|V |n).",
        "This is due to the fact that the denominator factor must be accumulated for all higher order states that do not have the given n-gram.",
        "Hence, for every state h directly backing off to h?",
        "(order |V |), and for every n-gram arc leaving state h?",
        "(order |V |), some value must be accumulated.",
        "This can be particularly clearly seen at the unigram state, which has an arc for every unigram (the size of the vocabulary): for every bigram state (also order of the vocabulary), in the naive algorithm we must look for every possible arc.",
        "Since there are O(|V |n?2) lower order histories in the model in the worst case, we have overall complexity O(|V |n).",
        "However, we know that the number of stored n-grams is very sparse relative to the possible number of n-grams, so the typical case complexity is far lower.",
        "Importantly, the denominator is calculated by first assuming that all higher order states back off to the current n-gram, then subtract out the mass associated with those that are already observed at the higher order.",
        "In such a way, we need only perform work for higher order n-grams hw that are explicitly in the model.",
        "This optimization achieves orders-of-magnitude speedups, so that models take seconds to process.",
        "Because smoothing is not necessarily con",
        "strained across n-gram orders, it is possible that higher-order n-grams could be smoothed less than lower order n-grams, so that the numerator of equation 8 can be less than zero, which is not valid.",
        "A value less than zero means that the higher order n-grams will already produce the n-gram more frequently than its smoothed expected frequency.",
        "We set a minimum value for the numerator, and any n-gram numerator value less than is replaced with (for the current study, = 0.001).",
        "We find this to be relatively infrequent, about 1% of n-grams for most models."
      ]
    },
    {
      "heading": "4.3 Iteration",
      "text": [
        "Recall that P and ?",
        "terms on the right-hand side of equation 8 are given and do not change.",
        "But there are two other terms in the equation that change as we update the n-gram parameters.",
        "The ?",
        "(h, h?)",
        "backoff weights in the denominator ensure normalization at the higher order states, and change as the n-gram parameters at the current state are modified.",
        "Further, the steady state probabilities will change as the model changes.",
        "Hence, at each state, we must iterate the calculation of the denominator term: first adjust n-gram weights and normalize; then recalculate backoff weights at higher order states and iterate.",
        "Since this only involves the denominator term, each n-gram weight can be updated by multiplying by the ratio of the old term and the new term.",
        "After the entire model has been re-estimated, the steady state probability calculation presented in Section 4.1 is run again and model estimation happens again.",
        "As we shall see in the experimental results, this typically converges after just a few iterations.",
        "At this time, we have no convergence proofs for either of these iterative components to the algorithm, but expect that something can be said about this, which will be a priority in future work."
      ]
    },
    {
      "heading": "5 Experimental results",
      "text": [
        "All results presented here are for English Broadcast News.",
        "We received scripts for replicating the Chelba et al. (2010) results from the authors, and we report statistics on our replication of their paper's results in Table 2.",
        "The scripts are distributed in such a way that the user supplies the data from LDC98T31 (1996 CSR HUB4 Language Model corpus) and the script breaks the collection into training and testing sets, normalizes the text, and Smoothing Perplexity n-grams (?1000) method full pruned model diff",
        "script.",
        "Using the script, the size of the unpruned model is 31,091,219 ngrams, 4,041 fewer than Chelba et al. (2010).",
        "?",
        "Kneser-Ney model pruned using -prune-history-lm switch in SRILM.",
        "trains and prunes the language models using the SRILM toolkit (Stolcke et al., 2011).",
        "Presumably due to minor differences in text normalization, resulting in very slightly fewer n-grams in all conditions, we achieve negligibly lower perplexities (one or two tenths of a point) in all conditions, as can be seen when comparing with Table 1.",
        "All of the same trends result, thus that paper's result is successfully replicated here.",
        "Note that we ran our Kneser-Ney pruning (noted with a ?",
        "in the table), using the new -prune-history-lm switch in SRILM ?",
        "created in response to the Chelba et al. (2010) paper ?",
        "which allows the use of another model to calculate the state marginals for pruning.",
        "This fixes part of the problem ?",
        "perplexity does not degrade as much as the Kneser-Ney pruned model in Table 1 ?",
        "but, as argued earlier in this paper, this is not the sole reason for the degradation and the perplexity remains extremely inflated.",
        "We follow Chelba et al. (2010) in training and test set definition, vocabulary size, and parameters for reporting perplexity.",
        "Note that unigrams in the models are never pruned, hence all models assign probabilities over an identical vocabulary and perplexity is comparable across models.",
        "For all results reported here, we use the SRILM toolkit for baseline model training and pruning, then convert from the resulting ARPA format model to an OpenFst format (Allauzen et al., 2007), as used in the OpenGrm n-gram library (Roark et al., 2012).",
        "We then apply the marginal distribution constraints, and convert the result back to ARPA format for perplexity evaluation with the SRILM toolkit.",
        "All models are subjected to full normalization sanity checks, as with typical model functions in the OpenGrm library.",
        "Recall that our algorithm assumes that, for every n-gram in the model, all prefix and suffix ngrams are also in the model.",
        "For pruned models, the SRILM toolkit does not impose such a requirement, hence explicit arcs are added to the",
        "gram counts are slightly higher than ARPA format in Table 2 due to adding prefix and suffix n-grams.",
        "model during conversion, with probability equal to what they would receive in the the original model.",
        "The resulting model is equivalent, but with a small number of additional arcs in the explicit representation (around 1% for the most heavily pruned models).",
        "Table 3 presents perplexity results for models that result from applying our marginal distribution constraints to the four heavily pruned models from Table 2.",
        "In all four cases, we get perplexity reductions of around 10 points.",
        "We present the number of n-grams represented explicitly in the WFST, which is a slight increase from those presented in Table 2 due to the reintroduction of prefix and suffix n-grams.",
        "In addition to the four models reported in Chelba et al. (2010), we produced a mixture model by interpolating (with equal weight) smoothed ngram probabilities from the full (unpruned) absolute discounting, Witten-Bell and Katz models, which share the same set of n-grams.",
        "After renormalizing and pruning to approximately the same size as the other models, we get commensurate gains using this model as with the other models.",
        "Figure 3 demonstrates the importance of iterating the steady state history calculation.",
        "All of the methods achieve perplexity reductions with subsequent iterations.",
        "Katz and absolute discounting achieve very little reduction in the first iteration, but catch back up in the second iteration.",
        "The other iterative part of the algorithm, discussed in Section 4.3, is the denominator of equation 8, which changes due to adjustments in the backoff weights required by the revised n-gram probabilities.",
        "If we do not iteratively update the backoff weights when reestimating the weights, the ?Pruned+MDC?",
        "perplexities in Table 3 increase by between 0.2?0.4 points.",
        "Hence, iterating the steady state probability calculation is quite important, as illustrated by Figure 3; iterating the 0 1 2 3 4 5 6180",
        "rameter re-estimation iterations.",
        "Iteration 0 is the baseline pruned model.",
        "denominator calculation much less so, at least for these models.",
        "We noted in Section 3 that a key difference between our approach and Kneser and Ney (1995) is that their approach treated the denominator as a constant.",
        "If we do this, the ?Pruned+MDC?",
        "perplexities increase by between 4.5?5.6 points, i.e., about half of the perplexity reduction is lost for each method.",
        "Thus, while iteration of denominator calculation may not be critical, it should not be treated as a constant.",
        "We now look at the impacts on system performance we can achieve with these new models4, and whether the perplexity differences that we observe translate to real error rate reductions.",
        "For automatic speech recognition experiments, we used as test set the 1997 Hub4 evaluation set consisting of 32,689 words.",
        "The acoustic model is a tied-state triphone GMM-based HMM whose input features are 9-frame stacked 13-dimensional PLP-cepstral coefficients projected down to 39 dimensions using LDA.",
        "The model was trained on the 1996 and 1997 Hub4 acoustic model training sets (about 150 hours of data) using semi-tied covariance modeling and CMLLR-based speaker adaptive training and 4 iterations of boosted MMI.",
        "We used a multi-pass decoding strategy: two quick passes for adaptation supervision, CMLLR and MLLR estimation; then a slower full decoding pass running about 3 times slower than real time.",
        "Table 4 presents recognition results for the heavily pruned models that we have been considering, both for first pass decoding and rescoring of the resulting lattices using failure transitions rather than epsilon backoff approximations.",
        "Ney results are shown for: a) original pruning; and b) with -prune-history-lm switch.",
        "The perplexity reductions that were achieved for these models do translate to real word error rate reductions at both stages of between 0.5 and 0.9 percent absolute.",
        "All of these gains are statistically significant at p < 0.0001 using the stratified shuffling test (Yeh, 2000).",
        "For pruned Kneser-Ney models, fixing the state marginals with the -prune-history-lm switch reduces the WER versus the original pruned model, but no reductions were achieved vs. baseline methods.",
        "Table 5 presents perplexity and WER results for less heavily pruned models, where the pruning thresholds were set to yield approximately 1.5 million n-grams (4 times more than the previous models); and another set at around 5 million n-grams, as well as the full, unpruned models.",
        "While the robust gains we?ve observed up to now persist with the 1.5M n-gram models (WER reductions significant, Witten-Bell at p < 0.02, others at p < 0.0001), the larger models yield diminishing gains, with no real WER improvements.",
        "Performance of Witten-Bell models with the marginal distribution constraints degrade badly for the larger models, indicating that this method of regularization, unmodified by aggressive pruning, does not provide a well suited distribution for this sort of optimization.",
        "We speculate that this is due to underregularization, having noted some floating point precision issues when allowing the backoff recalculation to run indefinitely."
      ]
    },
    {
      "heading": "6 Summary and Future Directions",
      "text": [
        "The presented method reestimates lower order n-gram model parameters for a given smoothed backoff model, achieving perplexity and WER reductions for many smoothed models.",
        "There remain a number of open questions to investigate in the future.",
        "Recall that the numerator in Eq.",
        "8 can be less than zero, meaning that no param-eterization would lead to a model with the target frequency of the lower order n-gram, presumably due to over-or under-regularization.",
        "We anticipate a pre-constraint on the baseline smoothing method, that would recognize this problem and adjust the smoothing to ensure that a solution does exist.",
        "Additionally, it is clear that different regularization methods yield different behaviors, notably that large, relatively lightly pruned Witten-Bell models yield poor results.",
        "We will look to identify the issues with such models and provide general guidelines for prepping models prior to processing.",
        "Finally, we would like to perform extensive controlled experimentation to examine the relative contribution of the various aspects of our approach."
      ]
    },
    {
      "heading": "Acknowledgments",
      "text": [
        "Thanks to Ciprian Chelba and colleagues for the scripts to replicate their results.",
        "This work was supported in part by a Google Faculty Research Award and NSF grant #IIS-0964102.",
        "Any opinions, findings, conclusions or recommendations expressed in this publication are those of the authors and do not necessarily reflect the views of the NSF."
      ]
    }
  ]
}
