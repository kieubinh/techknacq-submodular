{
  "info": {
    "authors": [
      "Ryan Cotterell",
      "Nanyun Peng",
      "Jason Eisner"
    ],
    "book": "ACL",
    "id": "acl-P14-2102",
    "title": "Stochastic Contextual Edit Distance and Probabilistic FSTs",
    "url": "https://aclweb.org/anthology/P14-2102",
    "year": 2014
  },
  "references": [
    "acl-D08-1113",
    "acl-E99-1017",
    "acl-J94-3001",
    "acl-J97-2003",
    "acl-J98-2005",
    "acl-N10-1083",
    "acl-N13-1073",
    "acl-P03-1012",
    "acl-P05-1057",
    "acl-P14-1073",
    "acl-P96-1031",
    "acl-W02-1002"
  ],
  "sections": [
    {
      "text": [
        "Abstract",
        "String similarity is most often measured by weighted or unweighted edit distance d(x, y).",
        "Ristad and Yianilos (1998) defined stochastic edit distance?a probability distribution p(y | x) whose parameters can be trained from data.",
        "We generalize this so that the probability of choosing each edit operation can depend on contextual features.",
        "We show how to construct and train a probabilistic finite-state transducer that computes our stochastic contextual edit distance.",
        "To illustrate the improvement from conditioning on context, we model typos found in social media text."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "Many problems in natural language processing can be viewed as stochastically mapping one string to another: e.g., transliteration, pronunciation modeling, phonology, morphology, spelling correction, and text normalization.",
        "Ristad and Yianilos (1998) describe how to train the parameters of a stochastic editing process that moves through the input string x from left to right, transforming it into the output string y.",
        "In this paper we generalize this process so that the edit probabilities are conditioned on input and output context.",
        "We further show how to model the conditional distribution p(y | x) as a probabilistic finite-state transducer (PFST), which can be easily combined with other transducers or grammars for particular applications.",
        "We contrast our probabilistic transducers with the more general framework of weighted finite-state transducers (WFST), explaining why our restriction provides computational advantages when reasoning about unknown strings.",
        "Constructing the finite-state transducer is tricky, so we give the explicit construction for use by others.",
        "We describe how to train its parameters when the contextual edit probabilities are given by a log-linear model.",
        "We provide a library for training both PFSTs and WFSTs that works with OpenFST (Allauzen et al., 2007), and we illustrate its use with simple experiments on typos, which demonstrate the benefit of context.",
        "2 Stochastic Contextual Edit Distance Our goal is to define a family of probability distributions p ?",
        "(y | x), where x ?",
        "?",
        "?",
        "x and y ?",
        "?",
        "?",
        "y are input and output strings over finite alphabets ?",
        "x and ?",
        "y , and ?",
        "is a parameter vector.",
        "Let x i denote the i th character of x.",
        "If i < 1 or i > |x|, then x i is the distinguished symbol BOS or EOS (?beginning/end of string?).",
        "Let x i:j denote the (j ?",
        "i)-character substring x i+1 x i+2 ?",
        "?",
        "?x j .",
        "Consider a stochastic edit process that reads input string x while writing output string y.",
        "Having read the prefix x 0:i and written the prefix y 0:j , the process must stochastically choose one of the following 2|?",
        "y |+ 1 edit operations: ?",
        "DELETE: Read x i+1 but write nothing.",
        "?",
        "INSERT(t) for some t ?",
        "?",
        "y : Write y j+1 = t without reading anything.",
        "?",
        "SUBST(t) for some t ?",
        "?",
        "y : Read x i+1 and write y j+1 = t. Note that the traditional COPY operation is obtained as SUBST(x i+1 ).",
        "In the special case where x i+1 = EOS, the choices are instead INSERT(t) and HALT (where the latter may be viewed as copying the EOS symbol).",
        "The probability of each edit operation depends on ?",
        "and is conditioned on the left input context C 1 = x (i?N 1 ):i , the right input context C 2 = x i:(i+N 2 ) , and the left output context C 3 = y (j?N 3 ):j , where the constants N 1 , N 2 , N 3 ?",
        "0 specify the model's context window sizes.",
        "1 Note that the probability cannot be conditioned on right output context because those characters have not yet been chosen.",
        "Ordinary stochastic edit distance (Ristad and Yianilos, 1998) is simply the case (N 1 , N 2 , N 3 ) = (0, 1, 0), while Bouchard-C?ot?e et al. (2007) used roughly (1, 2, 0).",
        "Now p ?",
        "(y | x) is the probability that this process will write y as it reads a given x.",
        "This is the total probability (given x) of all latent edit operation sequences that write y.",
        "In general there are exponentially many such sequences, each implying a different alignment of y to x.",
        "1 IfN 2 = 0, so that we do not condition on x i+1 , we must still condition on whether x i+1 = EOS (a single bit).",
        "We gloss over special handling for N 2 = 0; but it is in our code.",
        "625 This model is reminiscent of conditional models in MT that perform stepwise generation of one string or structure from another?e.g., string alignment models with contextual features (Cherry and Lin, 2003; Liu et al., 2005; Dyer et al., 2013), or tree transducers (Knight and Graehl, 2005).",
        "3 Probabilistic FSTs We will construct a probabilistic finite-state transducer (PFST) that compactly models p ?",
        "(y | x) for all (x, y) pairs.",
        "2 Then various computations with this distribution can be reduced to standard finite-state computations that efficiently employ dynamic programming over the structure of the PFST, and the PFST can be easily combined with other finite-state distributions and functions (Mohri, 1997; Eisner, 2001).",
        "A PFST is a two-tape generalization of the well-known nondeterministic finite-state acceptor.",
        "It is a finite directed multigraph where each arc is labeled with an input in ?",
        "x ?",
        "{\u000f}, an output in ?",
        "y ?",
        "{\u000f}, and a probability in [0, 1].",
        "(\u000f is the empty string.)",
        "Each state (i.e., vertex) has a halt probability in [0, 1], and there is a single initial state q I .",
        "Each path from q I to a final state q F has ?",
        "an input string x, given by the concatenation of its arcs?",
        "input labels; ?",
        "an output string y, given similarly; ?",
        "a probability, given by the product of its arcs?",
        "probabilities and the halt probability of q F .",
        "We define p(y | x) as the total probability of all paths having input x and output y.",
        "In our applica-tion, a PFST path corresponds to an edit sequence that reads x and writes y.",
        "The path's probability is the probability of that edit sequence given x.",
        "We must take care to ensure that for any x ?",
        "?",
        "?",
        "x , the total probability of all paths accepting x is 1, so that p ?",
        "(y | x) is truly a conditional probability distribution.",
        "This is guaranteed by the following sufficient conditions (we omit the proof for space), which do not seem to appear in previous literature: ?",
        "For each state q and each symbol b ?",
        "?",
        "x , the arcs from q with input label b or \u000f must have total probability of 1.",
        "(These are the available choices if the next input character is x.)",
        "2 Several authors have given recipes for finite-state transducers that perform a single contextual edit operation (Kaplan and Kay, 1994; Mohri and Sproat, 1996; Gerdemann and van Noord, 1999).",
        "Such ?rewrite rules?",
        "can be individually more expressive than our simple edit operations of section 2; but it is unclear how to train a cascade of them to model p(y | x).",
        "?",
        "For each state q, the halt action and the arcs from q with input label \u000f must have total probability of 1.",
        "(These are the available choices if there is no next input character.)",
        "?",
        "Every state q must be co-accessible, i.e., there must be a path of probability > 0 from q to some q F .",
        "(Otherwise, the PFST could lose some probability mass to infinite paths.",
        "The canonical case of this involves an loop q ?",
        "q with input label \u000f and probability 1.)",
        "We take the first two conditions to be part of the definition of a PFST.",
        "The final condition requires our PFST to be ?tight?",
        "in the same sense as a PCFG (Chi and Geman, 1998), although the tightness conditions for a PCFG are more complex.",
        "In section 7, we discuss the costs and benefits of PFSTs relative to other options.",
        "4 The Contextual Edit PFST We now define a PFST topology that concisely captures the contextual edit process of section 2.",
        "We are given the alphabets ?",
        "x ,?",
        "y and the context window sizes N 1 , N 2 , N 3 ?",
        "0.",
        "For each possible context triple C = (C 1 , C 2 , C 3 ) as defined in section 2, we construct an edit state q C whose outgoing arcs correspond to the possible edit operations in that context.",
        "One might expect that the SUBST(t) edit operation that reads s = x i+1 and writes t = y j+1 would correspond to an arc with s, t as its input and output labels.",
        "However, we give a more efficient design where in the course of reaching q C , the PFST has already read s and indeed the entire right input context C 2 = x i:(i+N 2 ) .",
        "So our PFST's input and output actions are ?out of sync?",
        ": its read head is N 2 characters ahead of its write head.",
        "When the edit process of section 2 has read x 0:i and written y 0:j , our PFST implementation will actually have read x 0:(i+N 2 ) and written y 0:j .",
        "This design eliminates the need for nondeterministic guessing (of the right context x i:(i+N 2 ) ) to determine the edit probability.",
        "The PFST's state is fully determined by the characters that it has read and written so far.",
        "This makes left-to-right composition in section 5 efficient.",
        "A fragment of our construction is illustrated in Figure 1.",
        "An edit state q C has the following outgoing edit arcs, each of which corresponds to an edit operation that replaces some s ?",
        "?",
        "x ?",
        "{\u000f} with some t ?",
        "?",
        "y ?",
        "{\u000f}: 626 b c y _ a bc z _ a b x _ a ba x _ ?",
        ": z / ?",
        ": ?",
        "/ ?",
        ": y / ?",
        ":x / i n s e r t z insert x s u b s t i t u t e y f o r b d e l e t e b b c x _ r e a d c c : ?",
        "/ 1 p(INSERT(x) | (a,bc,x) ) p ( I N S E R T ( z ) | ( a , b c , x ) ) p ( S U B S T ( y ) | ( a , b c , x ) ) p ( D E L E T E ( b ) | ( a , b c , x ) ) c Figure 1: A fragment of a PFST withN 1 = 1, N 2 = 2, N 3 = 1.",
        "Edit states are shaded.",
        "A state q C is drawn with left and right input contexts C 1 , C 2 in the left and right upper quad-rants, and left output context C 3 in the left lower quadrant.",
        "Each arc is labeled with input:output / probability.",
        "?",
        "A single arc with probability p(DELETE | C) (here s = (C 2 ) 1 , t = \u000f) ?",
        "For each t ?",
        "?",
        "y , an arc with probability p(INSERT(t) | C) (here s = \u000f) ?",
        "For each t ?",
        "?",
        "y , an arc with probability p(SUBST(t) | C) (here s = (C 2 ) 1 ) Each edit arc is labeled with input \u000f (because s has already been read) and output t. The arc leads from q C to q C ?",
        ", a state that moves s and t into the left contexts: C ?",
        "1 = suffix(C 1 s,N 1 ), C ?",
        "2 = suffix(C 2 , N 2 ?",
        "|s|), C ?",
        "3 = suffix(C 3 t,N 3 ).",
        "Section 2 mentions that the end of x requires special handling.",
        "An edit state q C whose C 2 = EOS N 2 only has outgoing INSERT(t) arcs, and has a halt probability of p(HALT | C).",
        "The halt probability at all other states is 0.",
        "We must also build some non-edit states of the form q C where |C 2 | < N 2 .",
        "Such a state does not have the full N 2 characters of lookahead that are needed to determine the conditional probability of an edit.",
        "Its outgoing arcs deterministically read a new character into the right input context.",
        "For each s ?",
        "?",
        "x , we have an arc of probability 1 from q C to q C ?",
        "where C ?",
        "= (C 1 , C 2 s, C 3 ), labeled with input s and output \u000f.",
        "Following such arcs from q C will reach an edit state after N 2 ?",
        "|C 2 | steps.",
        "The initial state q I with I = (BOS N 1 , \u000f, BOS N 3 ) is a non-edit state.",
        "Other non-edit states are constructed only when they are reachable from another state.",
        "In particular, a DELETE or SUBST arc always transitions to a non-edit state, since it consumes one of the lookahead characters.",
        "5 Computational Complexity We summarize some useful facts without proof.",
        "For fixed alphabets ?",
        "x and ?",
        "y , our final PFST, T , has O(|?",
        "x | N 1 +N 2 |?",
        "y | N 3 ) states and O(|?",
        "x | N 1 +N 2 |?",
        "y | N 3 +1 ) arcs.",
        "Composing this T with deterministic FSAs takes time linear in the size of the result, using a left-to-right, on-the-fly implementation of the composition operator ?.",
        "Given strings x and y, we can compute p ?",
        "(y | x) as the total probability of all paths in x ?",
        "T ?",
        "y.",
        "This acyclic weighted FST has O(|x| ?",
        "|y|) states and arcs.",
        "It takes onlyO(|x| ?",
        "|y|) time to construct it and sum up its paths by dynamic programming, just as in other edit distance algorithms.",
        "Given only x, taking the output language of x ?",
        "T yields the full distribution p ?",
        "(y | x) as a cyclic PFSA with O(|x| ?",
        "?",
        "N 3 y ) states and O(|x| ?",
        "?",
        "N 3 +1 y ) arcs.",
        "Finding its most probable path (i.e., most probable aligned y) takes time O(|arcs| log |states|), while computing every arc's expected number of traversals under p(y | x) takes time O(|arcs| ?",
        "|states|).",
        "3 p ?",
        "(y | x) may be used as a noisy channel model.",
        "Given a language model p(x) represented as a PFSA X , X ?",
        "T gives p(x, y) for all x, y.",
        "In the case of an n-gram language model with n ?",
        "N 1 + N 2 , this composition is effi-cient: it merely reweights the arcs of T .",
        "We use Bayes?",
        "Theorem to reconstruct x from observed y: X ?",
        "T ?",
        "y gives p(x, y) (proportional to p(x | y)) for each x.",
        "This weighted FSA has O(?",
        "N 1 +N 2 x ?",
        "|y|) states and arcs.",
        "6 Parameterization and Training While the parameters ?",
        "could be trained via various objective functions, it is particularly efficient to compute the gradient of conditional log-likelihood, ?",
        "k log p ?",
        "(y k | x k ), given a sample of pairs (x k , y k ).",
        "This is a non-convex objective function because of the latent x-to-y alignments: we do not observe which path transduced x k to y k .",
        "Recall from section 5 that these possible paths are represented by the small weighted FSA x k ?T ?y k .",
        "Now, a path's probability is defined by multiplying the contextual probabilities of edit operations e. As suggested by Berg-Kirkpatrick et al. (2010), we model these steps using a conditional log-linear model, p ?",
        "(e | C) def = 1 Z C exp ( ?",
        "?",
        "~ f(C, e) ) .",
        "3 Speedups: In both runtimes, a factor of |x| can be eliminated from |states| by first decomposing x ?T into its O(|x|) strongly connected components.",
        "And the |states| factor in the second runtime is unnecessary in practice, as just the first few iterations of conjugate gradient are enough to achieve good approximate convergence when solving the sparse linear system that defines the forward probabilities in the cyclic PFSA.",
        "627 To increase log p ?",
        "(y k | x k ), we must raise the probability of the edits e that were used to trans-duce x k to y k , relative to competing edits from the same contexts C. This means raising ?",
        "?",
        "f(C, e) and/or lowering Z C .",
        "Thus, log p ?",
        "(y k | x k ) depends only on the probabilities of edit arcs in T that appear in x k ?",
        "T ?",
        "y k , and the competing edit arcs from the same edit states q C .",
        "The gradient?",
        "?",
        "log p ?",
        "(y k | x k ) takes the form ?",
        "C,e c(C, e) [ ~ f(C, e)?",
        "?",
        "e ?",
        "p ?",
        "(e ?",
        "| C) ~ f(C, e ? )",
        "] where c(C, e) is the expected number of times that e was chosen in context C given (x k , y k ).",
        "(That can be found by the forward-backward algorithm on x k ?T ?",
        "y k .)",
        "So the gradient adds up the differences between observed and expected feature vectors at contexts C, where contexts are weighted by how many times they were likely encountered.",
        "In practice, it is efficient to hold the counts c(C, e) constant over several gradient steps, since this amortizes the work of computing them.",
        "This can be viewed as a generalized EM algorithm that imputes the hidden paths (giving c) at the ?E?",
        "step and improves their probability at the ?M?",
        "step.",
        "Algorithm 1 provides the training pseudocode.",
        "Algorithm 1 Training a PFST T ?",
        "by EM.",
        "1: while not converged do 2: reset all counts to 0 .",
        "begin the ?E step?",
        "3: for k ?",
        "1 to K do .",
        "loop over training data 4: M = x k ?",
        "T ?",
        "?",
        "y k .",
        "small acyclic WFST 5: ~?",
        "= FORWARD-ALGORITHM(M ) 6: ~ ?",
        "= BACKWARD-ALGORITHM(M ) 7: for arc A ?M , from state q ?",
        "q ?",
        "do 8: if A was derived from an arc in T ?",
        "representing edit e, from edit state q C , then 9: c(C, e) += ?",
        "q ?",
        "prob(A) ?",
        "?",
        "q ?",
        "/?",
        "q I 10: ?",
        "?",
        "L-BFGS(?, EVAL, max iters=5) .",
        "the ?M step?",
        "11: function EVAL(?)",
        ".",
        "objective function & its gradient 12: F ?",
        "0;?F ?",
        "0 13: for context C such that (?e)c(C, e) > 0 do 14: count?",
        "0; expected?",
        "0; Z C ?",
        "0 15: for possible edits e in context C do 16: F += c(C, e) ?",
        "(?",
        "?",
        "~ f(C, e)) 17: ?F += c(C, e) ?",
        "~ f(C, e) 18: count += c(C, e) 19: expected += exp(?",
        "?",
        "~ f(C, e)) ?",
        "~ f(C, e) 20: Z C += exp(?",
        "?",
        "~ f(C, e)) 21: F -= count ?",
        "logZ C ;?F -= count ?expected/Z C 22: return (F,?F ) 7 PFSTs versus WFSTs Our PFST model of p(y | x) enforces a normalized probability distribution at each state.",
        "Dropping this requirement gives a weighted FST (WFST), whose path weightsw(x, y) can be globally normalized (divided by a constant Z x ) to obtain probabilities p(y | x).",
        "WFST models of contextual edits were studied by Dreyer et al. (2008).",
        "PFSTs and WFSTs are respectively related to MEMMs (McCallum et al., 2000) and CRFs (Laf- ferty et al., 2001).",
        "They gain added power from hidden states and \u000f transitions (although to permit a finite-state encoding, they condition on x in a more restricted way than MEMMs and CRFs).",
        "WFSTs are likely to beat PFSTs as linguistic models, 4 just as CRFs beat MEMMs (Klein and Manning, 2002).",
        "A WFST's advantage is that the probability of an edit can be indirectly affected by the weights of other edits at a distance.",
        "Also, one could construct WFSTs where an edit's weight directly considers local right output context C 4 .",
        "So why are we interested in PFSTs?",
        "Because they do not require computing a separate normalizing contant Z x for every x.",
        "This makes it computationally tractable to use them in settings where x is uncertain because it is unobserved, partially observed (e.g., lacks syllable boundaries), or noisily observed.",
        "E.g., at the end of section 5, X represented an uncertain x.",
        "So unlike WFSTs, PFSTs are usable as the conditional distributions in noisy channel models, channel cascades, and Bayesian networks.",
        "In future we plan to measure their modeling disadvantage and attempt to mitigate it.",
        "PFSTs are also more efficient to train under conditional likelihood.",
        "It is faster to compute the gradient (and fewer steps seem to be required in prac-tice), since we only have to raise the probabilities of arcs in x k ?",
        "T ?",
        "y k relative to competing arcs in x k ?",
        "T .",
        "We visit at most |x k | ?",
        "|y k | ?",
        "|?",
        "y | arcs.",
        "By contrast, training a WFST must raise the probability of the paths in x k ?",
        "T ?",
        "y k relative to the infinitely many competing paths in x k ?",
        "T .",
        "This requires summing around cycles in x k ?T , and requires visiting all of its |x k | ?",
        "|?",
        "y | N 3 +1 arcs.",
        "8 Experiments To demonstrate the utility of contextual edit trans-ducers, we examine spelling errors in social media data.",
        "Models of spelling errors are useful in a variety of settings including spelling correction itself and phylogenetic models of string variation 4 WFSTs can also use a simpler topology (Dreyer et al., 2008) while retaining determinism, since edits can be scored -- in retrospect?",
        "after they have passed into the left context.",
        "628 -8 -7 -6 -5 -4 2000 4000 6000 # Training Examples Me an L og-Lik elih ood Backoff FALSE TRUE Topology T010 T020 T110 T111 2 3 4 5 6 2000 4000 6000 # Training Examples Me an E xpe cted Ed it D ista nce Backoff FALSE TRUE Topology T010 T020 T110 T111 Figure 2: (a) Mean log p(y | x) for held-out test examples.",
        "(b) Mean expected edit distance (similarly).",
        "(Mays et al., 1991; Church and Gale, 1991; Ku-kich, 1992; Andrews et al., 2014).",
        "To eliminate experimental confounds, we use no dictionary or language model as one would in practice, but directly evaluate our ability to model p(correct | misspelled).",
        "Consider (x k , y k ) = (feeel, feel).",
        "Our model defines p(y | x k ) for all y.",
        "Our training objective (section 6) tries to make this large for y = y k .",
        "A contextual edit model learns here that e 7?",
        "\u000f is more likely in the context of ee.",
        "We report on test data how much probability mass lands on the true y k .",
        "We also report how much mass lands ?near?",
        "y k , by measuring the expected edit distance of the predicted y to the truth.",
        "Expected edit distance is defined as ?",
        "y p ?",
        "(y | x k )d(y, y k ) where d(y, y k ) is the Levenshtein distance between two strings.",
        "It can be computed using standard finite-state algorithms (Mohri, 2003).",
        "8.1 Data We use an annotated corpus (Aramaki, 2010) of 50000 misspelled words x from tweets along with their corrections y.",
        "All examples have d(x, y) = 1 though we do not exploit this fact.",
        "We randomly selected 6000 training pairs and 100 test pairs.",
        "We regularized the objective by adding ?",
        "?||?|| 2 2 , where for each training condition, we chose ?",
        "by coarse grid search to maximize the conditional likelihood of 100 additional development pairs.",
        "8.2 Context Windows and Edit Features We considered four different settings for the context window sizes (N 1 , N 2 , N 3 ): (0,1,0)=stochas- tic edit distance, (1,1,0), (0,2,0), and (1,1,1).",
        "Our log-linear edit model (section 6) includes a dedicated indicator feature for each contextual edit (C, e), allowing us to fit any conditional distribution p(e | C).",
        "In our ?backoff?",
        "setting, each (C, e) also has 13 binary backoff features that it shares with other (C ?",
        ", e ?",
        ").",
        "So we have a total of 14 feature templates, which generate over a million features in our largest model.",
        "The shared features let us learn that certain properties of a contextual edit tend to raise or lower its probability (and the regularizer encourages such generalization).",
        "Each contextual edit (C, e) can be characterized as a 5-tuple (s, t, C 1 , C ?",
        "2 , C 3 ): it replaces s ?",
        "?",
        "x ?",
        "{\u000f} with t ?",
        "?",
        "y ?",
        "{\u000f} when s falls between C 1 and C ?",
        "2 (so C 2 = sC ?",
        "2 ) and t is preceded by C 3 .",
        "Then each of the 14 features of (C, e) indicates that a particular subset of this 5-tuple has a particular value.",
        "The subset always includes s, t, or both.",
        "It never includes C 1 or C ?",
        "2 without s, and never includes C 3 without t. 8.3 Results Figures 2a and 2b show the learning curves.",
        "We see that both metrics improve with more training data; with more context; and with backoff.",
        "With backoff, all of the contextual edit models substantially beat ordinary stochastic edit distance, and their advantage grows with training size.",
        "9 Conclusion We have presented a trainable, featurizable model of contextual edit distance.",
        "Our main contribution is an efficient encoding of such a model as a tight PFST?that is, a WFST that is guaranteed to directly define conditional string probabilities without need for further normalization.",
        "We are releasing OpenFST-compatible code that can train both PFSTs and WFSTs (Cotterell and Renduch-intala, 2014).",
        "We formally defined PFSTs, described their speed advantage at training time, and noted that they are crucial in settings where the input string is unknown.",
        "In future, we plan to deploy our PFSTs in such settings.",
        "629 References"
      ]
    }
  ]
}
