{
  "info": {
    "authors": [
      "Justyna Grudzinska",
      "Marek Zawadowski"
    ],
    "book": "TTNLS",
    "id": "acl-W14-1402",
    "title": "System with Generalized Quantifiers on Dependent Types for Anaphora",
    "url": "https://aclweb.org/anthology/W14-1402",
    "year": 2014
  },
  "references": [],
  "sections": [
    {
      "text": [
        "Proceedings of the EACL 2014 Workshop on Type Theory and Natural Language Semantics (TTNLS), pages 10?18, Gothenburg, Sweden, April 26-30 2014. c?2014 Association for Computational Linguistics System with Generalized Quantifiers on Dependent Types for Anaphora Justyna Grudzi ?",
        "Abstract",
        "We propose a system for the interpretation of anaphoric relationships between unbound pronouns and quantifiers.",
        "The main technical contribution of our proposal consists in combining generalized quantifiers with dependent types.",
        "Empir-ically, our system allows a uniform treatment of all types of unbound anaphora, including the notoriously difficult cases such as quantificational subordination, cumulative and branching continuations, and donkey anaphora."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "The phenomenon of unbound anaphora refers to instances where anaphoric pronouns occur outside the syntactic scopes (i.e. the c-command domain) of their quantifier antecedents.",
        "The main kinds of unbound anaphora are regular anaphora to quan-tifiers, quantificational subordination, and donkey anaphora, as exemplified by (1) to (3) respectively: (1) Most kids entered.",
        "They looked happy.",
        "(2) Every man loves a woman.",
        "They kiss them.",
        "(3) Every farmer who owns a donkey beats it.",
        "Unbound anaphoric pronouns have been dealt with in two main semantic paradigms: dynamic semantic theories (Groenendijk and Stokhof, 1991); (Van den Berg, 1996); (Nouwen, 2003) and the E-type/D-type tradition (Evans, 1977); (Heim, 1990); (Elbourne, 2005).",
        "In the dynamic semantic theories pronouns are taken to be (syntactically free, but semantically bound) variables, and context serves as a medium supplying values for the variables.",
        "In the E-type/D-type tradition pronouns are treated as quantifiers.",
        "Our system combines aspects of both families of theories.",
        "As in the E-type/D-type tradition we treat unbound anaphoric pronouns as quantifiers; as in the systems of dynamic semantics context is used as a medium supplying (possibly dependent) types as their potential quantificational domains.",
        "Like Dekker's Predicate Logic with Anaphora and more recent multidimensional models (Dekker, 1994); (Dekker, 2008), our system lends itself to the compositional treatment of unbound anaphora, while keeping a classical, static notion of truth.",
        "The main novelty of our proposal consists in combining generalized quantifiers (Mostowski, 1957); (Lindstr?om, 1966); (Barwise and Cooper, 1981) with dependent types (Martin-L?of, 1972); (Ranta, 1994).",
        "The paper is organized as follows.",
        "In Section 2 we introduce informally the main features of our system.",
        "Section 3 sketches the process of English-to-formal language translation.",
        "Finally, sections 4 and 5 define the syntax and semantics of the system.",
        "2 Elements of system 2.1 Context, types and dependent types The variables of our system are always typed.",
        "We write x : X to denote that the variable x is of type X and refer to this as a type specification of the variable x.",
        "Types, in this paper, are interpreted as sets.",
        "We write the interpretation of the type X as ?X?.",
        "Types can depend on variables of other types.",
        "Thus, if we already have a type specification x : X , then we can also have type Y (x) depending on the variable x and we can declare a variable y of type Y by stating y : Y (x).",
        "The fact that Y depends on X is modeled as a projection pi : ?Y ?",
        "?",
        "?X?.",
        "So that if the variable x of type X is interpreted as an element a ?",
        "?X?, ?Y ?",
        "(a) is interpreted as the fiber of pi over a (the preimage of {a} under pi) ?Y ?",
        "(a) = {b ?",
        "?Y ?",
        ": pi(b) = a}.",
        "10 One standard natural language example of such a dependence of types is that if m is a variable of the type of months M , there is a type D(m) of the days of the month m. Such type dependencies can be nested, i.e., we can have a sequence of type specifications of the (individual) variables: x : X, y : Y (x), z : Z(x, y).",
        "Context for us is a partially ordered sequence of type specifications of the (individual) variables and it is interpreted as a parameter set, i.e. as a set of compatible n-tuples of the elements of the sets corresponding to the types involved (compat- ible wrt all projections).",
        "2.2 Quantifiers, chains of quantifiers Our system defines quantifiers and predicates polymorphically.",
        "A generalized quantifier Q is an association to every set Z a subset of the power set of Z.",
        "If we have a predicate P defined in a context ?, then for any interpretation of the context ???",
        "it is interpreted as a subset of its parameter set.",
        "Quantifier phrases, e.g. every man or some woman, are interpreted as follows: ?every m:man ?",
        "= {?man?}",
        "and ?some w:woman ?",
        "= {X ?",
        "?woman?",
        ": X 6= ?}.",
        "The interpretation of quantifier phrases is further extended into the interpretation of chains of quantifiers.",
        "Consider an example in (2): (2) Every man loves a woman.",
        "They kiss them.",
        "Multi-quantifier sentences such as the first sentence in (2) are known to be ambiguous with different readings corresponding to how various quantifiers are semantically related in the sentence.",
        "To account for the readings available for such multi-quantifier sentences, we raise quantifier phrases to the front of a sentence to form (generalized) quantifier prefixes chains of quantifiers.",
        "Chains of quantifiers are built from quantifier phrases using three chain-constructors: pack-formation rule (?, .",
        ".",
        ".",
        ", ?",
        "), sequential composition ?|?, and parallel composition ?",
        "?",
        ".",
        "The semantical operations that correspond to the chain-constructors (known as cumulation, iteration and branching) capture in a compositional manner cu-mulative, scope-dependent and branching read-ings, respectively.",
        "The idea of chain-constructors and the corresponding semantical operations builds on Mostowski's notion of quantifier (Mostowski, 1957) further generalized by Lindstr?om to a so-called polyadic quantifier (Lindstr?om, 1966), see (Bellert and Zawadowski, 1989).",
        "To use a familiar example, a multi-quantifier prefix like ?",
        "m:M |?",
        "w:W is thought of as a single two-place quantifier obtained by an operation on the two single quantifiers, and it has as denotation: ??",
        "m:M |?",
        "w:W ?",
        "= {R ?",
        "?M??",
        "?W?",
        ":{a ?",
        "?M?",
        ": {b ?",
        "?W?",
        ": ?a, b?",
        "?",
        "R} ?",
        "??",
        "w:W ?}",
        "?",
        "??",
        "m:M ?}.",
        "In this paper we generalize the three chain-constructors and the corresponding semantical operations to (pre-) chains defined on dependent types.",
        "2.3 Dynamic extensions of contexts In our system language expressions are all defined in context.",
        "Thus the first sentence in (2) (on the most natural interpretation where a woman depends on every man) translates (via the process described in Section 3) into a sentence with a chain of quantifiers in a context: ?",
        "` ?",
        "m:M |?",
        "w:W Love(m,w), and says that the set of pairs, a man and a woman he loves, has the following property: the set of those men that love some woman each is the set of all men.",
        "The way to understand the second sentence in (2) (i.e. the anaphoric continuation) is that every man kisses the women he loves rather than those loved by someone else.",
        "Thus the first sentence in (2) must deliver some internal relation between the types corresponding to the two quantifier phrases.",
        "In our analysis, the first sentence in (2) extends the context ?",
        "by adding new variable specifications on newly formed types for every quantifier phrase in the chain Ch = ?",
        "m:M |?",
        "w:W for the purpose of the formation of such new types we introduce a new type constructor T. That is, the first sentence in (2) (denoted as ?)",
        "extends the context by adding: t ?,?",
        "m : T ?,?",
        "m:M ; t ?,?",
        "w : T ?,?",
        "w:W (t ?,?",
        "m ) The interpretations of types (that correspond to quantifier phrases in Ch) from the extended context ?",
        "?",
        "are defined in a two-step procedure using the inductive clauses through which we define Ch but in the reverse direction.",
        "11 Step 1.",
        "We define fibers of new types by inverse induction.",
        "Basic step.",
        "For the whole chain Ch = ?",
        "m:M |?",
        "w:W we put: ?T ?,?",
        "m:M |?",
        "w:W ?",
        ":= ?Love?.",
        "Inductive step.",
        "?T ?,?",
        "m:M ?",
        "= {a ?",
        "?M?",
        ": {b ?",
        "?W?",
        ": ?a, b?",
        "?",
        "?Love?}",
        "?",
        "??",
        "w:W ?}",
        "and for a ?",
        "?M?",
        "?T ?,?",
        "w:W ?",
        "(a) = {b ?",
        "?W?",
        ": ?a, b?",
        "?",
        "?Love?}",
        "Step 2.",
        "We build dependent types from fibers.",
        "?T ?,?",
        "w:W ?",
        "= ?",
        "{{a} ?",
        "?T ?,?",
        "w:W ?",
        "(a) : a ?",
        "?T ?,?",
        "m:M ?}",
        "Thus the first sentence in (2) extends the context ?",
        "by adding the type T ?,?",
        "m:M , interpreted as ?T ?,?",
        "m:M ?",
        "(i.e. the set of men who love some women), and the dependent type T ?,?",
        "w:W (t ?,?",
        "m ), interpreted for a ?",
        "?T ?,?",
        "m:M ?",
        "as ?T ?,?",
        "w:W ?",
        "(a) (i.e. the set of women loved by the man a).",
        "Unbound anaphoric pronouns are interpreted with reference to the context created by the foregoing text: they are treated as universal quantifiers and newly formed (possibly dependent) types incrementally added to the context serve as their potential quantificational domains.",
        "That is, unbound anaphoric pronouns they m and them w in the second sentence of (2) have the ability to pick up and quantify universally over the respective interpretations.",
        "The anaphoric continuation in (2) translates into: ?",
        "?",
        "` ?",
        "t ?,?",
        "m :T ?,?",
        "m:M |?",
        "t ?,?",
        "w :T ?,?",
        "w:W (t ?,?",
        "m ) Kiss(t ?,?",
        "m , t ?,?",
        "w ), where: ??",
        "t ?,?",
        "m :T ?,?",
        "m:M |?",
        "t ?,?",
        "w :T ?,?",
        "w:W (t ?,?",
        "m ) ?",
        "= {R ?",
        "?T ?,?",
        "w:W ?",
        ": {a ?",
        "?T ?,?",
        "m:M ?",
        ": {b ?",
        "?T ?,?",
        "w:W ?",
        "(a) : ?a, b?",
        "?",
        "R} ?",
        "??",
        "t ?,?",
        "w :T ?,?",
        "w:W (t ?,?",
        "m ) ?",
        "(a)} ?",
        "??",
        "t ?,?",
        "m :T ?,?",
        "m:M ?",
        "}, yielding the correct truth conditions: Every man kisses every woman he loves.",
        "Our system also handles intra-sentential anaphora, as exemplified in (3): (3) Every farmer who owns a donkey beats it.",
        "To account for the dynamic contribution of modified common nouns (in this case common nouns modified by relative clauses) we include in our system ?-sentences (i.e. sentences with dummy quantifier phrases).",
        "The modified common noun gets translated into a ?-sentence (with a dummy-quantifier phrase f : F ): ?",
        "` f : F |?",
        "d:D Own(f, d) and we extend the context by dropping the specifications of variables: (f : F, d : D) and adding new variable specifications on newly formed types for every (dummy-) quantifier phrase in the chain Ch ?",
        ": t ?,f : T ?,f :F ; t ?,?",
        "d : T ?,?",
        "d:D (t ?,f ), The interpretations of types (that correspond to the quantifier phrases in the Ch ? )",
        "from the extended context ?",
        "?",
        "are defined in our two-step procedure.",
        "Thus the ?-sentence in (3) extends the context by adding the type T ?,f :F interpreted as ?T ?,f :F ?",
        "(i.e. the set of farmers who own some donkeys), and the dependent type T ?,?",
        "d:D (t ?,f ), interpreted for a ?",
        "?T ?,f :F ?",
        "as ?T ?,?",
        "d:D ?",
        "(a) (i.e. the set of donkeys owned by the farmer a).",
        "The main clause translates into: ?",
        "?",
        "` ?",
        "t ?,f :T ?,f :F |?",
        "t ?,?",
        "d :T ?,?",
        "d:D (t ?,f ) Beat(t ?,f , t ?,?",
        "d ), yielding the correct truth conditions Every farmer who owns a donkey beats every donkey he owns.",
        "Importantly, since we quantify over fibers (and not over ?farmer, donkey?",
        "pairs), our solution does not run into the so-called ?proportion problem?.",
        "Dynamic extensions of contexts and their interpretation are also defined for cumulative and branching continuations.",
        "Consider a cumulative example in (4): (4) Last year three scientists wrote (a total of) five articles (between them).",
        "They presented them at major conferences.",
        "Interpreted cumulatively, the first sentence in (4) translates into a sentence: ?",
        "` (Three s:S , F ive a:A ) Write(s, a).",
        "The anaphoric continuation in (4) can be interpreted in what Krifka calls a ?correspondence?",
        "12 fashion (Krifka, 1996).",
        "For example, Dr. K wrote one article, co-authored two more with Dr. N, who co-authored two more with Dr. S, and the scientists that cooperated in writing one or more articles also cooperated in presenting these (and no other) articles at major conferences.",
        "In our system, the first sentence in (4) extends the context by adding the type corresponding to (Three s:S , F ive a:A ): t ?,(Three s ,F ive a ) : T ?,(Three s:S ; Five a:A ) , interpreted as a set of tuples ?T ?,(Three s:S ,F ive a:A ) ?",
        "= = {?c, d?",
        ": c ?",
        "?S?",
        "& d ?",
        "?A?",
        "& c wrote d} The anaphoric continuation then quantifies universally over this type (i.e. a set of pairs), yielding the desired truth-conditions The respective scientists cooperated in presenting at major conferences the respective articles that they cooperated in writing.",
        "3 English-to-formal language translation We assume a two-step translation process.",
        "Representation.",
        "The syntax of the representation language for the English fragment considered in this paper is as follows.",
        "S ?",
        "Prd n (QP 1 , .",
        ".",
        ".",
        ", QP n ); MCN ?",
        "Prd n (QP 1 , .",
        ".",
        ".",
        ", CN , .",
        ".",
        ".",
        ", QP n ); MCN ?",
        "CN ; QP ?",
        "Det MCN ; Det?",
        "every,most, three, .",
        ".",
        ".",
        "; CN ?",
        "man,woman, .",
        ".",
        ".",
        "; Prd n ?",
        "enter, love, .",
        ".",
        ".",
        "; Common nouns (CNs) are interpreted as types, and common nouns modified by relative clauses (MCNs) as ?-sentences determining some (pos- sibly dependent) types.",
        "Disambiguation.",
        "Sentences of English, contrary to sentences of our formal language, are often ambiguous.",
        "Hence one sentence representation can be associated with more than one sentence in our formal language.",
        "The next step thus involves disambiguation.",
        "We take quantifier phrases of a given representation, e.g.: P (Q 1 X 1 , Q 2 X 2 , Q 3 X 3 ) and organize them into all possible chains of quantifiers in suitable contexts with some restrictions imposed on particular quantifiers concerning the places in prefixes at which they can occur (a detailed elaboration of the disambiguation process is left for another place): Q 1 x 1 :X 1 |Q 2 x 2 :X 2 Q 3 x 3 :X 3 P (x 1 , x 2 , x 3 ).",
        "4 System syntax 4.1 Alphabet The alphabet consists of: type variables: X,Y, Z, .",
        ".",
        ".",
        "; type constants: M,men,women, .",
        ".",
        ".",
        "; type constructors: ?",
        ", ?",
        ",T; individual variables: x, y, z, .",
        ".",
        ".",
        "; predicates: P, P ?",
        ", P 1 , .",
        ".",
        ".",
        "; quantifier symbols: ?, ?, five,Q 1 , Q 2 , .",
        ".",
        ".",
        "; three chain constructors: ?|?, ?",
        "?",
        ", (?, .",
        ".",
        ".",
        ", ?).",
        "4.2 Context A context is a list of type specifications of (indi- vidual) variables.",
        "If we have a context ?",
        "= x 1 : X 1 , .",
        ".",
        ".",
        ", x n : X n (?x i ?",
        "i?J n ) then the judgement ` ?",
        ": cxt expresses this fact.",
        "Having a context ?",
        "as above, we can declare a type X n+1 in that context ?",
        "` X n+1 (?x i ?",
        "i?J n+1 ) : type where J n+1 ?",
        "{1, .",
        ".",
        ".",
        ", n} such that if i ?",
        "J n+1 , then J i ?",
        "J n+1 , J 1 = ?.",
        "The type X n+1 depends on variables ?x i ?",
        "i?J n+1 .",
        "Now, we can declare a new variable of the type X n+1 (?x i ?",
        "i?J n+1 ) in the context ?",
        "?",
        "` x n+1 : X n+1 (?x i ?",
        "i?J n+1 ) and extend the context ?",
        "by adding this variable specification, i.e. we have ` ?, x n+1 : X n+1 (?x i ?",
        "i?J n+1 ) : cxt ?",
        "?",
        "is a subcontext of ?",
        "if ?",
        "?",
        "is a context and a sub-list of ?.",
        "Let ?",
        "be a list of variable specifications from a context ?, ?",
        "?",
        "the least subcontext of ?",
        "containing ?.",
        "We say that ?",
        "is convex iff ?",
        "?",
        "??",
        "is again a context.",
        "The variables the types depend on are always explicitly written down in specifications.",
        "We can think of a context as (a linearization of) a partially ordered set of declarations such that the declaration of a variable x (of type X) precedes the declaration of the variable y (of type Y ) iff the type Y depends on the variable x.",
        "The formation rules for both ?- and ?-types are as usual.",
        "13 4.3 Language Quantifier-free formulas.",
        "Here, we need only predicates applied to variables.",
        "So we write ?",
        "` P (x 1 , .",
        ".",
        ".",
        ", x n ) : qf-f to express that P is an n-ary predicate and the specifications of the variables x 1 , .",
        ".",
        ".",
        ", x n form a subcontext of ?.",
        "Quantifier phrases.",
        "If we have a context ?, y : Y (~x),?",
        "and quantifier symbol Q, then we can form a quantifier phrase Q y:Y (~x) in that context.",
        "We write ?, y : Y (~x),?",
        "` Q y:Y (~x) : QP to express this fact.",
        "In a quantifier prase Q y:Y (~x) : the variable y is the binding variable and the variables ~x are indexing variables.",
        "Packs of quantifiers.",
        "Quantifiers phrases can be grouped together to form a pack of quantifiers.",
        "The pack of quantifiers formation rule is as follows.",
        "?",
        "` Q i y i :Y i (~x i ) : QP i = 1, .",
        ".",
        ".",
        "k ?",
        "` (Q 1 y 1 :Y 1 (~x 1 ) , .",
        ".",
        ".",
        ", Q k y k :Y k (~x k ) ) : pack where, with ~y = y 1 , .",
        ".",
        ".",
        ", y k and ~x = ?",
        "k i=1 ~x i , we have that y i 6= y j for i 6= j and ~y ?",
        "~x = ?.",
        "In so constructed pack: the binding variables are ~y and the indexing variables are ~x.",
        "We can denote such a pack Pc ~y: ~ Y (~x) to indicate the variables involved.",
        "One-element pack will be denoted and treated as a quantifier phrase.",
        "This is why we denote such a pack as Q y:Y (~x) rather than (Q y:Y (~x) ).",
        "Pre-chains and chains of quantifiers.",
        "Chains and pre-chains of quantifiers have binding variables and indexing variables.",
        "By Ch ~y: ~ Y (~x) we denote a pre-chain with binding variables ~y and indexing variables ~x so that the type of the variable y i is Y i (~x i ) with ?",
        "i ~x i = ~x.",
        "Chains of quantifiers are pre-chains in which all indexing variables are bound.",
        "Pre-chains of quantifiers arrange quantifier phrases into N -free pre-orders, subject to some binding conditions.",
        "Mutually comparable QPs in a pre-chain sit in one pack.",
        "Thus the pre-chains are built from packs via two chain-constructors of sequential ?|?",
        "and parallel composition ?",
        "?",
        ".",
        "The chain formation rules are as follows.",
        "1.",
        "Packs of quantifiers.",
        "Packs of quantifiers are pre-chains of quantifiers with the same binding variable and the same indexing variables, i.e. ?",
        "` Pc ~y: ~ Y (~x) : pack ?",
        "` Pc ~y: ~ Y (~x) : p-ch 2.",
        "Sequential composition of pre-chains ?",
        "` Ch 1 ~y 1 : ~ Y 1 (~x 1 ) : p-ch,?",
        "` Ch 2 ~y 2 : ~ Y 2 (~x 2 ) : p-ch ?",
        "` Ch 1 ~y 1 : ~ Y 1 (~x 1 ) |Ch 2 ~y 2 : ~ Y 2 (~x 2 ) : p-ch provided ~y 2 ?",
        "(~y 1 ?",
        "~x 1 ) = ?",
        "; the specifications of the variables (~x 1 ?",
        "~x 2 ) ?",
        "(~y 1 ?",
        "~y 2 ) form a con-text, a subcontext of ?.",
        "In so obtained pre-chain: the binding variables are ~y 1 ?",
        "~y 2 and the indexing variables are ~x 1 ?",
        "~x 2 .",
        "3.",
        "Parallel composition of pre-chains ?",
        "` Ch 1 ~y 1 : ~ Y 1 (~x 1 ) : p-ch,?",
        "` Ch 2 ~y 2 : ~ Y 2 (~x 2 ) : p-ch ?",
        "` Ch 1 ~y 1 : ~ Y 1 (~x 1 ) Ch 2 ~y 2 : ~ Y 2 (~x 2 ) : p-ch provided ~y 2 ?",
        "(~y 1 ?",
        "~x 1 ) = ?",
        "= ~y 1 ?",
        "(~y 2 ?",
        "~x 2 ).",
        "As above, in so obtained pre-chain: the binding variables are ~y 1 ?",
        "~y 2 and the indexing variables are ~x 1 ?",
        "~x 2 .",
        "A pre-chain of quantifiers Ch ~y: ~ Y (~x) is a chain iff ~x ?",
        "~y.",
        "The following ?",
        "` Ch ~y: ~ Y (~x) : chain expresses the fact thatCh ~y: ~ Y (~x) is a chain of quantifiers in the context ?.",
        "Formulas, sentences and ?-sentences.",
        "The formulas have binding variables, indexing variables and argument variables.",
        "We write ?",
        "~y:Y (~x) (~z) for a formula with binding variables ~y, indexing variables ~x and argument variables ~z.",
        "We have the following formation rule for formulas ?",
        "` A(~z) : qf-f,?",
        "` Ch ~y: ~ Y (~x) : p-ch ?",
        "` Ch ~y: ~ Y (~x) A(~z) : formula provided ~y is final in ~z, i.e. ~y ?",
        "~z and variable specifications of ~z ?",
        "~y form a subcontext of ?.",
        "In so constructed formula: the binding variables are ~y, the indexing variables are ~x, and the argument variables are ~z.",
        "A formula ?",
        "~y:Y (~x) (~z) is a sentence iff ~z ?",
        "~y and ~x ?",
        "~y.",
        "So a sentence is a formula without free variables, neither individual nor indexing.",
        "The following ?",
        "` ?",
        "~y:Y (~x) (~z) : sentence expresses the fact that ?",
        "~y:Y (~x) (~z) is a sentence formed in the context ?.",
        "We shall also consider some special formulas that we call ?-sentences.",
        "A formula ?",
        "~y:Y (~x) (~z) is a ?-sentence if ~x ?",
        "~y?~z but the set ~z?~y is possibly 14 not empty and moreover the type of each variable in ~z?~y is constant, i.e., it does not depend on variables of other types.",
        "In such case we consider the ~z ?",
        "~y as a set of biding variables of an additional pack called a dummy pack that is placed in front of the whole chain Ch.",
        "The chain ?extended?",
        "by this dummy pack will be denoted by Ch ?",
        ".",
        "Clearly, if ~z ?",
        "~y is empty there is no dummy pack and the chain Ch ?",
        "is Ch, i.e. sentences are ?-sentences without dummy packs.",
        "We write ?",
        "` ?",
        "~y:Y (~x) (~z) : ?-sentence to express the fact that ?",
        "~y:Y (~x) (~z) is a ?-sentence formed in the context ?.",
        "Having formed a ?-sentence ?",
        "we can form a new context ?",
        "?",
        "defined in the next section.",
        "Notation.",
        "For semantics we need some notation for the variables in the ?-sentence.",
        "Suppose we have a ?-sentence ?",
        "` Ch ~y:Y (~x) P (~z) : ?-sentence We define: (i) The environment of pre-chain Ch: Env(Ch) = Env(Ch ~y: ~ Y (~x) ) is the context defining variables ~x?~y; (ii) The binding variables of pre-chain Ch: Bv(Ch) = Bv(Ch ~y: ~ Y (~x) ) is the convex set of declarations in ?",
        "of the binding variables in ~y; (iii) env(Ch) = env(Ch ~y: ~ Y (~x) ) the set of variables in the environment of Ch, i.e. ~x ?",
        "~y; (iv) bv(Ch) = bv(Ch ~y: ~ Y (~x) ) the set of biding variables ~y; (v) The environment of a pre-chainCh ?",
        "in a ?-sentence?",
        "= Ch ~y:Y (~x) P (~z), denoted Env ?",
        "(Ch ?",
        "), is the set of binding variables in all the packs inCh ?",
        "that are< ?",
        "-smaller than all packs in Ch ?",
        ".",
        "Note Env(Ch ? )",
        "?",
        "Env ?",
        "(Ch ?",
        ").",
        "If Ch ?",
        "= Ch 1 |Ch 2 is a sub-pre-chain of the chain Ch ~y:Y (~x) , then Env ?",
        "(Ch 2 ) = Env ?",
        "(Ch 1 ) ?",
        "Bv(Ch 1 ) and Env ?",
        "(Ch 1 ) = Env ?",
        "(Ch ?",
        ").",
        "4.4 Dynamic extensions Suppose we have constructed a ?-sentence in a context ?",
        "` Ch ~y: ~ Y (~x) A(~z) : ?-sentence We write ?",
        "for Ch ~y: ~ Y (~x) A(~z).",
        "We form a context ?",
        "?",
        "dropping the specifications of variables ~z and adding one type and one variable specification for each pack in Packs Ch ?",
        ".",
        "Let ?",
        "?",
        "denote the context ?",
        "with the specifications of the variables ~z deleted.",
        "Suppose ?",
        "?",
        "Packs Ch ?",
        "and ?",
        "?",
        "is an extension of the context ?",
        "?",
        "such that one variable specification t ?",
        "?",
        ",?",
        ": T ?",
        "?",
        ",?",
        "was already added for each pack ?",
        "?",
        "?",
        "Packs Ch ?",
        "such that ?",
        "?",
        "< Ch ?",
        "?",
        "but not for ?",
        "yet.",
        "Then we declare a type ?",
        "?",
        "` T ?,?",
        "(?t ?",
        "?",
        ",?",
        "?",
        "?",
        "?",
        "?Packs Ch ?",
        ",?",
        "?",
        "< Ch ?? )",
        ": type and we extend the context ?",
        "?",
        "by a specification of a variable t ?,?",
        "of that type ?",
        "?",
        ", t ?,?",
        ": T ?,?",
        "(?t ?",
        "?",
        ",?",
        "?",
        "?",
        "?",
        "?Packs Ch ?",
        ",?",
        "?",
        "< Ch ?? )",
        ": cxt The context obtained from ?",
        "?",
        "by adding the new variables corresponding to all the packs Packs Ch ?",
        "as above will be denoted by ?",
        "?",
        "= ?",
        "?",
        "?T(Ch ~y: ~ Y (~x) A(~z)).",
        "At the end we add another context formation rule ?",
        "` Ch ~y: ~ Y (~x) A(~z) : ?-sentence, ?",
        "?",
        ": cxt Then we can build another formula starting in the context ?",
        "?",
        ".",
        "This process can be iterated.",
        "Thus in this system sentence ?",
        "in a context ?",
        "is constructed via specifying sequence of formulas, with the last formula being the sentence ?.",
        "However, for the lack of space we are going to describe here only one step of this process.",
        "That is, sentence ?",
        "in a context ?",
        "can be constructed via specifying ?-sentence ?",
        "extending the context as follows ?",
        "` ?",
        ": ?-sentence ?",
        "?",
        "` ?",
        ": sentence For short, we can write ?",
        "` ?",
        "?",
        "` ?",
        ": sentence 5 System semantics 5.1 Interpretation of dependent types The context ?",
        "` x : X(.",
        ".",
        ".",
        "), .",
        ".",
        ".",
        ", z : Z(.",
        ".",
        ".",
        ", x, y, .",
        ".",
        ".)",
        ": cxt gives rise to a dependence graph.",
        "A dependence graph DG ?",
        "= (T ?",
        ", E ? )",
        "for the context ?",
        "has types of ?",
        "as vertices and an edge pi Y,x : Y ?",
        "X for every variable specification x : X(.",
        ".",
        ".)",
        "in ?",
        "and every type Y (.",
        ".",
        ".",
        ", x, .",
        ".",
        ".)",
        "occurring in ?",
        "that depends on x.",
        "15 The dependence diagram for the context ?",
        "is an association ?",
        "?",
        "?",
        ": DG ?",
        "?",
        "Set to every type X in T ?",
        "a set ?X?",
        "and every edge pi Y,x : Y ?",
        "X in E ?",
        "a function ?pi Y,x ?",
        ": ?Y ?",
        "?",
        "?X?, so that whenever we have a triangle of edges in E ?",
        ", pi Y,x as before pi Z,y : Z ?",
        "Y , pi Z,x : Z ?",
        "X we have ?pi Z,x ?",
        "= ?pi Y,x ?",
        "?",
        "?pi Z,y ?.",
        "The interpretation of the context ?, the parameter space ??",
        "?, is the limit of the dependence diagram ?",
        "?",
        "?",
        ": DG ?",
        "?",
        "Set.",
        "More specifically, ???",
        "= ?x : X(.",
        ".",
        ".",
        "), .",
        ".",
        ".",
        ", z : Z(.",
        ".",
        ".",
        ", x, y, .",
        ".",
        ".)?",
        "= {~a : dom(~a) = var(?",
        "), ~a(z) ?",
        "?Z?",
        "(~adenv(Z)), ?pi Z,x ?",
        "(~a(z)) = ~a(x), for z : Z in ?, x ?",
        "envZ} where var(?)",
        "denotes variables specified in ?",
        "and env(Z) denotes indexing variables of the type Z.",
        "The interpretation of the ?- and ?-types are as usual.",
        "5.2 Interpretation of language Interpretation of predicates and quantifier symbols.",
        "Both predicates and quantifiers are interpreted polymorphically.",
        "If we have a predicate P defined in a context ?",
        ": x 1 : X 1 , .",
        ".",
        ".",
        ", x n : X n (?x i ?",
        "i?J n ] ) ` P (~x) : qf-f then, for any interpretation of the context ??",
        "?, it is interpreted as a subset of its parameter set, i.e. ?P?",
        "?",
        "???.",
        "Quantifier symbol Q is interpreted as quantifier ?Q?",
        "i.e. an association to every 1 set Z a subset ?Q?",
        "(Z) ?",
        "P(Z).",
        "Interpretation of pre-chains and chains of quantifiers.",
        "We interpret QP?s, packs, pre-chains, and chains in the environment of a sentence Env ?",
        ".",
        "This is the only case that is needed.",
        "We could interpret the aforementioned syntactic objects in their natural environment Env (i.e. independently of any given sentence) but it would unnecessarily complicate some definitions.",
        "Thus having a (?-) sentence ?",
        "= Ch ~y:Y (~x) P (~z) (defined in a context ?)",
        "and a sub-pre-chain (QP, pack) Ch ?",
        ", for ~a ?",
        "?Env ?",
        "(Ch ?",
        ")?",
        "we define the meaning of ?Ch ?",
        "?",
        "(~a) Notation.",
        "Let ?",
        "= Ch ~y: ~ Y P (~y) be a ?- sentence built in a context ?, Ch ?",
        "a pre-chain used in the construction of the (?",
        ")-chain Ch.",
        "Then 1 This association can be partial.",
        "Env ?",
        "(Ch ? )",
        "is a sub-context of ?",
        "disjoint from the convex set Bv(Ch ? )",
        "and Env ?",
        "(Ch ?",
        "), Bv(Ch ? )",
        "is a sub-context of ?.",
        "For ~a ?",
        "?Env ?",
        "(Ch ?",
        ")?",
        "we define ?Bv(Ch ?",
        ")?",
        "(~a) to be the largest set such that {~a}?",
        "?Bv(Ch ?",
        ")?",
        "(~a) ?",
        "?Env ?",
        "(Ch ?",
        "), Bv(Ch ?",
        ")?",
        "Interpretation of quantifier phrases.",
        "If we have a quantifier phrase ?",
        "` Q y:Y (~x) : QP and ~a ?",
        "?Env ?",
        "(Q y:Y (~x) )?, then it is interpreted as ?Q?",
        "(?Y ?",
        "(~a)) ?",
        "P(?Y ?",
        "(~a d~x )).",
        "Interpretation of packs.",
        "If we have a pack of quantifiers in the sentence ?",
        "Pc = (Q 1 y 1 :Y 1 (~x 1 ) , .",
        ".",
        ".",
        "Q n y n :Y n (~x n ) ) and ~a ?",
        "?Env ?",
        "(Pc)?, then its interpretation with the parameter ~a is ?Pc?",
        "(~a) = ?",
        "(Q 1 y 1 :Y 1 (~x 1 ) , .",
        ".",
        ".",
        ", Q n y n :Y n (~x n ) )?",
        "(~a) = {A ?",
        "n ?",
        "i=1 ?Y i ?",
        "(~ad~x i ) : pi i (A) ?",
        "?Q i ?",
        "(?Y i ?",
        "(~ad~x i ), for i = 1, .",
        ".",
        ".",
        ", n} where pi i is the i-th projection from the product.",
        "Interpretation of chain constructors.",
        "1.",
        "Parallel composition.",
        "For a pre-chain of quantifiers in the sentence ?",
        "Ch ?",
        "= Ch 1 ~y 1 : ~ Y 1 (~x 1 ) Ch 2 ~y 2 : ~ Y 2 (~x 2 ) and ~a ?",
        "?Env ?",
        "(Ch ?",
        ")?",
        "we define ?",
        "Ch 1 ~y 1 : ~ Y 1 (~x 1 ) Ch 2 ~y 2 : ~ Y 2 (~x 2 ) ?",
        "(~a) = {A?B : A ?",
        "?Ch 1 ~y 1 : ~ Y 1 (~x 1 ) ?",
        "(~ad~x 1 ) and B ?",
        "?Ch 2 ~y 2 : ~ Y 2 (~x 2 ) ?",
        "(~ad~x 2 )} 2.",
        "Sequential composition.",
        "For a pre-chain of quantifiers in the sentence ?",
        "Ch ?",
        "= Ch 1 ~y 1 : ~ Y 1 (~x 1 ) |Ch 2 ~y 2 : ~ Y 2 (~x 2 ) and ~a ?",
        "?Env ?",
        "(Ch ?",
        ")?",
        "we define ?Ch 1 ~y 1 : ~ Y 1 (~x 1 ) |Ch 2 ~y 2 : ~ Y 2 (~x 2 ) ?",
        "(~a) = {R ?",
        "?Bv(Ch ?",
        ")?",
        "(~a) : { ~ b ?",
        "?Bv(Ch 1 )?",
        "(~a) : 16 {~c ?",
        "?Bv(Ch 2 )?",
        "(~a, ~ b) : ?",
        "~ b,~c?",
        "?",
        "R} ?",
        "?Ch 2 ~y 2 : ~ Y 2 (~x 2 ) ?",
        "(~a, ~ b)} ?",
        "?Ch 1 ~y 1 : ~ Y 1 (~x 1 ) ?",
        "(~a)} Validity.",
        "A sentence ~x : ~ X ` Ch ~y: ~ Y P (~y) is true under the above interpretation iff ?P?(?",
        "~ Y ?)",
        "?",
        "?Ch ~y: ~ Y ?",
        "5.3 Interpretation of dynamic extensions Suppose we obtain a context ?",
        "?",
        "from ?",
        "by the following rule ?",
        "` Ch ~y: ~ Y (~x) A(~z) : ?-sentence, ?",
        "?",
        ": cxt where ?",
        "is Ch ~y: ~ Y (~x) A(~z).",
        "Then ?",
        "?",
        "= ?",
        "?",
        "?T(Ch ~y: ~ Y (~x) A(~z)).",
        "From dependence diagram ?",
        "?",
        "?",
        "?",
        ": DG ?",
        "?",
        "Set we shall define another dependence diagram ?",
        "?",
        "?",
        "= ?",
        "?",
        "?",
        "?",
        "?",
        ": DG ?",
        "?",
        "?",
        "Set Thus, for ?",
        "?",
        "Pack Ch ?",
        "we need to define ?T ?,?",
        "?",
        "?",
        "?",
        "and for ?",
        "?",
        "< Ch ?",
        "?",
        "we need to define ?pi T ?,?",
        ",t ?",
        "?",
        "?",
        ": ?T ?,?",
        "?",
        "??",
        "?T ?",
        "?",
        ",?",
        "?",
        "This will be done in two steps: Step 1.",
        "(Fibers of new types defined by inverse induction.)",
        "We shall define for the sub-prechains Ch ?",
        "of Ch ?",
        "and ~a ?",
        "?Env ?",
        "(Ch ?",
        ")?",
        "a set ?T ?,Ch ?",
        "?",
        "(~a) ?",
        "?Bv(Ch ?",
        ")?",
        "(~a) This is done using the inductive clauses through which we have defined Ch ?",
        "but in the reverse direction.",
        "The basic case is when Ch ?",
        "= Ch ?",
        ".",
        "We put ?T ?,Ch ?(?)",
        "= ?P?",
        "The inductive step.",
        "Now assume that the set ?T ?,Ch ?",
        "?",
        "(~a) is defined for ~a ?",
        "?Env ?",
        "(Ch ?",
        ")?.",
        "Parallel decomposition.",
        "If we have Ch ?",
        "= Ch 1 ~y 1 : ~ Y 1 (~x 1 ) Ch 2 ~y 2 : ~ Y 2 (~x 2 ) then we define sets ?T ?,Ch i ?",
        "(~a) ?",
        "?Ch i ?",
        "(~a) for i = 1, 2 so that ?T ?,Ch ?",
        "?",
        "(~a) = ?T ?,Ch 1 ?(~a)?",
        "?T ?,Ch 2 ?",
        "(~a) if such sets exist, and these sets (?T ?,Ch i ?",
        "(~a)) are undefined otherwise.",
        "Sequential decomposition.",
        "If we have Ch ?",
        "= Ch 1 ~y 1 : ~ Y 1 (~x 1 ) |Ch 2 ~y 2 : ~ Y 2 (~x 2 ) then we put ?T ?,Ch 1 ?",
        "(~a) = { ~ b ?",
        "?Bv(Ch 1 )?",
        "(~a) : {~c ?",
        "?Bv(Ch 2 )?",
        "(~a, ~ b) : ?",
        "~ b,~c?",
        "?",
        "?T ?,Ch ?",
        "?",
        "(~a)} ?",
        "?Ch 2 ?",
        "(~a, ~ b)} For ~ b ?",
        "?Bv(Ch 1 )?",
        "we put ?T ?,Ch 2 ?",
        "(~a, ~ b) = {~c ?",
        "?Bv(Ch 2 )?",
        "(~a, ~ b) : ?",
        "~ b,~c?",
        "?",
        "?T ?,Ch ?",
        "?",
        "(~a)} Step 2.",
        "(Building dependent types from fibers.)",
        "If ?",
        "is a pack in Ch ?",
        ", ~a ?",
        "?Env ?",
        "(?)?",
        "then we put ?T ?,?",
        "?",
        "= ?",
        "{{~a}?",
        "?T ?,?",
        "?",
        "(~a) : ~a ?",
        "?Env ?",
        "(?",
        ")?, ?",
        "?",
        "?",
        "< Ch ??",
        ", (~adenv ?",
        "(?",
        "? ))",
        "?",
        "?T ?,?",
        "?",
        "?}",
        "It remains to define the projections between dependent types.",
        "If ?",
        "?",
        "< ?",
        "?",
        "we define pi T ?,?",
        ",t ?,?",
        "?",
        ": ?T ?,?",
        "?",
        "??",
        "?T ?,?",
        "?",
        "?",
        "so that ~a 7?",
        "~ad(env ?",
        "(?",
        "? )",
        "?",
        "bv?",
        "?",
        ").",
        "6 Conclusion It was our intention in this paper to show that adopting a typed approach to generalized quantification allows a uniform treatment of a wide array of anaphoric data involving natural language quantification.",
        "Acknowledgments The work of Justyna Grudzi?nska was funded by the National Science Center on the basis of decision DEC-2012/07/B/HS1/00301.",
        "The authors would like to thank the anonymous reviewers for valuable comments on an earlier version of this paper.",
        "17 References"
      ]
    }
  ]
}
