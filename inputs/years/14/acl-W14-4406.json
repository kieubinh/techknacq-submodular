{
  "info": {
    "authors": [
      "Laurence Danlos",
      "Aleksandre Maskharashvili",
      "Sylvain Pogodalla"
    ],
    "book": "INLG",
    "id": "acl-W14-4406",
    "title": "An ACG Analysis of the G-TAG Generation Process",
    "url": "https://aclweb.org/anthology/W14-4406",
    "year": 2014
  },
  "references": [
    "acl-C10-1042",
    "acl-J94-1004",
    "acl-P01-1033",
    "acl-P07-1023",
    "acl-W01-0803",
    "acl-W10-4313"
  ],
  "sections": [
    {
      "text": [
        "Proceedings of the 8th International Natural Language Generation Conference, pages 35?44, Philadelphia, Pennsylvania, 19-21 June 2014. c?2014 Association for Computational Linguistics An ACG Analysis of the G-TAG Generation Process?",
        "Laurence Danlos Universite?",
        "Paris Diderot (Paris 7) ALPAGE, INRIA Paris?Rocquencourt Institut Universitaire de France, Paris, France laurence.danlos@inria.fr Aleksandre Maskharashvili and Sylvain Pogodalla INRIA Villers-le`s-Nancy, France Universite?",
        "de Lorraine, CNRS, LORIA, UMR 7503 Vand?uvre-le`s-Nancy, France aleksandre.maskharashvili@inria.fr sylvain.pogodalla@inria.fr",
        "Abstract",
        "This paper presents an encoding of Generation-TAG (G-TAG) within Abstract Categorial Grammars (ACG).",
        "We show how the key notions of G-TAG have a natural interpretation in ACG, allowing us to use its reversibility property for text generation.",
        "It also offers solutions to several limitations of G-TAG.",
        "1 Motivations G-TAG (Danlos, 1998; Danlos, 2000) is a formalism based on the Tree Adjoining Grammar (TAG) formalism (Joshi et al., 1975; Joshi and Schabes, 1997) dedicated to text generation.",
        "It focuses on providing several notions to support useful data structures, such as g-derivation trees or lexical databases, to effectively relate a surface form (a derived tree or a string) to a conceptual representation.",
        "An actual implementation in ADA was first provided for French (Meunier, 1997), and it has recently been implemented in the .NET framework as the EasyText NLG system and is operational at Kantar Media, a French subsidiary company of TNS-Sofres (Danlos et al., 2011).",
        "The G-TAG proposal can be seen as a result of the observation of the mismatch between the derivation tree notion of TAG and the expected semantic dependencies (Schabes and Shieber, 1994) from a generation perspective.",
        "Several approaches that extend the derivation tree notion of TAG have been proposed to overcome this difficulty.",
        "Other approaches showed that the derivation trees still could be used without additional modifications.",
        "Such approaches rely on unification (Kallmeyer and Romero, 2004; Kallmeyer and Romero, 2007) or a functional approach to TAG (Pogodalla, 2004; ?This work has been supported by the French agency Agence Nationale de la Recherche (ANR-12-CORD-0004).",
        "Pogodalla, 2009)1 based on",
        "Abstract",
        "Categorial Grammars (ACG) (de Groote, 2001).",
        "The latter is intrinsically reversible: the grammars and the algorithms are the same for parsing and for generation.",
        "We propose then to study G-TAG under the ACG perspective.",
        "We show that the key notion of g-derivation tree naturally express itself in this framework.",
        "The surface form construction from a conceptual representation can then use the general algorithms of ACG, the very same ones that can be used in parsing to analyze mildly context sensitive languages (TAG generated language, LCFRS) (de Groote and Pogodalla, 2004), following (Kanazawa, 2007)'s proposal here applied to give an ACG account of G-TAG.",
        "We do not consider here the G-TAG treatment of preferences between the different realizations of the same input.",
        "Similarly, we do not consider the generation of pronouns used in G-TAG and we will work on integrating a theory of generation of referring expressions.",
        "2 Sketching G-TAG G-TAG deals with the How to say it?",
        "task of generation.",
        "The input is a conceptual representation.",
        "A G-TAG grammar includes elementary trees, as any TAG grammar.",
        "But it also makes g-derivation trees primary objects, relating them to the elementary trees and considering them as pivot to the conceptual representation level.",
        "Conceptual Representation G-TAG conceptual representation makes use of notions as second order relation, first order relation and thing.",
        "Second order relations have two arguments which are relations (either first or second order ones) and typically correspond to discourse relations, 1Synchronous approaches (Nesson and Shieber, 2006) are similar in many respects, as shown in (Storoshenk and Frank, 2012).",
        "35 whereas first order relations have things as their arguments.",
        "While (Danlos, 2000) uses reified formulas of a logical conceptual representation language as G-TAG inputs, it can also be represented as a higher-order logical formula (Meunier, 1997) or as a SDRT-like formula (Danlos et al., 2001).",
        "We follow here this presentation.",
        "Equation (1) exemplifies an input that could be realized as Jean a passe?",
        "l?aspirateur pour e?tre re?compense?",
        "par Marie.",
        "Puis il a fait une sieste (John has vacumed in order to be rewarded by Mary.",
        "Then he took a nap).",
        "SUCCESSION(GOAL(VACUUMING(Jean), REWARDING(Marie, Jean)), NAPPING(Jean)) (1) G-TAG Lexical Database A lexical entry of G-TAG corresponds to a lemma.",
        "For each lexical entry (i.e. lemma) there is a set of TAG elementary trees which corresponds to it.",
        "Among the TAG elementary trees that correspond to a given lexical entry, there is the canonical representative, and all the other representatives are represented by adding features to the canonical representative.",
        "For exam-ple, if the lexical entry is to love, then the canonical representative will be the active form of the verb to love.",
        "Then the passive alternation is represented by adding a feature [+passive] to to love.",
        "Moreover, all the lexical entries attached to a concept (such as SUCCESSION) belong to a same lexical base.",
        "So for a concept, there can be a lexical entry describing verbal realizations of the concept.",
        "These realizations can correspond to the active or to the passive forms, etc.",
        "There can also be a lexical entry which corresponds to nominal realiza-tions, etc.",
        "G-Derivation Trees A TAG derivation tree can be seen as a record of the substitutions and adjunction occurring during a TAG analysis.",
        "The same is true for g-derivation tree.",
        "However, while TAG derivation trees are considered as a by-product, with inflected anchors, G-TAG derivation trees are first class structures that are combined in order to reflect the conceptual input.",
        "To abstract from the surface form and from the derived tree they can relate to, they don't correspond to inflected forms but bear features that are used in a post-processing step.",
        "Complex g-derivation trees are built by going through the dynamic selection process of a lexical item from the set of appropriate candidates for a given concept.",
        "So contrary to TAG derivation trees, they are not fully instantiated trees: their arguments are represented by variables whose lexicalization are not carried out yet.",
        "G-Derived Trees A g-derivation tree defines a unique g-derived tree corresponding to it.",
        "This correspondance is maintained all along the realization process and a post-processing module outputs the surface representation (text) from the g-derived tree.",
        "In addition to inflecting forms using the feature values it can make some rewriting to propose different versions of the initial text.",
        "In this particular sense, g-derived tree corresponds to possibly multiple text outputs generated by the post-processing module.",
        "3 The G-TAG Generation Process Let us assume the input of Equation 1.",
        "The G-TAG process starts by lexicalizing relations that have the widest scope in the conceptual representation: typically second order relations, then first order re-lations, and things.2 Back to the example, we first lexicalize the second order relation SUCCESSION.",
        "Several items are associated with this relation: apre`s (after), avant (before), ensuite (afterwards), auparavant (beforehand), puis (then), etc.",
        "Each of them has two arguments, however, some of them produce texts comprising two or more sentences, like ensuite(afterwards); some of them can produce either two sentence texts or one sentence text, while others produce only one sentence.",
        "For in-stance, Jean a passe?",
        "l?aspirateur.",
        "Ensuite, il a fait une sieste (John has vacuumed.",
        "Afterwards, he took a nap) is a two sentences text while John a fait une sieste apre`s avoir passe?",
        "l?aspirateur (John took a nap after having vacuumed) is a one sentence text.",
        "For this reason, items describing the arguments or the result of second order relations have features expressing the following constraints: (+T,+S) indicates it is a text (two ore more sen-tences); (+S) indicates it is either a single sentence or a text; (?T,+S) indicates it is a sentence (not a text).",
        "Every second order relation has three features: one for output, and two for inputs.",
        "3 2Correctness of the process is ensured because the grammars don't contain auxiliary trees that would reverse the predication order.",
        "(Danlos, 2000) argues such cases don't occur in technical texts, the first target of G-TAG.",
        "We don't elaborate on this point since the ACG approach we propose remove this constraint for free.",
        "3In G-TAG, any discourse connective has exactly two arguments.",
        "A discussion about this point is provided in (Dan- 36 Let us assume that the G-TAG g-derivation tree ensuite(+T,+S) belonging to the lexical database associated with the concept SUCCESSION is first chosen, resulting in a text rather than a sentence (illustrated by the leftmost g-derivation tree of Figure 1 .",
        "The process then tries to realize its two arguments.",
        "The first one involves the GOAL relation that can be realized either by pour (in order to) or by pour que (so that), as exemplified by the rightmost g-derivation trees of Figure 1.",
        "Both have features (?T,+S) for the inputs (i.e. arguments) and return a tree labeled at the root by (?T,+S).",
        "ensuite (+T,+S) (1st event) (+S) (2nd event)(+S) arg1 arg2 pour (?T,+S) (ACTION) (?T,+S) (PURPOSE)(?T,+S) arg1 arg2 pour que (?T,+S) (ACTION) (?T,+S) (PURPOSE)(?T,+S) arg1 arg2 Figure 1: G-derivation trees samples Despite pour and pour que bearing the same features, the syntactic trees corresponding to pour and pour que are quite different.",
        "For pour que S substitution nodes can be substituted by two tensed sentences, while pour takes a finite sentence and a ?sentence?",
        "in the infinitive form without any nominal subject.",
        "Figure 2 shows the associated elementary trees.",
        "Selecting one or the other during the generation process restricts the possible realizations for the arguments.",
        "This is enforced by a feature associated to the elementary tree, namely the (+reduc-subj) feature as shown in Fig. 3.",
        "Again, we may assume that G-TAG selects pour, S S (arg1) PP Prep pour S C que S(arg2) (mood:subj) S S (arg1) PP Prep pour S(arg2) (mood:inf) Figure 2: Elementary trees of pour que (so that) and pour (in order to) which will enforce, because of the associated elementary trees, that the subject of the first and the second arguments are the same.",
        "Afterwards, we need to lexicalize these two arguments with a common subject Jean.",
        "From a semantic point of view, the agent of VACUUMING has to be the beneficiary of REWARDING (the rewardee).",
        "VACUUMING can only be lexicalized as passer-l?aspirateur (run-the- vacuum-cleaner), while there are several lexical-los, 2000).",
        "ization options for the REWARDING: re?compenser (to reward), donner-re?compense (to give-reward), and recevoir-re?compense (to receive-reward).",
        "Let us notice that donner-re?compense does not meet the constraint on a shared subject as it cannot have the rewardee as its subject4.",
        "The remaining options are: recevoir-re?compense, whose canonical representation has the rewardee as subject; and re?compense whose passive construction has the rewardee as subject.",
        "s Assuming a choice of re?compenser[+passive],5 the lexicalizations of the arguments of the first order relations remain.",
        "As Marie occurs only once and in subject position, it can only be lexicalized as Marie.",
        "On the other hand, Jean three times: one will be the implicit subject of the subordinate, then as argument of VACUUMING and NAPPING.",
        "Therefore it can be either lexicalized in both of the cases as Jean, or Jean and the pronoun il (he).",
        "In G-TAG, there are some post-processing rules that take care of the generation of referring expressions, but not in a really principled way so we do not demonstrate them here.",
        "We assume a lexicalization by Jean in both cases.",
        "Figure 3 shows the g-derivation tree associated with the input of Equation 1 and Fig. 4 show the unique resulting (non-flected) derived tree.",
        "The post-processing modules then outputs: Jean a passe?",
        "l?aspirateur pour e?tre re?compense?",
        "par Marie.",
        "Ensuite, il a fait une sieste.",
        "(John vacuumed in order to be rewarded by Mary.",
        "Af-terwards, he took a nap.)",
        "ensuite pour (+reduc-subj) passer-l?aspirateur Jean recompenser (+reduc-subj,+passive) Marie \u000f faire-la-sieste Jean arg1 arg1 arg1 arg2 arg1 arg2 arg2 arg1 Figure 3: Fully instantiated g-derivation tree 4 ACG Definition",
        "Abstract",
        "Categorial Grammars (ACGs) (de Groote, 2001) are a type theo-4It lacks passivation in French and there is no form equivalent to: John was given a reward by Mary.",
        "5Of course, all these branching points offer several realizations of the same entry.",
        "But for explanatory purposes, we describe only one at each step.",
        "37 S S S NP Jea n V pa sse rl?",
        "asp ira teu r PP Prep po ur S NP \u000f Va e?tr e V re?c om pe nse r PP Prep pa r Ma rie .",
        "S Adv en sui te S NP Jea n V fai tu ne sie ste Figure 4: Non-inflected derived tree retical framework that is able to encode several grammatical formalisms (de Groote and Pogo-dalla, 2004).",
        "An ACG defines two languages: the abstract one and the object one.",
        "The abstract level describe the admissible parse structures and a lexicon maps these structures to the ones we observe at the object level (strings for surface forms, logical formulas for semantic forms).",
        "In all cases, the considered languages are sets of ?-terms that generalize string and tree languages.",
        "Definition.",
        "A higher-order linear signature (also called a vocabulary) is defined to be a triple ?",
        "= ?A,C, ?",
        "?, where: ?",
        "A is a finite set of atomic types (also noted A?",
        "), ?",
        "C is a finite set of constants (also noted C?",
        "), ?",
        "and ?",
        "is a mapping from C to TA the set of types built on A: TA ::= A|TA ?",
        "TA (also noted T?).",
        "Given a higher-order linear signature ?, ?(?)",
        "is the set of ?-terms built on ?, and for t ?",
        "?(?)",
        "and ?",
        "?",
        "T?",
        "such that t has type ?, we note t :?",
        "?",
        "(the ?",
        "subscript is omitted when obvious from the context).",
        "Definition.",
        "An abstract categorial grammar is a quadruple G = ?",
        "?,?,L, s?",
        "where: 1. ?",
        "and ?",
        "are two higher-order linear signa-tures, which are called the abstract vocabulary and the object vocabulary, respectively; 2.",
        "L : ?",
        "??",
        "?",
        "is a lexicon from the abstract vocabulary to the object vocabulary.",
        "It is a homomorphism that maps types and terms built on ?",
        "to types and terms built on ?",
        "as follows: ?",
        "if ?",
        "?",
        "?",
        "?",
        "T?",
        "then L(?",
        "?",
        "?)",
        "= L(?)?",
        "L(?)",
        "?",
        "if x ?",
        "?(?)",
        "(resp.",
        "?x.t ?",
        "?(?)",
        "and t u ?",
        "?(?))",
        "then L(x) = x (resp.",
        "L(?x.t) = ?x.L(t) and L(t u) = L(t)L(u)) It is then enough to define L on the atomic types and on the constants of ?",
        "to define it on all types and terms, provided that for any constant c : ?",
        "of ?",
        "we have L(c) : L(?).",
        "We note t:=G u if L(t) = u and omit the G subscript if obvious from the context.",
        "3. s ?",
        "T?",
        "is a type of the abstract vocabulary, which is called the distinguished type of the grammar.",
        "Table 1 provides an ACG example Gd-ed trees where the abstract typed constants of ?der?",
        "encode the combinatorial properties of the associated (through the lexicon Ld-ed trees) elementary trees.",
        "Definition.",
        "The abstract language of an ACG G = ?",
        "?,?,L, s?",
        "is A(G ) = {t ?",
        "?(?)",
        "| t :?",
        "s} The object language of the grammar O(G ) = {t ?",
        "?(?)",
        "| ?u ?",
        "A(G ).",
        "t = LG(u)} For instance, the term Creward IS Iv CMary CJean : S ?",
        "Gd-ed trees, and its image, the derived tree for Marie re?compense Jean (Mary rewards John).",
        "It is important to note that, from a purely mathematical point of view, there is no structural difference between the abstract and the object vocabu-lary: both are higher-order signatures.",
        "This allows for combining ACGs in different ways: ?",
        "by having a same abstract vocabulary shared by several ACGs: this can be used to make two object terms (for instance a string and a logical formula) share the same underlying structure.",
        "Gd-ed trees and GLog in Fig. 5 illustrate such a composition.",
        "?",
        "by making the abstract vocabulary of one ACG the object vocabulary of another ACG, allowing for the control of the admissible structures of the former by the latter.",
        "Gyield and Gd-ed trees in Fig. 5 illustrate such a composition.",
        "?(?der?)",
        "?",
        "(?trees) Gd-ed trees ?",
        "(?string) Gyield ?",
        "(?Log) GLog Figure 5: ACG architecture for TAG 38 Crucial to our analysis is that ACG parsing of a term u amounts to finding an abstract term t such that t:= u, no matter whether u represents a string, a tree, or a logical formula.",
        "This can be done in polynomial time for ACGs whose abstract constant types are at most of order 2: second order ACGs as (Kanazawa, 2007) shows.",
        "The result relies on a reduction of the parsing problem to Data-log querying where the term to be parsed is stored in a database.",
        "Interestingly, this database can represent a set of terms (Kanazawa, 2011, Section 4.2) and the query reduces to checking whether at least one of them can be retrieved.",
        "This allows the query associated with a term representing a logical formula to extend to all the terms that are equivalent modulo the associativity and the commutativity of the conjunction.",
        "5 ACG Encoding 5.1 TAG as ACG Because ACG considers both the abstract language and the object language, the encoding of TAG into ACG makes (abstract) terms representing derivation trees primary.",
        "The encoding uses two ACGs Gd-ed trees = ?",
        "?der?,?trees,Ld-ed trees,S?",
        "and Gyield = ?",
        "?trees,?string,Lyield, ??.",
        "We exemplify the encoding7 of a TAG analyz-ing (2) in Fig. 6.8 (2) Marie Mary re?compense rewards ensuite then Jean John This sentence is usually analyzed in TAG with a derivation tree where the adverb adjoins at the v node.",
        "The three higher-order signatures are: ?der?",
        ": Its atomic types include S, v, np, SA, vA. .",
        ".",
        "where the X types stand for the categories X of the nodes where a substitution can occur while the XA types stand for the categories X of the nodes where an adjunction can occur.",
        "For each elementary tree ?lex.",
        "entry it contains a constant Clex.",
        "entry whose type is based on the adjunction and substitution sites as Table 1 shows.",
        "It additionally contains constants IX : XA that are meant to provide a fake auxiliary tree on adjunction 6It actually extends this result to almost linear object terms where variables with atomic type can be duplicated, as it commonly happens at the semantic level.",
        "7This corresponds to the systematic encoding of (Pogo- dalla, 2009) of TAG and its semantics into ACG.",
        "8We follow the grammar of (Abeille?, 2002).",
        "sites where no adjunction actually takes place in a TAG derivation.",
        "?trees: Its unique atomic type is ?",
        "the type of trees.",
        "Then, for any X of arity n belonging to the ranked alphabet describing the elementary trees of the TAG, we have a constant Xn : n times?",
        "??",
        "?",
        "?",
        "( ?",
        "?",
        "?",
        "( ?",
        "( ?",
        "?string: Its unique atomic type is ?",
        "the type of strings.",
        "The constants are the terminal symbols of the TAG (with type ?",
        "), the concatenation + : ?",
        "( ?",
        "( ?",
        "and the empty string ?",
        ": ?.",
        "Table 1 illustrates Ld-ed trees.9 Lyield is defined as follows: ?",
        "Lyield(?)",
        "= ?",
        "; ?",
        "for n > 0, Lyield(Xn) = ?x1 ?",
        "?",
        "?xn.x1 + ?",
        "?",
        "?+ xn; ?",
        "for n = 0, X0 : ?",
        "represents a terminal symbol and Lyield(X0) = X .",
        "Then, the derivation tree, the derived tree, and the yield of Fig. 6 are represented by: ?reward ?Jean?Marie?then (a) Derivation tree S np Jean v ensuitev re?compense np Marie (b) Derived tree Figure 6: Marie re?compense ensuite Jean ?5 = Creward IS (Cvthen IS) CMarie CJean Ld-ed trees(?5) = S3 (np1 Marie) (v2 (v1 re?compense) ensuite) (np1 Jean) Lyield(Ld-ed trees(?5)) = Marie + re?compense + ensuite + Jean 5.2 G-TAG as ACG In order to model G-TAG in ACG, first we need to design the abstract signature ?g-der?",
        "in which we can have entries for G-TAG.",
        "This entries will reflect the ideology that G-TAG is based on.",
        "For instance, in G-TAG discourse level words like ensuite can take as its arguments texts and sentences and produces text.",
        "In order to model this, we introduce types S and T. Then, we can define DSSthen: S ( S ( T, which means that DSSthen has takes two arguments of type S and returns a result of type T. As in G-TAG, ensuite can take two 9With Ld-ed trees(XA) = ?",
        "( ?",
        "and for any other type X , Ld-ed trees(XA) = ?",
        ".",
        "39",
        "Abstract",
        "constants of ?der?",
        "Their images by Ld-ed trees The corresponding TAG trees CJean : np cJean : ?= np1 Jean ?Jean = np Jean Cvthen : vA ( vA cvthen : (?",
        "( ?)",
        "( (?",
        "( ?",
        ")= ?ovx.v (v2 xensuite) ?then = v ensuitev?",
        "Creward : SA ( vA ( np( np ( S creward : (?",
        "( ?)",
        "( (?",
        "( ?)",
        "( ?",
        "( ?",
        "( ?",
        "= ?oavso.a (S3 s (v (v1 re?compense)) o) ?reward = S npv re?compense np IX : XA ?x.x : ?",
        "( ?",
        "Table 1: A TAG as an ACG: Ld-ed trees and Llog.sem lexicons texts as arguments and return text as well, we need to do have another entry for modeling this fact.",
        "This makes us to introduce another constant DTTthen : T ( T ( T. For the same kind of reason, we introduce following constants: DSTthen: S ( T ( T, DTSthen and T ( S ( T. Other relations, like auparavant is modeled in the same way as ensuite in ?g-der?.",
        "Apart from ensuite and auparavant, there are connectives as avant (before) and apre`s (after) that need to be modeled differently from ensuite.",
        "In-deed, while ensuite results in a text, placing side by side a text and a sentence separated with a pe-riod, avant and apre`s in French combine in a single sentence a (full) clause and an infinitive clause with an implicit subject: the one of the first clause.",
        "It is clear that in order to type avant and apre`s in the ?g-der?",
        "signature, one should use a type which schematically looks as .",
        ".",
        ".",
        "( S. On the other hand, one needs to give the exact type to them.",
        "Despite that in TAG and G-TAG avant and apre`s take two sentential arguments (labelled by S), the second argument bears a feature indicating it lacks the subject and that the latter has to be shared with the first sentence.",
        "For instance: Jean a fait une sieste apre`s avoir passe?",
        "l?aspirateur (John took a nap after having vacuumed), here the subject of avoir passe?",
        "l?aspirateur (having vacuumed) is Jean, which comes from the sentence Jean a fait une sieste (John took a nap).",
        "So, Jean a fait une sieste (John took a nap) can be seen as a sentence whose subject is shared by another sentence as well.",
        "In order to model this point, we use following type: Sws ( Sh ( np ( S. Indeed, the Sws and the Sh types correspond to the type of sentences missing a subject.",
        "Furthermore, we need to model pour and pour que, which were introduced in order to lexicalize the GOAL relation in G-TAG.",
        "First, let us have a look at pour que.",
        "It can take as its arguments two complete (from a syntax point of view) sentences and results in a sentence as in: Il travaille pour que vous puissiez manger.",
        "So, Dpour que, which is an entry corresponding to pour que, can be assigned a S ( S ( S type.",
        "The syntactic difference between pour que and pour was highlighted in Section 3: pour takes as arguments a complete sentence and an infinitive form of a sentence missing a subject whose subject comes from the first argument.",
        "Thus, in this case, similarly to case of avant and apre`s, pour has to be modeled as an entry that has type Sws ( Sinf ( np ( S, where Sinf stands for the type of an infinitive form of a clause missing a subject.",
        "We also need to deal with encoding different forms of a verb.",
        "For instance, re?compenser has an active and a passive form.",
        "In G-TAG deriva-tion, both of them can be encountered.",
        "In order to model this fact, two different entries are intro-duced: one for the passive form and one for the active form, which is the canonical construction for re?compenser.",
        "So, we need to have two distinct entries Dpassiverecompense and Dactiverecompense, and both of them have type SA ( vA ( np ( np ( S. More-over, (Danlos, 2000) poses the problem that G-TAG cannot handle a text where the adverb adjoin at the v node rather than on the S node as in: Jean a passe?",
        "l?aspirateur.",
        "Il a ensuite fait une sieste (John vacuumed.",
        "He then took a nap.)",
        "According to (Danlos, 2000) modelling such text production requires a formalism more powerful than TAG.",
        "In the ACG framework, this observations translates into defining an entry Dvthen : S ( (vA ( S) ( T in ?g-der?",
        "which is third order and that is, as such, beyond the TAC into ACG encoding (that only requires second-order types).10 This also offers a 10Currently, there is no theoretical complexity result for parsing such ACG fragments.",
        "However, in this particu-40 general mechanism for providing constants encoding adverbial connectives with two arguments as in discourse grammars such as D-STAG (Danlos, 2011), but contrary to D-LTAG where one of the arguments is anaphorically given from the preceding discourse (Webber, 2004).",
        "G-Derivation Trees to Derivation Trees We translate terms of ?g-der?, which correspond to g-derivation trees, into the TAG derivation tree language defined on ?der?",
        "using the lexicon Lder-der of Table 2.",
        "It is interesting to see how to inter-Lder-der(S) = Lder-der(T) = Lder-der(Sws) = Lder-der(Sinf) = Lder-der(Sh) = S Lder-der(SA) = SA Lder-der(vA) = vA Lder-der(np) = np Lder-der(IS) = IS Lder-der(Iv) = Iv Table 2: The Lder-der lexicon pret Dvthen: S ( (vA ( S) ( T into ?der?.",
        "For this reason, we introduce in ?der?",
        "the following constant: s2 : S ( S ( S that allows for combining two sentences with a period.",
        "Now, it is possible to translate Dvthen into ?der?",
        "as fol-lows: Lder-der(Dvthen) = ?oS1 S2.s2 S1(S2Cvthen).",
        "It means that Dvthen is interpreted as performing both the operation of combining two sentences with a period and the adjunction of ensuite on the v node of the second sentence.",
        "G-Derived Trees as Interpretation of G-Derivation Trees As soon as g-derivation trees as term built on ?g-der?",
        "are interpreted as term built on ?der?, we can map them to derived trees.",
        "Thus, by composing the two lexicons Lder-der and Ld-ed trees we can get directly from G-TAG into derived trees 5.3 From G-TAG to Montague Style Semantics Using ACGs (Pogodalla, 2009) defines a signature ?Log and a lexicon LLog from ?der?",
        "to ?Log.",
        "The entries in ?Log have Montague like semantics.",
        "The lexicon translates a derivation tree into a corresponding formula.",
        "We will use the same kind of semantic language for conceptual representations.",
        "In other words, our language will produce the formulas lar case, we could use a second-order -- and polynomial?",
        "encoding of multi-component TAG into ACG.",
        "that are used in the conceptual representation of G-TAG, while we will stick to the Montague style translations from syntax to semantics.",
        "So, we define a signature ?conrep of conceptual representation that is similar to the one of (Pogo- dalla, 2009).",
        "?conrep defines two atomic types e and t and constants such as: j, m .",
        ".",
        ".",
        "of type e, the constant REWARD of type e ( e ( t, the constant CLAIM of type e ( t ( t and the constant SEEM of type t( t. Moreover, we have constants SUCC, GOAL of type t( t( t. We are able to translate ?g-der?",
        "into ?conrep with the help of the lexicon Lder-con.",
        "The lexicon Lder-con is extension of the lexicon defined in (Pogodalla, 2009), because we are adding to the domain (i.e. abstract lan-guage) the constants that are not in the ?der?.",
        "Lder-con(S) = Lder-con(T) = t Lder-con(vA) = (e?",
        "t) ( (e?",
        "t) Lder-con(SA) = t( t Lder-con(np) = (e?",
        "t) ( t Lder-con(Djean) = ?oP.P (j) Lder-con(DSTthen) = Lder-con(DSSthen) = Lder-con(DSTthen) = Lder-con(DTSthen) = Lder-con(DTTthen ) = ?s2s1.SUCC s2 s1 Lder-con(DSTbef. )",
        "= Lder-con(DSSbef. )",
        "= Lder-con(DSTbef. )",
        "= Lder-con(DTSbef. )",
        "= Lder-con(DTTbef. )",
        "= ?o s1s2.",
        "SUCC s2 s1 Lder-con(Drewards) = ?os a O S.s(S(a(?ox.O(?oy.",
        "(REWARD x y)))) Note that the interpretation of np is JnpK = (e ?",
        "t) ( t, using a non-linear implication (but almost linear).",
        "Typically, the sharing of the subject by the two clauses related by pour or avant de induces non linearity.",
        "The Sinf, Sh, and Sws types all are interpreted as JnpK ( JSK = ((e ?",
        "t) ( t) ( t as they denote clauses lacking a subject.",
        "Then we trans-late the constants Dpour, Dapre`s, and Davant in the following way: Lder-con(Dpour ) = ?os1.?os2.?oN.N(?x.",
        "(GOAL(s1(?P.P x)) (s2(?P.P x)))) Lder-con(Dapres) = ?os1.?os2.?oN.N(?x.",
        "(SUCC(s1(?P.P x)) (s2(?P.P x)))) 41 Lder-con(Davant) = ?os1.?os2.?oN.N(?x.",
        "(SUCC(s2(?P.P x)) (s1(?P.P x)))) 5.4 The G-TAG Process as a Morphism Composition We exemplify the whole process using the term T0 = SUCC(VAC(jean),REWARD(marie, jean)) of type t.11 The terms representing the g-derivation trees that generate this conceptual representation are the antecedents of To by L ?1der-con: L ?1der-con(T0) = {t1, .",
        ".",
        ".",
        ", t8} that all are of type T. They are given in Figure 7.",
        "Each of these retrieved terms t1, .",
        ".",
        ".",
        ", t8 are then mapped to terms representing TAG derivation trees, i.e. built on ?der?",
        "via the lexicon Lder-der.",
        "They can be can in turn be interpreted as syntactic derived trees via the lexicon Ld-ed trees, and the latter can be interpreted as strings using the lexicon Lyield.",
        "So from T0 we can have eight surface forms: Lyield(Ld-ed trees(Lder-der(ti))), i ?",
        "[1, 8].",
        "Let us show this process on the example of t512.",
        "It illustrates the generation of the example (3).13 (3) Jean John a passe?",
        "l?aspirateur.",
        "vacuumed.",
        "Marie Mary a re?compense?",
        "rewarded ensuite afterwards Jean.",
        "John.",
        "Lder-der(t5) = s2 (CvacISIvCjean) (CrewardISCvthenCmarieCjean) Ld-ed trees(Lder-der(t5) = S3 (S2 (np1 Jean)(v1 a passe?",
        "l?aspirateur)) ?",
        "(S3(np1 Marie)(v2 (v1 a re?compense?)",
        "ensuite)(np1 Jean)) And the surface forms is given by composing the interpretations: Lyield(Ld-ed trees(Lder-der(t5)) = Jean + a passe?",
        "+ l?aspirateur + .",
        "+ Marie + a recompense?",
        "+ ensuite + Jean 11 The associated conceptual input is a simplified version of the conceptual input of Equation 1 without the GOAL concept and a replacement of the NAP one by the REWARDING one.",
        "12t5 is such that Lder-der(t5) = ?5 and the term ?5 wasused as example at Section 5.1.",
        "13For sake of simplicity we assume the adverb adjoins on the whole auxiliary+verb phrase rather than only on the auxiliary as it would be in French.",
        "t1 = DSSthen(DvacISIvDjean)(DrewardISIvDmarieDjean) t2 = DSSthen(DvacISIvDjean)(DpassiverewardISIvDmarieDjean) t3 = DSSbef.",
        "(DrewardISIvDmarieDjean)(DvacISIvDjean) t4 = DSSbef.",
        "(DpassiverewardISIvDjeanDmarie)(DvacISIvDjean) t5 = Dvthen(DvacISIvDjean)(?oa.Dreward IS a DmarieDjean) t6 = Dvthen(DvacISIvDjean)(DpassiverewardISIvDjeanDmarie) t7 = Dafter (DswsvacISIv)(Dreceive-rew.ISIvDjean)Dmarie t8 = Dbef.",
        "(DswsvacISIv)(Dreceive-rew.ISIvDjean)Dmarie Figure 7: Antecedents of T0 by Lder-con 6 Related Work We can only quickly mention two related pieces of work.",
        "On the one hand, (Gardent and Perez-Beltrachini, 2010) also takes advantage of the formal properties underlying the tree language of derivation trees to propose a generation process using TAG grammars.",
        "On the other hand, (Nakatsu and White, 2010) also includes discourse relations in the grammar with Discourse Combi-natory Categorial Grammar and a type-theoretical framework to provide a text (rather than sentence) generation process.",
        "7 Conclusion This paper shows how G-TAG can be encoded as ACG.",
        "It relies on the fact that both G-TAG and the encoding of TAG within ACG make the derivation tree a primary notion.",
        "Then we can benefit from the polynomial reversibility of the ACG framework.",
        "It also offers a generalization of the process to all kinds of adjunctions, including the predicative ones.",
        "It also offers a new insight on discourse grammars for the adverbial connective encoding (Danlos, 2011).",
        "Note that contrary to an important part of G-TAG that offers a way (based on a semantic and a linguistic analysis) to rank the different realizations of a conceptual representa-tion, we do not deal here with such preferences.",
        "As syntactic ambiguity treatment is not usually part of the syntactic formalism, we prefer the ?re- alization ambiguity?",
        "treatment not to be part of the generation formalism.",
        "Finally, a crucial perspective is to integrate a theory of generation of referring expressions relying on type-theoretical approaches to dynamics semantics (de Groote, 2006; de Groote and Lebedeva, 2010) that would ensure a large compatibility with the ACG framework.",
        "42 References"
      ]
    }
  ]
}
