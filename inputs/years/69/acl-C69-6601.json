{
  "info": {
    "authors": [
      "Laszlo Kalman"
    ],
    "book": "International Conference on Computational Linguistics",
    "id": "acl-C69-6601",
    "title": "An Intuitive Representation of Context-Free Languages",
    "url": "https://aclweb.org/anthology/C69-6601",
    "year": 1969
  },
  "references": [],
  "sections": [
    {
      "text": [
        "An intuitive representation of context-free languages By Laszle, KALMiR in Szeged, Hungary 1.",
        "In this paper, the following conception of language is used.",
        "A language is an ordered triple L = (V, C, 0 where V and C are two disjoint, non-empty, finite sets and f is an application of C into the set of all subsets of the free semigroup F(V) generated by V. The set V is called the vocabulary (in Chomsky El], terminal vocabulary), its elements are called words, those of F(V) word strings.",
        "The elements of C which corresponds to the auxiliary vocabulary in Chomsky [11) are called (grammatical) categories.",
        "For any category cE C, the elements of f Cc) g F(V) are called the word strings belonging to the category c. The usual conception of language, viz: a subset S of F(V), is a particular case in which C = is} contains a single element s (the category of sentences, a sentence, i. e. a word string belonging to the category s, being an element of 4.",
        "However, both for natural and 'formal languages, the above, more general conception seems to be more appropriate, for we are not only interested, in the case of a natural language, in what are the sentences, and, for a programming language,_ say, what are the programs, but also, what are the noun phrases, verbal phrases, etc., and, what are the declarations, statements, expressions, etc., respectively.",
        "Another advantage of our more general conception is that for a generative grammar of L, we can use the set',C of categories (but of course, we can use any superset of C as well) as auxiliary vocabulary.",
        "Accordingly, we define a context-free grammar as an ordered triple G = (V, C, R> where V and C are two disjoint, non-empty, finite sets and R is a subset of the Cartesian product of C with the free semigroup F(VU C) generated by the union of V and C. V and C are called the vocabulary and set of categories (or terminal and auxili.ary vocabulary), respectively; the elements r of R, which are of the form (9,6) with c E C and 6 E F(Nrkl d), are called (production) rules.",
        "A rule C, 0 will be written in the sequel as \"c:d\" as in the presentation of ALGOL 68 [2], rather than \"c+cr\" as in Chomsky or \"c::=d\" - 2 as in the presentation of ALGOL 60 [3]).",
        "A \"mixed string,\" i. e. an element 6 of F0 U C) is called a direct production of a category c if c:tf is a rule; productions of a category c are defined recursively as (j.)",
        "its direct productions and (ii) mixed strings 6 = d1503 formed of productions er = 61c163 of c by replacing a category c' by a direct production 442 of c/.",
        "(We denote the semigroup operation of F () C) by juxtaposition and do not distinguish in notation a string formed of a single element (of V U C) from that element.)",
        "Terminal productions of c are those of its productions which are elements of F(V) (i. e. formed of words only); and the language L generated by a context-free grammar G = <V, C, R) is defined as L = (V, C, 0 where, for any category c C, f is the set of all terminal productions of c. (Also, any language L1 = (V, CI, f') with C'C C where f' is the mapping f above restricted to C' could be regarded es a language generated by G as well.)",
        "A language L is a.context-free language if it is generated by some context-free grammar.",
        "2.",
        "The intuitive representation of context-free languages about which I shall speak is a representation by means of flag diagrams.",
        "A flag diagram is an ordered septuple D = (V, C, H, fl, f2, gl, g2>, where V and C are disjoint, non-empty, finite sets; H is a finite oriented graph; fl and f2 are mappings of two disjoint, non-empty subsets P1 and P2, respectively, of the set P of points (vertices) of H onto C; and gland g2 are mappings of two disjoint subsets El and E2, respectively, of the set E of edges of H, of which El is non-empty, onto V and into C, respectively.",
        "The sets V and C are called again vocabulary (set of words) and set of categories, respectively.",
        "A point p1E P1 and a point p2 E P2 with = f2 (p2) = c E C are called a starting c-point and an ending c-point, respectively; an edge eiE El with g1(el) =vEVand an edge e2EE2 with g2(e2) =cE Care called a v-edge and a c-edge, respectively.",
        "Starting and ending c-points are marked by a flag-head, pointing to the left and to the right (i. e. by a pentagon with two horizontal, one vertical and two slant sides which form an angle pointing to the left and to the right), respectively, bearing the symbol c; v-edges e are marked by the word v written above the edge e, and c-edged are marked by a double flag-head, pointing tu both sides (i. e. by a hexagon with two horizontal and four slant sides which form two angles, pointing to the left and to the - 3 - right), bearing the symbol c. (See Fig.",
        "starting ending c-point v-edge c-edge",
        "In the case E2 = 0 we call D = <V, C, H, fl, f2; gl, g>, which can be written for short as D = <V, C, H, fl, f2, gi> for g2 is the empty mapping, viz. the mapping of the empty set E2 into C, a finite state flag diagram.",
        "In this case, an (oriented, possibly self-intersecting) path Q (i. e. going possibly several but a finite number of times through the same point or edge) of H is called a c-path of H (ce 0, if it leads from a starting c-point pl to an ending c-point p2 but otherwise, does not go through any starting or ending c-point (implying the condition that Q has not to go through pl or p2 once more).",
        "Let be el, e2, ..., en the edges belonging to El of a c-path Q of H, each written as many times as Q goes through it and written in the order in which Q goes through them.",
        "The word string viv2...vn, where, for i = 1, 2, n, vi = gi(ei), is called the word string to be read along the c-path Q.",
        "The language represented by a finite state flag diagram D = <V, C, H., fl, f2, g3), is defined as L = C, f>, where, for any c E C, f(c) is the set of all word strings to be read along some c-path of H. A language is a finite state languaLe if it is represented by some finite state flag diagram.",
        "Flag diagrams in general are generalizations of finite state flag diagrams.",
        "In the case of a flag diagram D = <V, C, H, f1, l' f2, g1, g2> in general, an :.riented, possibly self-intersecting) path Q of Et is called a c-path of H (cE C) if, besides leading from a starting c-point to an ending c-point but otherwise not going through any starting or ending c-point, it does not go through any cl-edge of H (of E C).",
        "The word string to be read along a c-path of H is defined in the same way as in the case of a finite state flag diagram.",
        "In order to define the language represented by a flag diagram in general, we need still some auxiliary notions.",
        "Consider two differ-entpints pl and p2 of the oriented graph4of a flag diagram D = <V, C, -4-H, fl, f2, gl, g2â€º.",
        "The subgraph H/ of Hconnecting pl with p2 consists, by definition, of all points p of H for which both from pl to p and from p to p2 at least one (oriented) path leads, together with the edges which connect thempoints p in H. (If there is no such point p then Hi is the empty graph; otherwise, both pl and p2 are points of Hi).",
        "A subgraph of H connecting a starting c-point with an ending c-point (c E C), provided it is not empty, is called a c-subgraph of H. The derivatives of a flag diagram D = <V, C, H, fl, f2, gl, g2> are defined by recursion as (i) D itself, and (ii) any flag diagram of the form DI = <V, C, HI, 4, f, gl, 4> which can be obtained from some derivative D\" = <V, C, H\", fl, f, gl, 4) of D by replacing one of its c-edges (c C) e by any c-subgraph H\"'of H. Here, replacing has to be understood in the following sense.",
        "First, the starting c-point pl and the ending c-point p2 of H connected by Hmare replaced by the st:r1-tinE point p3 and the ending point p4, respectively, of the edge e of H\"; then, the graph H\"'modified thus is inserted, instead of e, between p3 and p4 in H\".",
        "Any point or edge of H\" and FP\" which was a starting c'-point, an ending c'-point, a v-edge or a c'-edge in H\" and H, re.",
        "spectively C, v 6 V), remains so after the replacement; in particular, p3 and p4 remain marked or unmarked as they were in H\" rather than getting marked by a flag-head, bearing the symbol c and pointing to the left and to the right, respectively, as pl and p2, respectively, were marked in H. Now, we define the language represented by a flat diagram D = (V, C, H, fl, f2, gl, g2) as L = <V, C, f> where, for any c E C, f(C) is the set of all word strings to be read along some c-path of the oriented graph H' of some derivative D' = <V, C, H', fl, gl, g)of D. As a. simple example, Fig. 2. shows a flag diagram D representing the language L = (y, C, f> with V =40, (, )1, C = Is] and f(s) = fO, (C), ((S))) , ...I.",
        "On Fig. 3, some of the derivatives of D are shown.",
        "3.",
        "Obviously, any cCultext,tree language can be represented by some flag diagram.",
        "Indeed, let G = (V, C, R> be a context-free grammar.",
        "'To each rule r = c:CrE R, where 6= sis2...sn, c E C, si, s2, snE V U C, form an oriented graph Hr with n + 1 points p0, pi, p2, pn of which p0 is a starting c-point, pn an ending e-point and, for i = 1, 2, ..., n1 pi-1 is connected with pi by an si-edge (i. e., for si =vEVav-edge, for si =c E C a c -edge) ei, oriented towards pi.",
        "The (disconnected) union of these oriented graphs Er, for all rules r E R, defines a flag diagram obviously representing the language generated by G. Using this constuction e. g. for the context-free grammar G = <V, C, R'> with V = 10, , )}, C = and R =fs:0, s:(s)j. generating the language represented by the flag diagram shown by Fig. 2, we should obtain the flag diagram shown by Fig. 4.",
        "Replacing this disconnected flag diagram by the connected one shown by Fig 2 corresponds to the ALGOL 68-like way of writing s:0;(s) (or the ALGOL 60-like way of writing s::=0[(s)) of the rules belonging to R. Besides the possibility of reduction of the number of starting - 6 -",
        "the more important E. g. the language with V .",
        "(here, space has been used between \"identifier\" and \"letter\" or \"digit\" to denote the semigroup operation), can be represented, instead of the flag diagram indicated by Fig. 5, which we get using the above constuction and for which the overall number of c-edges is 5, by the flag diagram indicated by Fig. 6, for which this number is 0, the language in question being actually a finite state language.",
        "To show a more complicated example, take the language of the Church lambda conversion [4} where we use x, xf, x11, x111 ,... as variables and for simplicity (as a matter of'fact, for obtaining a context-free language at all) we allow the abstraction Avigi even if the variable v is not contained, or contained as a bound variable, in the (well-formed) formula g. This language is generated by the context-free grammar G = (V, C, R> with V = ix, j , X, { , 1, C, ], (, )1, C =",
        "variable, formula' and R = {r1, r2, r3, r4, r5}, where",
        "formula Flag diagrams can be used with lavantage as a tutorial tool in teaching programming languages.",
        "In the case of a great number of categories, starting and ending c-points can be marked by flags with handle of different length for different categories c, rather than just flag-heads, pointing to the left and to the right, respectively, as shown by Fig. 8, serving to give a survey over the possible modes in ALGOL 68.",
        "Here, the flags instead of flag-heads are not really needed, for we have two categories only.",
        "However, inserting some more flags (which needs some more branchings too), we can get a flag diagram which is equivalent to the metaproduction rules of modes (with 25 categories) of C2], 1.2.1 .",
        "Besides such tutorial use of flag diagrams, they might have a. theoretical interest in furnishing a natural classification of context-free languages according to the minimum of the overall number of c-edges in the flag diagrams representing a given such language.",
        "This minimum can be considered as a measure of the non-finite state character of the given language.",
        "However, for such a theoretical use, a method for calculation of the minimum in question would pe needed."
      ]
    }
  ]
}
