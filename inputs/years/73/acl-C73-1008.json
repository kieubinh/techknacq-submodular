{
  "info": {
    "authors": [
      "Istvan Batori"
    ],
    "book": "International Conference on Computational Linguistics",
    "id": "acl-C73-1008",
    "title": "Working With the Interactive Version of the T.G.T.-System of Joyce Friedman",
    "url": "https://aclweb.org/anthology/C73-1008",
    "year": 1973
  },
  "references": [
    "acl-C69-1401"
  ],
  "sections": [
    {
      "heading": "ISTVAN BATORI WORKING WITH THE INTERACTIVE VERSION OF THE T.G.T.-SYSTEM OF JOYCE FRIEDMAN",
      "text": [
        "The present paper does not claim to be a description of the TGT-System, since it was already presented by Professor Friedman herself at the International Conference on Computational Linguistics in Stockholm in 1969.",
        "In addition the system has been described also in the book JOYCE FRIEDMAN, A Computational Model of Transformational Grammar, Elsevier, 1971.",
        "Our intention is to present the new interactive version of the TGT-System, which has been developed at the Basic Research of ism Germany, and to show how it can be used in linguistic research.",
        "In order to appreciate the present interactive version, it will be, however, necessary to recall some essential aspects of the TGT-System, yet we do not want to discuss the Friedman System as such in a systematic fashion.",
        "Accordingly, in the first part of the paper I shall talk about the batch version, and about our experiences with the system and then I procede to the interactive version."
      ]
    },
    {
      "heading": "1. THE TGT-SYSTEM IN GENERAL",
      "text": [
        "The TGT-System of Friedman grew out of the necessity to verify or control a formal grammar.",
        "It becomes increasingly difficult to control any formal system beyond a certain size: if one wishes to follow the interaction of two or three abstract rules with all their implications,",
        "As primary objective Friedman wanted to give a computational aid to the transformationally oriented linguists.",
        "Her system as it stands now can, however, be considered also as an attempt to formalize the transformational grammar in the strict mathematical sense as well.",
        "The basic intention of Friedman was not to argue for a specific type of generative grammar but rather to offer a framework as general as possible and let the linguist impose restrictions on his particular grammar.",
        "However, it cannot be overlooked that the starting point of Friedman is clearly CHOMSKY'S Aspects-model.",
        "Accordingly, it is easy to learn how to work with the TGT-System if you are familiar with transformational theory.",
        "On the other hand, you can use to system \" to learn \" transformational grammar, as a tutorial aid.",
        "Since we do not want to discuss either the transformational grammar directly, nor the purely technical details of Friedman's System, please, let me presume familiarity with the basic notions of generative grammar and refer for the purely notational conventions once again to Friedman's book."
      ]
    },
    {
      "heading": "2. THE FORM OF THE GRAMMAR",
      "text": [
        "The form of the Grammar is strictly prescribed, but as already mentioned, it is very close to current transformationalist notation.",
        "For the TGT-System a grammar consists of a phrase structure, a lexicon, and a transformational part.",
        "In the first phase of the processing the grammar is built up according to the users specifications and in the second, subsequent phase one sentence (or more) are constructed according to the grammar.",
        "Each of these major components is subdivided further into smaller units.",
        "The structuring of the Grammar is indicated by keywords, which must be used in certain positions and are anticipated by the System.",
        "Let me shortly comment on some points of this scheme of grammar."
      ]
    },
    {
      "heading": "3. THE TREATMENT OF THE CONTEXTUAL FEATURES",
      "text": [
        "Friedman introduced a new type of feature, called contextual, which comprises Chomsky's strict subcategorization and selectional restrictions; i.e., it is all the same for further processing, whether a"
      ]
    },
    {
      "heading": "THE INTERACTIVE VERSION OF THE T.G.T. – SYSTEM 105",
      "text": [
        "contextual rule involves features, like (a) or just category symbols, like (b) in (Fig.",
        "1.",
        ").",
        "But apart from this simplification, the treatment of these contextual features is significantly different from that of CHomsKY's in:the Aspects-model.",
        "The main innovation is the concept of the \" side effects \", which makes the selectional rules independent of the order of inserting lexical items into the derivational tree.",
        "If the contextual feature refers to a node (or nodes) to which a lexical entry has already been attached, (as in (1) on Fig. 1) the program checks the compatibility of the item with its environment, just as in the Aspects-model.",
        "If on the other hand (as in (2) , Fig. 1) the node referred to in the contextual rule is still empty, the new item is introduced and the consequences of the contextual features, i.e. the feature on which the insertion depends, are projected into the invironment.",
        "Note that the output trees are leaned on the side to simplify printing.",
        "In addition the nodes are numbered for ease of reference.",
        "These numbers can be used, among others to localize the feature, which belong to a specific node, also with higher, non-terminal nodes.",
        "Note also that features coming from the lexicon are associated originally with the lexical entries.",
        "After lexical insertion they are adjoined to the immediately dominating category node and not to the actual word any more."
      ]
    },
    {
      "heading": "5. THE FORM OF TRANSFORMATIONS",
      "text": [
        "In comparison with the Phrase Structure Rules the notational conventions for transformations are less uniform.",
        "The notational unsteadiness is largely due to the lack of a strict, mathematically founded and universally accepted transformational theory.",
        "There are two notational styles in use; the more popular of them is the MIT-Style.",
        "(Fig.",
        "2)."
      ]
    },
    {
      "heading": "Verbal Description of Passive:",
      "text": [
        "1.",
        "EXCHANGE SUBJECT AND OBJECT 2.",
        "INSERT THE WORD BY AS LEFT SISTER OF THE AGENT 3.",
        "MARK THE MAIN VERB AS PAST PARTICIPLE",
        "THE INTERACTIVE VERSION OF THE T.G.T.-SYSTEM 107 This convention for transformation is generally advocated in standard introductory works.",
        "Accordingly, transformations are written in the form of pseudo-rewriting rules, where apparently, the structural description (SD) part should be replaced by the structural change (SC) part.",
        "With other words: you define the input and you define the output.",
        "The convention is self explanatory, but perhaps somewhat vague.",
        "The MIT notation is regarded even by its own adherents rather as a convenient shorthand for indicating structural changes and not as a proper, full scale formalism.",
        "The other style is the MITRE-notation, which is less known and resembles computer commands.",
        "This convention defines the input into a transformation and lists the elementary operations, to be carried out on the input tree.",
        "The elementary operations should be defined in advance.",
        "On the whole this way of representing transformations is more abstract but it can be formalized more readily.",
        "Friedman uses this style of notation: there is no problem to reformulate a transformation from the pseudo-rewriting style into the operational representation."
      ]
    },
    {
      "heading": "6. \" THE TRAFFIC RULES \"",
      "text": [
        "The purpose of the control program (CP) is to determine in which order, and at which point in a derivational tree, a transformation should be applied.",
        "By means of a FORTRAN-like control language (by the so called \" traffic rules \"), the linguist can execute the transformations cyclically, i.e. applying the same set of transformations to every clause, he can determine in which order the clauses of a sentence should be processed, he may change the order of execution depending on certain condition, e.g. on the success of preceding transformations etc.",
        "This control part of Friedman's System provides an enormous generative power, the possibilities of which have hardly been discussed in the linguistics.",
        "You can easily define several successive transformational cycles by the cP of Friedman, you can solve the ordering problem of transformations by defining unique jumps in order to leave out the execution of a transformation, which in a \" simple \", cyclically ordered grammar would be impossible."
      ]
    },
    {
      "heading": "7. USING THE SENTENCE GENERATOR",
      "text": [
        "The actual testing of the Grammar is done by the Sentence Generator.",
        "As already said the Grammar is laid on in the first phase of the processing and subsequently the system should be instructed to generate sentences according to the given grammar.",
        "Trivially in as much as the system generates correct sentences, the grammar is verified to the extent the generated sentences are false, the grammar is wrong and has to be corrected.",
        "The sentence generator as such can operate in one of three nodes (Fig.",
        "3):",
        "1.",
        "It can generate sentences completely at random, where a random number generator mechanism controls the selection of grammatical rules and lexical insertion.",
        "All you have to do is to enter the sentence symbols S. THE INTERACTIVE VERSION OF THE T.G.T. – SYSTEM 109",
        "2.",
        "You can predefine a sentence entirely at the level of deep structure and let the system check the tree and carry out the transformations leading up to .the surface structure.",
        "3.",
        "You can use partially defined input, e.g. defining just the structure, but leaving open the lexical insertions, or just specifying a particular structural configuration you are interested in, while letting the system fill up the rest at random.",
        "For practical testing the second and the third way of using the sentence generator is clearly preferable.",
        "The random generator may produce spectacular sentences, but practically never the ones which have bearing on the problem you are interested in.",
        "The sentences delivered _by the random generator may be and are revealing, and nobody experimenting with the system would withstand the temptation to see what his grammar would produce \" left entirely alone \", but it is not suitable for systematic work.",
        "You may correct a mistake detected by the random generator, but you better test the correction by a predetermined skeleton, otherwise you may get a totally different sentence, from which you cannot see whether the error has really been corrected or not.",
        "According to our experience, entirely predetermined structures including lexical entries are the best to test a grammar.",
        "In this case you can anticipate a normal sentence as the final output of the generator, and can immediately decide whether the generation is correct or not.",
        "There are two input formats: a free, bracketed (FTRIN) format, and a fixed tree format (TRIN).",
        "It is perhaps a matter of personal taste, yet for us the FTRIN, that is the bracketed input, seemed to be more convenient.",
        "(Fig.",
        "4)",
        "Usually, the interaction of the phrase structure rules is fairly straightforward, while that of the transformational rules is much more intricate.",
        "Therefore you can easily predefine a skeleton by using your own phrase structure rules \" manually \" and then let the system apply the transformations to the prefabricated input.",
        "If you use partially predetermined trees, you may be distracted by mistakes, which occur at places which are of no interest to you.",
        "Note that you cannot correct all errors, at least not at once, and therefore you had better concentrate on a few points, otherwise you loose sight of you own grammar.",
        "8.",
        "THE OUTPUT OF THE BATCH VERSION The original batch output of the TGT-System has been designed to provide all possible information about the processing, which the linguist may possibly need.",
        "First the input grammar is listed, followed by the content of the major internal tables, according to which the subsequent generation procedes.",
        "Then, the process of sentence generation is reported in such a manner, that the linguist can follow the significant steps of the processing (Fig.",
        "5 (1))."
      ]
    },
    {
      "heading": "9. THE INTERACTIVE VERSION OF THE TGT-SYSTEM",
      "text": [
        "The present interactive version has been developed according to the experiences gained by working with the original batch version.",
        "We have noticed in general that we are interested in the linguistic aspects of the derivation, such as changes in the tree, or in the final output, but not the actual computation.",
        "The demand for a more condensed output will be even more imperative in a terminal environment where the time and the output should be restricted to a minimum.",
        "Therefore we defined a new additional output file, containing just the essential information in which a linguist is interested (Fig.",
        "5).",
        "The original batch protocol enables you to follow the actual flow of computation, e.g. in the case of a transformation you get the modules called to perform the successive steps of the processing.",
        "The interplay of the different subroutines is, however, always the same: ANTEST calls PASSIV, PASSIV calls ELEMOP etc.",
        "Since Friedman's System works practically free of error, there is no need to check the subroutine",
        "calls every time.",
        "This information, therefore, can be dispensed with for the most purposes.",
        "We have designed a slightly different, more comprehensive format, which contains only the linguistically relevant information.",
        "The new output format of the interactive version makes a clear reference to the input grammar, such as the name of the transformation, the name of the elementary operations, the nodes affected by them.",
        "In one point the interactive version provides information, which has not been explicitly reported in the original batch version.",
        "You can follow now also the feature operations in the same form as you follow the tree operations: the interactive protocol delivers the features names and the actual feature value.",
        "For a linguist testing feature operations this is an inno"
      ]
    },
    {
      "heading": "112 ISTVAN BATORI",
      "text": [
        "vation over the original batch version, which suffices to give a hint at this point, that the feature operation has been successfully completed without further details.",
        "It should be noted, that batch-output and terminal output are not mutually exclusive, the terminal output is a summary extracted from the original and placed on a separate file output.",
        "The original output is, however, still available.",
        "The file on which is written is normally set dummy, but it can be reactivated and listed, in the very same form as in the original version'"
      ]
    },
    {
      "heading": "10. THE COMMANDS OF THE INTERACTIVE VERSION",
      "text": [
        "The interactive version on the whole uses a fairly straightforward language.",
        "The answer to most of the questions is either yes or no (or just the first letter of these words).",
        "Every answer is prompted; and should be answered by saying yes or no.",
        "In such cases where an other answer is expected the book of Friedman should be consulted.",
        "Note that in case you want to enter the input skeleton not from the terminal you must have the file allocated prior to calling the TGT-System."
      ]
    },
    {
      "heading": "11. THE CONTROL OF THE INPUT",
      "text": [
        "Summarizing: if you want to run the TGT-System you have to define and enter a grammar, give a command for the sentence generator, and you have to deliver a skeleton to be expanded (Fig.",
        "6).",
        "Originally all these three kinds of input were entered in sequence into the system on the same file as data.",
        "It should be noted that the grammar is a part of the input data, which is entered and processed in each run.",
        "This homogenous input is then interpreted by the system as grammar or as input into the sentence generator according to the internal logics of the program.",
        "In order to achieve greater flexibility while testing a grammar, we separated the three logically different input into three logically different files.",
        "The input grammar, usually a text of several hundreds of lines, 1 The files 8 and 9, containing system messages have been, however, dropped; they were of no interest to ordinary users.",
        "is normally already stored on an external device and entered accordingly.",
        "The generator command (the $MAIN-card) may be attached to the grammar, if not, it is prompted and you may enter it from the terminal.",
        "Similarly, you may predefine input skeletons to be tested and enter them just as you enter the grammar as a separate file.",
        "You have, however, the choice to enter skeletons directly from the terminal.",
        "In case of interest you may enter as many skeleton as you like.",
        "The random generator then provides for variation.",
        "Technically, the separation of the three logically different kinds of input has been accomplished by introducing a file variable, which is set first to accept the grammar from a permanent data set and then changed over to the terminal or an other permanent input data set according to user specifications at session time.",
        "The same file variable technique is used to control the error messages.",
        "The error file is set either to the terminal or to the batch file alternatively.",
        "There would be no problem to assign the error messages permanently, yet an eventual change of the file requirements in terminal environment would mean a revision of several hundreds of error messages, while a file variable can be controlled by a single instruction.",
        "There is a further problem to be faced and that is the reference point of the error message.",
        "In the original batch version the error message precedes the actual erroneous line in the grammar or inserted in the protocol at the appropriate point.",
        "In the first case the interactive version does not display the original input grammar, and therefore a message that e.g. brackets are opened, but not closed or \"special character expected \", but not found, and the like are not very informative, since the user would be left alone to find the critical place in the grammar.",
        "Therefore the error messages during the processing of the input grammar are preceded by the actual line in which the error has occurred.",
        "The line numbering will help the linguist to localize the erroneous section in the input grammar.",
        "If on the other hand the error occurs during sentence generation, the message will be inserted in the terminal protocol at the appropriate place."
      ]
    },
    {
      "heading": "13. THE CONTROL OF OUTPUT",
      "text": [
        "Another crucial point is the control of the terminal output.",
        "You can have the following choices as regards extent of output:",
        "1) You are not interested in any further details, you ,do not want to see the full input tree.",
        "In this case you still get: 1., the linear representation of the input, 2., the list of transformations which have been applied and 3., the output of the transformations, also in the linear form.",
        "This is the minimal amount of output (Fig.",
        "7): 2) You wish to see the input tree into the transformational component, you answer to the question PRINTOUT INPUT TREE?",
        "by saying \" yes \".",
        "In this case you get also the full output tree of the",
        "whole generation automatically.",
        "You get also the list of the transformations which apply displayed; to be more precise you get the list of tree operations (Fig.",
        "8):",
        "THE INTERACTIVE VERSION OF THE T.G.T. – SYSTEM 117 3) You may want to see also the features associated with the nodes in the tree – then you respond to the next question of the system PRINTOUT FEATURES correspondingly – and you get the features displayed both of the input and the output tree.",
        "In addition you get also the list of transformations applying, now including also the feature operations (Fig.",
        "9):",
        "THE INTERACTIVE VERSION OF THE T.G.T. – SYSTEM 119 4) You may be interested in even more details, for instance in some intermediate trees and you have inserted TRACE-cards in the control program of the grammar just as they are inserted in the original batch version.",
        "Now if you answer to the question PRINTOUT INPUT TREE by saying ALL, you will receive every intermediate tree as well, in addition to the input and output tree with features and feature operations.",
        "Otherwise the TRACE function returns just the terminal string of the derivation.",
        "Fig.",
        "10 shows the general logics of the output control:"
      ]
    },
    {
      "heading": "14. CLOSING REMARKS",
      "text": [
        "A grammar developed directly with the aid of the TGT-System is practically never complete, it generates only a subset of the language in question.",
        "You may add, change, remove parts of the grammar and thus you can easily produce minor variants of the same grammar one of which may be preferable over the other.",
        "In fact this is the normal way to work with the system.",
        "At the C.N.U.C.E.-installation there was a number of test-grammars (German, Italian, English and Spanish), offered to the participants to try how such testing looks like.",
        "The participants of the Conference were invited to look at the Grammar Tester as it works.",
        "In the Centro Nazionale Universitario di Calcolo Elettronico the Transformational Grammar Tester was running on a IBM System/360 Model 67 under CP-CMS-67."
      ]
    }
  ]
}
