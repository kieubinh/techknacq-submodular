{
  "info": {
    "authors": [
      "Stuart C. Shapiro"
    ],
    "book": "Annual Meeting of the Association for Computational Linguistics",
    "id": "acl-P79-1007",
    "title": "Genaralized Augmented Transition Network Grammars for Generation from Semantic Networks",
    "url": "https://aclweb.org/anthology/P79-1007",
    "year": 1979
  },
  "references": [
    "acl-J79-1033d"
  ],
  "sections": [
    {
      "heading": "GENFRALIZED AUGMENTED TRANSITION NETWORK GRAMMARS FOR GENERATION FROM SEMANTIC NETWORKS",
      "text": []
    },
    {
      "heading": "1. INTRODUCTION",
      "text": [
        "Augmented transition network (ATM) grammars have, since their development by Woods (70), become the most used method of describing grammars for natural language understanding and question answering systems.",
        "The advantages of the ATN notation have been summarized as \"1) perspicuity, 2) generative power, 3) efficiency of representation, 4) the ability to capture linguistic regularities and generalities, and 5) efficiency of operation\" (1,p.191).",
        "The usual method of utilizing an ATN grammar in a natural language system is to provide an interpreter which can take any ATM grammar, a lexicon, and a sentence as data and produce either a parse of a sentence or a message that the sentence does not conform to the grammar.",
        "A compiler has been written (2;3) which takes an ATM grammar as input and produces a specialized parser for that grammar, but in this paper we will presume that an interpreter is being used.",
        "A particular ATM grammar may be viewed as a program written in the ATM language.",
        "The program takes a sentence, a linear sequence of symbols, as input, and produces as output a parse which is usually a parse tree (often represented by a LISP S-expression) or some \"knowledge representation\" such as a semantic network.",
        "The operation of the program depends on the interpreter being used and the particular program (grammar), as well as on the input (sentence) being processed.",
        "Several methods have been described for using ATN grammars for sentence generation.",
        "One method (1,p.235) is to replace the usual interpreter by a generation interpreter which can take an ATM grammar written for parsing and use it to produce random sentences conforming to the grammar.",
        "This is useful for testing and debugging the grammar.",
        "Another method (5] uses a modified interpreter to generate sentences from a semantic network.",
        "In this method, an ATM register is initialized to hold a node of the semantic network and the input to the grammar is a linear string of symbols providing a pattern of the sentence to be generated.",
        "Another method (4] also generates sentences from a semantic network.",
        "In this method, input to the grammar is the semantic network itself.",
        "That is, instead of successive words of a surface sentence or successive symbols of a linear sentence pattern being scanned as the ATM grammar is traversed by the interpreter, different nodes of the semantic network are scanned.",
        "The grammar controls the syntax of the generated sentence based on the structural properties of the semantic network and the information contained therein.",
        "It was intended that a single ATM interpreter could be used both for standard ATM parsing and for generation based an this last method.",
        "However, a special interpreter was written for generation grammars of the type described in 04], and, indeed, the definition of the ATM formalism given in that paper, though based on the standard ATM formalism, was inconsistent enough with the standard notation that a single interpreter could not be used.",
        "This paper reports the results of work carried out to remove those inconsistencies.",
        "A generalization of the ATM formalism has been derived which allows a single interpreter to be used for both parsing and generating grammars.",
        "In fact, parsing and generating grammars can be sub-networks of each other.",
        "For example an ATM grammar can be constructed so that the \"parse\""
      ]
    },
    {
      "heading": "This material is based an work supported in part by the National Science Foundation under Grant #4CS78â– 02274.",
      "text": [
        "of a natural language question is the natural language statement which answers it, interaction with representation and inference routines being done on arcs along the way.",
        "The new formalism is a strict generalization in the sense that it interprets all old ATM grammars as having the same semantics (carrying out the same actions and producing the same parses) as before."
      ]
    },
    {
      "heading": "2. GENERATION FROM A SEMANTIC NETWORK--BRIEF OVERVIEW",
      "text": [
        "In our view, each node of a semantic network represents a concept.",
        "The goal of the generator is, given a node, to express the concept represented by that node in a natural language surface string.",
        "The syntactic category of the surface string is determined by the grammar, which can include testa of the structure of the semantic network connected to the node.",
        "In order to express the concept, it is often necessary to include in the string substrings which express the concepts represented by adjacent nodes.",
        "For example, if a node represents a fact to be expressed as a state.. ment, part of the statement may be a noun phrase expressing the concept represented by the node connected to the original node by an AGENT case arc.",
        "This can be done by a recursive call to a section of the grammar in charge of building noun phraaes.",
        "This section will be passed the adjacent node.",
        "When it finishes, the original statement section of the grammar will continue adding additional substrings to the growing statement.",
        "In ATM grammars written for parsing, a recursive push does not change the input symbol being examined, but when the, original level continues, parsing continues at a different symbol.",
        "In the generation approach we use, a recursive push often involves a change in the semantic node being examined, and the original level continues with the original node.",
        "This difference is a major motivation of some of the generalizations to the ATM formalism discussed below.",
        "The other major motivation is that, in parsing a string of symbols, the \"next\" symbol is well defined, but in \"parsing\" a network, \"next\" must be explicitly specified."
      ]
    },
    {
      "heading": "3. THE GENERALIZATION",
      "text": [
        "The following subsections show the generalized syntax of the ATM formalism, and assume a knowledge of the standard formalism ((1 ] is an excellent introduction).",
        "Syntactic structures already familiar to ATM users, but not discussed here remain unchanged.",
        "Parentheses and terms in upper case letters are terminal symbols.",
        "Lower case terms in angle brackets are non-terminals.",
        "Terms enclosed in square brackets are optional.",
        "Terms followed by \"*\" mgy occur zero or more times in succession.",
        "To avoid confusion, in the remainder of this section we will underline the name of the * register."
      ]
    },
    {
      "heading": "3.1 TERMINAL ACTIONS",
      "text": [
        "Successful traversal of an ATM arc might or might not conamme an input symbol.",
        "When parsing, such consumption norm/A.117 occurs, when generating it normally does not, but if it does, the next symbol (semantic node) must be specified.",
        "To allow for these choices, we have returned to the technique of (6 Jof having two terminal actions, TO and JUMP, and have added an optional second argument to TO.",
        "The syntax is"
      ]
    },
    {
      "heading": "(TO <state> (<form>1) (JUMP <state>)",
      "text": [
        "Both cause the parser to enter the given state .",
        "JUMP never consumes the input symbol; T3 always does.",
        "If the <form> is absent in the TO action, the next symbol to be scanned will be the next one in the input buffer.",
        "If <form> is present, its value will be the next symbol to be scanned.",
        "All traditional ATN arcs except JUMP and POP end with a terminal action.",
        "The explanation given for the replacement of the JUMP terminal action by the JUMP arc was that, \"since POP, PUSH and VTR arcs never advance the input, to decide whether or not an arc advanced the input required knowledge.",
        "of both the arc type and termination action.",
        "The introduction of the JUMP arc ... means that the input advancement is a function of the arc type alone.\"",
        "(2) That our reintroduction of the JUMP terminal action does not bring back the contusion is explained below in Section )."
      ]
    },
    {
      "heading": "3.2 ARCS",
      "text": [
        "We retain a JUMP arc as well as a JUMP terminal action.",
        "The JUMP arc provides a place to make an arbitrary test and perform some actions without consuming an input symbol.",
        "We need such an arc that does consume its input symbol, but TST is not adequate since it, like CAT, is really a bundle of arcs, one for each lexical entry of the scanned symbol, should the latter b. lexically ambiguous.",
        "A semantic node, however, does not have a lexical entry.",
        "We therefore introduce a TO arc: (TO (estate> (cform>)) <test> eaction>*) If <test> is successful, the <action>s are performed and transfer is made to <state>.",
        "The input symbol is consumed.",
        "The next symbol to be scanned is the value of <form> if it is present or the next symbol in the input buffer if <form> is missing.",
        "The PUSH arc makes two assumptions: 1) the first symbol to be scanned in the subnetwork is the current contents of the â€¢ register; 2) the current input symbol will be consumed-by the subnetwork, so the contents of * can be replaced by the value returned by the subset-work.",
        "We need an arc that causes a recursive call to s subnetwork, but makes neither of these two assumptions, SO we introduce the CALL arc: (CALL <state> <form> <test> <preset/on or action>a <register> <action>.",
        "<terminal action> ) where <preaction or action> is epreaction> or <action>.",
        "If the <test> is successful, all the <actioe>e of <preaction or action> are performed and a recursive push is made to the state <state> where the next symbol to be scanned is the value of <form' and registers are initialized by the <preaction>s. If the subnetwork succeeds, its value is placed into <register> and the <action's and <terminal action> are performed.",
        "Just as the normal TO terminal action is the general.. ized TO terminal action with a default form, the PUSH arc (which we retain) is the CALL arc with the following defaults: <form> is *; the <preaction or action's are only epreaction>s; <register> is *."
      ]
    },
    {
      "heading": "3.3 FORMS",
      "text": [
        "The only form which must be added is (GETA <arc> ('node form>)): where <node form> is a form which evaluates to a semen tic node.",
        "If absent, <node form) defaults to *.",
        "The value of OETA is the node at the end of the arc labelled <arc> from the specified node, or a list of such nodes if there are more than one."
      ]
    },
    {
      "heading": "3.4 TESTS, PREACTION, ETC.",
      "text": [
        "The generalization of the ATM formalism to one which allows for writing grammars which generate surface strings from semantic networks, yet can be interpreted by the same interpreter which handles parsing grammars, requires no changes other than the ones described above.",
        "Of course, each implementation of an ATM interpreter contains slight differences in the set of tests and actions implemented beyond the basic ones."
      ]
    },
    {
      "heading": "4. THE INPUT BUFFER",
      "text": [
        "Input to the AN parser can be thought of as being the contents of a stack, called the lgput buffer.",
        "If the input is a string of words, the !UTE word will be at the top of the input buffer and successive words will be in successively deeper positions of the input buffer.",
        "If the input is a graph, the input buffer might contain only a single node of the graph.",
        "On entering an arc, the â€¢ register is set to the top element of the input buffer, which must not be empty.",
        "The only exceptions to this are the V/R and POP arcs.",
        "V/R sets * to an element of the HOLD register.",
        "POP loaves * undefined since * is always the element to be accounted for by the current arc, and a POP arc is not trying to account for am/ element.",
        "The input buffer is not changed between the time a PUSH arc is entered and the time an arc emanating from the state pushed to is entered, so the contents of * on the latter arc will be the same as on tho former.",
        "A CALL arc is allowed to specify the contents of * on the arcs of the called state.",
        "This is accomplished by replacing the top element of the input buffer by that value before transfer to the called state.",
        "If the value is a list of elements, we push each element individually onto the input buffer.",
        "This makes it particularly easy to loop through a set of nodes, each of which will contribute the same syntactic form to the growing sentence (such as a string of adjectives).",
        "While on an arc (except for POP), i.e. during evaluation of the test and the acts, the contents of * and the top _element of the input buffer are the SSMS.",
        "This re.",
        "quires special processing for VIR, PUSH, and CALL arcs.",
        "After setting *, a VIR arc pushes the contents of * onto the input buffer.",
        "When a PUSH arc resumes, and the lower level has successfully returned a value, the value is placed into * and also pushed onto the input buffer.",
        "When a CALL resumes, and the lower level has successfully returned a value, the value is placed into the specified register, and the contents of * is pushed onto the input buffer.",
        "The specified register might or might not be *.",
        "In either case the contents of * and the top of the input buffer are the MM.",
        "There are two possible terminal acts, JUMP and T3.",
        "JUMP does not affect the input buffer, so the contents of * will be same on the successor arcs (except for POP and VIM) as at the end of the current arc.",
        "TO pops the input buffer, but if provided with an optional form, also pushes the value of that form onto the input buffer.",
        "POPping from the top level is only legal if the input buffer is empty.",
        "POPping from any level should mean that a constituent has been accounted for.",
        "Accounting for a constituent Should entail removing it from the input buffer.",
        "From this we conclude that every path within a level from an initial state to a POP arc must contain at least one TO transfer, and in most cases, it is proper to transfer TO rather than to JUMP to a state that has a POP arc emanating from it.",
        "TO will be the terminal act for most VIR and PUSH arcs.",
        "In any ATM interpreter which abides by this discussion, advancement of the input is a function of the terminal action alone in the sense that at any state JUMPed to, the top of the input buffer will be the last value of *, and at any state jumped TO it will not be."
      ]
    },
    {
      "heading": "5. THE LEXICON",
      "text": [
        "Parsing and generating require a lexicon -- a file of words giving syntactic categories, features and inflectional forms for irregularly inflected words.",
        "Parsing and generating require different information, yet we wish to avoid duplication as much as possible.",
        "During parsing, morphological analysis is performed.",
        "The analyzer is given an inflected form, must segment it, find the stem in the lexicon and modify the lexical entry of the stem according to its analysis of the original form.",
        "Irregularly inflected forma must have their own entries in the lexicon.",
        "An entry in the lexicon may be lexically ambiguous, so each entry must be associated with a list of one or more lexical feature lists.",
        "Each such list, whether stored in the lexicon or constructed by the morphological analyzer, must include a syntactic category and a stem, which serves as a link to the semantic network, as well as other features such as transitivity for a verb.",
        "In the semantic network, some nodes are associated with lexical entries.",
        "During generation, these entries, along with other information from the semantic network, are used by a morphological synthesizer to construct an inflected word.",
        "We assume that all such entries are unambiguous stems, and so contain only a single lexical feature list.",
        "This feature list must contain any regularly inflected forms.",
        "In summary, a single lexicon may be used for both parsing and generating under the following conditions.",
        "An unambiguous stem can be used for both parsing and generating if its one lexical feature list contains features required for both operations.",
        "An ambiguous lexical entry will only be used during parsing.",
        "Each of its lexical feature lists must contain a unique but arbitrary \"stem\" for connection to the semantic net work and for holding the lexical information required for generation.",
        "Every lexical feature list used for generating must contain the proper natural language spelling of its stem as well as any irregularly inflected forme.",
        "Lexical entries for irregularly in.-fleeted forms will only be used during parsing.",
        "For the purposes of this paper, it should be irrelevant whether the \"stems\" connected to the semantic network are actual surface words like \"give\", deeper sememes such as that underlying both \"give\" and \"take\", or primitives such as \"ATRANS\"."
      ]
    },
    {
      "heading": "6. EXAMPLE",
      "text": [
        "Figure 1 shows an example interaction using the SNePS Semantic Network Processing System (51 in which I/O is controlled by a parsing-generating ATM grammar.",
        "Lines begun by \"**\" are user's input, which are all calls to the function named \":\".",
        "This function passes its argument list as the input buffer for a parse to begin in state S. The form popped by the top level ATN network is then printed, followed by the CPU time in milliseconds.",
        "(The system is partly compiled, partly interpreted LISP on a CYBER 173.",
        "The ATM grammar is interpreted.)",
        "Figure 2 shows the grammar in abbreviated graphical form, and Figure 4 gives the details of each arc.",
        "The parsing network, beginning at state SP is included for completeness, but the reader unfamiliar with SNePSUL, the SNePS User Language, 15] is not expected to understand its details.",
        "The first arc in the network is a PUSH to the parsing network.",
        "This network determines whether the input is a statement (type D) or a question (type Q).",
        "If a statement, the network builds a SNePS network representing the information contained in the sentence and pops a semantic node representing the fact contained in the main clause.",
        "If the input is a question the parsing network calls the SNePS deduction routines (DEDUCE) to find the answer, and pops the semantic node representing that (no actual deduction is required in this example).",
        "Figure 3 shows the complete SNePS network built during this example.",
        "Nodes M74M85 were built by the first atatement,nodes M89 and M90 by the second.",
        "When the state RESPOND is reached, the input buffer contains the SNePS node popped by the parsing network.",
        "The generating network then builds a sentence.",
        "The first two sentences were generated from node M85 before M89 and M90 were built.",
        "The third sentence was generated from M90, and the fourth from M85 again.",
        "Since the voice (VC) register is LIFTRed from the parsing network, the generated sentence has the same voice as the input sentence (see Figure 1).",
        "Of particular note is the sub-network at state PRED which analyzes the proper tense for the generated sentence.",
        "For brevity, only simple tenses are included here, but the more complicated tenses presented in (41 can be handled in a similar manner.",
        "Also of interest is the subnetwork at state A= which generates a string of adjectives which are not already scheduled to be in the sentence.",
        "(Compare the third and fourth generated sentences of Figure 1.)"
      ]
    },
    {
      "heading": "7. CONCLUSIONS",
      "text": [
        "A generalization of, the ATM formalism has been presented which allows grammars to be written for generating surface sentences from semantic networks.",
        "The generalization has involved: adding an optional argument to the TO terminal act; reintroducing the JUMP terminal act; introducing a TO arc similar to the JUMP arc; introducing a CALL arc which is a generalization of the PUSH arc; introducing a GETA form; clarifying the management of the input buffer.",
        "The benefits of these few changes are that parsing and generating grammars may be written in the same familiar notation, may be interpreted (or compiled) by a single program, and may use each other in the same parser-generator network grammar."
      ]
    },
    {
      "heading": "REFERENCES",
      "text": []
    },
    {
      "heading": "**(I WHO WAS KISSED BY A DOG) (SWEET YOUNG war WAS KISSED BY A DOG) 3004 MSS",
      "text": []
    }
  ]
}
