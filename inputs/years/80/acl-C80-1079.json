{
  "info": {
    "authors": [
      "P. A. C. Bailes",
      "Larry H. Reeker"
    ],
    "book": "International Conference on Computational Linguistics",
    "id": "acl-C80-1079",
    "title": "An Experimental Applicative Programming Language for Linguistics and String Processing",
    "url": "https://aclweb.org/anthology/C80-1079",
    "year": 1980
  },
  "references": [],
  "sections": [
    {
      "text": [
        "Summary been retained, and in fact, improved.",
        "In an applicative framework, the pattern match The Post-X language is designed to must return a value that can be acted upon provide facilities for pattern-directed by other functions.",
        "The pattern itself has processing of strings, sequences and trees in been generalized to a much more powerful an integrated applicative format.",
        "data object, called the FORM.",
        "Post-X is an experimental language designed for string processing, and for the other types of operations that one often undertakes in computational linguistics and language data processing.",
        "In the design of Post-X, the following four goals have been foremost:",
        "(1) To modernize the Markov algorithm based pattern matching paradi m, as embodied in such languages as COMITIS and SNOBOL8 ; (2) To provide a language useful in computational linguistics and language data processing, in particular, but hopefully with wider applicability; (3) To provide a vehicle for the study of applicrive programming, as advocated by Backus , among others; (4) To provide a vehicle to study the application of natural language devices in programming languages, as advocated by Hsu and Reeker l?",
        "The \"X\" in \"Post-X\" stands for \"experimental\", and is a warning that features of the language and its implementation may change from one day to the next.",
        "The eventual goal is to produce a language designed for wide use, to be called \"Post\" (after the logician Emil Post).",
        "In this paper, we shall present some of the language's facilities for string and tree processing.",
        "A more detailed statement of th9 rationale behind the language can be found in , and more3details of the language are to be found in .",
        "Pattern Matching The basic idea of using pattern matching to direct a computation is found in the normal algorithms of Markov, and was embodied in the early string processing language COMIT.",
        "The series of SNOBOL languages developed at Bell Laboratories, culminating in SNOBOL4, improved a number of awkward features of COMIT and added some features of their own.",
        "Among these latter was the idea of patterns as data objects.",
        "Post-X incorporates patterns into an applicative framework, which will be illustrated below.",
        "In doing so, the powerful pattern matching features of SNOBOL4 have A FORM consists of a series of alternative PATTERNS and related ACTIONS.",
        "Each pattern is very much like a pattern in SNOBOL4 (with some slight variations).",
        "FORMS may be passed parameters (by value), which are then used in the pattern or action portion.",
        "A PATTERN determines the structure of the string to which it is matched.",
        "The pattern contains a sequence of concatenated elements, which are themselves PATTERNS, PRIMITIVE PATTERNS (utilizing most of the SNOBOL4 primitives) or STRINGS.",
        "The value returned by the pattern is either FALSE (if it fails to match) or a \"parse tree\" designating the structure of the string that corresponds to portions of the pattern.",
        "As an example, suppose that a pattern is P:=pi\"p2\"...Apn.",
        "It may be matched to a string S=sosi...sn by the use of the operator \"in\", and if each of the pi match a successive letter sj, one can conceptualize the \"tree\" returned as"
      ]
    },
    {
      "heading": "s s",
      "text": [
        "sO 1 n n+1 where s0 represents the unmatched portion to the left of the matched portion and s+, the portion to the right of the matched portion.",
        "The numbers 1,...,n and the characters < and > in the example are SELECTORS, used in the ACTION portion to refer to the appropriate substrinq.",
        "The tree returned is denoted by $$, and !",
        "is used for selection, but $$!",
        "can be condensed to $ in this context, so the expression $ < returns s in the example above, while $ 2 returns s2.",
        "The selectors give the effect of the short persistence variables that were found in COMIT, where they were denoted by numerals.",
        "These variables had the advantage of having their scope limited to a single line of the program, thus minimizing the number of variables defined at any one time.",
        "In Post-X, the selectors are local to a particular FORM.",
        "Each of the s. may be a subtree, rather than a string.",
        "In'the example above, if p1 were defined as n then in 11^1312^ – ^Pin' place of si would be the subtree",
        "where s is the portion matched by p11 etc.",
        "Then s 11would be referenced by $ 1 !",
        "1.",
        "11 Composition of functions is often necessary.",
        "For the composition of F and G, we write F:G. For example head:sort where \"head\" gives the first element of a sequence and \"sort\" sorts a sequence of strings into alphabetical order, defines a function which operates on a sequence of strings and gives the first in alphabetical order.",
        "producing \"b\" or \"c\" depending on \"a\" is vital; Post-X allows for a multi-way branch of the form if",
        "fi the form do sequence of names expression od is an expression whose value is the function which may be applied to a sequence of epxressions, the value of each of which is given in the expression (in the do ... od) by the corresponding name (i.e. call-by-value).",
        "The value of the application is the value of the expression (with \"substituted\" parameters).",
        "User-defined functions are named by declarations, exFples of which are given later, and defined in • We have already discussed the basic pattern matching operation and the definition of the FORMS used in that operation.",
        "As may be apparent from that discussion, context The default action is to produce an unlabelled tree \"compressed\" by the elimination of single offspring nodes.",
        "The example above is given by the tree (pictorially).",
        "or the sequence E\"x\",\"+\",Px\",\"x\",\"x\"] ],\"+\",\"x\"7 If a labelled phrase marker is desired, then appropriate actions need to be attached.",
        "For instance, if a parenthesized representation of the tree above with node labels added is desired, the forms would be:",
        "In the example above, the application of E would return HEEEEETEFEx]]1,+,TETEFExl],*,Rx]]],+,TN]r",
        "Translation to a prefix representation of the arithmetic expression could, incidentally, be accomplished by a slight change in the actions:",
        "Certain predefined patterns and pattern-returning functions are available, being closely modelled on those of SNOBOL4 e.g.3 any string This time, E=\"x+x*x\" would yield arb break string ++x*xxx.",
        "span string arbno string Context sensitive - and even more complex etc... - parsing can be effected by building programs into the actions to give the effect of augmented transition networks."
      ]
    },
    {
      "heading": "Two Examples",
      "text": [
        "It should also be noted that the actions need not merely pass back a single value.",
        "1 Random Generation of Sentences Several values may be associated with a node, as in attribute grammars10.",
        "For example Given a context-free grammar as a sequence of rules in BNF notation (i.e. left E:=E\"\"+\"\"T{ and right hand sides separated by \"::=\", value := $1.value + $3.value; nonterminals surrounded by angle brackets), code := $1.code$3.code^\" add\" we wish to randomly generate sentences from the grammar.",
        "We shall assume for simplicity that a pseudo-random number generator RANDOM I T; is available which generates a number in an appropriate range each time that it is called.",
        "T:=T\"\"*\"\"Fot We assume also that the grammar is a string",
        "(As in SNOBOL4, a numerical string in a numerical context is treated as a number.)",
        "Reference to the attributes of a node may be made in several ways.",
        "For example, in the last grammar given, (E = \"1+2*3\").value would have the value 7, as would value (E=\"1+2*3\") or (E=\"1+2*3\")!\"value\";.and (E+\"1+2*3\").code would be evaluated as \"1 2 3 times add\".",
        "The program will utilize a form LHS_FIND to find a production with a particular left hand side and return its right hand side.",
        "LHS FIND LHS := LHS\"::=\"\"BREAK\";\"^\";\"{$3}; The alternatives on the right hand side are ttien converted to a sequence by the pattern ALT LIST:",
        "The particular alternative on the right hand side is chosen by the procedure SELECT_RHS LIST := LIST !",
        "((RANDOM MOD SIZE(LIST))+1); The replacement in the evolving sentential form is accomplished by If it were considered desirable REPLACE GRAM := \"<\"^BREAK\">\"^\">\" immediately to evaluate the expression {$<\"((REPLACE GRAM)< (returning 7 as the value of the match in SELECT_RHS the example above) we can write this in the (ALT LIST< action portion: (LHS_ $2 <GRAM)))",
        "This form finds an occurrence of a nonterminal (it will find the leftmost as it is applied below).",
        "It uses this nonterminal as a parameter to LHS_FIND, which is applied to the grammar GRAM to return the right hand alternatives.",
        "Then SELECT_RHS selects an alternative, which is placed in the context of the nonterminal matched by the pattern portion of the form.",
        "Finally, REPLACE is matched (recursively) to the result.",
        "If the first alternative fails, it means that there is no nonterminal.",
        "In that case, the second alternative will be matched, and will return the entire string, which will be a string in the language generated by GRAM.",
        "The entire program will be invoked as"
      ]
    },
    {
      "heading": "RAND STRING GRAM := (REPLACE GRAM) <\"<S>\".",
      "text": [
        "This assumes that the root symbol is <S>.",
        "It should be noted that the parentheses can be reduced by using the transformation available in Post-X into postfix notation, with the postfix composition operator \".\".",
        "Using this, one version of REPLACE_GRAM would be: REPLACE GRAM := \"<\"\"BREAK\">\"\"\">\" {$<\"GRAM.",
        "(<(LHS_FIND $2).",
        "(<)ALT_LIST.",
        "The freedom that this alternative notation provides is one of the refreshing aspects of Post-X.",
        "(The particular transformation applied here to REPLACE_GRAM is, incidentally, analogous to extraposition in English.)"
      ]
    },
    {
      "heading": "2. A KWIC Index bf Titles",
      "text": [
        "It is assumed that the input consists of a sequence of titles.",
        "It is desired to provide a primitive alphabetized KWIC index.",
        "An input of [\"An analysis of the English present perfect\" \"The role of the word in phonological development\"] will produce P<An> analysis ...\" \"An <analysis> ...\" \"... in phonological <development>\" ...",
        "etc.]",
        "The top-level program to do this is",
        "(1) KWIC := (2) UNION ALPHA C(<)[PARTITION]].",
        "(3) ALPHA C(in) TAG_FRONT1].",
        "(4) SORT.",
        "(5) ALPHA P<)[REMOVE TAG]];",
        "Line (2) applies the form PARTITION to each string in the sequence.",
        "PARTITION will \"tag\" each word in each string, by producing a copy of the string with angle brackets around the word, creating C\" An <analysis>...\", \"An <analysis> ...\" \"An analysis <of> ...\" etc.]",
        "A sequence is produced for each string in the original sequence, and these are merged to form a single sequence by the UNION function.",
        "Line (3) adds an occurrence of the \"tagged\" word to the beginning of each string.",
        "Line (4) sorts the sequence obtained (SORT is a built-in function), and Line (5) removes the word added to the beginning of the string in line (3).",
        "The forms PARTITION, TAG_FRONT, and REMOVE are defined as follows:",
        "The SPAN matches the first word, and the action part of the form places that word ($1) between angle brackets.",
        "The PARTITION<$ portion of the action returns a sequence of PARTITIONS of the rest of the string, and the first word is concatenated onto the beginning of each of these.",
        "When only one word remains, the second alternative is used.",
        "TAG_FRONT:= ,<\"BREAK'>' {$2^\"\"@$$} The @$$ is the whole string (the \"flattening\" of tree $$ to a string), the $2 is the portion in angle brackets.",
        "A copy of this is moved to the beginning of the string.",
        "REMOVE_ TAG:= SPAN('A'..'Z') \" {$>} This merely removes the string added at the beginning of the sentence by removing the first word."
      ]
    },
    {
      "heading": "Tree Processing in Post-X",
      "text": [
        "Tree processing facilities are pattern-directed and similar to string processing facilities.",
        "As pointed out earlier, labelled trees may be represented as strings containing brackets.",
        "The pattern BAL, carried over from SNOBOL4, is used to match a full, well-formed subtree, but is extended to allow a specification of the value of that tree.",
        "Some tree functions are added for use in forms.",
        "The function FUSE fuses a sequence of subtrees together at their top node, leaving the label unchanged.",
        "In a tree form, as illustrated",
        "below, the use of a text string refers to a subtree with that label, but the function LABEL will return the label itself.",
        "The function RELABEL (tree, name) changes the label on a subtree to that named.",
        "Post-X tree processing facilities are currently undergoing a careful study, and may be changed, but their present capabilities can be illustrated by the specification of forms for two linguistic transformations in English, EQUI_NP_DELETION and THERE_ INSERTION: EQUI_NP_DELETION:=TREE(\"NP\"^BAL\"\"S\"\"BAL(\"NP\" BAL) {if $1=$4!1 then $1^$2^$3\"$4:2} THERLINSERTION:=TREE(\"S\"\"BAL(\"NP\"\"BAL\"\"V\"\" BAL^ARB) {$1\"FUSE(\"there\"\"$2!3\" $2!2^$2:4)) These can be compared to a \"conventional\"",
        "Illustrating the application of these, THERE_ INSERTION in [S[NP[Det[A]N[boy]] VPEV[ls]PPEPrep[in] NP[Det[the] N[garden]]]]] ES[there VEisiNPEDetEA1N[boy]] PPEPrep[in]NPEDet[the] N[garden]]]]]].",
        "Tree forms are not as natural as they might be, and changes can be expected, with the major goal being to make their use as closely analogous to that of strings as possible.",
        "Sequences Post-X has a number of facilities that apply generally to sequences of items.",
        "These have been illustrated in the examples by, for instance, the operator ALPHA, which applies a function to each element of a sequence, and UNION, which takes a sequence of sequences and creates a single sequence.",
        "Less obvious, perhaps, is the fact that strings and unlabelled trees are themselves sequences; in fact, sequences form the unifying notion within Post-X data structures.",
        "There remains work to be done to determine how effectively one can generalize pattern directed processing to sequences without adding too much complexity to the language.",
        "The LISP programmer will tend to identify sequences with lists, in the sense of that language.",
        "There are differences, however.",
        "The facilities in LISP are oriented toward lists as right-branching binary trees, and though one can build LISP functions to overcome this, the programmer generally must manage the lists with their links in mind.",
        "In Post-X, the programmer is encouraged to deal with the sequence directly, as one becomes accustomed to dealing with strings directly in a string processing language."
      ]
    },
    {
      "heading": "Discussion",
      "text": [
        "The SNOBOL4 language has had few competitors over the years as a general string-processing language.",
        "Its development and distribution were undertaken by Bell Laboratories, and thus it has been widely available for more than a decade.",
        "Yet SNOBOL4 has never been as widely used for large applications, including those in computational linguistics, as one might expect, and in the light of a decade's experience, it is possible to identify various difficulties that account for this.",
        "The basic string processing operation of SNOBOL4, pattern matching, is not the source of these difficulties.",
        "In fact, SNOBOL4 pattern matching provides a high-level-data-directed facility that should be a standard for other languages.",
        "The major problems were in the fact that the pattern-matching was never sufficiently aeneralized, leading to a \"linguistic schism\"\"7, that the syntactic conventions of SNOBOL4 led to difficulties and poor structuring 5 , and that the necessity of constantly assigning values to string variables was clumsy and tended to obscure the semantics of all but the simplest programs Recently, various attempts have been made to remedy the problems mentioned above.",
        "But to give up pattern matching, as in Icon7 or to resort to a less rich vocabulary of patterns, as in Poplarll(despite which, the latter language has a good deal of merit), is to \"discard the baby with the bathwater\".",
        "Post-X is the result of attempts to extend pattern matching and to improve it, at the same time providing a more natural, flexible and comprehensible linguistic vehicle."
      ]
    }
  ]
}
