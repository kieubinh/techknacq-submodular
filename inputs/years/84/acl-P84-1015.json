{
  "info": {
    "authors": [
      "Marco A. Clemente-Salazar"
    ],
    "book": "International Conference on Computational Linguistics and Annual Meeting of the Association for Computational Linguistics",
    "id": "acl-P84-1015",
    "title": "Uses of C-Graphs in a Prototype for Altomatic Twislation",
    "url": "https://aclweb.org/anthology/P84-1015",
    "year": 1984
  },
  "references": [],
  "sections": [
    {
      "text": [
        "This paper presents a prototype, not completely operational, that is intended to use c-graphs in the translation of assemblers.",
        "Firstly, the formalization of the structure and its principal notions (substructures, classes of substructures, order, etc.)",
        "are presented.",
        "Next section describes the prototype which is based on a Transformational System as well as on a rewriting system of c-graphs which constitutes the nodes of the Transformational System.",
        "The following part discusses a set of operations on the structure.",
        "Finally, the implementation in its present state is shown.",
        "1.",
        "INTRODUCTION.",
        "In the past [10,11], several kinds of representation have been used (strings, labelled trees, trees with \"decorations\", graphs of strings and (semantic) networks).",
        "C-graphs had its origin as an alternative in the representation and in the treatment of ambiguities in Automatic Translation.",
        "In earlier papers (4,5) this structure is named E-graph but c-graph is better suited since it is a generalized \"grafo de cadenas\" (graph of strings).",
        "This structure combines some advantages of the Q-systems ID and of the trees of AR1ANE-78 (1,2,11), in particular, the use of only one structure for all the translation process (as in the former) and foreseeable decidability and parallelism (as in the latter).",
        "This paper presents a prototype, not completely operational, that uses c-graphs and is intended to translate assemblers to refine the adequacy of this kind of structure in the translation of natural languages."
      ]
    },
    {
      "heading": "2. DEFINITIONS",
      "text": [
        "C-graph.",
        "A c-graph G is a cycle free,labelled graph [1,9] without isolated nodes and with exactly one entry node and one exit node.",
        "It is completely determined by a 7-tuple: G.(A,S,0,1,0,E,c), where A is a set of arcs, S a set of nodes, p a mapping of A into SxS, I the input node, 0 the output node, E a set of labels (c-trees, c-graphs) and c a mapping of A into E. For the sake of simplicity, arcs and labels will be merged in the representation of",
        "C-trees.",
        "A c-tree or a tree with decorations is an ordered tree, with nodes labelled by a label and a decoration that is itself a decorated tree, possibly empty.",
        "Classes of c-qraphs.",
        "There are three major classes: (1) recursive c-graphs (cf. Fig.3a) where each arc is labelled by a c-graph; (2) simple c-graphs (cf. Fig.1) where each arc is labelled by a c-tree and (3) regular c-graphs, a proper subclass of the second that is obtained by concatenation and alternation of simple arcs (cf. Fig.3b).",
        "By denoting concatenation by \".\" and alternation by \"+\", we have an evident linear representation.",
        "For example, G4=g+i.(j+k).",
        "Note that not every c-graph may be obtained by these operations, e.g.G.",
        "Substructures.",
        "For the sake of homogeneity, the only substructures allowed are those that are themselves c-graphs.",
        "They will be called sub",
        "-c-graphs or seg's. For example, GI and G2 are seg's of G.",
        "lsolatability.",
        "It is a feature that determines, for each c-graph G, several classes of seg's An isolated seg G' is intuitively a seg that has no arcs that \"enter\" or that \"leave\" G'.",
        "Depending on the relation that each isolated seg keeps with the rest of the c-graph, several classes of isolatabil-ity can be defined.",
        "a) Weak isolatability.",
        "A seg G' of G is weakly isolatable (segif) if and only if for every node x of G' (except l' and 0'), all of the arcs that leave or enter x are in G'.",
        "E.g.: G5=i is a segif of G. b) Normal isolatability.",
        "A seg G' of G is normaly isolatable (segmi) if and only if it is a segif and there is a path, not in G', such that it leaves l' and enters 0'.",
        "Example: G6=k is a segmi of G.",
        "c) Strong isolatability.",
        "A seg G' of G is strongly isolatable (segfi) if and only if the only node that has entering arcs not in G' is I' and the only node that has leaving arcs not in G' is 0'.",
        "When G' is not an arc and there is no segfi contained strictly in G', then G' is an \"elementary segfi\"; if G contains no segfi, then G.is elementary.",
        "E.g. G4 is a segfi of G. Order and roads.",
        "Two order relations are considered: (1) a \"vertical\" order or linear order of the arcs having the same initial node and (2) a \"horizontal\" order or partial order between two arcs on the same path.",
        "A road is a path from I to 0 Vertical order induces a linear order on roads."
      ]
    },
    {
      "heading": "3. DEFINITION OF THE PROTOTYPE.",
      "text": [
        "The prototype consists of a model and a data structure.",
        "The model is essentially a generalization of a Transformational System (TS) analogous to ROBRA EU and whose grammars are rewriting systems of c-graphs (RSC) 0,5,6].",
        "Regarding data structure, we use câ€¢graphs."
      ]
    },
    {
      "heading": "3.1 A Transformational System.",
      "text": [
        "This IS is a c-graph-oc-graph transducer.",
        "It is a \"control\" graph whose nodes are R5C and the arcs are labelled by conditions.",
        "A IS is a cycle free oriented graph, with only one input and such that,",
        "(1) Each node is labelled with a R5C or Enul.",
        "(2) Snul has no successor.",
        "(3) Each grammar of the R$C has a transition scheme S or c (empty scheme).",
        "(4) Arcs of the same initial node are ordered.",
        "T5 works heuristically.",
        "Given a c-graph go as an input, it searches for the first path ending in Snul.",
        "This fact implies that all of the transition schemes on the path were satisfied.",
        "Any scheme not satisfied provokes a search of a new path.",
        "For example, if Si is satisfied, IS produces Gl(gn)=g1 and it proceeds to calculate G2(G1(90))=g2.",
        "If 54 is satisfied the system stops and produces g2.",
        "Otherwise, it backtracks to GI and tests S2.",
        "If it is satisfied gl is produced.",
        "Otherwise, it tests 53' etc."
      ]
    },
    {
      "heading": "Fig.4. A Transformational System.",
      "text": []
    },
    {
      "heading": "3.2 A REWRITING SYSTEM.",
      "text": [
        "Let us consider a simple example: let GR be the following grammar for syntactic analysis (with",
        "As we can see, each rule has: a name (R1,R2, ...), a left side and a right side.",
        "The left side defines the geometrical form",
        "and the condition that an actual seg must meet in order to be transformed.",
        "It is a c-graph scheme composed of two parts: the structural descriptor that defines the geometrical form and the condition (between slashes) that tests label information.",
        "The first part use \"*\" as an \"element of structural de-scription\" in the first rule.",
        "It denotes the fact that no seg must be right-concatenated to g3+a2+g4.",
        "The right side defines the transformation to be done.",
        "It consists of a structural descriptor, similar to the one on the left side and a list of label assignments (also between slashes) where for each new label we precise the values it takes; and for each old one, its possible modifications.",
        "A point ends the rule.",
        "Note the properties of an empty g: if g' is any c-graph, then g.g1=g and g+gl=g1.",
        "Let us analyze the phrase: \"Ana lista la ti-ra\".",
        "The representation in our formalism is 67.",
        "Morphological analysis produces 68.",
        "Note that all ambiguities are kept in the same structure in the form of parallel arcs.",
        "The application of GR to 68 results in 69, where each arc will be labelled with a c-tree with a possible interpretation of 68 in grammar GR.",
        "The sequence of applications is R3, R6, R5, R1, R2, R4.",
        "The system stops when.no more rules are applicable.",
        "610= Factorization.",
        "There are two kinds and their results may differ.",
        "Consider G11=a.b+a.c+d.e+d.f+ g.f+h.e.",
        "Left factorization produces G12=a.",
        "(b+c)+ d.(e+f)+g.f+h.e, and right factorization 613=a.b+ a.c+(d+h).e+(d+g).f.",
        "Arborization.",
        "This operation constructs a c-tree from a c-graph.",
        "There may be several kinds of c-trees that can be constructed but we search for a tree that keeps vertical and horizontal orders, i.e. one that codes the structure of the c-graph.",
        "An \"and-or\" (y-o) tree is well suited for this purpose.",
        "The result of the operation will be a c-graph with one and only one arc labelled by the and-or tree.",
        "For example, arb(G)=G14 (cf.",
        "Fig.",
        "7).",
        "Note that the non-regular seg has a as a root.",
        "Regular seg's have o.",
        "G15=g+(m+n):(j+k).",
        "Addition.",
        "This operation inserts a c-graph G' into another, G, by merging two distinct nodes (x, y) of G with the input and output of G'.",
        "Addition requires only that insertion does not produce cycles.",
        "Note that if (1,0) are taken as a couple of nodes, we have alternation.",
        "Example, let (2,3) be a couple of nodes of G16 and take G'=G17=s+u.",
        "The resulting c-graph is G18.",
        "G16"
      ]
    },
    {
      "heading": "Fig.8. Addition of a c-graph.",
      "text": [
        "Erasing.",
        "This eliminates a substructure G' of a c-graph G. Erasing may destroy the structure even if we work with isolated seg's. Consequently, it is only defined on particular classes of seg's, namely segfi's and segmi's. For any other substructure, we eliminate the smaller segmi that contains it.",
        "A special case constitutes a segfi G' such that I and 0 do not belong to G'.",
        "Eliminating G' in such a case produces two non-connecting nodes in the c-graph that we have chosen to merge to preserve homogeneity.",
        "Example: let us take G and G'= GIO, then the result of erasing GIO from G is G19= 02.04."
      ]
    },
    {
      "heading": "4. IMPLEMENTATION.",
      "text": [
        "A small system has been programmed in PROLOG 141 (mainly operations) and in PASCAL (TS and RSC).",
        "For the first approach, we chose regular c-graphs to work with, since there is always a string to represent a c-graph of this class.",
        "In its present state, the system has two parts: (1) the Transformational System including the rewriting system and (2) the set of local and global operations.",
        "The IS is interactive.",
        "It consists of an analyzer that verifies the structure of the IS given as a console input and of the TS proper.",
        "As data we have the console input and a segment composed of transition schemes.",
        "There are no finer controls for different modes of grammar execution.",
        "Regarding operations and from a methodological point of view, algorithms for c-graph treatment can be divided in two classes: (1) the one where we search for substructures and (2) the one where this search is not needed.",
        "Obviously, local operations belong to the first class, but among global operations, only concatenation, alternation and expansion belong to the second one.",
        "Detailed description of algorithms of this part of the system can be found in 141."
      ]
    },
    {
      "heading": "5. CONCLUSION.",
      "text": [
        "Once we have an operational version of the prototype, it is intended as a first approach to proceed to the translation of assemblers of the microprocessors available in our laboratory such as INTEL's 8085 or 8080 and MOTOROLA's 6800."
      ]
    },
    {
      "heading": "6. REFERENCES.",
      "text": []
    }
  ]
}
