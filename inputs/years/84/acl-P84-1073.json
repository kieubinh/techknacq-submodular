{
  "info": {
    "authors": [
      "Masaru Tomita"
    ],
    "book": "International Conference on Computational Linguistics and Annual Meeting of the Association for Computational Linguistics",
    "id": "acl-P84-1073",
    "title": "LR Parsers for Natural Languages",
    "url": "https://aclweb.org/anthology/P84-1073",
    "year": 1984
  },
  "references": [],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "MLR, an extended LA parser, is introduced, and its application to natural language parsing is discussed.",
        "An LA parser is a shift-reduce parser which is deterministically guided by a parsing table.",
        "A parsing table can be obtained automatically from a context-free phrase structure grammar.",
        "LR parsers cannot manage ambiguous grammars such as natural language grammars, because their parsing tables would have multiply-defined entries, which precludes deterministic parsing.",
        "MLR, however, can handle multiply-defined entries, using a dynamic programming method.",
        "When an input sentence is ambiguous, the MLR parser produces all possible parse trees without parsing any part of the input sentence more than once in the same way, despite the fact that the parser does not maintain a chart as in chart parsing.",
        "Our method also provides an elegant solution to the problem of multi-part-of speech words such as \"that\".",
        "The mul parser and its parsing table generator have been implemented at Carnegie-Mellon University."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "LA parsers [1, 2] have been developed originally for programming language of compilers.",
        "An LR parser is a shift.",
        "reduce parser which is deterministically guided by a parsing table indicating what action should be taken next.",
        "The parsing table can be obtained automatically from a context-free phrase structure grammar, using an algorithm first developed by DeRemer [5, 6].",
        "We do not describe the algorithm here, reffering the relder to Chapter 6 in Aho and Ullman [4].",
        "The LA parsers have seldom been used for Natural Language Processing probably because:",
        "1.",
        "It has been thought that natural languages are not context-free, whereas LA parsers can cleat only with context-free languages.",
        "2.",
        "Natural languages are ambiguous, while standard LA parsers can not handle ambiguous languages.",
        "The recent literature [8] shows that the belief \"natural languages are not context-free\" is not necessarily true, and there is no reason for us to give up the context-freedom of natural languages.",
        "We do not discuss on this matter further, considering the fact that even if natural languages are not context-free, a fairly comprehensive grammar for a subset of natural language sufficient for practical systems can be written in context-free phrase structure.",
        "Thus, our main concern is how to cope with the ambiguity of natural languages, and this concern is addressed in the following section."
      ]
    },
    {
      "heading": "2 LR parsers and Ambiguous Grammars",
      "text": [
        "If a given grammar is ambiguous,2 we cannot have a parsing table in which every entry is uniquely defined; at least one entry of its parsing table is multiply defined.",
        "It has been thought that, for LR parsers, multiple entries are fatal because they make deterministic parsing no longer possible.",
        "Alio et.",
        "al.",
        "[3] and Shieber [121 coped with this ambiguity problem by statically3 selecting one desired action out of multiple actions, and thus converting multiply-defined entries into uniquely-defined ones-With this approach, every input sentence has no more than one parse tree.",
        "This fact is desirable for programming languages.",
        "For natural languages, however, it is sometimes necessary for a parser to produce more than one parse tree.",
        "For example, consider the following short story.",
        "I saw the man with a telescope.",
        "He should have bought it at the department store.",
        "When the first sentence is read, there is absolutely no way to resolve the ambiguity4 at that time.",
        "The only action the system can take is to produce two parse trees and store them somewhere for later disambiguation.",
        "In contrast with Aho et.",
        "al.",
        "and Shieber, our approach is to extend LA parsers so that they can handle multiple entries and produce more than one parse tree if needed.",
        "We call the extended LA parsers MLR parsers.",
        "of different parses have in the chart parsing method [10,11].",
        "The idea should be made clear by the following example."
      ]
    },
    {
      "heading": "3 MLR Parsers",
      "text": [
        "An example grammar and its MLR parsing table produced by the construction algorithm are shown in fig. 1 and 2, respectively.",
        "The MLR parsing table construction algorithm is exactly the same as the algorithm for LR parsers.",
        "Only the difference is that an MLR parsing table may have multiple entries.",
        "Grammar symbols starting with \"*\" represent pre-terminals.",
        "\"sh n\" in the action table (the left part of the table) indicates the action \"shift one word from input buffer onto the stack, and go to state n\".",
        "\"re n\" indicates the action \"reduce constituents on the stack using rule n\".",
        "\"acc\" stands for the action \"accept\", and blank spaces represent \"en or\".",
        "Goto table (the right part of the table) decides to what state the parser should go after a reduce action.",
        "The exact definition and operation of LR parsers can be found in Aho and Ullman [4].",
        "We can see that there are two multiple entries in the table; on the rows of state 11 and 12 at the column of \"'prep\".",
        "As mentioned above, once a parsing table has multiple entries, deterministic parsing is no longer possible; some kind of non-determinism is necessary.",
        "We shall see that our dynamic programming approach, which is described below, is much more efficient than conventional breath-first or depth-first search, and makes MLR parsing feasible.",
        "Our approach is basically pseudo-parallelism (breath-first search).",
        "When a process encounters a multiple entry with n different actions, the process is split into n processes, and they are executed individually and parallelly.",
        "Each process is continued until either an \"error\" or an \"accept\" action is found.",
        "The processes are, however, synchronized in the following way: When a process \"shifts\" a word, it waits until all other processes \"shift\" the word.",
        "Intuitively, all processes always look at the same word.",
        "After all processes shift a word, the system may find that two or more processes are in the same state; that is, some processes have a common state number on the top of their stacks.",
        "These processes would do the exactly same thing until that common state number is popped from their stacks by some \"reduce\" action.",
        "In our parser, this common part is processed only once.",
        "As soon as two or more processes in a common state are found, they are combined into one process.",
        "This combining mechanism guarantees that any part of an input sentence is parsed no more than once in the same manner: This makes the parsing much more efficient than simple breath-first or depth-first search.",
        "Our method has the same effect in terms of parsing efficiency that posting and recognizing common subconstituents"
      ]
    },
    {
      "heading": "4 An Example",
      "text": [
        "In this section, we demonstrate, step by step, how our MLR parser processes the sentence: I SAW A MAN WITH A TELESCOPE using the grammar and the parsing table shown in fig 1 and 2.",
        "This sentence is ambiguous, and the parser should accept the sentence in two ways.",
        "Until the system finds a multiple entry, it behaves in the exact same manner as a conventional LR parser, as shown in fig 3-a below.",
        "The number on the top (rightmost) of the stack indicates the current state.",
        "Initially, the current state is 0.",
        "Since the parser is looking at the word \"I\", whose category is \"•n\", the next action \"shift and goto state 4\" is determined from the parsing table.",
        "The.",
        "parser takes the word \"I\" away from the input buffer, and pushes the preterminal \"•n\" onto the stack.",
        "The next word the parser is looking at is \"SAW\", whose category is \"•v\", and \"reduce using rule 3\" is determined as the next action.",
        "After reducing, the parser determines the current state, 2, by looking at the intersection of the row of state 0 and the column of \"NP\", and so on.",
        "At this point, the system finds a multiple entry with two different actions, \"reduce 7\" and \"chift 6\".",
        "Both actions are processed in parallel, as shown in fig 3-b.",
        "Here, the system finds that both processes have the common state number, 6, on the top of their stacks.",
        "It combines two processes into one, and operates as if there is only one process, US shown in fig 3-c.",
        "The action \"reduce 6\" pops the common state number 6, and the system can no longer operate the two processes as one.",
        "The two processes are, again, operated in parallel, as shown in fig",
        "Now, one of the two processes is finished by the action \"accept\".",
        "The other process is still continued, as shown in fig This process is also finished by the action \"accept\".",
        "The system has accepted the input sentence in both ways.",
        "It is important to note that any part of the input sentence, including the prepositional phrase \"WITH A TELESCOPE\", is parsed only once in the same way, without maintaining a chart."
      ]
    },
    {
      "heading": "5 Another Example",
      "text": [
        "Some English words belong to more than one grammatical category.",
        "When such a word is encountered, the MLR parsing table can immediately tell which of its categories are legal and which are not.",
        "When more than one of its categories are legal, the parser behaves as if a multiple entry were encountered.",
        "The idea should be-made clear by the following example.",
        "Consider the word \"that\" in the sentence: That information is important is doubtful.",
        "A sample grammar and its parsing table are shown in Fig. 4 and 5, respectively.",
        "Initially, the parser is at state 0.",
        "The first word \"that\" can be either \" 'der or \"that\", and the parsing table tells us that both categories are legal.",
        "Thus, the parser processes \"sh 5\" and \"sh 3\" in parallel, as shown below.",
        "At this point, the parser founds that both processes are in the same state, namely state 2, and they are combined as one process.",
        "(1) S --> NP VP (2) NP --> \"(let 'n (3) NP --> *n (4) NP --> 'that S (5) VP --> 'he *adj",
        "Finally, the sentence has been parsed in only one way.",
        "We emphasize again that, in spite of pseudo-parallelism, each part of the sentence was parsed only once in the same way."
      ]
    },
    {
      "heading": "6 Concluding Remarks",
      "text": [
        "The MLR parser and its parsing table generator have been implemented at Computer Science Department, Carnegie-Mellon University.",
        "The system is written in MACLISP and running on Tops-20.",
        "One good feature of an MLR parser (and of an LR parser) is that, even if the parser is to run on a small computer, the construction of the parsing table can be done on more powerful, larger computers.",
        "Once a parsing table is constructed, the execution time for parsing depends weakly on the number of productions or symbols in a grammar.",
        "Also, in spite of pseudo.",
        "parallelism, our MLR parsing is theoretically still deterministic.",
        "This is because the number of processes in our pseudo.",
        "parallelism never exceeds the number of states in the parsing table.",
        "One concern of our parser is whether the size of a parsing table remains tractable as the size of a grammar grows.",
        "Fig.",
        "6 shows the relationship between the complexity of a grammar and its LR parsing table (excerpt from Inoue [9])."
      ]
    },
    {
      "heading": "Fig. 6",
      "text": [
        "Although the example grammars above are for programming langauges, it seems that the size of a parsing table grows only in proportion to the size of its grammar and does not grow rapidly.",
        "Therefore, there is a hope that our MLR parsers can manage grammars with thousands of phrase structure rules, which would be generated by rule-schema and meta-rules for natural language in systems such as GPSG [7]."
      ]
    },
    {
      "heading": "Acknowledgements",
      "text": [
        "I would like to thank Takehiro Tokuda, Osamu Watanabe, Jaime Carbonell and Herb Simon for thoughtful comments on an earlier version of this"
      ]
    },
    {
      "heading": "Paper. References",
      "text": []
    }
  ]
}
