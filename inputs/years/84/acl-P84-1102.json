{
  "info": {
    "authors": [
      "Masaru Tornita"
    ],
    "book": "International Conference on Computational Linguistics and Annual Meeting of the Association for Computational Linguistics",
    "id": "acl-P84-1102",
    "title": "Disambiguating Grammatically Ambiguous Sentences by Asking",
    "url": "https://aclweb.org/anthology/P84-1102",
    "year": 1984
  },
  "references": [
    "acl-A83-1027"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "The problem addressed in this paper is to disambiguate grammatically ambiguous input sentences by asking the user, who need not be a computer specialist or a linguist, without showing any parse trees or phrase structure rules.",
        "Explanation List Comparison (ELC) is the technique that implements this process.",
        "It is applicable to all parsers which are based on phrase structure grammar, regardless of the parser implementation.",
        "An experimental system has been implemented at Carnegie-Mellon University, and it has been applied to English-Japanese machine translation at Kyoto University."
      ]
    },
    {
      "heading": "1. Introduction",
      "text": [
        "A large number of techniques using semantic information have been deve!oped to resolve natural language ambiguity.",
        "However, not all ambiguity problems can be solved by those techniques at the current state of art.",
        "Moreover, some sentences are absolutely ambiguous, that is, even a human cannot disambiguate them.",
        "Therefore, it is important tor the system to be capable of asking a user questions interactively to disambiguate a sentence.",
        "Here, we make an important condition that an user is neither a computer scientist nor a linguist.",
        "Thus, an user may not recognize any special terms or notations like a tree structure, phrase structure grammar, etc.",
        "The first system to disambiguate sentences by asking interactively is perhaps a program called \"disambiguator\" in Kay's MIND system [2].",
        "Although the disambiguation algorithm is not presented in [2], some basic ideas have been already implemented in the Kay's system2.",
        "In this paper, we shall only deal with grammatical ambiguity, or in other words, syntactic ambiguity.",
        "Other ambiguity problems, such as word-sense ambiguity and referential ambiguity, are excluded.",
        "Suppose a system is given the sentence: \"Mary saw a man with a telescope\"",
        "and the system has a phrase structure grammar including the following rules <a> - <9>:",
        "The system would produce two parse trees from the input sentence (I. using rules <b>,<c>,<g>,<d>,<f),<d>; II.",
        "using rules <a>,<c>,<g>,<e>,<d>,<D,<d>).",
        "The difference is whether the preposition phrase \"with a telescope\" qualifies the noun phrase \"a man\" or the sentence \"Mary saw a man\".",
        "This paper shall discuss on how to ask the use( to select his intended interpretation without showing any kind of tree structures or phrase structure grammar rules.",
        "Our desired question for that sentence is thus something like:",
        "1) The action \"Mary saw a man\" takes place \"with a telescope\" 2) \"a man\" is \"with a telescope\" NUMBER?",
        "The technique to implement this, which is described in the following sections, is called Explanation List Comparison."
      ]
    },
    {
      "heading": "2. Explanation List Comparison",
      "text": [
        "The basic idea is to attach an Explanation Template to each rule.",
        "For example, each of the rules <a> - <g> would have an explanation template as follows:",
        "Whenever a rule is employed to parse a sentence, an explanation is generated from its explanation template.",
        "Numbers in an explanation template indicate nth constituent of the right hand side of the rule.",
        "For instance, when the rule <f>",
        "telescope\"), the explanation \"(with) is a preposition of (a telescope)\" is generated.",
        "Whenever the system builds a parse tree, it also builds a list of explanations wnich are generated from explanation templates ot all rules employed.",
        "We refer to such a list as an explanation list.",
        "ihe explanation lists of the parse trees in the example above are:",
        "In order to disambiguate a sentence, the system only examines these Explanation Lists, but not parse trees themselves.",
        "This makes our method independent from internal representation of a cal se tree.",
        "Loosely speaking, when a system produces more than one parse tree, explanation lists of the trees are \"compared\" and the \"dilfereace\" is shown to the user.",
        "The user is, then, asked to select the correct alternative."
      ]
    },
    {
      "heading": "3. The revised version of ELC",
      "text": [
        "Unfortunately.",
        "the basic idea described in the preceding section does riot work quite well.",
        "For instance, the difference of the two explanation lists in our example is The action (Mary saw a man) takes place (with a telescope),",
        "1) The action (Mary saw a man) takes place (with a telescope) 2) (a man) is (with a telescope)",
        "Two refinement ideas, head and multiple explanations, are introduced to solve this problem."
      ]
    },
    {
      "heading": "3.1. Head",
      "text": [
        "We define head as a word or a minimal cluster of words which are syntactically dominant in a group and could have the same syntactic function as the whole group if they stood alone.",
        "For example, the head of \"VERY SMART PLAYERS IN NEW YORK\" is \"PLAYERS\", and the head of \"INCREDIBLY BEAUTIFUL\" is \"BEAUTIFUL\", but the head of \"I LOVE CATS\" is \"I LOVE CATS\" ilself.",
        "The idea is that, whenever the system shows a part of an input sentence to the user, only the head of it is shown.",
        "To implement this idea, each rule must have a head definition besides an explanation template, as follows.",
        "For instance, the head definition of the rule <b> says that the head cf the construction \"NP + VP + PP\" is a concatenation of the head of 1-st constituent (NP) and the head of 2-nd constituent (VP).",
        "The head of \"A GIRL with A RED BAG saw A GREEN TREE WITH a telescope\" is, therefore, \"A GIRL saw A TREE\", because the head of \"A GIRL with A RED BAG\" (NP) is \"A GIRL\" and the head of \"saw A GREEN TREE\" (VP) is \"saw A TREE\".",
        "In our example, the explanation",
        "because the head of \"saw a man with a telescope\" is \"saw a man\", and the head of \"a man with a telescope\" is \"a man\".",
        "The difference of the two alternatives are now: The action (Mary saw a man) take place (with a telescope); (Mary) is a subject of the action (saw a man), (a man) is (with a telescope);"
      ]
    },
    {
      "heading": "3.2. Multiple explanations",
      "text": [
        "In the example system we have discussed above, each rule generates exactly one explanation..",
        "In general, multiple explanations (including zero) can be generated by each rule.",
        "For example, rule <b>",
        "With the idea of head and multiple explanations, the system now produces the ideal question, as we shall see below."
      ]
    },
    {
      "heading": "3.3. Revised ELC",
      "text": [
        "To summarize, the system has a phrase structure grammar, and each rule is followed by a head definition followed by an arbitrary number of explanation templates.",
        "With the ideas of head and multiple explanation, the system builds the following two explanation lists from the sentence \"Mary saw a man with a telescope\".",
        "Alternative I.",
        "The difference between these two is The action (Mary saw a man) takes place (with a telescope) and (a man) is (with a telescope).",
        "Thus, the system can ask the ideal question:",
        "1) The action (Mary saw a man) takes place (with a telescope) 2) (a man) is (with a telescope)",
        "Number?"
      ]
    },
    {
      "heading": "4. More Complex Example",
      "text": [
        "The example in the preceding sections is somewhat oversimplified, in the sense that there are only two alternatives and only two explanation lists are compared.",
        "If there were three or more alternatives, comparing explanation lists would be not as easy as comparing just two.",
        "Consider the following example sentence: Mary saw a man in the park with a telescope.",
        "This serdence is ambiguous in 5 ways, and its 5 explanation lists are shown below.",
        "(the park) is (with a telescope) .",
        ".",
        "• No explanation list L in A contains more than one explanation in a Qlist.",
        "That is,",
        "The implementation of this is described in the following.",
        "We refer to the set of explanation lists to be compared, (L1, L2, ... as A.",
        "If the number of explanation lists in A is one ; just return the parsed tree which is associated with that explanation list.",
        "If there are more than one explanation list in A, the system makes a ()list (Question list).",
        "The ()list is a list of explanations",
        "()list must satisfy the following two conditions to make sure that always exactly one explanation is true.",
        "• Each explanation list L in A must contain at least one explanation e which is also in Olist.",
        "Mathematically, the following predicate must be satisfied.",
        "VL 3e(e EL A e E Qlist) This condition makes sure that at least one of explanations in a Qlist is true.",
        "A e G Quist A e' E Quist A ,e This condition makes sure that at most one of explanations in Qlist is true.",
        "The detailed algorithm of how to construct a Quist is presented in Appendix.",
        "Once a Quist is created, it is presented to the user.",
        "The user is asked to select one correct explanation in the Quist, called the key explanation.",
        "All explanation lists which do riot contain the key explanation are removed from A.",
        "If A still contains more than one explanation list, another Olist for this new A is created, and shown to the user.",
        "This process is repeated until A contain, only one explanation list."
      ]
    },
    {
      "heading": "5. Concluding Remarks",
      "text": [
        "An experimental system has been written in Maclisp, and running on Tops•20 at Computer Science Department, Carnegie-Mellon University.",
        "The system parses input sentences provided by a user according to grammar rules and a dictionary provided by a super user.",
        "The system, then, asks the user questions, if necessary, to disambiguate the sentence using the technique of Explanation List Comparison.",
        "The system finally produces only one parse tree of the sentence, which is the intended interpretation of the user.",
        "1 he parser is implemented in a bottom-up, breath-first manner, but the idea described in the paper is independent from the parser implementation and from any specific grammar or dictionary.",
        "The kind of ambiguity we have discussed is structural ambiguity.",
        "An ambiguity is structural when two different structures can be built up out of smaller constituents of the same given structure and type.",
        "On the other hand, an ambiguity is lexical when one word can serve as various parts of speech.",
        "Resolving lexical ambiguity is somewhat easier, and indeed, it is implemented in the system.",
        "As we can see in the Sample Runs below, the system first resolves lexical ambiguity in the obvious manner, if necessary.",
        "Recently, we have integrated our system into an English.",
        "Japanese Machine Translation system [3], as a first step toward user-friendly interactive machine translation [6].",
        "The interactive English Japanese machine translation system has been implemented at Kyoto University in Japan [4, 5]."
      ]
    },
    {
      "heading": "Acknowledgements",
      "text": [
        "I would like to thank Jaime Carbonell, Herb Simon, Martin Kay.",
        "Jun.ich Tsujii, Toyoaki Nishida, Shuji Doshita and Makoto Nagac for thoughtful comments on an earlier version of this paper."
      ]
    },
    {
      "heading": "Appendix A: Olist-Construction Algorithm",
      "text": [
        "input A:set of explanation lists output ()list : set of explanations local e : explanation",
        "3: Qlist 4: if U 0 then return Qlist 5: select one explanation e such that e is in some explanation list EU, but not in any explanation list GC; if no such e exists, return ERROR 6: Olist Olist + fe) 7: C=C + leEL AL EU) 8: U= {1.1e0L AL E(U)} 9: goto 4 • The input to this procedure is a set of explanation lists, {L L2, ... ).",
        "• The output of this procedure is a list of explanations, {e1' e2' en' ) such that each explanation list, L., contains exactly one explanation which is in the Quist.",
        "• An explanation list L is called covered, if some explanation e in L is also in Quist.",
        "L is called uncovered, if any of the explanations in L is not in Quist.",
        "C is a set of covered explanation lists in A, and U is a set of uncovered explanation lists in A.",
        "• 1-3: initialization.",
        "Let Olist be empty.",
        "All explanation lists in A are uncovered.",
        "• 4: if all explanation lists are covered, quit.",
        "• 5-6: select an explanation e and put it into Qlist to",
        "cover some of uncovered not explanation lists.",
        "e must be such that it does exist in any of covered explanation lists (if it does exist, the explanation list has two explanation in A, violating the Qlist condition).",
        "• 7.8: make uncovered explanation lists which are now covered by e to be covered.",
        "• 9: repeat the process until everything is covered."
      ]
    },
    {
      "heading": "References",
      "text": []
    },
    {
      "heading": "Appendix E3: Sample Runs",
      "text": []
    }
  ]
}
