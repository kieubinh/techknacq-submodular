{
  "info": {
    "authors": [
      "Sandiway Fong",
      "Robert C. Berwick"
    ],
    "book": "Annual Meeting of the Association for Computational Linguistics",
    "id": "acl-P85-1014",
    "title": "New Approaches to Parsing Conjunctions Using Prolog",
    "url": "https://aclweb.org/anthology/P85-1014",
    "year": 1985
  },
  "references": [
    "acl-J83-2002"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "Conjunctions are particularly difficult to parse in traditional, phrase-based grammars.",
        "This paper shows how a different representation, not based on tree structures, markedly improves the parsing problem for conjunctions.",
        "It modifies the union of phrase marker model proposed by Goodall [19841, where conjunction is considered as the lin-earization of a three-dimensional union of a non-tree based phrase marker representation.",
        "A rittot.OG grammar for conjunctions using this new approach is given.",
        "It is far simpler and more transparent than a recent phrase-based extra-position parser conjunctions by Dahl anti McCord [19841.",
        "Unlike the Dahl and McCord or ATN SYSCONJ approach, no special trail machinery is needed for conjunction, beyond that required for analyzing simple sentences.",
        "While of comparable efficiency, the new approach unifies tinder a single analysis a host of related constructions: respectively sentences, right node raising, or gapping.",
        "Another advantage is that it is also completely reversible (without cuts), and therefore can be used to generate sentences."
      ]
    },
    {
      "heading": "Introduction",
      "text": [
        "The problem addressed in this paper is to construct a grammatical device for handling coordination in natural language that is well founded in linguistic theory and yet computationally attractive.",
        "The linguistic theory should be powerful enough to describe all of the phenomenon in coordination, hut also constrained enough to reject all ungrammatical examples without undue complications.",
        "It is difficult to achieve such a line balance - especially since the term grammatical itself is highly subjective.",
        "Some examples of the kinds of phenomenon that must be handled are sh.e.vit in fig.",
        "The theory should also be amenable to computer implementation.",
        "For example, the represeulation of the phrase marker should be conducive to both clean process description anti efficient implementation of the associated operations as defined in the linguistic theory.",
        "John and Mary went to the pictures Simple constituent.",
        "coordination The fox and the hound lived in the fox hole and",
        "The goal of the computer implementation is to produce a device that can both generate surface sentences given a phrase marker representation and derive a phrase marker representation given a surface sentences.",
        "The implementation should be as efficient as possible whilst preserving the essential properties of the linguistic theory.",
        "We will present an implementation which is transparent to the grammar and perhaps cleaner 8: more modular than other systems such as the interpreter for the Modilier Structure Cram-mars (MSCs) of Dahl & McCord (19831.",
        "The MSG system will be compared with a simplified implementation of the proposed device.",
        "A table showing the execution time of both systems for sonic sample sentences will be presented.",
        "Furthermore, the advantages and disadvantages of our device will ba discussed in relation to the MSC implementation.",
        "Finally we can show how the simplified device can be extended to deal with the issues of extending the system to handle multiple conjuncts and strengthening the constraints of the system."
      ]
    },
    {
      "heading": "The RPM Representation",
      "text": [
        "The phrase marker representation used by the theory described in the next section is essentially that of the Reduced Phrase Marker (RPM) of Lasnik & Kupin (19771.",
        "A reduced phrase marker can be thought of as a set consisting of monostrings and a terminal string satisfying certain predicates.",
        "More formally, we have (fig.",
        "2) :- This representation of a phrase marker is equivalent to a proper subset of the more common syntactic tree representation.",
        "This means that some trees may not be representable by an RPM and all RPMs may be recast as trees.",
        "(For example, trees with shared nodes representing overlapping constituents are not allowed.)",
        "An example of",
        "This RPM representation forms the basis of the linguistic theory described in the next section.",
        "The set representation has some desirable advantages over a tree reptesentation in terms of both simplicity of description and implementation of the operations."
      ]
    },
    {
      "heading": "Goodall's Theory of Coordination",
      "text": [
        "Goodall's idea in his draft.",
        "thesis [Goodall??!",
        "was to extend the definition of Lasnik and Kupin's RPM to cover coordination.",
        "The main idea behind this theory is to apply the notion that coordination results From the union of phrase markers to the reduced phrase marker.",
        "Since RPNIs are sets, this has the desirable property that the union of RPMs would just be the familiar set union operation.",
        "For a computer implementation, the set union operation can be realized inexpensively.",
        "In contrast, the corresponding operation for trees would necessitate a much less simple and efficient union operation than set union.",
        "However, the original definition of the RPM did not envisage the union operation necessary for coordination.",
        "The RPM was used to represent 2-dimensional structure only.",
        "But under set union the RPM becomes a representation of 3-dimensional structure.",
        "The admissibility predicates dominates and precedes defined on a set of monostrings with a single non-terminal string were inadequate to describe 3-dimensional structure.",
        "Basically, Goodall's original idea was to extend the dominates and precedes predicates to handle RPMs under the set union operation.",
        "This resulted in the relations e-dominates and e-precedes as shown in fig. 4 :- Let E and N denote the set of terminals and non-terminals respectively.",
        "Let co, 0, x (E U N).",
        "Let x, y, z E Let A be a single non-terminal.",
        "Let P be an arbitrary set.",
        "Then co is a monostring w.r.t.",
        "& N if yo E E*.N.E'.",
        "Suppose p= xitz and that co, E P where P is a some set of strings.",
        "We can also define the following predicates :- y Ise yo in P if xyz E Pip dominates 1# in P if 0 = xxy.",
        "x 54 0 and x A. co precedes in P if 3y s.t.",
        "y isa* tp in P. ui = xyx and x A z.",
        "dominates co in P or ip dominates ti) in P or 0 precedes p in P or r precedes i in P.",
        "Assuming the definitions of fig. 2 and in addition let ta, 0, e E (EU N)* and q, r, s, t, v E V. then e-dominates in P if dominates tit' in P. xxca = 01. eyfl = and y in P. e-precedes ik in P if y Ise* 9::• in P. v in P. qyr svt in P. y 0 qyr and v svt where the relation LI (terminal equivalence) is defined as :- z y in P if xxn, E P and xyto E P",
        "This extended definition, in particular - the notion of equivalence forms the basis of the computational device described in the next section.",
        "However since the size of the RPM may be large, a direct implementation of the above definition of equivalence is not computationally feasible.",
        "In the actual system, an optimized but.",
        "equivalent alternative definition is used.",
        "Although these definitions suffice for most examples of coordination, it is not sufficiently constrained enough to reject some ungrammatical examples.",
        "For example, fig. 5 gives the RPM representation of \"John sang loudly and a carol\" in terms of the union of the RPMs for the two constituent sentences :- The above example indicates that the extended RPM definition of Goodall allows some ungrammatical sentences to slip through.",
        "Although the device presented in the next section doesn't make direct use of the extended definitions, the notion of equivalence is central to the implementation.",
        "The basic system described in the next section does have this deficiency but a less simplistic version described later is more constrained - at the cost of some computational efficiency."
      ]
    },
    {
      "heading": "Linearization and Equivalence",
      "text": [
        "Although a theory of coordination has been described in the previous sections - in order for the theory to be put into practice, there remain two important questions to be answered :-",
        "• How to produce surface strings from a set of sentences to be conjoined?",
        "• How to produce a set of simple sentences (i.e. sentences without conjunctions) from a conjoined surface string?",
        "This section will show that the processes of lin-earization and finding equivalences provide an answer to both questions.",
        "For simplicity in the following discussion, we assume that the number of simple sentences to be conjoined is two only.",
        "The processes of linearization and finding equiva-Ipnces for generation can be defined as :-",
        "(When these two ItIlvta are merged some of the elements of the set do not satisfy Lasnik Kupin's original definition - these pairs are :-) {John.sang.londly.",
        "John sang.a.carol} {John.V.Ioudly.",
        "John.V.a.carol} {NP.sang.loudly.",
        "NP.sang.a.carol} (None of the above pairs satisfy the e-dominates predicate - but they all satisfy e-precedes and hence the seriLCI We IN accepted as au IIPM.)",
        "Fig.5: An example of union of RPMs Given a set of sentences and a set of candidates which represent the set of conjoinable pairs for those sentences, linearization will output one or more surface strings according to a fixed procedure.",
        "Given a set of sentences, finding equivalences will produce a set of conjoinable pairs according to the definition of equivalence of the linguistic theory.",
        "For generation the second process (finding equivalences) is called first to generate a set of candidates which is then used in the first process (linearization) to generate the surface strings.",
        "For parsing, the definitions still hold - but the processes are applied in reverse order.",
        "To illustrate the procedure for linearization, consider the following example of a set of simple sentences (fig.",
        "6)",
        "( John liked ice-cream.",
        "Mary liked chocolate) Mt of simple sentences ((John.",
        "Mary).",
        "{ice-cream.",
        "chocolate}} set of ennjoinable pairs tational resources in not having to compare every element of the set with every other element to generate all possible equivalent strings - which would take 0(n2) time - where n is the cardinality of the set.",
        "The corresponding term for the modified definition (given in the next section) is 0(1)."
      ]
    },
    {
      "heading": "The Implementation in Prolog",
      "text": [
        "This section describes a runnable specification written in Prolog.",
        "The specification described also forms the basis for comparison with the MSG interpreter of Dahl and McCord.",
        "The syntax of the clauses to be presented is similar to the Dec-10 Prolog [Bowen et a1.19821 version.",
        "The main differences are :-",
        "• The symbols \":-\" and \",\" have been replaced by the more meaningful reserved words \"if' and \"and\" respectively.",
        "• The symbol \".\" is used as the list constructor and \"nil\" is used to represent the empty list.",
        "• Au an example, a Prolog clause may have the form :- a(X Y Z) if b(U V ... W) and c(R S T)",
        "where a,b c are predicate names and R,S,...,Z may represent variables, constants or terms.",
        "(Variables are distinguished by capitalization of the first character in the variable name.)",
        "The intended logical reading of the clause is :- \"a\" holds if \"b\" and \"c\" both hold for consistent bindings of the arguments X,Y,...,Z, U,V,...,W, R,S,...,T",
        "• Comments (shown in italics) may be interspersed between the arguments in a clause.",
        "The procedure of linearization would take the following path shown by the arrows in fig. 8 :-",
        "Following the path shown we obtain the surface string John and Mary liked ice-cream and chocolate.",
        "The set of conjoinable pairs is produced by the process of finding equivalences.",
        "The definition of equivalence as given in the description of the extended RPM requires the generation of the combined RPM of the constituent sentences.",
        "However it can be shown [Vong?",
        "?1 by considering the constraints imposed by the definitions of equivalence and linearization, that the same set of equivalent terminal strings can be produced just by using the terminal strings of the RPM alone.",
        "There are considerable savings of compu"
      ]
    },
    {
      "heading": "Parse and Generate",
      "text": [
        "In the previous section the processes of linearization and finding equivalences are described as the two components necessary for parsing and generating conjoined sentences.",
        "We will show how these processes can be combined to produce a parser and a generator.",
        "The device used for comparison with Dahl At McCord sclwine is a simplified version of the device presented in this section.",
        "First, difference lists are used to represent strings in the following sections.",
        "For example, the pair (fig.",
        "9) :-",
        "is a difference list representation of the sentence \"John liked ice-cream\".",
        "We can now introduce two predicates linearize and equivalentpairs which correspond to the processes of linearization and finding equivalences respectively (fig.",
        "10) :- linearize( pairs Si El and S2 E2 candidates Set gives Sentence) Linearize holds when a pair of difference lists ((Si.",
        "Ell St (S2.",
        "E2}) trid a set of candidates (Set) are consistent with the string (Sentence) as defined by the procedure given in the previous section.",
        "Equivalentpairs holds when a substring X of Si is equivalent, to a substring Y ofS2 according to the definition of equivalence in the linguistic theory.",
        "The definitions for parsing and generating are almost logically equivalent.",
        "llowever the sub-goals for parsing arc in reverse order to the sub-goals for generating - since the Prolog interpreter would attempt to solve the sub-goals in a left to right manner.",
        "Furthermore, the subset relation rather than set equality is used in the definition for parsing.",
        "We can interpret the two definitions as follows (fig.",
        "12) :- Generate holds when Sentence is the conjoined sentence resulting from the linearization of the pair of difference lists (Si.",
        "nil) and (S2.",
        "nil) using as candidate pairs for conjoining, the set of non-redundant pairs of equivalent terminal strings (Set).",
        "Parse holds when Sentence is the conjoined sentence resulting from the linearization of the pair of difference lists (Si.",
        "El) and (S2.",
        "E2) provided that the set of candidate pairs for conjoining (Subset) is a subset of the set of pairs or equivalent terminal strings (Set).",
        "Fig 12: Logical reading for generate & parse Fig 10: Predicates linearize de equivalentpairs Additionally, let the meta-logical predicate setof as in \"setof(Element Goal Set)\" hold when Set is composed of eleivents of the form Element and that Set contains all in.tt ances of Element that satisfy the goal Goal.",
        "The predicates generate can now be defined in terms of these two processes as follows (lig.",
        "it)",
        "The subset relation is needed for the above definition of parsing because it can be ,-,hown [Fong?",
        "?1 that the process of linearization is more constrained (in terms of the permissible conjoinable pairs) than the process of finding equivalences."
      ]
    },
    {
      "heading": "Linearize",
      "text": [
        "We can also fashion a logic specification for the process of linearization in the same manner.",
        "In this section we will describe the cases corresponding to each Prolog clause necessary in the specification of linearization.",
        "However, or simplicity the actual Prolog code is not shown here.",
        "(See Appendix A for the definition of predicate linearize.)",
        "In the following discussion we assume that the template for predicate linearize has the form \"linearize( pairs Si El and S2 E2 candidates Set gives Sentence)\" shown previously in fig. 10.",
        "There are three independent cases to conttider durieg linearization :-"
      ]
    },
    {
      "heading": "I. The Base Case.",
      "text": [
        "If the two difference lists ({St. El} 14 (S2.",
        "E2}) are both empty then the conjoined string (Sentence) is also empty.",
        "This simply states that if two empty strings are conjoined then the result is also an empty string."
      ]
    },
    {
      "heading": "2. Identical Leading Substrings.",
      "text": [
        "The second case occurs when the two (non-empty) difference lists have identical leading non-empty sub-strings.",
        "Then the conjoined string is identical to the concatenation of that leading substring with the linearization of the rest of the two difference lists.",
        "For example, consider the linearization of the two fragments \"likes Mary\" and \"likes Jill\" as shown in fig. 13"
      ]
    },
    {
      "heading": "{John likes Mary. Bill likes Jill)",
      "text": [
        "Given that the selected candidate pair is {John.",
        "Sillthe coojo;ued is :- All of the strings are then passed to the predicate findequivalenees which should pick out the second pair of strings as the only grammatically correct linearization."
      ]
    },
    {
      "heading": "Finding Equivalences",
      "text": [
        "Goodall's definition of equivalence was that two terminal strings were said to be equivalent if they had the same left and right contexts.",
        "Furthermore we had previously asserted that the equivalent pairs could be produced without searching the whole 11.1)M. For example consider the equivalent terminal strings in the two sentences \"Alice saw Bill\" and \"Mary saw Bill\" (fig.",
        "16) :- {John and Bill X} where X is the linearization of strings (likes Mary.",
        "likes Jill)"
      ]
    },
    {
      "heading": "Vig. 14: Exampie of eoupnuing sub strings",
      "text": [
        "There are Sallie 11111)1ffilielliatiffil details that are different fer parsing to generating.",
        "(Sec appendix A.)",
        "However the three Cases are the sante for both.",
        "We can illustrate the above definition by showing",
        "• If there exists two terminal strings X & Y such that X=xxf1 & Y=xyfl, then x & fl should be the strongest possible left & right contexts respectively - provided x & y are both nonempty.",
        "In the above example, x=nil and fl=\"saw Bill\", so the first and the third pairs produccd are redundant.",
        "In general, a pair or terminal strings are redundant if they have the form (uv, uw) or (uv, xv), in which case - they may be replaced by the pairs (v, w) and (u, x) respectively.",
        "• In Goodall's definition any two terminal strings themselves are also a pair of equivalent terminal strings (when x & n are both null).",
        "We exclude this case as it produces simple string concatenation of sentences.",
        "The above restrictions imply that in fig. 16 the only remaining equivalent pair ({Alice.",
        "Mary })is the correct one for this example.",
        "However, before finding equivalent.",
        "pairs for two simple sentences, the process of finding equivalences must check that the two sentences are actually grammatical.",
        "We assume that a recognizer/parser (e.g. a predicate parse(S E)) already exists for determining the grammaticality of simple sentences.",
        "Since the process only requires a yes/no answer to grammaticality, any parsing or recognition system for simple sentences can be used.",
        "We can now specify a predicate findcandidates(X Y Si S2) that holds when (X. Y1 is an equivalent pair from the two grammatical simple sentences (SI.",
        "S21 as Mows (lig.",
        "17) :- findcandidates(X and Y in St end S2) if parse(S1 nil) and parse(S2 nil) and equiv(X Y Si S2) where equiv is defined as",
        "• tiv(X Y XI Vi)",
        "if appern13(Clii X Omega X1) and terminals(X) and appent13(C.Iii Y Omega Y1) and ternainals(Y)",
        "Then the predicate findequivalenees is simply defined aZi (fig.",
        "18) :- findequivalences(X and Y in Si and 52) if findcandidates(X and Y in Si and S2) and nut redundant(X Y) where redundant implements the two restrictions described ."
      ]
    },
    {
      "heading": "Comparison with MSGs",
      "text": [
        "The following table (fig.",
        "19) gives the execution times in milliseconds for the parsing of sonic sample sentences mostly taken from Dahl At.",
        "McCord [19831.",
        "Both systems were executed using Dec-20 Prolog.",
        "The times shown for the MSG interpreter is based on the time taken to parse and build the syntactic tree only - the tune for the subsequent tiansformations was not included.",
        "Sample MSG RPM I sentences system device I Each 11001 ate an apple and a pear 662 292 John ate an apple and a pear 613 233 A man and a woman saw earl, train 319 506 Each num awl each woman ate 320 503 1 an apple i John saw and the woman heard 788 834 A man that laughed John dr(we the car through and 275 1032 completely demolished a window The W0111:01 who gave a hook to 1007 3375 John mill drove a ear through a t wilt'low laughed .1‘ 4111 SAW 1.",
        "Ile MALI that Mary saw ,139 311 I and Bill gave a hook to laughed i John saw the man that heard the 636 323 i woman that laughed and saw Bill 1 – The it that Mary saw and heard 501.",
        "082 !",
        ".",
        "gave an appie to each Womilli I 1 John saw a and Mary saw the red 726 770 I pear",
        "From the timings we can conclude that the pro-poxed device is comparable to the MS(1 system in terms of computational efficiency.",
        "however, there are some other advantages such as :- • Transparency of the grammar - There is no need for phrasal rules such as \"S S and S\".",
        "The device also allows non-phrasal conjunction.",
        "• Since no special grammar or particular phrase marker representation is required, any parser can be used - the device only requires an accLpt/reject answer.",
        "• The specification is not biased with respect to parsing or generation.",
        "The implementation is reversible allowing it to generate any sentence it can parse and vice versa.",
        "• Modularity of the device.",
        "The grammaticality of sentences with conjunction is determined by the definition of equivalence.",
        "For instance, if needed we can filter the equivalent terminals using semantics.",
        "A Note on SYSCONJ It is worthwhile to compare the phrase marker approach to the ATN-based SYSCONJ mechanism.",
        "Like SYSCONJ, our analysis is extragrammatical: we do not tamper with the basic grammar, but add a new component that handles conjunction.",
        "Unlike SYSCONJ, our approach is based on a precise definition of \"equivalent phrases\" that attempts to unify under one analysis many different types of coordination phenomena.",
        "SYSr.ONJ relied on a rather complicated, interrupt-driven method that restarted sentence analysis in some previously recorded machine configuration, but with the input sequence following the conjunction.",
        "This captures part of the \"multiple planes\" analysis of the phrase marker approach, but without a precise notion of equivalent phrases.",
        "Perhaps as a result, SYSCONJ handled only ordinary conjunction, and not respectively or gapping readings.",
        "In our apprmich, a simple change to the linearization process allows u, te handle gapping."
      ]
    },
    {
      "heading": "Extensions to the Basic Device",
      "text": [
        "The device described in the previous section is a simplified version for rough comparison with the MSC: interpreter.",
        "However, the system can easily he generalized to handle multiple conjuncts.",
        "The only additional phase required is to generate templates for multiple readings.",
        "Also, gapping can he handled just.",
        "by adding clauses to the definition of linearize - which allows a different path from that of fig. 8 to he taken.",
        "The simplified device permits smite examples of un-grdnintatical sentences to he pared as if corr-ct (lig.",
        "5).",
        "The modularity of the system allows us to constrain the definition of equivalence still further.",
        "The extended definitions in (ftioilall's draft theory were not included in his thesis f:ooda11841 presumably because it was not constrained enough.",
        "However in his thesis he proposes another definition of grammaticality using RPMs.",
        "This definition can be used to constrain equivalence still further in our system at a loss of some efficiency and generality.",
        "For example, the requireil :1.11dition al predicate will need to make explicit.",
        "use of the coinhined RPM.",
        "Therefore, a parser will need to produce a RPM representation as its phrase marker.",
        "The modifications necessary to produce the representation is shown in appendix B."
      ]
    },
    {
      "heading": "Acknowledgements",
      "text": [
        "This work describes research clone at the Artificial Intelligence Laboratory of the Massachusetts Institute of Technology.",
        "Support for the Laboratory's artificial intelligence research has been provided in part by the Advanced Research Projects Agency of the Department of Defense under Office of Naval Research contract N00011-80-C-0505.",
        "The first author is also funded by a scholarship from the Kennedy Memorial Trust."
      ]
    },
    {
      "heading": "References",
      "text": []
    },
    {
      "heading": "Appendix A: Linearization",
      "text": [
        "The full Prolog specification for the predicate linearize is given below.",
        "/ Linearize for generation / / terrninatiny roudition /"
      ]
    },
    {
      "heading": "litivarizv(pairs SI SI and 52 52",
      "text": [
        "candidates List giving nil) if iiimvar(List) / a/in/lea/de when me have a ronmon sabstring /",
        "and not same(til as El) and not.",
        "satne(52 as E2)",
        "and similar(S1 to S2 common Similar) and not same(Similar as nil) and reinove(Sitnilar from Si leaving NewS1) and remove(Similar from S2 leaving NewS2) and linearize(pairs NewS1 El and NewS2 E2",
        "and riot same(S2 as E2) and rernove(Cand l from Si leaving NewS1) and remove(C.and2 from S2 leaving NewS2) and conjoin(list Canill.",
        "( and2.nil using 'and' giving Conjoined) and delete(Cand I.Cand2.nil from List, leaving NewList) and linearize(pairs NewS1 El and NewS2 E2"
      ]
    },
    {
      "heading": "rititill■ba /IS Ell.1111.111.11.1•St. giving Senimice)",
      "text": [
        "if ii ti and Apinlid.",
        "(( onjoitiell to RestOL-fentence giving Sentence) and i•onjoillUisi asiny 'and' lianty ( onjoined) and .-41trie(Elettlent its C:11111 and not ::iint•(( arlit 1 as nil) and not :aine((alid2 as nil) and linearizetrairs NewS I nil anti New52 nil v'ijasli II sit l!..1 yvviny Resi Otsentenef.)",
        "arid ,,00end(( 'ainll New5I Si) and apperell.",
        "( 'aii•12 Ncw52 52) / appear/ ' a .special form of alpentl .mels that",
        ".ters to each granunar ruh.",
        "together with a call to a con-eaten:164in saltine.",
        "For 4'X:1riu*.",
        "consider the verb plira.se \"liked Mary\" from the simple sentence \"John liked Mary\".",
        "The nionos-tring corresponding to the non-terminal VP is constructed by taking the left.",
        "an•I right contexts of \"liked Mary and placing the nfon-terniinal sylithol VP inhetween them.",
        "In general, we have SI finetiting of the form :- phrase( from Pointl to Point2 using Start to End g iviny MS.RPM) if isphrase(Pointl to Point2 RPM) and binklmonostring(Start Pointl plus 'VP' Point2 End MS) where difference pairs {Start.",
        "Pointl (Point2.",
        "End} and"
      ]
    }
  ]
}
