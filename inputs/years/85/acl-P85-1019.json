{
  "info": {
    "authors": [
      "Philip J. Hayes",
      "Peggy M. Andersen",
      "Scott Safier"
    ],
    "book": "Annual Meeting of the Association for Computational Linguistics",
    "id": "acl-P85-1019",
    "title": "Semantic Caseframe Parsing and Syntactic Generality",
    "url": "https://aclweb.org/anthology/P85-1019",
    "year": 1985
  },
  "references": [
    "acl-A83-1006",
    "acl-J80-1001",
    "acl-J83-3001"
  ],
  "sections": [
    {
      "text": [
        "Commerce Court at Station Square Pittsburgh.",
        "PA 15219 USA"
      ]
    },
    {
      "heading": "Abstract",
      "text": [
        "We have implemented a restricted domain parser called Plume.",
        "7\" Building on previous work at Carnegie-Mellon University e.g. [4.",
        "5, 91, Plume s approacri to parsing IS based on semantic Caseframe Instantiation This nas the advantages of efficiency on grammatical Input, and robustness in the face of ungrammatical input While Plume is well adapted to simple declarative and imperative utterances, it handles passives relative clauses and interrogatives in an ad hoc manner leading to patchy syntactic coverage This paper outlines Plume as it currently exists and describes our detailed design for extending Plume to handle passives relative clauses, and interrogatives in a general manner"
      ]
    },
    {
      "heading": "1. The Plume Parser",
      "text": [
        "Recent work at Carnegie-Mellon University e.g. 14.",
        "5] has shown semantic caseframe instantiation to be a highly robust and efficient method of parsing restricted domain input.",
        "In this approach to parsing.",
        "a caseframe grammar contains the domain-specific semantic information.",
        "and the parsing program contains general syntactic knowledge.",
        "Input is mapped onto the grammar using this built-In syntactic knowledge We have chosen this approach for Plume7m commercial restricted domain parser.",
        "because of its advantages in efficiency and robustness.",
        "Let us take a simple example from a natural language interface.",
        "called NLVMS.",
        "that we are developing under a contract with Digital Equipment Corporation NLVMS is an interface to Digital's VMS operating system for '/AX computers.",
        "The Plume grammar for this interface contains the following semantic caseframe2 corresponding to the copy command of VMS:",
        ":marker to I into I in I onto) This defines a caseframe.",
        "called 'copy with three cases: file-to-copy, source.",
        "and destination The file-to-copy case is filled by an obiect of type 'file' and appears in the input as a direct obiect Source is filled by a 'directory' and should appear in the input as a prepositional phrase preceded or marked by the prepositions \"from' or 'out of\" Destination is filled by a file • or 'directory' and is marked by \"to\".",
        "\"into\".",
        "or \"onto\" Finally the copy command itself is recognized by the header word indicated above (by header) as \"copy\".",
        "Using this caseframe.",
        "Plume can parse ,nputs like:",
        "In essence.",
        "Plume's parsing algorithm is to find a caseframe header.",
        "in this case \"copy\".",
        "and use the associated caseframe, 'copy'.",
        "to guide the rest of the parse.",
        "Once the caseframe has been identified.",
        "Plume looks for case markers, and then parses the associated case filler directly following the marker Plume also tries to parse positionally specified cases, like direct object.",
        "in the usual position in the sentence - immediately following the header for direct object.",
        "Any input not accounted for at the end of this procedure is matched against any unfilled CaSes, so that cases that are supposed to be marked can be recognized without their markers and positionally indicated cases can be recognized out of their usual positions.",
        "This flexible.",
        "interpretive style of matching caseframes against the input allows Plume to deal with the kind of variation in word order illustrated in the examples above.",
        "The above examples implied there was some method to recognize files and directories.",
        "They showed only atomic file and directory descriptions.",
        "but Plume can also deal with more complex obiect descriptions.",
        "In fact, in Plume grammars.",
        "objects as well as actions can be described by caseframes.",
        "For instance here is the caseframes used to",
        "The Fortran file in pt] created by John The caseframe notation and parsing algorithm used here are very similar to those described above for clause level input.",
        "The significant differences are additions related to the :adjective and :assignedp attributes of some of the cases above.",
        "While Plume normally only looks for fillers after the header in nominal caseframes an adjective attribute of a slot tells Plume that the slot filler may appear before the header.",
        "An :assignedp attribute allows cases to be filled through recognition of a header.",
        "This is generally useful for proper names, such as foo and foo.bar.",
        "In the example above.",
        "the second alternative header contains two ,,ariables 'name and 'extension.",
        "that can each match any single Nord.",
        "The question mark indicates optionaiity.",
        "so that the header can be either a single word or a word followed by a period and another word.",
        "The first word is assigned to the variable 'name, and the second of it is there' to the iariable 'extension if 'name or 'extension are matched while recognizing a file header, their values are placed in the name and extension cases of -file• With the above modifications Plume can parse nominal caseframes using the same algorithm that it uses for clausal caseframes that account for complete sentences.",
        "However there are some interactions between the two levels Of parsing.",
        "In particular, there can be ambiguity about where to attach marked cases.",
        "For instance.",
        "in: Copy the fortran file in (xl to NI \"in [xl\" could either fill the directory case of the file described as \"the tortran file' or could fill the destination case of the whole copy command The second interpretation does not work at the global level because the only place to put \"to fyr is in that same destination case However, at the time the file description is parsed.",
        "this information is not available, and so both possible attachments must be considered In general.",
        "if Plume is able to fill a case of a nominal caseframe from a",
        "recognize the above inputs is completely unrelated to its ability to recognize inputs like: the tile Jim created on Monday the person that the file was created by CI Monday the day on which Jim created rne NIE prepositional phrase, it also splits off an alternative parse in which that attachment is not made.",
        "When all input haS been parsed.",
        "Plume retains only those parses that succeed at the global level.",
        "i.e.. consume all of the input.",
        "Others are discarded.",
        "The current implementation of Plume is based on the nominal and clausal level caseframe instantiation algorithms described above.",
        "Using these algorithms and a restricted domain grammar of caseframes like the ones snown above.",
        "Plume can parse a wide variety of imperative and declarative sentences relevant to that domain.",
        "(-lowever.",
        "there remain significant gaps in its coverage.",
        "Interrogatives are not handled at all passives are covered only if they are explicitly specified in the grammar and relative clauses can only be handled by pretending they are a form of prepositional phrase The regular and predictable relationship between simple statements questions and relative clauses and between active and passive sentences is ,vell known A parser which purports to interpret a doinain specific language specification using a built-in knowledge of syntax snould account for this regularity in a general way The current implementation of Plume has no mechanism for doing this.",
        "Each individual possibility for questions relative clauses and passives must If an interface could recognize any of these examples It might seem unreasonable to a user that it could not recognize all of the others.",
        "Moreover given any of the above examples.",
        "a user might reasonably expect recognition of related sentence level inputs like Create the tile on Monday' Jim created the tile on Monday Did Jim create the rile on Monday\" Was the tile created by Jim on Monday' Who created the tile on Monday' What day was the file created on?",
        "The current implementation of Plume haS no means of guaranteeing such regularity of coverage Of course.",
        "this problem of patchy syntactic coverage is not new for restricted domain parsers.",
        "The lack of syntactic generality of the original semantic grammar 131 for the Sophie system [21 led to the concept of cascaded ATNS 1101 and the RUS parser A progression with similar goals occurred from the LIFER system 191 to TEAM [6] and KLAUS 171.",
        "The basic obstacle to achieving syntactic generality in these network-based approaches was the way syntactic and be explicitly specified in the grammar For Instance.",
        "to semantic information was mixed together in the grammar handle reduced relative clauses as in \"the file created by networks The solutions, therefore, rested on separating the jim\" \"created by is listed as a case marker (compound syntactic and semantic information.",
        "Plume already preposition) in the creator slot of file, marking a description of the creator To handle full relatives the case marker must be specified as something like \"(which <be>) created by''.a While this allows Plume to recognize the file which was created by Jim\".",
        "\"the file created by Jim\".",
        "or even \"the file created by Jim on Monday it breaks down on something like \"the file created on Monday by Jim' because the case marker \"created by' is no longer a unit.",
        "Moreover using the current techniques.",
        "Plume s ability to rhe current ,molernentanon ,it Plume .",
        ":uutams a remo.",
        ")rary :nothad ,landfing alterrngativeS.",
        "noCect • ,■.r ..aseliame ' incorporates just the separation of syntax and semantics necessary for syntactic generality general syntactic knowledge resides in the parser while semantic information resides in the grammar This suggests that syntactic generality in a system like Plume can be achieved by improving the parser s casef rame instantiation algorithms .vithout any maior changes to grammar content ,n terms of the above examples Involving :reate • :1 suggests we can use a single 'create' casef rattle to nandle all the examples We simply need to provide suitable extensions to the existing caseframe nstantiation algorithms In the next section we present a detailed design for such extensions",
        "2.",
        "Providing Plume with Syntactic Generality",
        "As described above.",
        "Plume can currently use clausal .",
        "caseframes only to recognize single clause imperative and declarative utterances in the active voice This section describes our design for extending Plume so that relative and interrogative uses of clausal caseframes in passive as well as active voice can also be recognized from the same information.",
        "We will present our general design by showing how it operates for the following 'create caseframe in the context of NLVMS:",
        "Note that symbols in angle brackets represent non-terminals in a context-free grammar (recognized by Plume using pattern matching techniqueSi in the caseframe definition above <create> matches all morphological variants of the verb 'create' including \"create 'creates \"Created\" and 'creating'.",
        "ithough not compound tenses ;Ike .5 :reating - see below).",
        "Using the existing Plume flis Piould only ailovv US to recognize simple imperatives ana active leciaratives like• Create to bar on MondaV Jim created too oar on Monday"
      ]
    },
    {
      "heading": "2.1 Passives",
      "text": [
        "Plume recognizes passive sentences through its processing of the /eft) cluster i e he main verb plus the sequence of modal and auxiliary 'en, immediately preCeding it.",
        "Once the main verb has been located a special verb cluster processing mechanism reads the verb cluster and determines from it whether the sentence is active or passive The parser records this information in a special case called \"%voice\".",
        "If a sentence is found to be active the standard parsing algorithm described above is used if it is found to be passive, the standard algorithm is used with the modification that the parser looks for the direct object or the indirect object I° in the subject position, and for the subject as an optional marked case with the case marker \"by\".",
        "Thus, given the • create • caseframe above, the following passive sentences could be handled as well as their active counterparts.",
        "Foo bar was creatPci ov Jim Foo oar could have beer reared zov Jar Foo oar is being created Jim Foo bar was createo dn Monday"
      ]
    },
    {
      "heading": "2.2. Relative clauses",
      "text": [
        "The detailed design presented below allows Plume to use the •create • caseframe to parse nominais like: the file Jim created on Monday the person mat the tile was created oy on Monday the day on which Jim created the tile To do this, we introduce the concept of a relative case A relative case is a link back froni the caseframes for the objects that fill the cases of a clausal caseframe to that clausal caseframe.",
        "A grammar preprocessor generates a relative case automatically from each case of a clausal caseframe.",
        "associating It with the nominal caseframe that fills the case in the clausal caseframe.",
        "Relative cases do not need to be specified by the grammar writer.",
        "For instance, a relative case is generated from the createe case of 'create • and included in the 'file' caseframe.",
        "It looks like this:",
        "Note that :marker is the same as :header of 'create' Similar relative cases are generated in the •person' caSeframe for the creator caSe, and in the 'date\" caSeframe for the creation-date caSe, differing only in :relative-case-name.",
        "Relative cases are used similarly to the ordinary marked cases of nominal caseframes.",
        "In esSence, if the parser IS parsing a nominal caseframe and finds the marker of one of its relative cases.",
        "then it tries to instantiate the :relative-cf.",
        "It performs this instantiation in the same way as if the relative-cf were a top-level clausal Caseframe and the word that matched the header were Its main verb.",
        "An important difference is that it never tries to fill the case \"'hose name is given by relative-case-name.",
        "That case is filled by the nominal caseframe which contains the relative case For instance, suppose the parser is trying to process.",
        "The file Jim created on Monday And suppose that it has already located \"file' and used that to determine it is instantiating a 'file' nominal caseframe It is able to match (against \"created\" i the :marker of he relative casefrarre of 'file' shown above.",
        "It then tries to instantiate the relative.cf 'create' using its standard techniques except that it does not try to fill createe the case of 'create' specified as the relative-case-name.",
        "This instantiation succeeds with \"Jim\" going into creator.",
        "and \"on Monday\" being used to fill creation-date The parser then uses (a pointer to the nominal caseframe currently being instantiated.",
        "'file to fill createe.",
        "the :relative-case-name case of •create ' and the newly created instance of •create • is attached to this instance of •file • as a modifier More completely.",
        "Plume's algorithm for relative clauses is: 1 When processing a nominal caseframe.",
        "Plume scans for the :markers of the relative cases of the nominal caseframe at the same time as It scans for the regular case markers of that nominal caseframe 2 If it finds a :marker of a relative case.",
        "it tries to instantiate the relative-cf lust as though it were the top-level clausal casefrarne and the header were its main verb.",
        "eAcept that: a. it never looks any further left in the Input than the leader of the nomiral caseframe or (f nas already parsed any other post-rominal cases of the nominal caseframe no further left than the right hand end of !hem",
        "b. it consumes.",
        "but otherwise ignores any relative pronouns (who wrtm which that that immediately precede the segment used to instantiate the relative-cf rnis •neans that all words.",
        "including \"that\" will be accounted ior the tile that Jim created on Monday\"",
        "C. it does not try to fill the case Specified by the relative-Case-name in the relative-cf: instead this case is filled by (a pointer to) the original nominal caseframe instance: d. if the relative-case-name specifies a marked case rather than a positional one in the relative-cf then its case marker can be consumed, but otherwise ignored.",
        "during instantiation of me relative-cf This allows us to deal with \"on' ;r1 'the date Jim created the file on\" or the Cate un whicn Jim created the tile' 3 Passive relative clauses le g. \"the file that was created on Monday\") can generally be handled using the same mechanisms used for passives at the main clause level However.",
        "in relative clauses.",
        "Passives may sometimes be reduced by omitting the usual auxiliary verb tO be land the relative pronoun) as in: the tile created on Monday To account for such reduced relative clauses, the verb cluster processor will produce appropriate additional readings of the verb clusters in relative Clauses for which the relative pronoun is missing.",
        "This may lead to multiple parses, including one for the above example similar to the correct one for: the tile John created on Monday These ambiguities will be taken Care of by Plume S standard ambiguity reduction methods 2 3 Interrogatives In addition to handling passives and •elative :lauses.",
        "(ye also wish the information (n the 'c,eate' :aseframe to hanale interrogatives involving \"create' s,.cn",
        "The primary difficulty for Plume ...gm interrogatives is that.",
        "as these examples show, the number of variations in standard constituent order is much greater than for imperatives ano",
        "declaratives.",
        "interrogatives come in a wide variety of forms.",
        "depending on whether the question is yes/no or wh: on which auxiliary verb is used: on whether the voice is active or passive: and for wh questions, on which case is queried.",
        "On the other hand.",
        "apart from variations in the order and placement of marked cases.",
        "there is only one standard constituent order for imperatives and only two for declaratives (corresponding to active and passive voice).",
        "We have exploited this low variability by building knowledge of the imperative and declarative order into Plume's parsing algorithm However this is impractical for the larger number of variations associated with interrogatives.",
        "Accordingly, we have designed a more data-driven approach.",
        "This approach involves two passes through the input: the first categorizes the input into one on several primary input categories including yes-no questions, several kinds of wh-questions.",
        "statements, or imperatives.",
        "The second pass performs a detailed parse of the input based on the classification made in the first pass.",
        "The rules used contain basic syntactic information about English.",
        "and will remain constant for any of Plume's restricted domain grammars of Semantic caSeframeS for English The second more detailed parsing phase is organized relative to the primary caseframe.",
        "Associated with each top-level pattern, there is a corresponding parse template.",
        "A parse template specifies which parts of the primary caseframe will be found in unusual positions and which parts the default parsing process (the one for declaratives and imperatives) can be used for.",
        "A simplified example of a top-level pattern for a yes-no question is: 1 <aux> r (Verb !!",
        "<aux>)) (&s Svert» Vest This top-level pattern will match inputs like, the following: Did Jim create tool Was too created by Jim?",
        "The first element of the above top-level pattern is an auxiliary verb, represented by the non-terminal <aux> ThiS auxiliary is remembered and used by the verb cluster processor (as though it were the first auxiliary in the Cluster) to determine tense and voice.",
        "According to the next part of the pattern, some word that is not a verb or an auxiliary must appear after the fronted auxiliary and before the main verb ( is the negation operator.",
        "and !!",
        "marks a disiunction).",
        "Next.",
        "the scanning operator &s tells the The first level of Processing involves an ordered set of roo-ievet patterns.",
        "Each top-level pattern corresponds to one of the primary input categories mentioned above.",
        "This classificatory matching does not attempt tO match every .Nord in the input sentenCe, but only to do the minimum necessary to make the classification.",
        "Most of the relevant information is found at the beginning of the inputs.",
        "In particular.",
        "the top-level patterns make use of the fronted auxiliary verb and wh-words in questions.",
        "As well as classifying the input, this top-level match IS also used to determine the identity of the caseframe to be instantiated This is important to do at this stage because the detailed recognition in the second phase is heavily dependent on the identity of this top-level caseframe The special symbol.",
        "Sverb.",
        "that appears exactly once in all top-level patterns, matches a header of any clausal caseframe We call the caseframe whose header is matched by $verb the primary casetrame for that input.",
        "matcher to scan until it finds Svero.",
        "which matches the .header of any clausal caseframe Finally, Srest matches the remaining input.",
        "If the top-level pattern Successfully matches.",
        "Plume uses the associated parse template to direct its more detailed processing of the input.",
        "The goal of this second pass through the input is to instantiate the caseframe corresponding to the header matched by $verb in the top-level pattern.",
        "The concept of a kemel-casetrame is important to this stage of processing.",
        "A kernel-caseframe corresponds to that part of an input that can be processed according to the algorithm already built into Plume for declarative and imperative sentences.",
        "ii ihoattern.",
        "only 'flouts where the lroiled atign,ary •s rtrst wOrti 1 ihe sentence are allowee the ■nore -,,no■ev pattern 'hat ,s actuaily ..yed by Plume allowS OrepuSmonaily mail■ect :aSeS '0 ippear ma,ally as ',reit",
        "The parse template associated with the above top-level pattern for yes/no questions is: Could match an obieCt query Or a marked case query.",
        "including the following: aux kernel-case frame + (query) This template tells the parser that the input consists of the auxiliary verb matched in the first pass followed by a :kernel-caSeframe.",
        "For example.",
        "in: Old Jim Create fOO\" the auxiliary verb.",
        "\"did\".",
        "appears first followed by a kernel-caseframe.",
        "''Jim create too\" Note how the kernel-caseframe lookS exactly like a declarative sentence, and so Can be parsed according to the usual declarative/imperative parsing algorithm In addition to specification of where to find components of the primary caseframe.",
        "a parse template includes annotations (indicated by a plus sign) In the above template for yes/no questions.",
        "there is lust one annotation - query.",
        "Some annotations, like this one indicate what type of input has been found, while others direct the processing of the parse template.",
        "Annotations of me first type record which case is being queried in win questions.",
        "that is.",
        "which case is associated with the wh word.",
        "VVh questions thus include one of the following annotations* subiect-quety.",
        "object-query.",
        "and marked-case-query Marked case queries correspond to examples like: On what day did Jim create too\" What day did Jim create too on' in which a case marked by a preposition is being asked about.",
        "As illustrated here the case-marker in such queries can either precede the wh word or appear somewhere .after the verb.",
        "To deal with this, the parse template for marked case queries has the annotation tloarind-case-marker.",
        "This annotation is of the second type that is it affects the way Plume processes the associated parse template.",
        "Some top-level patterns result in two possibilities for parse templates.",
        "For example.",
        "the following top-level pattern < tin-word> <aux > (Sverta aux > Svf,rb Srest What did Jim create\" By whom was foo created912 Who was too created by' These inputs cannot be satisfactorily discriminated by a top-level pattern, so the above top-level pattern has two different parse templates associated with it: wh-oblect aux kernel-case frame + ( obiect-query) wh-marked-case-tiller aux kernel-case frame + ( marked-case-query floating-case-marker) When the above top-level pattern matches.",
        "Plume tries to Parse the input using both of these parse templates.",
        "In general.",
        "only one will succeed in accounting for all the input.",
        "so the ambiguity will be eliminated by the methods already built into Plume.",
        "The method of parsing interrogatives presented above allows Plume to handle a wide variety of interrogatives in a very general way using domain specific semantic caseframes.",
        "The writer Of the Caseframes does not have to worry about whether they will be used for imperative, declarative, or interrogative sentences.",
        "(or in relative clauses).",
        "He is free to concentrate on the domain-specific grammar.",
        "In addition.",
        "the concept of the kernel-caseframe allows Plume to use the same efficient caseframe-based parsing algorithm that it used for declarative and imperative sentences to parse maior subparts of questions."
      ]
    },
    {
      "heading": "3. Conclusion",
      "text": [
        "Previous work (e.g. [4.",
        "5.",
        "3D ana experience ivith our current implementation of Plume.",
        "Carnegie Group S semantic caseframe parser.",
        "has snown semantic caseframe instantiation to be an efficient ana highly robust method of parsing restricted domain input However like other methods of parsing heavily dependent on restricted domain semantics these initial attempts at parsers based on semantic caseframe instantiation suffer from patchy syntactic coverage.",
        "After first describing the current implementation of Plume.",
        "this paper presented a detailed design for endowing Plume with much broader syntactic coverage including passives.",
        "interrogatives, and relative clauses.",
        "Relative clauses are accommodated through some grammar preprocessing and a minor change in the processing of nominal caseframes.",
        "Handling of interrogatives relies on a set of rules for classifying inputs into one of a limited number of types.",
        "Each of these types has one or more associated parse templates which guide the subsequent detailed parse of the sentence.",
        "As the final version of this paper is prepared (late April.",
        "1985).",
        "the handling of passives and interrogatives has already been implemented in an internal development version of Plume.",
        "and relative clauses are expected to follow soon.",
        "Though the above methods of incorporating syntactic generality into Plume do not cover all of English syntax.",
        "they show that a significant degree of syntactic generality can be provided straightforwardly by a domain specific parser driven from a semantic caseframe grammar"
      ]
    }
  ]
}
