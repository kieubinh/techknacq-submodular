{
  "info": {
    "authors": [
      "K. Vijay-Shanker",
      "Aravind K. Joshi"
    ],
    "book": "Workshop on Strategic Computing – Natural Language",
    "id": "acl-H86-1020",
    "title": "Some Computational Properties of Tree Adjoining Grammars",
    "url": "https://aclweb.org/anthology/H86-1020",
    "year": 1986
  },
  "references": [],
  "sections": [
    {
      "heading": "SOME COMPUTATIONAL PROPERTIES OF TREE ADJOINING GRAMMARS*",
      "text": [
        "Tree Adjoining Grammar (TAG) is a formalism for natural language grammars.",
        "Some of the basic notions of TAG's were introduced in Poshi,Levy, and Takahashi 19751 and by Poshi, 19831.",
        "A detailed investigation of the linguistic relevance of TAG's has been carried out in IKroch and Joshi,19851.",
        "In this paper, we will describe some new results for TAG's, especially in the following areas: (1) parsing complexity of TAG's, (2) some closure results for TAG's, and (3) the relationship to Head grammars."
      ]
    },
    {
      "heading": "1. INTRODUCTION 2. TREE ADJOINING GRAMMARS--TAG's",
      "text": [
        "We now introduce tree adjoining grammars (TAG's).",
        "TAG's are more powerful than CFG's, both weakly and strongly./ TAG's were first introduced in lioshi, Levy, and Takahashi,1975J and Poshi,19831.",
        "We include their description in this section to make the paper self-contained.",
        "We can define a tree adjoininig grammar as follows.",
        "A tree adjoining grammar G is a pair (I,A) where I is a set of initial trees, and A is a set of auxiliary trees.",
        "A tree a is an initial tree if it is of the form o= Investigation of constrained grammatical systems from the point of view of their linguistic adequacy and theig computational tractability has been a major concern of computational linguists for the last several years.",
        "Generalized Phrase Structure grammars (GPSG), Lexical Functional grammars (LFG), Phrase Linking grammars (PLG), and Tree Adjoining grammars (TAG) are some key examples of grammatical systems that have been and still continue to be investigated along these lines.",
        "Some of the basic notions of TAG's were introduced in [Yoshi, Levy, and Takahashi,19751 and Poshi,19831.",
        "Some preliminary investigations of the linguistic relevance and some computational properties were also carried out in Poshi,19831.",
        "More recently, a detailed investigation of the linguistic relevance of TAG.'",
        "were carried out by IKroth and Joshi,19851.",
        "In this paper, we will describe some new results for TAG's, especially in the following areas: (1) parsing complexity of TAG's, (2) some closure results for TAG's, and (3) the relationship to Head grammars.",
        "These topics will be covered in Sections 3, 4, and 5 respectively.",
        "In section 2, we will give an introduction to TAG's.",
        "In section 6, we will state some properties not discussed here.",
        "A detailed exposition of these results is given in (Vijay-Shankar and Joshi,19851.",
        "'This work was partially supported by NSF Grants MCS-8219116-CER, MCS-82-07204.",
        "We want to thank Carl Pollard, Kelly Roach, David Scarf, and David Weir.",
        "We have benefited enormously by valuable discussions with them.",
        "That is, the root node of a is labelled S and the frontier nodes are all terminal symbols.",
        "The internal nodes are all non-terminals.",
        "A tree /3 is an auxiliary tree if it is of the form",
        "That in, the root node of fi is labelled with a non-terminal X and the frontier nodes are all labelled with terminals symbols except one which is labelled X.",
        "The node labelled by X on the frontier will be called the foot node of 9.",
        "The frontiers of initial trees belong to e, whereas the frontiers of the auxiliary trees belong to E. N J U Es+ N Es.",
        "We will now define a composition operation called adjoining, (or adjunction) which composes an auxiliary tree # with a tree Let ry be a tree with a node n labelled X and let fi be an auxiliary tree with the root labelled with the same symbol X.",
        "(Note that 9 must have, by definition, a node (and only one) labelled X on the frontier.)",
        "aGramosare GI and 02 are weakly equivalent if the string language of GI, L(01) ma the string language of 02, UO2).",
        "GI and 02 are strongly equivalent if they are weakly equivalent and for each w In L(GI) L(G2), both GI and G2 assign the same structural description to w. A grammar 0 is weakly adequate for a (string) language if L(G) w. G is strongly adequate for I, if 140) ee and for each w in I., G assigns an •appropriate• structural description to w. The notion of strong adequacy is undoubtedly not precise because it depends on the notion of appropriate structural descriptions",
        "The tree t dominated by X in 7 is excised, /3 is inserted at the node a in 7 and the tree t is attached to the foot node (labelled X) of t. i.e., # is inserted or adjoined to the node n in ry pushing t downwards.",
        "Note that adjoining is not a substitution operation.",
        "We will now define T(G): The set of all trees derived in G starting from initial trees in I.",
        "This set will be called the tree set of G. L(G): The set of all terminal strings which appear in the frontier of the trees in T(G).",
        "This set will be called the string language or language) of G. If L is the string language of a TAG C then we say that L is a Tree-Adjoining Language (TALI.",
        "The relationship between TAG's , context-free grammars, and the corresponding string languages can be summarized as follows (Poshi, Levy, and Takahashi, 1975), Poehi, 1983)).",
        "1.1,(G) is context-free and there is a context-free grammar G' that is strongly (end therefore weakly) equivalent to G. b. MG) is context-free and there is no context-free grammar G' that is equivalent to G. Of course, there must be a context-free grammar that is weakly equivalent to G. c. L(G) is strictly context-sensitive.",
        "Obviously in this case, there is no context-free grammar that is weakly equivalent to G. Parts (a) and (e) of Theorem 2.2 appear in ((Joshi, Levy, and Takahashi, 19759.",
        "Part (b) is implicit in that paper, but it is important to state it explicitly as we have done here because of its linguistic significance.",
        "Example 2.1 illustrates part (a).",
        "We will now illustrate parts (b) and (C).",
        "Clearly, L(G), the string language of G is L (an e / n > o ) which is a context-free language.",
        "Thus, there must exist a context-free grammar, G', which is at least weakly equivalent to G. It can be shown however that there is no context-free grammar G' which is strongly equivalent to C, i.e., T(G) T(G').",
        "This follows from the fact that the set T(G) (the tree set of G) is non-recognizable, i.e., there is no finite state bottom-up tree automaton that can recognize precisely T(G).",
        "Thus a TAG ma generate a context-free language, zel assign structural descriptions to the strings that cannot be assigned la tail context-free grammar.",
        "The precise definition of L(G) is as follows: L(G) {w e e° / n > o, w is a string of a's and b's such that",
        "(1) the number of a's Q the number of b's n, and (2) for any initial substring of w, the number of a's > the number of b's. )",
        "Li is a strictly context-sensitive language (i.e., a context-sensitive language that is not context-free).",
        "This can be shown as follows.",
        "Intersecting L with the regular language a b' e c' results in the language",
        "of intersecting a context-free language with a regular language is always a context-free language; hence, L1 is not a context-free language.",
        "It is thus a strictly context-sensitive language.",
        "Example 2.3 thus illustrates part (c) of Theorem 2.2.",
        "TAG's have more power than CFG's.",
        "However, the extra power is quite limited.",
        "The language Lthas equal number of a's, b's and c's; however, the a's and b's are mixed in a certain way.",
        "The language L2 is similar to Li, except that a's come before all b's.",
        "TAG'S as defined so far are not powerful enough to generate I.Z.",
        "This can be seen as follows.",
        "Clearly, for any TAG for L2, each initial tree must contain equal number of a's, b's and c's (including zero), and each auxiliary tree must also contain equal number of a's, b's and c's.",
        "Further in each case the a's must precede the b's.",
        "Then it is easy to see from the grammar of Example 2.3, that it will not be possible to avoid getting the a's and b's mixed.",
        "However, L2 can be generated by a TAG with local constraints (see Section 2.1) The so-called copy language.",
        "also cannot be generated by a TAG, however, again, with local constraints.",
        "It is thus clear that TAG's can generate more than context-free languages.",
        "It can be shown that TAG's cannot generate all context-sensitive languages (Joshi ,I9841.",
        "Although TAG's are more powerful than CFG's, this extra power is highly constrained and apparently it is just the right kind for characterizing certain structural descriptions.",
        "TAG's share almost all the formal properties of CFG's (more precisely, the corresponding classes of languages), as we shall see in section 4 of this paper and (Vijay-Shankar and Joshi,1985).",
        "In addition,the string languages of TAG's can also be parsed in polynomial time, in particular in 0(n9.",
        "The parsing algorithm is described in detail in section 3."
      ]
    },
    {
      "heading": "2.1. TAG's with Local Constraints on Adjoining",
      "text": [
        "The adjoining operation as defined in Section 2.1 is °context-free'.",
        "An auxiliary tree, say, is adjoinable to a tree t at a node, say, n, if the label of that node is X. Adjoining does not depend on the context (tree context) around the node n. In this sense, adjoining is context-free.",
        "In (Joshi ,19831, local constraints on adjoining similar to those investigated by (Joshi and Levy ,19771 were considered.These are a generalization of the context-sensitive constraints studied by (Peters and Ritchie ,19691.",
        "It was soon recognized, however, that the full power of these constraints was never fully utilized, both in the linguistic context as well as in the •formal languages• of TAG's.",
        "The so-called proper analysis contexts and domination contexts (as defined in (Joshi and Levy ,1977() as used in (Joshi ,I9531 always turned out to be such that the context elements were always in a specific elementary tree i.e., they were further localized by being in the same elementary tree.",
        "Based on this observation and a suggestion in (Joshi, Levy and Takahashi ,19751, we will describe a new way of introducing local constraints.",
        "This approach not only captures the insight stated above, but it is truly in the spirit of TAG's.",
        "The earlier approach was not so, although it was certainly adequate for the investigation in (Joshi ,19831.",
        "A precise characterization of that approach still remains an open problem.",
        "G (I,A) be a TAG with local constraints if for each elementary tree t E I U A, and for each node, n, in t, we specify the set # of auxiliary trees that can be adjoined at the node n. Note that if there is no constraint then all auxiliary trees are adjoinable at n (of course, only those whose root has the same label as the label of the node n).",
        "Thus, in general, /3 is a subset of the set of all the auxiliary trees adjoinable at n. We will adopt the following conventions.",
        "1.",
        "Since, by definition, no auxiliary trees are adjoinable to a node labelled by a terminal symbol, no constraint has to be stated for node labelled by a terminal.",
        "2.",
        "If there is no constraint, i.e., all auxiliary trees (with the appropriate root label) are adjoinable at a node, say, n, then we will not state this explicitly.",
        "3.",
        "If no auxiliary trees are adjoinable at a node n, then we will write the constraint as (es), where it, denotes the null set.",
        "4.",
        "We will ale.)",
        "allow for the possibility that for a node at least one adjoining is obligatory, of course, from the set of all possible auxiliary trees adjoinable at that node.",
        "Hence, a TAG with local constraints is defined as follows.",
        "G (I, A) is a TAG with local constraints if for each node, n. in each tree t, be specify one (and only one) of the following constraints.",
        "1.",
        "Selective Adjoining fSA:) Only a specified subset of the set of all auxiliary trees are adjoinable at n. SA is",
        "written as (C), where C is a subset of the set of all auxiliary trees adjoinable at n. If C equals the set of all auxiliary trees adjoinable at n, then we do not explicitly state this at the node n.",
        "2.",
        "Null Adjoining WA)) No auxiliary tree is adjoinable at the node N. NA will be written as (0).",
        "3.",
        "Obligating Adjoining fOA:) At least one (out of all the auxiliary trees adjoinable at n) must be adjoined at n. OA is written as (OA), or as 0(C) where C is a subset of the set of all auxiliary trees adjoinable at n.",
        "In al no auxiliary trees can be adjoined to the root node.",
        "Only At is adjoinable to the left S node at depth 1 and only /72 is adjoinable to the right S node at depth 1.",
        "In Pi only pi is adjoinable at the root node and no auxiliary trees are adjoinable at the fo.at node.",
        "Similarly for /32.",
        "We must now modify our definition of adjoining to take care of the local constraints.",
        "given a tree 7 with a node, say, labelled A and given an auxiliary tree, say, fi, with the root node labelled A, we define adjoining as follows.",
        "/II is adjoinable to 7 at the node n if fi E fi, where Q is the constraint associated with the node n in 7.",
        "The result of adjoining fi to 7 will be as defined in earlier, except that the constraint C associated with n will be replaced by C', the constraint associated with the root node offi and by C\", the constraint associated with the foot node of A.",
        "Thus, given",
        "The resultant tree 7' is We also adopt the convention that any derived tree with a node which has an OA constraint associated with it will not be included in the tree set associated with a TAG, G. The string language L of G is then defined as the set of all terminal strings of all trees derived in G (starting with initial trees) which have no OA constraints left-in them.",
        "Example 2.8: Let C (I,A) be a TAG with local constraints where",
        "There are no constraints in al.",
        "In Q no auxiliary trees are adjoinable at the toot node and the foot node sad for the center S node there are no constraints.",
        "Starting with al and adjoining ft to at at the root node we obtain '7 = Adjoining fi to the center S node (the only node at which adjunction can be made) we have",
        "It is easy to see that G generates the string language L ( 0 b° e c° n > 0) Other languages such as L'=(a°2 In >1), L' = (a.2 I n > 1) also cannot be generated by TAG's.",
        "This is because the strings of a TAL grow linearly (for a detailed definite of the property called 'contact growth• property, see poshi ,19831.",
        "For those familiar with Poshi, 1983), it is worth pointing out that the SA constraint is only abbreviating, i.e., it does not affect the power of TAG's.",
        "The NA and OA constraints however do affect the power of TAG's.",
        "This way of looking at local constraints has only greatly simplified their statement, but it has also allowed us to capture the insight that the 'locality' of the constraint is statable in terms of the elementary trees themselves!"
      ]
    },
    {
      "heading": "2.2. Simple Linguistic Examples",
      "text": [
        "We now give a couple of linguistic examples.",
        "Readers may refer to 1Kroch and Joshi, 19851 for details.",
        "I.",
        "Starting with 71 – at which is an initial tree and then adjoining At (with appropriate lexical insertions) at the indicated node in we obtain 72.",
        "Note that the initial tree a2 is not a matrix sentence.",
        "In order for it to become a matrix sentence, it must undergo an adjunction at its root node, for example, by the auxiliary tree /32 as shown above.",
        "Thus, for 02 we will specify a local constraint 0(02) for the root node, indicating that a2 requires for it to undergo an adjunction at the root node by an auxiliary tree /32.",
        "In a fuller grammar there will be, of course, some alternatives in the scope of 0( )."
      ]
    },
    {
      "heading": "3. PARSING TREE-ADJOINING LANGUAGES",
      "text": [
        "We will give a few additional definitions.",
        "These are not necessary for defining derivations in a TAG as defined in section 2.",
        "However, they are introduced to help explain the parsing algorithm and the proofs for some of the closure properties of TAL's.",
        "Sometimes we will be loosely using the phrase •adjoining with a derived tree` 7 E D(p) for some auxiliary tree /3.",
        "What we mean is that suppose we adjoin /3 at some node and then adjoin within fi and so on, we can derive the desired derived tree E D(fI) which uses the same adjoining sequence and use,this resulting tree to •adjoin• at the original node.",
        "3.2.",
        "The Parsing Algorithm The algorithm, we present here to parse Tree-Adjoining Languages (TALs), is a modification of the CYK algorithm (which is described in detail in lAho and IJIlman,1973)), which uses a dynamic programming technique to parse CFL's.",
        "For the sake of making our description of the parsing algorithm simpler, we shall present the algorithm for parsing without considering local constraints.",
        "We will later show how to handle local constraints.",
        ".",
        "We shall assume that any node in the elementary trees in the grammar has atmost two children.",
        "Thin assumption can be made without any loss of generality, because it can be easily shown that for any TAG G there is an equivalent TAG GI such that any node in any elementary tree in G1 has atmost two children.",
        "A similar assumption is made in CYK algorithm.",
        "We use the terms ancestor and descendant, throughout the paper as a transitive and reflexive relation, for example, the foot node may be called the ancestor of the foot node.",
        "The algorithm works as follows.",
        "Let at...a. be the input to be -parsed.",
        "We use a four-dimensional array A; each element of the array contains a subset of the nodes of derived trees.",
        "We say a node X of a derived tree 7 belongs to Ali,j,k,lj if X dominates a sub-tree of 7 whose frontier is given by either Y (where the foot node of 7 is labelled by Y) or a;+/...a.",
        "(i.e., j Q k. This",
        "corresponds to the cue when 7 is a sentential tree).",
        "The indices (i,j,k,l) refer to the positions between the input symbols and range over 0 through a.",
        "If i 5 say, then it refers to the gap between 15 and al.",
        "Initially, we fill Ali,i+1,i+1,i+11 with those nodes in the frontier of the elementary trees whose label is the same as the input si+i for 0 < i < n-1.",
        "The foot nodes of auxiliary trees will belong to all such that i < j.",
        "We are now in a position to fill in all the elements of the array A.",
        "There are five cases to be considered.",
        "Although we have stated that the elements of the array contain a subset of the nodes of derived trees, what really goes in there are the addresses of nodes in the elementary trees.",
        "Thus the the sin of any set is bounded by a constant, determined by the grammar.",
        "It is hoped that the presentation of the algorithm below will make it clear why we do so."
      ]
    },
    {
      "heading": "3.3. The algorithm",
      "text": [
        "The complete algorithm is given below Step 1 For 1=0 to n-1 step 1 do Step 2 put all nodes in the frontier of elsnentary tress whose label is a141 in A[1,1+1.1+1.1+1).",
        "Step 3 For 1=0 to n-1 step 1 do Step 4 for j=1 to n-1 step 1 do Step 6 put foot nodes of all auxiliary trees in A[1.1,3,11 Step 6 For 1=0 to n stop 1 do Step 7 For 1=1 to 0 step 1 do Step 8 For Pi to 1 step I do Step 9 For k=1 to j step 1 do Step 10 do Case 1 Step 11 do Case 2 Step 12 do Case 3 Step 13 do Case 6",
        "where, (a) Case 1 corresponds to situation where the left sibling is the ancestor of the foot node.",
        "The parent is put in j"
      ]
    },
    {
      "heading": "Ali,k,11 if the left",
      "text": [
        "sibling is in Ali,j,k,m1 and the right sibling is in Arm,p,p,11, where k < m < I, m < p, p < I.",
        "Therefore Case 1 is written as For a=k to 1-1 step 1 do for p= a to 1,stsp 1 do if there is a left sibling in A[1.1,k.al and the right sibling in Abi,p,p,1] satisfying appropriate restrictions then put their parent in A(1,j,k,1).",
        "(b) Case 2 corresponds to the case where the right sibling is the ancestor of the foot node.",
        "If the left sibling is in Ali,m,m,d and the right sibling is in Alp,j,k,11, i < m < p and p < j, then we put their parent in Ali,j,k,11.",
        "This may be written as",
        "For a=1 to j-1 step 1 do For p=n•1 to j step 1 do for all left siblings in A(1,a,..p] and right siblings in A (p. j k 41 satisfying appropriate restrictions put their parents in A(1.1.1e,11.",
        "(c) Case 3 corresponds to the case where neither children are ancestors of the foot node.",
        "If the left sibling E and the right sibling E A1m,p,p,I1 then we can put the parent in Ali,j,j,I1 if it is the cud that(i<j<mori<j<m)and(m<p<lorm<p< 1).",
        "This may be written as for a = j to 1-1 step 1 do for p = J to 1 step 1 do for all left siblings in A11.4,j,n1 and right siblings in AIa.p.p,11 satisfying the appropriate restrictions put their parent in A(144,1).",
        "(e) Case 5 corresponds to adjoining.",
        "If X is a node in Altrak,p1 and Y is the root of a auxiliary tree with same symbol as that of X, such that Y is in Ali,m,p,11 ((i < m < p < I or i < m < p < I) and (rn <j <k < p or m <j <k < p)).",
        "This may be written as for a = i to j step 1 do for p = a to 1 step 1 do if a node X E A(a.j,k4] and the root of auxiliary tree is in A(1,a,p.1] then put X in A(1,j.k.1] Case 4 corresponds to the case where a node Y has only one child X If X E Ali,j,k,Il then put Y in Ali,j,k,11.",
        "Repeat Case 4 again if Y has no siblings.",
        "3.4.",
        "Complexity of the Algorithm It is obvious that steps 10 through 15 (cases a-e) are completed in 0(n2), because the different cases have at most two nested for loop statements, the iterating variables taking values in the range 0 through n. They are repeated atmost 0(n4) times, because of the four loop statements in steps 6 through 9.",
        "The initialization phase (steps 1 through 5) has a time complexity of 0(n + n2) = 0(n2).",
        "Step 15 is completed in 0(n).",
        "Therefore, the time complexity of the parsing algorithm is 0(n9.",
        "3.5.",
        "Correctness of the Algorithm The main issue in proving the algorithm correct, is to show that while computing the contents of an element of the array A, we must have already determined the contents of other elements of the array needed to correctly complete this entry.",
        "We can show this inductively by considering each case individually.",
        "We give an informal argument below.",
        "Case 1: We need to know the contents of Alm,p,p,11 where m < I, i < ro, when we are trying to compute the contents of Ali,j,k,11.",
        "Since I is the variable itererated in the outermost loop (step 6), we can assume (by induction hypothesis) that for all m < I and for all p,q,r, the contents of Alp,q,r,m1 are already computed.",
        "Hence, the contents of Ali,j,k,mj are known.",
        "Similarly, for all m > i, and for all p,q, and r < I, Alm,p,q,r1 would have been computed.",
        "Thus, Alm,p,p,1] would also have been computed.",
        "Case 2: By a similar reasoning, the contents of Ali,m,m,p1 and Alp,j,k,II are known since p < I and p > i.",
        "Case 3: When we are trying to compute the contents of some Ali,j,j,11, we need to know the nodes in Ali,j,j,p1 and Alp,q,q,11.",
        "Note j > i or j < I.",
        "Hence, we know that the contents of Ali,j,j,p1 and Alp,q,q,I1 would have been computed already.",
        "Case 5: The contents of and Alm,j,k,p1 must be known in order to compute Alij,k,11, where (i<m<p<I or i < m<p<l)and(m<j<k<porm<j<k<p).",
        "Since either m > i or p < I, contents of Almj,k,p1 will be known.",
        "Similarly, since either m < j or k < p, the contents of Ali,m,p,11 would have been computed."
      ]
    },
    {
      "heading": "3.6. Parsing with Local Constraints",
      "text": [
        "So far,we have assumed that the given grammar has no local constraints.",
        "If the grammar has local constraints, it is easy to modify the above algorithm to take care of them.",
        "Note that in Case 5, if an adjunction occurs at a node X, we add X again to the element of the array we are computing.",
        "This seems to be in contrast with our definition of how to associate local constraints with the nodes in a sentential tree.",
        "We should have added the root of the auxiliary tree instead to the element of the array being computed, since so far as the local constraints are concerned,this node decides the local constraints at this node in the derived tree.",
        "However, this scheme cannot be adopted in our algorithm for obvious reasons.",
        "We let pairs of the form (X,C) belong to elements of the array, where X is as before and C represents the local constraints to be associated with this node.",
        "We then alter the algorithm as follows.",
        "If (X,C1) refers to a node at which we attempt to adjoin with an auxiliary tree (whose root is denoted by (Y,C2)), then adjunction would determined by C1.",
        "If adjunction is allowed, then we can add (X,C2) in the corresponding element of the array.",
        "In cases 1 through 4, we do not attempt to add a new element if any one of the children has an obligatory constraint.",
        "Once it has been determined that the given string belongs to the language, we can find the parse in a way similar to the scheme adopted in CYK algorithm.To make this process simpler and more efficient, we can use pointers from the new element added to the elements which caused it to be put there.",
        "For example, consider Case 1 of the algorithm (step 10 ).",
        "If we add a node Z to Mi,j,k,I1, because of the presence of its children X and Y in Ali,j,k,m1 and Alm,p,p,I1 respectively, then we add pointers from this node Z in to the nodes X, Y in Ali,j,k,m1 and Alm,p,p,11.",
        "Once this has been done, the parse can be found by traversing the tree formed by these pointers.",
        "A parser based on the techniques described above is currently being implemented and will be reported at time of presentation."
      ]
    },
    {
      "heading": "4. CLOSURE PROPERTIES OF TAG'S",
      "text": [
        "In this section, we present some closure results for TALs.",
        "We now informally sketch the proofs for the closure properties.",
        "Interested readers may refer to (Vijay-Shankar and Joshi,19851 for the complete proofs."
      ]
    },
    {
      "heading": "4.1. Closure under Union",
      "text": [
        "Let G1 and C2 be two TAGs generating L1 and 1..2 respectively.",
        "We can construct a TAG G such that L(G)=-1.1 U L2.",
        "Let G1 = ( A1, N1, S ), and G2 ( 12, A2, N2, S ).",
        "Without loss of generality, we may assume that the N1 fl N2 = 4'.",
        "Let G (I1U 12, A1 U A2, N1 U N2, S ).",
        "We claim that L(G) Li",
        "Let x U L2.",
        "Then x Li or X E L2.",
        "If x E Li, then it must be possible to generate the string x in G , since It, A1 are in G. Hence x E L(G).",
        "Similarly if x E I.2 , we can show that x E L(G).",
        "Hence L1 U L2 C L(G).",
        "If x E L(G), then x is derived using either only At or only 12, A2 since N1 n N2 = ci.",
        "Hence, x E L1 or x E I.2.",
        "Thus, L(G) C L1 U L2.",
        "Therefore, L(G) = L1 U L2",
        "4.2.",
        "Closure under Concatenation (b) tta (c) / S Let Gi 11•A1•141•S1)• 02 (12,A2,N2,S2) be two TAGs / generating Li, L2 respectively, such that N1 11 N2 ma •.",
        "We can / /\\ construct a TAG C (I, A, N, 5) such that L(G)=.",
        "L1 .",
        "L2.",
        "We • / choose S such that S is not in N1 U N2.",
        "We let N e N1 U N2 U / (S), A = Ai U A2.",
        "For all ti E 12, t2 E 12, we add ti2 to I, as shown S in Fig 4.2.1.",
        "Therefore, I =it E t2 h \\ • t12 • t1 E II.",
        " – 2•• where the nodes / Si in the aubtrees t1 and t2of the tree t12 have the same constraints S / \\ associated with them as in the original grammars G1 and 02.",
        "It is / / \\ •- t', easy to show that L(G) = L1.",
        "L2, once we note that there are no • auxiliary trees in G rooted with the symbol S, and that N1 n N2 no."
      ]
    },
    {
      "heading": "4.3. Closure under Kleene Star",
      "text": [
        "Let Gas (11,A1,N1,S1) be a TAG generating L1.",
        "We can show that we can construct a TAG G such that L(G) L. Let S be a symbol not in N1, and let N s NlU (S).",
        "We let the set I of initial trees of G be (t.), where t, is the tree shown in Fig 4.3a.",
        "The set of auxiliary trees A is defined as A = (tiA / ti E 11) U Ai.",
        "The tree tiA is as shown in Fig 4.3b, with the constraints on the root of each tiA being the null adjoining constraint, no constraints on the foot, and the constraints on the nodes of the subtrees t1 of the trees tiA being the same as those for the corresponding nodes in the initial tree t1 of Gi.",
        "To see why 1,(0) ••• La', consider x E L(G).",
        "Obviously, the tree derived (whose frontier is given by x) must be of the form shown in Fig 4.3e, where each is a sentential tree in G1,such E D(ti), for an initial tree ti in G1.",
        "Thus, L(G) C L1°.",
        "On the other hand, if x E Li', then x wi...w., wi E L1for 1 < i < n. Let each wi then be the frontier of tie sentential tree t1 of Gi such that tj E D( E 11.",
        "Obviously, we can derive the tree T, using the initial tree and have a sequence of adjoining operations using the auxiliary trees tiA for 1 < i < n. From T we can obviously obtain the tree T' the same as given by Fig 4.3c, using only the",
        "Let LT be a TAL and LR be a regular language.",
        "Let G be a TAG generating LT and M (Q , E , 8 , q0 , QF) be a finite state automaton recognizing LR.",
        "We can construct a grammar G and will show that L(G1) LR.",
        "Let a be an elementary tree in G. We shall associate with each node a quadruple (q042,r11•94) where 91,403,91 E Q.",
        "Let (902,40:14) be associated with a node X in a.",
        "Let us assume that a is an auxiliary tree, and that X is an ancestor of the foot node of a, and hence, the ancestor of the foot node of any derived tree 7 in D(a).",
        "Let Y be the label of the root and foot nodes of a.",
        "If the frontier of (7 in D(a)) is w1 w2 Y w2wi, and the frontier of the subtree of 7 rooted at 2, which corresponds to the node X in a is w2 Y wt.",
        "The idea of associating (q1,q2,q3,q4) with X is that it must be the case that e(qi• w2) q2, and 51%, wt) q4.",
        "When 7 becomes a part of the sentential tree whose frontier is given by u w1 w2 v w2 w4w, then it must be the case that 5*(q2, v) a (12.",
        "Following this reasoning, we must make q2 qt, if Z is not the ancestor of the foot node of 7, or if 7 is in D(a) for some initial tree a in G. We have assumed here, as in the case of the parsing algorithm presented earlier, that any node in any elementary tree has almost two children.",
        "From G we can obtain Gi as follows.",
        "For each initial tree a, associate with the root the quadruple (q0, q, q, qi) where q0 is the initial state of the finite state automaton M, and qr E QF.",
        "For each auxiliary tree tt of G, associate with the root the quadruple (q1,q2,q3,q4), where q,q1,q2,43,q4 are some variables which will later be given values from Q.",
        "Let X be some node in some elementary tree a.",
        "Let (q1,q2,q3,q4) be associated with X.",
        "Then, we have to consider the following cases.",
        "Case 1: X has two children Y and Z.",
        "The left child Y is the ancestor of the foot node of a.",
        "Then associate with Y the quadruple p, q2, q3, q ), and ( q, r, r, s ) with Z, and associate with X the constraint that only those trees whose root has the quadruple ( q1, p, s, q4), among those which were allowed in the original grammar, may be adjoined at this node.",
        "If q1 p, or q. s , then the constraint associated with X must be made obligatory.",
        "If in the original grammar X had an obligatory constraint associated with it then we retain the obligatory constraint regardless of the relationship between qi and p, and q. and s. U the constraint associated with X is a null adjoining constraint, we associate ( qt, 42, q ).",
        "and ( q, r, r, qe) with Y and Z respectively, and associate the null adjoining constraint with X.",
        "If the label of Z is a, where a E E, then we choose s and q such that 8 ( q, a) s. In the null adjoining constraint case, q is chosen such that b ( q, a ) q4.",
        "Case 2: This corresponds to the case where a node X has two children Y and Z, with (q1,q2,q3,q4) associated at X.",
        "Let Z ( the right child ) be the ancestor of the the foot node the tree a.",
        "Then we shall associate (p,q,q,r), (r,q2,qs,․) with Y and Z.",
        "The associated constraint with X shall be that only those trees among those which were allowed in the orignal grammar may be adjoined provided their root has the quadruple (q1,p,s,q4) associated with it.",
        "If q1 yE p or q4 yg r then we make the constraint obligatory.",
        "If the original grammar had obligatory constraint we will retain the obligatory constraint.",
        "Null constraint in the original grammar will force us to use null constraint and not consider the cases where it is not the case that q1 a p and q4 s. If the label of Y is a terminal 'a' then we choose r euch that 64(p,a) r. If the constraint at X is a null adjoining constraint, then •6'(q1,a) r. Case 3: This corresponds to the case where neither the left child Y nor the right child Z of the node X is the ancestor of the foot node of a or if a is a initial tree.",
        "Then q2 qs q.",
        "We will associate with Y and Z the quadruples (p,r,r,q) and (q,s,s,t) reap.",
        "The constraints are assigned as before , in this case it is dictated by the quadruple (q1,p,t,q4).",
        "If it is not the ease that q1 = p and q4 t, then it becomes an OA constraint.",
        "The OA and NA constraints at X are treated similar to the previous cases, and so is the case if either Y or Z is labelled by a terminal symbol.",
        "Case 4: If (q1,q2,q3,q4) is associated with a node X, which has only one child Y, then we can deal with the various cases as follows.",
        "We will associate with Y the quadruple (p,q2,qa,․) and the constraint that root of the tree which can be adjoined at X should have the quadruple (q1,p,s,q4) associated with it among the trees which were allowed in the original grammar, if it is to be adjoined at X.",
        "The cases where the original grammar had null or obligatory *constraint associated with this node or Y is labelled with a terminal symbol, are treated similar to how we dealt with them in the previous cases.",
        "Once this has been done, let be the independent variables for this elementary tree a, then we produce as many copies of a so that q1,...,qm take all possible values from Q.",
        "The only difference among the various copies of a so produced will be constraints associated with the nodes in the trees.",
        "Repeat the process for all the elementary trees in C1.",
        "Once this has been done and each tree given a unique name we can write the constraints in terms of these names.",
        "We will now show why L(G1) = LT fl La.",
        "Let w E L(G1).",
        "Then there is a sequence of adjoining operations starting with an initial tree a to derive w. Obviously, w E LT, also since corresponding to each tree used in deriving w, there is a corresponding tree in G, which differs only in the constraints associated with its nodes.",
        "Note, however, that the constraints associated with the nodes in trees in Gs are just a restriction of the corresponding ones in G, or an obligatory constraint where there was none in G. Now, if we can assume ( by induction hypothesis ) that if after n adjoining operations we can derive 7' E D(a'), then there is a corresponding tree 7 E D(a) in G, which has the same tree structure as 7' but differing only in the constraints associated with the corresponding nodes, then if we adjoin at some node in 7' to obtain 71', we can adjoin in ry to obtain 71 (corresponding to 71').",
        "Therefore, if w can be derived in G1, then it can definitely be derived in G. If we can also show that L(G1) C LR, then we can conclude that L(01) C LT n LR.",
        "We can use induction to prove this.",
        "The induction hypothesis is that if all derived trees obtained after k < n adjoining operations have the property P then so will the derived trees after n + 1 adjoinings where P is defined as, Property P: If any node X in a derived tree 7 has the foot-node of the tree ft to which X belongs labelled Y as a descendant such that w1 Y w2 is the frontier of the subtree of fi rooted at X, then if (q1,q2,qs,q4) had been associated with X, 64(q1,w1) q2 and e(qs,w2) q4, and if w is the frontier of the subtree under the foot node of ft in 7 is then 64(q2,w) qs.",
        "If X is not the ancestor of the foot node of ti then the subtree of fi below is of the form w1w2.",
        "Suppose X has associated with it (q1,q,q,q2) then .5*(q1,w1) q, 61(0'10 = Actually what we mean by an adjoining operation is not necessarily just one adjoining operation but the minimum number so that no obligatory constraints are associated with any nodes in the derived trees.",
        "Similarly, the base case need not consider only elementary trees, but the smallest (in terms of the number of adjoining operations) tree starting with elementary trees which has no obligatory constraint associated with any of its nodes.",
        "The base case can be seen easily considering the way the grammar was built (it can be shown formally by induction on the height of the tree) The inductive step is obvious.",
        "Note that the derived tree we are going to use for adjoining will have the property P, and so will the tree at which we adjoin; the former because of the way we designed the grammar and assigned constraints, and the latter because of induction hypothesis.",
        "Thus so will the new derived tree.",
        "Once we have proved this, all we have to do to show that L(G1) C LR is to consider those derived trees which are sentential trees and observe that the roots of these trees obey property P. Now, if a string x E LT fl LR, we can show that x E L(G).",
        "To do that, we make use of the following claim.",
        "Let ft be an auxiliary tree in G with root labelled Y and let 7 E D(fi).",
        "We claim that there is a fi' in G1 with the same structure as such that there is a 7' in D(beta())') where 7' has the same structure as 7, such that there is no OA constraint in 7'.",
        "Let X be a node in Al which was used in deriving 7.",
        "Then there is a node X' in 7' such that X' belongs to the auxilliary tree fin' (with the same structure as ft.",
        "There are several cases to consider - Case 1: X is the ancestor of the foot node of /31, such that the frontier of the subtree of fii rooted at X is w5Yw4 and the frontier of the subtree of 7 rooted at X is wsw1Zw2w4.",
        "Let elqi,ws) q, 6.",
        "(chwt) = q2, 6\".",
        "(c13.w2) = r, and blr,w4) q4.",
        "Then X' will have (q1,q,r,q4) associated with it, and there will be no OA constraint in 7.",
        "Case 2: X is the ancestor of the foot node of fii, and the frontier of the subtree of fii rooted at X is wsYw4.",
        "Let the frontier of the subtree of 7 rooted at X is wswiw2w4.",
        "Then we claim that X' in 7' will have associated with it the quadruple (q/,q,r,q4), if blqi,ws) q, e(q,w1) p, e(p,w2) r, and e(r,w4) q4.",
        "Case 3: Let the frontier of the subtree of Ai (and also 7) rooted at X is wiws.",
        "Let b4(q,w1) p, e(p,w2) r. Then X' will have associated with it the quadruple (q,p,p,r).",
        "We shall prove our claim by induction on the number of adjoining operations used to derive 7.",
        "The base case (where ry = 13) is obvious from the way the grammar Gs was built.",
        "We shall now assume that for all derived trees 7, which have been derived from 41 using k or less adjoining operations, have the property as required in our claim.",
        "Let 7 be a derived tree in ft after k adjunction.",
        "By our inductive hypothesis we may assume the existence of the corresponding derived tree E D(Q') derived in 01.",
        "Let X be a node in 7 as shown in Fig. 4.4.1.",
        "Then the node X' in 7' corresponding to X will have associated with it the quadruple (q:',q2',qs',q4 6).",
        "Note we are assuming here that the left child Y' of X' is the ancestor of the",
        "foot node col fr.",
        "The quadruples (qe,q2',q8'.p) and (p.p1ah.q4) will be associated with Y' and z.",
        "(by the induction hypothesis).",
        "Let it be derived from 7 by adjoining Pi at X as in Fig. 4.4.2.",
        "We have to stow the existence of Pi I.",
        "01 such that the root of this auxiliary Use has associated with it the quadruple (q,q1',q4•,r).",
        "The existence of the tree follows from induction hypothesis (k 0).",
        "We have also got to show that there exists 7I' with the same structure as Y but one that allows pi to be adjoined at the required node.",
        "But this should be so, since from the way we obtained the trees in GI, there will exist 71• such that X1' has the quadruple (q,q2',q2',r) and the constraints at X1' are dictated by the quadruple (q,qt.,q4•,r), but such that the two children of Xs' will have the same quadruple as in We can now adjoin Pi' in 71• to obtain 71'.",
        "It can be shown that is' has the required property to establish our claim.",
        "Firstly, any node below the foot of in it' will satisfy our requirements as they are the same as the corresponding nodes in 71•.",
        "Since pi' satisfies the requirement, it is simple to observe that the nodes in #1' will, even after the adjunction of pi' in 71•.",
        "However, because the quadruple associated with X1' are different, the quadruples of the nodes above X1' must reflect this change.",
        "It is easy to check the existence of an auxiliary tree such that the nodes above Ns' satisfy the requirements as stated above.",
        "It can also be argued an the basis of the design of grammar Gs, that there exists trees which allow this new auxiliary tree to be adjoined at the appropriate place.",
        "This then allows us to conclude that there exist a derived tree for each derived tree belongin to D(P) as in our claim.",
        "The next step is to extend our claim to take into account all derived trees (i.e., including the sentential trees).",
        "This can be done in a manner similar to our treatment of derived trees belonging to D(P) for some auxiliary tree 13 as above.",
        "Of course, we have to consider only the case where the finite state automaton starts from the initial state qe, and reaches some final state of on the input which is the frontier of some sentential tree in G. This, then allows us to conclude that LT fl Lit C L(G1).",
        "Hence, L(G1) =• LT fl La."
      ]
    },
    {
      "heading": "b. HEAD GRAMMARS AND TAG'.",
      "text": [
        "In this section, we attempt to show that Head Grammars (HO) are remarkably similar to Tree Adjoining Grammars.",
        "It appears that the basic intuition behind the two systems is more or less the same.",
        "Head Grammars were introduced in [Pollard,10841,.but we follow the notations used io IRoach,19841.",
        "It has been observed that TAG's and HG's share a lot of common formal properties such as almost identical closure results, similar pummping lemma.",
        "Consider the basic operation in Head Grammars - the Head Wrapping operation.",
        "A derivation from a non-terminal produces a pair (a more convenient representation for this pair is a1...asta/4.1...a„ ).• The arrow denotes the head of the string, which in turn determines where the string is split up when wrapping operation takes place.",
        "For example, consider X->LL2(A,B), and let As:ewhix and 13'ugsv.Then we say, X'whagivx.",
        "We shall define some functions used in the HG formalism, which we need here.",
        "If A derives in 0 or more steps the headed string whx and B derives utv, then",
        "= n g v",
        "Based on this observation, we attempt to show the close relationship of TAL's and HL's.",
        "It Is more convinient for us to think of the headed string (i,a/...a.)",
        "as the string 11...1, with the head pointing in between the symbols s and a/44 rather than at the symbol a/.",
        "The definition of the derivation operators can be extended in a straightforward manner to take this into account.",
        "However, we can acheive the same effect by considering the definitions of the operators LL,LC,etc.",
        "PoUard suggests that cases such as LL2(ia) be left undefined.",
        "We shall assume that if 7...why then LL21i,I) whky, Tr, LC2(i,I) == LC2(5.,i) I. it, Tr, and.",
        "LCIO,:ii) We, then say that if G is a Head Grammar, then w1 whx belongs to L(G) if and only if S derives the headed string wVatl'or With this new definition, we shall show, without giving the proof, that the c•ss of TAL's is contained in the class of HL's.",
        "by systematically converting any TAG G to a HG G'.",
        "We shall assume, without loss of generality, that the constraints expressed at the nodes of elementary trees of G are -",
        "1) Nothing can be adjoined at a node (NA), 2) Any appropriate tree (symbols at the node and root of the auxilliary tree must match) can be adjoined (AA), or 3) Adjoining at the node is obligatory (OA).",
        "IL is easy to show that these constraints are enough, and that selective adjoining can be expressed in terms of these and additional non-terminals.",
        "We know give a procedural description of obtaining an equivalent Head Grammar from a Tree-Adjoining Grammar.",
        "The procedure works as follows.",
        "It is a recursive procedure (Convert_to_HG) which takes in two parameters, the first representing the node on which it is being applied and the second the label appearing on the left-hand side of the HG productions for this node.",
        "If X is a nonterminal, for each auxiliary tree j3.whose root has the label X, we obtain a sequence of productions such that the first one has X on the left-hand side.",
        "Using these productions, we can derive the string w1Xw2 where a derived tree in D09) has a frontier w1Yw2.",
        "If Y is a %ode with with label X in some tree where adjoining is allowed, we introduce the productions Y' -> LL2(X,N') (so that a derived tree with root label X say wrap around the string derived froa the subtree below this nods} N' -> LCI(At A1) {assuming that there are j children of this node and the it► child is the ancestor of the foot node.",
        "By calling the procedure recursively for all the J children of Y with Ak,k ranging from 1 through j, we can derive fro.",
        "N' the frontier of the subtree below Y} Y' -> N' ( this is to handle the case where no adjunction takes place at Y) If G is a TAG.",
        "then we do the following Repeat for every Initial tree Convert to HG(root,S9 (5' till be the start syabol of the new HeaGraaaar).",
        "Repeat for each Auxilliary tree Convert to 11G(root,rooteyabol) where Convert to HG(node,naae) is defined as follows if node is an internal node then case 1 If the constraint at the node is AA add productions Sya->LL2(node syabol.B.).",
        "N'->LCI(Ak' Sya->LC2(A1' ,, Ak' where N',A1',A2',...A1' are new non-terminal syabols,Ak Ai correspond to the j children of the node and 1=1 if foot node is not • descendant of node else =1 such that the lth child of node is ancestor of foot node,J=nuaber of children of node for k=1 to J step 1 do Convert to HO(kt% child of node,Ak').",
        "Case 2 The constraint at the node is NA.",
        "Same as Case 1 except don't add the productions Sya->LL1(node symbol.N9, N'->LCI(Al\" A1').",
        "Case 3 The constraint at the node is OA.",
        "Same as Case 1 except that we don't add else if the node has a terminal syabol a, then add the production Sy A else (it is a foot node } if the constraint at the foot nods is AA then add the productions _ _ Sy ->LL2(node syabolM/X if the constraint is OA then add only the production Sy ->LL2(node syabol;3) if the constraint is itA add the production Sys. – >a We shall now give an example of converting a TAG G to a HG.",
        "G contains a single initial tree a, and a single auxiliary tree as in Fig. 5.2.",
        "Applying the procedure Convert_to_HG to this grammar we obtain the HG whose productions are gives by",
        "It is worth emphasising that the main point of this exercise was to show the similarities between Head Grammars and Tree Adjoining Grammars.",
        "We have shown bow a HG G' (using our extended definitions) can be obtained in a systematic fashion from a TAG G. It is our belief that the extension of the definition may not necessary.",
        "Yet, this conversion process should help us understand the similarities between the two formalisms."
      ]
    },
    {
      "heading": "8. OTHER MATHEMATICAL PROPERTIES OF TAG's",
      "text": []
    }
  ]
}
