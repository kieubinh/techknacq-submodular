{
  "info": {
    "authors": [
      "Hsin-Hsi Chen",
      "I-Peng Lin",
      "Chien-Ping Wu"
    ],
    "book": "International Conference on Computational Linguistics",
    "id": "acl-C88-1024",
    "title": "A New Design of PROLOG-Based Bottom-Up Parsing System With Government-Binding Theory",
    "url": "https://aclweb.org/anthology/C88-1024",
    "year": 1988
  },
  "references": [
    "acl-J81-4003",
    "acl-J87-1001"
  ],
  "sections": [
    {
      "text": [
        "(b) c(Arg) --> c1(Arg1),c2(Arg2) ..... ci(Argi), trace(TraceArg),c0+1)(Argo+0,...,cn(Argn).",
        "where the definitions of c(Arg) and c.(ArgJ.)",
        "(15 j n) are the same as above, J trace(TraceArg) is a virtual non-terminal.",
        "The special case i=0 is common.",
        "For example, a noun phrase is topicalized from a subject position.",
        "It is represented as s --> trace,np.",
        "(2) the leftward movement grammar rules - c(Arg) --> c (Arg ),c2(Arg2),...,ci(Argi), tn(Argm)<<<trace(TraceArg), c(+ )(Arg(+i)),...,cn(Argn).",
        "where thedefinitions of c(Arg) and c.(Arg.)",
        "(15 j n) are the same as 1(a), JJ m(Argm)<<<trace(TraceArg) is a movement non-terminal.",
        "When 1=0, the movement non-terminal is the first element in the rule body.",
        "(3) the rightward movement grammar rules - ( (Arg) --> c (Arg 0,c2(Arg2) ..... ci(Argi), trace(TraceArg)>>>m(Argm), c(+ )(Arg(+ )),...,cn(Argn).",
        "Except that the operator '>>>' is used, the other definitions are the same as those in the leftward movement rules.",
        "It is apparent because of the uniform treatments of the leftward and the rightward movements."
      ]
    },
    {
      "heading": "2.2 A sample grammar",
      "text": [
        "A sample grammar GBLG1 for Chinese shown below introduces the uses of the formalism:",
        "Among those grammar rules, (rl) deals with the leftward movement (topicalization), (r9) treats the rightward movement (relativiza6on), and the others are normal grammar rules.",
        "The heads of the grammar rules (r3), (r4), (r5), (r7), and (r8) are bounding nodes.",
        "The virtual non-terminals traceT(Trace) and traceR(Trace) appear in the rules (r5), (r15), and (r16)."
      ]
    },
    {
      "heading": "2.3 Transitive relation of c-command theory",
      "text": [
        "For a phrasal non-terminal X, a virtual non-terminal Y and a transitive relation TR, X TRY if",
        "(1) Xis the rule head of a grammar rule, and Y is an element in its rule body, or (2) X is the rule head of a grammar rule, a phrasal non-terminal I in its rule body, and!",
        "TRY, or (3) there exists a sequence of phrasal non-terminals II, 12, ..., In, such that X TR Ii TR I2 TR ... TR In.",
        "The transitive relation TR is also a dominate relation.",
        "The c-command theory is embedded implicitly in the GBLGs if ( very grammar rules satisfy the following property: for a rule X0 --> X1,X2 ..... Xm where Xi is a terminal or a non-terminal, 15 i m, if Xj=(A<<<B) then there must exist some Xi (i< j m), such that Xi dominates the virtual non-terminal B in other grammar rule.",
        "That is, Xi TR B.",
        "The phrasal non-terminal X0 is the first branching node that dominates A and Xj, and thus also dominates B.",
        "Therefore, A c-commands B. Xi=(B>A) has the similar behavior.",
        "Rules",
        "(r1) and (r9) in grammar GBLG1 show these < and > relations respectively.",
        "2.4 Comparison with other logic programming approaches Compared with other logic programming approaches, especially the RLGs [8,9], the GBLGs have the following features: (1) the uniform treatments of leftward movement and the rightward movement -",
        "The direction of movement is expressed in terms of movement operators <<< or >>>.",
        "The interpretation of movement non-terminals A <<< B or B >>> A is If A is a left moved constituent (or a right moved constituent), then the corresponding trace denoted by B should be found after (or before) A <<< B (or B > A).",
        "It is illustrated in the Fig. 1.",
        "The two trees are symmetric and the corresponding rules are similar.",
        "However, the rules are not similar in RLGs.",
        "That is, the two types of movements are not treated in the same way.",
        "For the rightward movement, a concept of adjunct node is introduced.",
        "It says that the right moved constituent is found if the rule hung on the adjunct node is satisfied.",
        "The operation semantics is enforced on the writing of the logic grammars.",
        "It destroys the declarative semantics of logic grammars to some extent.",
        "(2) the arbitrary number of movement non-terminals in the rule body - In our logic grammars, the number of movement non-terminals in a rule is not restrictive if the rule satisfies the property specified in the last section.",
        "The RLGs allow at most one movement non-terminal in their rules.",
        "The position of movement non-terminal is declared in the rule head.",
        "It is difficult for a translator to tell out the position if different types",
        "of elements are interleaved in the rule body.",
        "Thus, our formalism is more clear and flexible than RLGs'.",
        "(3) automatic detection of grammar errors before parsing For significant grammar rules, a transitive relation TR must be satisfied.",
        "The violation of the transitive relation can be found beforehand during rule translation.",
        "Thus, this feature can help grammar writers detect the grammar errors before parsing.",
        "\"11*",
        "c(G,Arg,H,Xn,X).",
        "Here, the trace information is placed between Hi and H(i+1).",
        "Summing up, the virtual non-terminal is represented as a fixed format: x(irace(TraceArg),Bound,Direction) and placed into x-list via merge operation.",
        "The position in x-list is reflected from the original rule.",
        "3.3.2 The leftward movement grammar rules The leftward movement grammar rules can be generalized as below: c(Arg) --> c (Arg ),c2(Arg2),..., ci(Argi)<trace(TraceArg),c(i+i)(Arg(i+i)),..., cn(Argn).",
        "The rule (ii) is an example.",
        "Its translation is shown as follows:",
        "c(G,Arg,H,Xn,X).",
        "Comparing this translation with that of general grammar rules, we can find a new predicate cut_ trace is added.",
        "The cut trace implements the c-command principle, and its definition is:",
        "(Trace=x(TraceInfo,Bound,left),!",
        ";fail); cut_traceaux(Trace,X,Y)).",
        "The cut trace tries to retract a trace from x-list if a movement exists.",
        "Mandarin Chinese has many specific features that other languages do not have.",
        "For example, topic-comment structure does not always involve movement transformation.",
        "The first cut_traceaux clause matches the trace information with the x-list transferred from the bottom on its right part.",
        "The second cut traceaux tells us that if the expected leftward trace cannot match one of the elements in the x-list, then it will be drop out.",
        "The x-list is not changed and transferred up.",
        "The concept is demonstrated in Fig. 4.",
        "It also explains why we can detect grammar errors before parsing.",
        "In summary, each movement non terminal is decomposed into a phrasal non-terminal and a virtual non-terminal.",
        "The phrasal non-terminal is translated the same as befoie.",
        "The virtual non-terminal is represented as x(trace(TraceArg),Bound,left) In this case, however, cut_trace is involved instead of merge.",
        "3.3.3 The rightward movement grammar rules Because we treat the leftward and the rightward movement grammar rules in a uniform way, the translation algorithm o; both are similar.",
        "The rightward movement grammar rules are with the following format:",
        "Fig.",
        "4 the sketch of the translation of the leftward production rules goal(c(i-1),[Arg(i-1)],II(i-1),X(i-2),X(i-1)), mergeaHl,F12,...,11(i-1)1,T1), cut_trace(x(trace(TraceArg,Bound,right)), T1,T2), goal(cn,[Argn],Hn,X(n-1),Xn), merge(fT2,11i,...,HnI,H), c(G,[Arg],H,Xn,X).",
        "The translation is very apparent for the symmetric property of the leftward and the rightward grammar rules illustrated in Fig. 4 and Fig. 5.",
        "A slight difference appears in the definition of the , a trace should hethe right-movedIf there is a trace in this range, the corresponding moved element is on the upper level found in this rangeconstituent Fig. 5 the sketch of the translation of the rightward production rules predicate cut trace.",
        "It shows an important linguistic phenomenon in MandarinChinese: 'Relativization is always a movement transformation.'",
        "Thus, if we expect a trace and cannot find a corresponding one, failure is issued.",
        "The direction information in a(trace(TraceArg),Bound, right), i.e. right, tells out the difference between the leftward and the rightward movements.",
        "In general, we allow both leftward movement and rightward movement to appear in the same rule.",
        "A new predicate intersection is introduced to couple these two translations."
      ]
    },
    {
      "heading": "3.4 Invocation of the parsing system",
      "text": [
        "The parsing system is triggered in the following way: goal(a start non-terminal,[a sequence of arguments], an empty x-listda sequence of input string-1a.",
        "In GBLG1, the invocation is shown as follows: goal(s1barjParseTreeMZ,Z1,[input sentence],!",
        "]), var(Z).",
        "Because an empty x-list is represented as [Z,Z] (Z: a variable) in our special data structure shown in Section 3.2, vai(Z) verifies its correctness.",
        "For example, to parse the Chinese",
        "sentence \"41 0 AIftE4At V 7\" (the student that that man saw catne), we trigger the parser by calling: goal(slbarAS lbarb[Z,Z],['11r , 'Of 71,0),var(Z).",
        "?- goal(s1 bar, [ S 1 bar] ,[Z,Z],['th atVman Vsaw",
        "If therein a trace in thin range the corresponding moved element is on the upper level the expected left-moved constituent a trace should he found in this range if the",
        "(As for fruit, I like banana.)",
        "the first can be considered to be a movement phenomenon, but the second cannot.",
        "(2) The empty constituent may exist at many possible positions.",
        "For example, given an n-word sentence such as el wl e2 w2 e3e(n1) w(n1) e(n) w(n) e(n+1) where wi is the i-th word and ei is an empty constituent, there are (n+1) possible positions from which the moved constituent may originate.",
        "That is, for a moved constituent (if there is any), there are so many possible empty constituents to co-index.",
        "(3) Since the gap in between the moved constituent and its corresponding trace is arbitrary, it is implausible to list all the possible movements exhaustively, and specify each movement constraint explicitly in the grammars.",
        "c.(Arg.)",
        "(15 j 5. n) is, a lexical terminal (31 JJ a phra.sal non-terminal."
      ]
    },
    {
      "heading": "4. Conclusion",
      "text": [
        "This paper addresses the problems of movement transformation in Prolog-based bottom-up parser.",
        "Three principles of Government-Binding theory are considered to deal with these problems.",
        "They are Empty Category Principle, C-command Principle and Subjacency Principle.",
        "A sequence of translation rules is given to add these linguistic principles to the general grammar rules, the leftward movement grammar rules, and the rightward movements grammar rules respectively.",
        "The empty constituent problem is solved in this paper to allow the trace to be the first element in the grammar rule body.",
        "A special data structure for extraposition list is proposed to transfer the movement information from the bottom to the top.",
        "Based upon this structure, the fastest merge algorithm is designed.",
        "Those unnecessary merge predicates can be eliminated with the help of transitive relation.",
        "Thus, the new design not only extends the original bottom-up parsing system with the movement facility, but also preserves the parsing efficiency."
      ]
    },
    {
      "heading": "References",
      "text": [
        "Based upon the translation algorithms specified in Section 3, the logic grammar GBLG1 is translated as below.",
        "The clause (ti) is the relevant translated result of the grammar rule (ri).",
        "Note the codes have been optimized.",
        "Those unnecessary merge operations are deleted from the translated results."
      ]
    },
    {
      "heading": "3. A Bottom-up Parser in Prolog",
      "text": []
    },
    {
      "heading": "3.1 Problem specifications",
      "text": [
        "The Bottom-Up Parsing system (BUP) [2,3,4] uses the left-corner bottom-up algorithm to implement Definite Clause Grammars (DCGs) [5].",
        "It overcomes the problems of top-down parsing, e.g. the left-recursive invocation, and provides an efficient way as Barley's and Pratt's algorithms [3].",
        "However, it does not deal with the important syntactic problem - movement transformation.",
        "Extraposition Grammars (XGs) [6] propose extraposition lists (x-lists) to attack the movement problem, but when to extract traces from x-lists becomes a new obstacle [8,9].",
        "Restricted Logic Grammars (RLGs) [8,9] based upon GB try to tackle the unrestricted extraction from the x-list.",
        "They emphasize the importance of the c-command and the subjacency principles during parsing.",
        "The extraction must obey these two principles.",
        "The parsing strategies of XGs and RLGs are all depth-first and left-to-right, thus they have the same drawbacks as DCGs do [4].",
        "If the parsing strategy is left-corner bottom-up, the following issues have to be considered in the translation of GBLGs: (1) the empty constituent problem - The first element in the rule body, which acts as a left-corner, should not be empty in left-corner bottom-up algorithm.",
        "However, the type 1(b) of rules is common.",
        "(2) the transfer of trace information - From Fig. 1, we know that the positions of empty constituents are usually lower than those of moved constituents.",
        "Because the parsing style is bottom-up, the trace information must be transferred up from the bottom.",
        "The conventional different list cannot be applied here.",
        "Fig.",
        "2 and Fig. 3 illustrates the differences of data flow between top-down parsing and bottom-up parsing.",
        "Fig.",
        "3 the data flow in the bottom-up parsing"
      ]
    },
    {
      "heading": "3.2 Data structure",
      "text": [
        "The transfer of trace information is through a list called extraposition list (x-list) and denoted by a symbol H. The transformation of x-list is bottom-up.",
        "Fig.",
        "3 sketches the concept.",
        "A special data structure shown below is proposed to carry the information: [fa sequence of trace informationIXJ,X] Note a tail variable Xis introduced, Based upon this notation, an empty list is represented as [Z,ZJ.",
        "An algorithm that merges arbitrary number of lists in linear time is designed: merge(X,Y) merge(X,Y,[Z,Z]).",
        "merge([],L,L) !.",
        "mergea[B,X]1TLYJA,B]) merge(T,Y,[A,X]).",
        "In the conventional list structure such as [a sequence of trace information] even though the difference list concept is adopted, the computation time is still in proportion to mi +m2+...+mn, where mi (15 i n) is the number of elements in the i-th list.",
        "Although our merge algorithm is the fastest, it is still a burden on the parsing.",
        "In most cases, the predicate merges empty lists.",
        "That is nonsense.",
        "To enhance the parsing speed, the merge predicate is added in which place it is needed.",
        "Observing the merge operation, we can find that it is needed only when the number of lists to be merged is greater than one.",
        "The following method can decrease the number of x-lists during rule translation, and thus delete most of the unnecessary merges: Partition the basic elements in the logic grammars into two mutually exclusive sets: carry-H set and non-carry-H set.",
        "The elements in the carry-H set may contribute trace information during parsing, and those in the non-carry-H set do not introduce trace information absolutely.",
        "The transitive relation TR defined in the section 2.3 tells us which phrasal non-terminals constitute the carry-H set."
      ]
    },
    {
      "heading": "3.3 The translation of grammar rules",
      "text": [
        "The translation of basic elements in the GBLGs are similar to BUPs.",
        "Only one difference is that an extra argument that carries trace information may be added to phrasal non-terminal if it belongs to carry-H set.",
        "Appendix lists the translated results of the grammar GBLG1.",
        "3.3.1 The general grammar rules The general grammar rules are divided into two types according as a virtual non-terminal disappears or appears in the rule body:"
      ]
    }
  ]
}
