{
  "info": {
    "authors": [
      "Marc Domenig"
    ],
    "book": "International Conference on Computational Linguistics",
    "id": "acl-C88-1032",
    "title": "Word Manager: A System for the Definition, Access and Maintenance of Lexical Databases",
    "url": "https://aclweb.org/anthology/C88-1032",
    "year": 1988
  },
  "references": [
    "acl-C86-1020"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "This paper describes Word Manager, a system which is currently the object of a research project at the University of Zurich Computer Science Department.",
        "Word Manager supports the definition, access and maintenance of lexical databases.",
        "It comprises a formal language for the implemenation of morphological knowledge.",
        "This formal language is integrated in a graphics-oriented, high-level user interface and is language independent.",
        "The project is now in the prototyping phase where parts of the software are pretty far advanced (the user interface) and ,others are still rudimentary (the rule compiler/runtime system).",
        "The design of the system was strongly influenced by Koskenniemi's two-level model /Koskenniemi 1983/, its successors /Bear 1986/, /Black 1986/, /Borin 1986/, /Darymple 1987/, the ANSI-SPARC 3-Schema Concept /ANSI-X3-SPARC 1975/ and visual programming techniques /Bocker 1986/, /Myers 1986/: We will focus the discussion on one aspect: the user interfacing for the construction of the lexical data base."
      ]
    },
    {
      "heading": "1. Introduction",
      "text": [
        "As I have argued elsewhere /Domenig 1986, 1987a, 1987b/, a dedicated system yields many advantages for the implementation, use and maintenance of lexical databases.",
        "The functionality of general purpose database management systems - e.g. relational ones - is too limited for lexical databases because they are not tuned to the task at hand; in particular, they do not provide for a formalism which is suited to describe linguistic knowledge.",
        "The reason why we would like to have such a formalism is that it allows us to take advantage of a computer's processing abilities, i.e. we may construct a lexical database which is not only a collection of purely 'static' information - a set of entries - but has 'dynamic' capabilities.",
        "For instance, the latter might be that it can analyse and generate inflected or composed word forms.",
        "\"What would be the advantage of that?\" one might ask.",
        "\"It is no problem to add on these capabilities to a purely 'static' set of entries stored within a commercially available database management system by writing programs in the host language to this system!\" The answer is: there are a lot of advantages and I hope to clarify some of them in this paper.",
        "A dedicated system supports the construction, use and maintenance of lexical databases much more directly than a general purpose database management system in conjunction with a conventional programming language interface.",
        "Word Manager was designed as such a system, whereas Word Manager does not necessarily manage all the information stored in a lexical database.",
        "At this stage of the project, it manages only morphological knowledge, i.e. it would be quite feasible to use it as a front-end to a database managed by a general purpose system.",
        "2.",
        "Overview of the user interfacing",
        "Word Manager distinguishes two quite different interfaces for the construction and maintenance of lexical databases: one for the specification of what term conceptual knowledge (linguist interface) and one for the specification of what I call no n conceptual knowledge (lexicographer interface).",
        "The former is the place where the kind of morphological knowledge is defined which can be typically found in grammars, the latter is a dialogue-oriented interface for the entering of the bulk of the data.",
        "The relationship between the two interfaces is one of a strong dependency, i.e. the lexicographer interface depends very much on the specifications in the linguist interface.",
        "Much of the machine-lexicographer dialogue can be inferred automatically from these specifications.",
        "The formalism employed in the linguist interface was designed to be powerful enough to implement morphological knowledge of several natural languages on the one hand, yet dedicated enough to be easy to handle for linguists.",
        "Moreover, it provides the opportunity to experiment with different conceptual approaches within a certain framework.",
        "The following section will outline it.",
        "3.",
        "The specification of morphological knowledge in the linguist interface",
        "The linguist interface is conceived as a highly controlled environment which takes advantage of the latest hard and software technology.",
        "This means that the user does not communicate with the computer on the level of its operating system except for when the application is started.",
        "On the level of the operating system, each morphological knowledge specification is represented by a so-called document icon (the two rightmost icons in Fig. 1 are document icons).",
        "By mousing such an icon, the user may start the application and load the specification stored in the document.",
        "Alternatively, he could start it by mousing the application icon (the leftmost icon in Mg. 1 is the application icon).",
        "Within the application environment, each document (morphological knowledge specification) is represented by a so",
        "called tool-window which contains eight labelled check-boxes (see Fig. 2).",
        "Each of these check-boxes represents a window, the name and purpose of which is indicated by the label: The window surface character set provides for the definition of the character set out of which so-called surface strings are built.",
        "Surface strings are used for the surface representation of word forms.",
        "The window is graphics-oriented, i.e. most of the definitions are done with mouse and menu commands (see Fig. 3).",
        "The window lexical character set provides for the definition of the character set out of which so-called lexical strings are built.",
        "Lexical strings are used to define linguistically motivated abstractions of surface strings.",
        "The set is usually defined to include characters denoting morpheme boundaries and/or morphophonemes.",
        "The window is very similar to the surface character set window.",
        "The window feature domains provides for the domain specifications of the attribute-value pairs",
        "The window feature dependencies provides for the definition of dependencies between features.",
        "An example specification is shown in Fig. 5.",
        "(Cat N) demands Gender",
        "dependencies",
        "The window two-level rules provides for the definition of morphophonemic rules which realize the mapping function between the surface and lexical strings.",
        "The rules specified here are similar to those in DKIMMO/TWOL /Darymple 1987/.",
        "The window is a text-oriented editor.",
        "An example specification is shown in Fig. 6 (the two rules handle noun genitive Eels: the first one replaces \"+\" by \"e\" as in Strausses, Reflexes, Reizes, the second one duplicates \"s\" as in Verhdltnisses, Verhangnisses, Erschwernisses).",
        "The window functions provides for the definition of rules for the kind of string-manipulations which should not be realized with two-level rules (because their power would be excessive or they would imply the introduction of linguistically unmotivated morphophonemes).",
        "The window is a text-oriented editor.",
        "An example specification is shown in Fig. 7 (ReCap recapitalizes prefixed nouns).",
        "The window inflection provides for the definition of word classes with their inflectional rules and paradigms.",
        "This window is a graphical tree editor which allows the interactive construction of an nary tree.",
        "This tree is used to structure the rules and constituents which define the word classes.",
        "The structuring criteria are features (attribute value pairs) and the structure has the following semantics: the rules specified in a subtree operate on the constituents specified within the same subtree.",
        "Fig.",
        "8 shows a subtree which contains rules and constituents for German noun inflection (only the top branch (IRule UMLAUT) is expanded down to the terminal nodes).",
        "The terminal nodes of the tree contain either rules or constituents.",
        "By mousing them, the user may open text-oriented editor windows.",
        "An example of a rule is shown in Fig. 9: it consists of matching constraints (realized by feature sets) on the constituents and specifies a set of lemma forms and a set of word forms.",
        "In the example, the set of lemma forms - specified below the keyword 'lemma' - is a single word form (nominative singular;",
        "the pattern of feature sets identifies exactly one form which is put together by the concatenation of three constituents).",
        "The set of word forms - specified below the keyword 'paradigm' - consists of eight elements (the case paradigm; the two patterns of feature sets identify exactly eight forms, each of which is put together by the concatenation of three constituents).",
        "The constituent windows specify either so-called hard-coded constituents or constituent types.",
        "The former are feature sets which are associated with 'hard-coded' lexical strings (see Fig. 10); they are typically used to specify inflectional",
        "affixes.",
        "The latter are feature sets where the associated strings are represented by place holders, i.e. the strings are not specified yet but will be entered later, either via the lexicographer interface or by the firing of compositional rules (see Fig. 11).",
        "They are typically used to specify word roots.",
        "From what has been said so far, we may infer how an entry into the database is made and what it will generate: the specification of an entry requires the identification of an inflectional rule and the specification of the lexical strings which are represented as place holders in the constituents matched by the rule.",
        "Usually, this means that one or two strings have to be entered.",
        "From this, the system may generate the entire inflectional paradigm of the word.",
        "Notice that the user of the linguist interface defines with his specification what a word is (viz. a set of lemma forms and a set of word forms).",
        "Moreover, Word Manager imposes the convention that only entire words - and no isolated word forms - may be entered into the database.",
        "The window composition provides for the definition of compositional rules and constituents (affixes).",
        "This window is a graphical tree editor similar to the window inflection where the rules and constituents are structured by features which qualify them.",
        "The rules in the terminal nodes (see Fig. 12) define new potential word entries by specifying how constituents of existing entries are combined with",
        "each other and with constituents defined in the window composition (derivational affixes).",
        "These rules are usually not applied generatively but analytically, because a generative application is likely to overgenerate (theoretically, the user may specify an arbitrary number of features which restrict excessive generation, but I believe that this is impractical in most cases, because it implies that the lexicographer has to specify a host of features for each entry).",
        "The purpose of the rules is that all derived and compound words may be entered into the database via the triggering of such rules.",
        "This has the advantage that the system (automatically) keeps track of the derivational history and therefore the morphological structuring of each entry."
      ]
    },
    {
      "heading": "4. The lexicographer interface",
      "text": [
        "Given a compiled specification of the conceptual morphological knowledge defined within the linguist interface, Word Manager may generate a dialogue which guides the lexicographer towards the identification of the inflectional/compositional rules that must be triggered in order to add an entry to the database.",
        "In the case of non-composed words, for example, Word Manager may simply navigate in the tree which structures the inflectional rules (specified in the window inflection), posing questions according to the structuring criteria.",
        "In the case of composed words, Word Manager may apply the compositional rules in analytical mode, provided that the 'initial' information consists of a word string.",
        "Such an analytical application of the rules is usually not very overgenerating - in contrast to a generative application-, i.e. the system will be able to present a reasonably limited number of selection choices."
      ]
    },
    {
      "heading": "5, Conclusion",
      "text": [
        "The advantages of a dedicated system like Word Manager for the management of lexical databases are manifold.",
        "In this paper, we have restricted the discussion to the advantages yielded during the construction of the database.",
        "These are by no means the only ones: the dedication also implies that the overhead of non-dedicated systems (e.g. general purpose DBMS in conjunction with conventional programming languages), i.e. the features which are",
        "superfluous for lexical databases, is avoided.",
        "On the other hand, Word Manager provides features which a general purpose system will never have, viz. the special formalism to implement morphological knowledge.",
        "'this is not only beneficial from the point of view of the interfacing to the database but also from the point of view of the software design: in the dedicated :iysterrt, the morphological knowledge is a part of conceptual database schema.",
        "(in the terminology of database theory) and thus belongs to the kernel of the system, as It were.",
        "When a general purpose database management system in conjunction with a conventional programming language is used to implement the same kind of knowledge, it has to be implemented within the external schemata to the database &rid thus repeatedly for each of them.",
        "The so-called code factoring is therefore much better in a dedicated system: the knowledge is more centralizer; and implemented with a minimum of reduncancy."
      ]
    },
    {
      "heading": "Referenoui",
      "text": []
    }
  ]
}
