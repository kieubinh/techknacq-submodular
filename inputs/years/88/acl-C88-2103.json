{
  "info": {
    "authors": [
      "Hiroyasu Nogami",
      "Yumiko Yoshimura",
      "Shin-Ya Amano"
    ],
    "book": "International Conference on Computational Linguistics",
    "id": "acl-C88-2103",
    "title": "Parsing With Look-Ahead in Real-Time On-Line Translation System",
    "url": "https://aclweb.org/anthology/C88-2103",
    "year": 1988
  },
  "references": [
    "acl-P88-1019"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "In order to increase parsing efficiency in a real-time on-line translation system interfaced with a keyboard conversation program, we have developed a version of the ATN formalism with a lookahead function.",
        "By permitting future input to be scanned, arcs can be reordered or suppressed.",
        "Various mechanisms utilizing this capability arc presented."
      ]
    },
    {
      "heading": "I. Introduction",
      "text": [
        "A real-time on-line communication system including automatic translation was realized by combining a keyboard conversation function with an English-Japanese bidirectional machine translation system implemented on a workstation [Ammo 1986, 1987].",
        "Using a satellite connection, bilingual conversations were held between members of this laboratory in Japan and visitors to the 5th World Telecommunications Exhibition Telecom 87, organized by the International Telecommunication Union, held in Geneva from 20th to 27th October in 1987 [Ammo 1988a, 1988b] [Miike 1988] [Takeda 1988] [Asahioka 1988].",
        "The general set-up, the screen display and the system configuration are illustrated in Appendix.",
        "The system operates as follows: an operator in Switzerland types his/her message in English which is displayed in the upper window and is transmitted via standard telecommunications devices to Japan, where it is immediately translated into Japanese.",
        "The operator in Japan receives the message in Japanese in the lower window and types his/her response in Japanese.",
        "This is translated and then transmitted to Switzerland.",
        "The system is like UNIX's* 'talk', except that contributions to the dialogue appear in the appropriate language.",
        "An important feature of such a real-time translation system is that translation time must be reduced to an absolute minimum so that the conversation can proceed naturally.",
        "To reduce the parsing time, this system uses a version of the ATN formalism with a lookahead function, based on the concept of a parsing method using global information.",
        "This parsing method proved to be very effective during this experiment, so that we could communicate with visitors very naturally irrespective of time taken for satellite communication and time required in typing his/her messages.",
        "*UNIX is a Trademark of AT&T Bell Laboratories Focusing on the parsing of English, the paper discusses the concept of parsing using global information in Section 2, the realization of the parsing method as art ATN in Section 3 and the conclusion in Section 4."
      ]
    },
    {
      "heading": "2. The concept of parsing using global information",
      "text": [
        "In parsing natural languages using large-size dictionaries and grammars, there are usually multiple categorial and syntactic possibilities for the current word, when using only the information associated with this word.",
        "The parsing methods in [Woods 1970][Pereira 1980] use only the information of the current word, so that these methods waste much time trying a lot of possibilities which eventually prove to be failure.",
        "Such possibilities, however, can be suppressed or reordered even at the current word position by using global surface information from the input without really parsing it.",
        "This notion is especially useful, given the following features of English syntax:",
        "i) constituents consist of at least one obligatory element, e.g. a sentence requires a verb, a noun phrase requires a noun, etc.",
        "ii) many structures involve discontinuities, e.g. as --- as, not -- but, the more --- the more, both --- and, etc.",
        "In order to suppress or reorder the possibilities, these features are used in real parsing as follows.",
        "These features suggest that each rule of a CF grammar requires at least one obligatory terminal element, as well as optional terminal and non-terminal elements.",
        "By looking for the obligatory elements in the global input as the first step in applying a given rule, the rule can be rejected or reordered dynamically at the current word position.",
        "This search is of great significance, especially if there are many intervening optional elements and/or these are themselves rather complex.",
        "This function further has the additional advantage of provisionally partitioning the input into approximate constituents delineated by the obligatory elements which act as ''stepping stones\" through the input \"stream\".",
        "This",
        "might be useful for parsing with parallel processors, and may have implications for cognitive psychology applications of parsing.",
        "However, we have not pursued these particular aspects.",
        "3.",
        "Realization of parsing using global information as an ATN"
      ]
    },
    {
      "heading": "3.1. Look ahead mechanisms",
      "text": [
        "We have realized the \"Parsing using global information\" method as an ATN, which uses the topdown depth-first search method, reinforced with a \"look ahead\" condition.",
        "This condition checks the specified obligatory elements which each syntactic or categorial possibilities (denoted as arcs of ATN) require in the future input, from the current word position to the number specified or to the end of sentence as default.",
        "The ATN with \"look ahead\" conditions works very effectively for (1) rejection of syntactic possibilities, (2) reordering of them, (3) rejection of categorial possibilities, and (4) reordering of them.",
        "These are best shown with some examples of linguistic phenomena.",
        "(1) rejection of syntactic possibilities"
      ]
    },
    {
      "heading": "a) rejection of one syntactic possibility",
      "text": [
        "The general description for rejection is shown in Figure 1 with an example at the right-hand side.",
        "The general network of Figure 1 has the following meaning: At am 'A', if the obligatory condition 'c' which arc 'A' requires at arc 'ID' is not satisfied in the future input, then arc 'A' is rejected without really parsing from arc 'A' to arc `D'.",
        "(i.e. useless parsing from arc 'A' to arc 'D' can be avoided.)",
        "In parsing the example (a) without looking-ahead, \"the lecture\" can be analyzed as the subject of \"that-clause\".",
        "Eventually, this interpretation is rejected since there is no verb after \"lecture in (a).",
        "In this case, control returns to the previous backtrack point in the sub-network for \"noun phrase, and then wastes still more time trying all the remaining possibilities which will eventually lead to failure.",
        "On the other hand, by looking-ahead for a \"verb\" in the future input, parsing \"the lecture\" as the subject of \"that-clause\" can be avoided.",
        "In realistic, large-size ATN, states have a lot of arcs.",
        "For example, the first state of a sub-network for a noun phrase has a lot of arcs for determiner, pronoun, noun, adjective, present-participle, past-participle, adverb, possessive, prefix, negative, numeral, quantifier, intensive, interrogative, ---, and also for certain particular words such as \"that\", \"so\", \"both\", \"such\", \"from\" (ex.",
        "from 2 to 5 inch), etc.",
        "The number of arcs from this state alone is generally greater than the number of words in the average input sentence.",
        "And what's the next state also has lots of arcs.",
        "Therefore, even in parsing a noun phrase we must check an enormous number of arcs compared with the lookahead checks (see 3.2).",
        "'The lookahead function works more effectively as the length and the complexity of input sentences increase.",
        "For example, the lookahead is very useful if \"lecture\" has many coordinands and is modified by many optional elements such as a prepositional phrase, a participle phrase, etc.",
        "It is also useful for long-distance discontinuities, e.g. identification of phrasal verbs, or constructions such as \"so adj.",
        "--- that\", \"it[formal subj] -that[logical subj]\", \"not --- but\", \"the more --- the more\", \"either --- or\", etc.",
        "Compare the sentence \"I heard the lecture and then had lunch.\" to the sentences of Figure 1.",
        "Looking-ahead for \"verb\" beyond \"and\" in the future input is of no effect since \"had\" isn't an element within \"that-clause\".",
        "Therefore, a boundary condition which can terminate the lookahead search of \"verb\" at \"and\" can be considered.",
        "However, it is very difficult to give such conditions without real parsing, and such conditions might be rather complex and time-consuming.",
        "For this reason, we use only simple lookahead conditions without considering search boundary.",
        "Therefore, these conditions generally check categories or words of the future input to the end of the sentence (cf. (2)(4)).",
        "Note that such a simple check of a word in the future input takes about the same time as the traversal of one arc (see 3.2), and only conditions which never cause any mistakes beyond the search boundary must be written.",
        "Fortunately it is not difficult, because almost of all look-aheads work as an existential check of word or word sequence, which assures fail safe property.",
        "For example, the lookahead condition shown in Figure 1 never causes any mistakes.",
        "b) rejection of all possibilities which require the same obligatory element In this case, a \"fail arc\" is very useful, as shown in Figure 2.",
        "The general network of Figure 2 has the following meaning: At fail arc 'D', if the condition 'c' is satisfied in the future input, then sister arcs `E', 'F', --- are pruned (i.e. the current backtrack point is released), control returns to the previous backtrack point and arc 'B' is tried.",
        "In this way, useless parsing of sister arcs can be avoided.",
        "In practice, fail arcs often have negation of conditions which apply to sister arcs.",
        "In the example (a), parsing \"repairs\" as the subject of a coordinated S can be avoided.",
        "This alternative is useful, especially when there are many arcs at a state: rather than check repeatedly the condition on each, a fail arc with the negation of the condition leads us back to the previous state.",
        "c) rejection of all but one possibility In this case, an \"anchor arc\" is very useful, as shown in Figure 3.",
        "The general network of Figure 3 has the following meaning: - At anchor arc 'C', if the condition 'c' is satisfied in the future input, arc 'F' is tried and sister arcs 'D', 'F,', --- are pruned, irrespective of the ultimate success or failure of parsing after arc 'F'.",
        "Otherwise, the next arc 'D' is tried.",
        "Anchor arcs, like fail arcs, often have negative conditions.",
        "Consider the text segment in the example (a): if there is not another candidate imperative verb in the input, analysis of \"turn on the power\" as a coordinand of \"start the machine\" can be rejected (cf. example (b)).",
        "Also consider parsing \"if NP1 vt NP2, NP3 vt NP4.\" By looking-ahead, parsing NP3 as a coordinated NP of NP2, and parsing \"NP3 vt NP4\" as a coordinated S of \"NP1 vt NP2\" can be avoided.",
        "Note that all possibilities of a noun phrase must be checked in both cases before the success.",
        "d) rejection of the input sentence In this case, a \"stop arc\" is used, as shown in Figure 4, which has the following meaning: - At stop arc 'A', if the condition 'c' is satisfied in the future input, the parsing of the whole sentence is stopped irrespective of the midst, because this sentence has no possibilities of success.",
        "In the example, useless parsing of ungrammatical sentence which has no verbs after relative pronoun by typing errors can be avoided.",
        "This is used for ungrammatical sentences including undefined words, typing errors, etc.",
        "It is particular useful when false paths would otherwise be a costly detour."
      ]
    },
    {
      "heading": "(2) reordering of syntactic possibilities",
      "text": [
        "In the traditional parsing methods, arcs with higher-possibility at the state are written at upper side of arcs with lower-possibility.",
        "Therefore, the application order of arcs can be dynamically reordered only by information of the current word, not by the future input.",
        "But by looking ahead the future input, arcs can be dynamically reordered to select the arc with highest possibility.",
        "This function reduces the time for finding a successful parse.",
        "A \"jump arc\" used for change of application order is shown in Figure 5.",
        "The general network of Figure 5 has the following meaning: - If the condition 'c' is satisfied in the future input, arc 'A' and 'B' ale tried in this order; otherwise, arc 'B' and 'A' are tried in this order.",
        "In either case, both interpretations are possible at the current word position: only the ordering is affected.",
        "In the example (a), parsing \"restaurants and cafeterias\" as the subject is preferred, and in the example (b), parsing as the object of \"in\" is preferred.",
        "Also, we can specify in conditions the number of words to be searched.",
        "This condition works as a heuristic for reordering arcs in order to reduce time required for success (see (4)).",
        "It is difficult to use this number in order to reject arcs, because there may be intervening optional elements and so this number may cause mistakes (see (1)).",
        "(3) rejection of categorial possibilities",
        "There are many words which have categorial ambiguities in English.",
        "In parsing English, categorial ambiguity is a big problem, especially in the case of very commonly used words.",
        "Examples are \"as\" (preposition, adverb, conjunction, relative pronoun), \"after\" (preposition, subordinate conjunction, adverb), and \"that\" (demonstrative pronoun, relative pronoun, conjunction).",
        "How the lookahead function works effectively for categorial disambiguation is as follows, and reordering of categorial possibilities is presented in (4).",
        "The use of arcs is the same as (1).",
        "Here the example shown in Figure 6 is the rejection of \"as\" as an adverb, if a second \"as\" is not found, and the rejection of \"as\" as a conjunction, if a verb is not found.",
        "In the example (c), parsing \"as\" as adverb and conjunction can be avoided by linear search.",
        "Such categorial ambiguity is also common in Japanese, for example, \"no\", \"de\", etc.",
        "These categorial ambiguities in Japanese can be also avoided by lookahead.",
        "(4) reordering of categorial possibilities",
        "How lookahead works effectively for reordering of categorial possibilities is presented.",
        "The use of arcs is the same as (2).",
        "An example is",
        "(a) In department-stores.",
        "reataurants and cafeterias are sometimes found.",
        "(b) In department-stores.",
        "restaurants and cafeterias.",
        "no smoking is allowed.",
        "ANCHOR [(cat sub-conj.",
        "& prep.)",
        "& look-ahead(comma & #verbs 1)]",
        "PUSH SUB-CLAUSE PUSH PRE-PIIRASE (a) After the conversation we will have lunch.",
        "(b) After the conversation finishes, we will have lunch.",
        "Reordering of categorial possibilities",
        "shown in Figure 7.",
        "This network applies for a word like \"after\" which has multiple category ambiguity.",
        "At the beginning of a sentence, if there is comma and more than one verb in the future input, the subordinate conjunction interpretation is preferred (i.e. tried first), otherwise, the preposition interpretation is preferred.",
        "In the example (a), parsing \"after\" as preposition is preferred, and in the example (b), parsing \"after' as conjunction is preferred."
      ]
    },
    {
      "heading": "3.2. Parsing with vs without look ahead",
      "text": [
        "Despite of its advantages, mentioned earlier, a question may arise in using lookahead conditions: Is lookahead rather time-consuming?",
        "The top-down depth-first search like ATN takes k1Cn time[Aho 1972], where C is a constant, n is the number of input words, and k1 is a coefficient which is determined by time taken for the traversal of one arc.",
        "The lookahead search presented here however, takes k2n time, where k2 is a coefficient which is determined by time taken for one word check of a lookahead condition.",
        "If a lookahead condition is satisfied, kiCa can be reduced to k2n.",
        "If not, time taken for lookahead is wasted.",
        "Therefore, the effect of lookahead is determined by these trade off.",
        "This increases as n and C increase (i.e. the length of sentences and the size of the grammar increase) and as k2 decreases.",
        "In our ATN, k1 is nearly equal to k2, since one check of lookahead conditions which we use take about the same time as the traversal of one arc, as discussed in (1).",
        "Therefore, the effect of lookahead is generally determined by the difference of the number of checks between arc traverses and looking-ahead.",
        "Since the number of arcs from one state often is greater than the number of the input words, as discussed in (1), and the number of checks for looking ahead is less than the number of input words, extra time needed in lookahead is not too significant.",
        "Of course, lookahead conditions are attached to arcs only when it is effective.",
        "For the above reasons, the number of arcs with effective lookahead increases in realistic, large-size grammars such as our ATN."
      ]
    },
    {
      "heading": "4. Conclusion",
      "text": [
        "We have shown how a parsing method using global information as well as information about the current word, is very effective for increasing the efficiency in the face of natural language phenomena such as categorial and syntactic alternatives.",
        "This is especially significant in a real-time translation system using large-size dictionaries and realistic grammars for natural language.",
        "In such a system, enormous numbers of rule applications, which are caused by categorial and syntactic alternatives and which eventually lead to failure, can be rejected or put off by the linear search of an input sentence.",
        "In this paper, we have focussed on the parsing of English, but this method is also very effective for Japanese, inasmuch as it has similar features to English.",
        "For example, a Japanese sentence also requires a verb, a noun phrase requires a noun, etc, and many structures involve discontinuities such as \"shika nai\", \"kara made\", \"to --- to --- to\", etc.",
        "In our system, lookahead conditions are written manually.",
        "A compiler which can automatically attach lookahead conditions at source ATN is being considered for a future system.",
        "The lookahead parsing also works very effectively for scientific and technical documents since these documents are more complicated and longer than communication dialogues (see 3.2)[Nogami 1987]."
      ]
    },
    {
      "heading": "Acknowledgements",
      "text": [
        "We would like to thank Harold Somers (the Centre for Computational Linguistics, University of Manchester Institute of Science and Technology, England) for his comments on an earlier version of this paper."
      ]
    }
  ]
}
