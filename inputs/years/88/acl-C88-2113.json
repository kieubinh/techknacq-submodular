{
  "info": {
    "authors": [
      "Mike Reape",
      "Henry S. Thompson"
    ],
    "book": "International Conference on Computational Linguistics",
    "id": "acl-C88-2113",
    "title": "Parallel Intersection and Serial Composition of Finite State Transducers",
    "url": "https://aclweb.org/anthology/C88-2113",
    "year": 1988
  },
  "references": [
    "acl-P86-1008",
    "acl-P86-1009"
  ],
  "sections": [
    {
      "text": [
        "The type intersection of a set of transition pairs ((1>i I 15,i5_11) is rv(r1),) where r\\t is a partial function from pairs of transition 4.1 types to transition types as defined below.",
        "if T122 E TYP otherwise is defined as follows.",
        "An unprimed typeindicates that the transition type is supported.",
        "A primed type e indicates that the transition type is unsupported.",
        "That is, there have been no E.X, x.e or x.x types in the set of intersected types that produced the primed type.",
        "(1) is the origin of unsupported types.",
        "(2) and (3) state that neither a.= nor =.a can support a transition.",
        "(4) states that an unprimed type supports the corresponding primed type.",
        "(5) states that the intersection of two identical .types is the same type.",
        "(6) states that the intersection of =.= and any type is that type.",
        "(7) and (8) state that the intersection of either =.a or a.= and a supported type is a supported type.",
        "(9) states that n,c' is commutative and that the commutative closure of (1)-(8) also holds.",
        "A set of transition pairs (0i) which subsume cDt is licensed w.r.t.",
        "(I)t if LICENSED(C0i),4)t) holds.",
        "This definition implements the \"daisywheel\".",
        "That is, although a set of transition pairs (43i) is excluded in the general case if the type intersection of ((1) a ((x.x)', =.x x.=) we make an exception if (1)t is a pair of identical phonemes.",
        "So, for example, if the type intersection of ((1)i) is =.x and (13t = <s,s> then (c13i) is licensed.",
        "In practical terms, this means that the user does not need to encode a large set of \"default\" transition pairs of the form 4,0> for each state.",
        "This effect is usually achieved.",
        "in other FST formalisms in the rule compiler.",
        "However, such a compilation depends on the existence of an alphabet declaration.",
        "As we do not use a rule compiler, we have found it more convenient to build the effect into the parallel semantics.",
        "A machine, M in state N accepts a phoneme pair Clt with accepting transition pair (I) and new state N' if ACCEPTS holds.",
        "holds.",
        "ACCEPTS(M,N,c1)043,N') if",
        "(ACCEPTS replaces the more usual state transition function S.) P(T) is a total function that takes the transition sequence T as argument and returns a transition sequence T' containing the same set of elements as T with the following ordering of the elements of T'.",
        "All transitions follow all non-=.= transitions.",
        "All =.a or a.= transitions precede all =.= transitions and follow all other transitions.",
        "Relative ordering of transitions in I' is as in T otherwise.",
        "The definition above implies that transition precedence is by citation order with two exceptions.",
        "All transition pairs which have non-= first and second elements take precedence over any pairs of the form <a,=> and <=,a> and all non-<=,=> transition pairs take precedence over a transition pair of the form <=,=>.",
        "A set of machines (M1) in states (N1) accept a phoneme pair (I)t with accepting transitions pairs (4)i) and new states (NO if S-ACCEPTS((Mi) , (Ni) ( Ni' )) holds.",
        "A string is a sequence of phoneme pair elements.",
        "A string pair <11,v> is a pair of strings p, and v. <a,P> is a prefix of the string pair <1.t,v> and the string pair <4',V> is the corresponding suffix of <1.t,v> if CONCAT(<a,P>,<V,v'>,<1.4v>) holds.",
        "In particular, this means that prefixes can be of the schematic types x.x, x.e and e.x but not e.e.",
        "A set of machines (Mil in states (N1) accept a string pair <11,v> with new states (Nil if STRACCEPTS({Mi),(N1),<p.,v>,(Ni')) holds.",
        "and could not be correctly used as input to the intersection algorithm.",
        "(I.e., we cannot eliminate = or phoneme classes from any transition pairs.)",
        "The cross product of two transition sequences T1 and T2 is a sequence T1 x T2 = <T',5> where T' is defined below and 5 is a total ordering."
      ]
    },
    {
      "heading": "4. The Serial Composition Algorithm",
      "text": [
        "Just as parallel FSTS can be intersected, a cascade of FSTS may be composed into one FST.",
        "Such a cascade is most useful for representing ordered sequences of rules.",
        "For example, a theory which orders assimilation processes before morphophonemic processes could be modelled by a cascade of two parallel sequences of transducers where the first parallel sequence models the assimilation processes and the second models the morphophonemic processes.",
        "As is the case with parallel intersection, the number of states of a composed FST is the product of the number of states of the composed FSTS in the worst case.",
        "Again, the number of states in the composed FST is usually much smaller in practice.",
        "Serial composition is different in several ways from the parallel intersection problem.",
        "First, each FST in the composition must have the parallel semantics of 2 \"compiled in\" before it is composed.",
        "This means that type intersection as defined for parallel intersection is irrelevant for composition.",
        "On the other hand, we must include the effect of the daisywheel before composition on any transition pair <4)?",
        "',41)P> where both 6?'",
        "and 6P are phoneme classes.",
        "As a result, we can replace all such transitions with one or more transitions <62', 6P'> where 4' and 6P' are both phonemes.",
        "This simplifies the composition algorithm considerably.",
        "However, we must still check that the type of each transition pair in each FST to be composed is an element of TYP.. (In particular, users may encode illegal transitions.)",
        "Also, although serial composition is associative, unlike parallel intersection, it is not commutative.",
        "So, a cascade of FSTS must be composed in the same order as they appear in the cascade.",
        "The composition of a sequence of FSTS *<M1 Mn> is defined by",
        "<1,2>1, 2 ,12,12 I.e., the name of the composition is the pair of the names of the two composed states.",
        "The composition is an accepting state if both of the composed states are accepting states and is a nonaccepting state otherwise.",
        "and Tk = T1 * Ti is defined).",
        "5 must satisfy the same partial ordering as that given for parallel intersection (modulo the substitution of * for n).",
        "Again, we use the ordering given in 3.",
        "If = <Ni',TI,Ai> and ; = <Ni',T2,Ai> and Tia T1 and Ti a T2 then the composition Ti * Ti of two transitions Ti = <430i,Ni> and Ti = obj,Ni> is defined by (The fourth and fifth clauses are due to Martin Kay (Kay 1983).)",
        "<Note that if (I).",
        "= a,e> and O.",
        "= <03> then both a,e>,<NpN'i and e,13>,<N'1Ni are defined.",
        "Their order relative to each other is irrelevant since the semantics is nondeterministic with respect to C transitions.",
        "Also, note that the second and third clauses dealing with <=,=> transitions are further constrained to eliminate any \"instantiation\" of <=,=> which has lower precedence than a transition with the \"instantiation\" in the transition sequence which contains <=,=>.",
        "E.g., if e T1 and =,=>,Ni>b,c>,Nk> = <<b,c>,<Ni,Nk>> and there is a transition <<b,b>,Ni> a Ti and i<j then b,b>,Ni> takes precedence over <<=,=>,Ni> and so the composition is undefined.",
        "Finally, note that nondeterministic transition sequences may be defined.",
        "That is, two or more transitions with the same transition pair may be specified which have different new states.",
        "E.g., the composition of the transitions <<a,b>,s1> and <<b,c>,t1> is a,c>,<sl,t1>> but the composition of the transitions a,d>,s2> and <<d,c>42> is a,c>,<s2,t2>>.",
        "Both compositions have the transition pair <a,c> but the new state is the <sl,t1> for the first transition and <s2,t2> for the second transition.",
        "This form of nondeterminism is genuine and must be eliminated if the quasi-deterministic semantics that we have outlined is to be maintained."
      ]
    },
    {
      "heading": "5. The Determinisation Algorithm",
      "text": [
        "As (Barton 1986b) points out, FSTS used as acceptors are finite-state machines (FSM) with an alphabet of pairs of characters.",
        "As such, an equivalent deterministic FST can be constructed for any nondeterministic FST used as an acceptor since a deterministic FSM can always be constructed that accepts exactly the same language as a nondeterministic FSM (Hoperoft and Ullman 1979).",
        "Because the serial composition algorithm may produce nondeterministic FSTS, a determinisation algorithm is required to produce equivalent deterministic FSTS.",
        "*<41, M.> oi,f3>,<N,,Ni a,13>,<N,,Niif cr., = <=,=> and dr) = <=,=> if (131 = <=,=> and d3j = <a,13> and ot;a>,Nk> T1 3 k<i a,c>,<N,,N; e,13>,<N,',Ni ci,8>,<Ne ,N.>> undefinedif d), = <a43> and (11,j = <=,=> and ii,p>,tv,> fi T2 3 k if (1), = <oc,e> if d).",
        "= <e 13> if= <oc,f3> and cbj = <13,8>"
      ]
    },
    {
      "heading": "Abstract",
      "text": [
        "We describe a linguistically expressive and easy to implement parallel semantics for quasi-deterministic finite state transducers (FSTS) used as acceptors.",
        "Algorithms are given for determinMg acceptance of pairs of phoneme strings given a parallel suite of such transducers and for constructing the equivalent single transducer by parallel intersection.",
        "An algorithm for constructing the serial composition of a sequence of such transducers is also given.",
        "This algorithm can produce generally non deterministic FSTS and an algorithm is presented for eliminating the unacceptable nondeterminism.",
        "Finally, the work is discussed in the conteXt of other work on finite state transducers.",
        "1.",
        "Introduction Finite state transducers (FSTS) have been shown to be useful for modelling morphophonemic processes in an efficient way in (Karttunen 1983), (Kay 1983), (Kaplan and Kay 1985), (Karttunen, Koskenniemi and Kaplan 1987) and (Koskenniemi 1983) (but cf. (Barton 1986b), (Barton 1986a)).",
        "This paper presents a linguistically expressive parallel semantics for quasi deterministic FSTS used as acceptors and algorithms for taking the parallel intersection and serial composition of such FSTS.",
        "The intersection and composition algorithms generate composite FSTS from sets of FSTS with the same semantics as the parallel semantics of the set.",
        "2 presents the parallel semantics.",
        "3 discusses the parallel intersection algorithm.",
        "4 discusses the serial composition algorithm.",
        "5 discusses the elimination of unacceptable general nondeterminism which can arise from the composition algorithm.",
        "6 discusses the implementation of the interpreter which is based on the semantics presented here and the three algorithms.",
        "7 discusses this research in the context of other work in this area and draws some conclusions.",
        "2.",
        "A Parallel Semantics for Finite State Transducers",
        "In the discussion that follows, we assume that the reader is familiar with the work of Karttunen and Koskennienn on FSTS and with finite state automata (FSA) generally.",
        "The notation used is slightly different than that usually used to describe FSA but is more convenient for our purposes.",
        "Also, rather than discuss the algorithms directly, we give their semantics.",
        "In contrast to Karttunen and Koskenniemi's work, no higher level rule formalism is used.",
        "FSTS are stated directly.",
        "An PST, M, is a pair <Na,E> where IV' is a set of start state names and E is a set of states.",
        "A state ; E is a triple <N,T,A> where N is the name of the state, T is an ordered sequence of transitions n = m and A is the truth value T if the state is an accepting state and the truth value F if it is a nonaccepting state.",
        "(The notion of final state is not relevant here.",
        "Only the accepting/nonaccepting distinction is important.)",
        "A transition Ti a T is a pair <01,Ni> where (Di is a transition pair <4 ,4>.",
        "An element of a transition pair is either a phoneme, a phoneme class name, the symbol = or the empty string c. A phoneme is a character and is a member of the alphabet set.",
        "A phoneme class is a set of phonemes.",
        "We will refer to phoneme classes and their names interchangeably.",
        "Ni is the new state.",
        "Oi = <02'i4Pi> subsumes cbt <11).0P,> if (V., subsumes (0'., and OP; subsumes 4)1',.",
        "(1)1 subsumes Ot if Oi Ot or 0, = = or Oi is a phoneme class and ot E The transition type or type T(0) of a transition pair el) = <1)264P> is (x.x)' if both (1)?'",
        "and OP are phoneme classes and is T(O?",
        "').T(OP) otherwise where T() is the phoneme type of O.",
        "(x is not a variable in this and the following definitions.)",
        "if0=e if 4== otherwise The set of types, TYP, and the set of final types, TYP., are defined below.",
        "Some examples should clarify the definitions.",
        "<s,s> is of type x.x.",
        "<s,z> is of type x.x.",
        "<sib,sib> is of type (x.x)' if sib is a phoneme class name.",
        "<=,.> is of type =... <=,e.> is of type",
        "The algorithm collapses all transitions in a transition sequence with common transition pairs but different new states into one transition with a complex new state name.",
        "This new state name is the name of a state which is the parallel intersection of all the new states of the transitions with the common transition pairs.",
        "The only fundamental difference between this type of parallel intersection and the definition presented in 3 is that a state in the intersected FST is an accepting state if any of the intersected states is an accepting state.",
        "Although it may not be obvious, the determinisation algorithm is guaranteed to terminate.",
        "The following argument shows why.",
        "The new states of simple states are always simple states so complex states are the intersection of only simple states.",
        "The number of simple states is finite.",
        "The number of transitions within a simple state is finite.",
        "It follows that the number of transitions in a transition sequence with common transition pairs is bounded, the number of possible complex states is bounded and the size of a complex state is bounded.",
        "Therefore, there is an upper bound on the size of the equivalent deterministic machine and .so the determinisation algorithm is guaranteed to terminate."
      ]
    },
    {
      "heading": "6. Implementation",
      "text": [
        "The second author designed the parallel semantics and implemented an interpreter for it in Interlisp-D on a Xerox 1186.",
        "The first author designed and implemented the parallel intersection, serial composition and determinisation algorithms in Lucid Common Lisp on a Masscomp MC5700.",
        "The programs exhibit reasonable performance (about ten minutes using compiled Lisp for composite FsTs with approximately 160 states)."
      ]
    },
    {
      "heading": "7. Conclusions and Related Work",
      "text": [
        "Although it has been reported in the literature that the algorithms described here have been implemented, we are unaware of the publication of any such algorithms to date.",
        "The algorithms themselves are of interest because they formalise the semantics of finite state transducers.",
        "Also, these algorithms are similar to graph unification algorithms.",
        "Specifically, the parallel intersection and determinisation algorithms can be viewed as cyclic graph unification and graph disjunction elimination algorithms respectively.",
        "As Barton points out, a determinisation algorithm like the one presented here will not work on transducers used for generation and recognition (as opposed to simple acceptance).",
        "He claims that many FSTS are not determinisable at all.",
        "The current work provides a formal basis on which to investigate the class of determinisable transducers used for generation and recognition."
      ]
    },
    {
      "heading": "8. Acknowledgments",
      "text": [
        "This research was supported by the Alvey Speech Input Word Processor and Workstation Large Scale Demonstrator project, ESRC Grants D/29611, D/29628 and D/29604.",
        "The first author has been supported during the writing of this paper by the EEC Esprit Project 393 ACORD: the Construction and Interrogation of Knowledge Bases using Natural Language Text and Graphics."
      ]
    },
    {
      "heading": "9. References",
      "text": [
        "r\"T n Tp and T. T1 and Tp a T, (m < n (o < i and p 5_ j) and , (o i and p < j)) In particular, the ordering of the following sequence satisfies the partial order: T<1,n>T<In,1> T<mm>> where Tnames the intersection of the transitions T and Ti e T inand n I1'21.",
        "The intersection Ti rt Ti of two transitions Ti = <d)i,Ni> and Ti <0.,N.> is <0. n 0.",
        "<N. N.. j,j If (I)i = <oci,131> and (Di <ai,13?",
        "then (Dirt(I)j is defined as follows ai, fii n 11.>if T(<1Ji)t(4, j) E TYPo, (Di n (D) = undefined nedotherwise The intersection of two phoneme pair elements x and y is n<M Mn>=1 j.defined as follows The intersection M1 n M2' of two FSTS M1 <AT,Ei> and M2 = <b2,E2> is their cross productx n yx n y undefinedif x =y if y == if x == if y is a phoneme class and x 5 y <NI' X n ,E1 X 2>if x is a phoneme class and y c x if both x and y are phoneme classes otherwise The cross product of two state name sets (Ni' I 1515n) and I 15j5.m) is the set (<Ni',Ni\"> I 15.15n and 1<j5m).",
        "The intersection ki, =n E, of two states",
        "I.e., the name of the intersection is the pair of the names of the two intersected states.",
        "The intersection is an accepting state if both of the intersected states are accepting states and is a nonaccepting state otherwise.",
        "The cross product of two transition sequences T1 and T2 is a sequence T1 x 1.2 = <T',5> where I' is the set defined below and 5. is a total ordering.",
        "The composite FST is nondeterministic with respect to a and the set of start states and is deterministic otherwise.",
        "All phoneme class and = notation is preserved in the intersected transitions.",
        "This is actually quite useful for debugging purposes.",
        "In general, it will often be the case that elements of an intersected transition sequence are subsumed by preceding elements in the same sequence.",
        "It is a simple matter to remove such transitions (although this is not necessary as they are unreachable).",
        "Furthermore, it is often the case that transitions with phoneme classes are partially subsumed by preceding elements in the same transition sequence.",
        "It is straightforward to split the phoneme class transitions into disjoint phoneme class transitions which are not subsumed by preceding transitions in the same sequence.",
        "Our implementation uses both of these optimisations.",
        "Notice that the intersection algorithm does not \"compile in\" the effect of the daisywheel.",
        "This is because the semantics of a set of parallel FSTS includes the daisywheel and so the composite FST need not have its effect \"compiled in\".",
        "Furthermore, the intersection algorithm must not build in the daisywheel because the composite FST would have the wrong parallel semantics"
      ]
    }
  ]
}
