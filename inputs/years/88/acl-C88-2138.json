{
  "info": {
    "authors": [
      "Masaru Tomita"
    ],
    "book": "International Conference on Computational Linguistics",
    "id": "acl-C88-2138",
    "title": "Combining Lexicon-Driven Parsing and Phrase-Structure-Based Parsing",
    "url": "https://aclweb.org/anthology/C88-2138",
    "year": 1988
  },
  "references": [
    "acl-J87-1004"
  ],
  "sections": [
    {
      "text": [
        "Maativo -Lomita Canter for It/Wahine Tranalsdiei and Computer _dente De]tannieitt Camcgie-Mellen University Pittsburgh, PAita,:11\"1, t.ISA AbSttraui tiOrffialisms (e.g. Categorial Grammar, IIPSO arid GB Grammar), which do not Imo explicit phrase structure roles, are suitable for higher level syntax but not for low level lariguago-specific e0)18trUCtIMIS such as dates (July Pith, 15-JUL-1007, ete), which :,300111 to require the power of phrase atructure re108.",
        "paper presents an implementation method to combine lexicon-driven parsing arid phrase structure parsing, with a apecial rriearla called graph-structurnd stook.",
        "d'.ie Recent linguistic grammar formalisms can be classified Into two families, pluaso-structure-based or lexicon-driven.",
        "The phrase-:An:dove-based formalisms include Definite Clause Grammar [U], Lexical Functional Grammar [3], Generalized Phrase Structure Grammar [5, 6] and Functional Unification Grammar [7].",
        "They all are based on context-free phrase structure rules which are augmented in ono way or another.",
        "On the other !land, lexicon-driven fOrlilaliSWS include Categorial Graminar [1], Head-driven ['lobe° Structure Grammar [9, 10] and Gil-Grammar [4, 14 All of these lexicon-driven formalisms do not have any explicit phrase structure rides, but Information about how to combine coristittierria into a high, r constituent is encoded in each lexicon or Colistilomit which is m be combined.",
        "It Is often argued that lexicon-driven formalisms can handle some linguistic phenomena such as free-word-order more elegantly, and also they can capture universality of milltiple languages, as described, for example, by Wchrli [14 In section 2, on the other hand, it is argued that, while lexicon-driven formalisms might be suitable to cope with linguistically \"interesting\" phonomona, they lack the power to express linguistically 'uninteresting\" phenomena which are Mien very specific to a particular language.",
        "Unfortunately, in order to build a practical parser for a \"real\" text, one roust handle very many \"uninteresting\" low level phenomena which cannot be easily formalized in the lexicon-driven way.",
        "Hence, if we want to build a practical parser with a theory behind the lexicon-driven formalisms, then it is essential to combine lexicon-driven parsing (tor higher level syntax) and phrase-structure-based parsing (for low level detail and other language-specific/exceptional constructions).",
        "In section 3, we generalize the computational models of all the lexicon-driven and phrase-structure-based forstalisins as: sitift-roduco parsing.",
        "Section 4 introduces the graph-structured stack to handle non-determinism in shift-reduce parsing.",
        "In sections 5 and 0, we describe the use of the graph-structured stack In Lexicon-driven and Phrase-structure-based parsing, respectively.",
        "We then discuss how to combine these two kinds of parsing with the graph-structured stack, in section 7."
      ]
    },
    {
      "heading": "Alf.gi.Thqr.intS (AtPinA ILmth.,ton-thivoin amt s",
      "text": [
        "In practical applicatioi IS, mirth riOritoriewi inariy i; mei!",
        ": speeitie riot linguistic ally ir:i +r -.rrncj\".",
        "tAirwitior ilia following sentences: Tetko two tablet; of aspirin lour timo.5 t ekty.",
        "Ado a paragraph or two it) SE)r)ii0l/ ;-/A.",
        "I,,cileaule a meeting with Doctor &Jiro, Goib000ll MI July Mitt from 3:30 CM.",
        "All of those sentences cattalo tie interesting syntax trot have a lot Or languageaspecitic low-level COI I:Lime:ilia la arid; ifs \"tour times a day\".",
        "It scores [Prat them is ire bettor VIIMI it) iicm_Iiry this patient tiasi a phrase structure rule: <frequeecy> a <integer:, <times> <integet .units.",
        "augmented in one way or arialer to cheek number uMGMii(Ilit Similar arguments can be made for rules: <person-name> <-- atitle:, <first T ,halt-narea5 <time> a <integer> \":\" <integer:, (\"AM\" I \"PM') (rat „c; corattmciions becautte wo IkP,V iisi-Is tedious to speciiy thee() phenomena, and it is just a IrK;i6;1\" sitting down and writing rules.",
        "Therefore, for the purpose of linguistic listic study, they can be just ignored.",
        "In practical applicatioirs, however, we cannot ignore them by ;sly irioana.",
        "In tarot, iupui act are fail of those \"fa del eating' limo 101)101 unfortunately.",
        "Mum than half of English and Jars:ilea° gi'iirrirMir rules ion Cial's machine translation project, tor example, ale language-specific \"uninteresting\" low-level rules.",
        "It is expected that, in any practical system, thole must be a beech of roles like tin .sernewhere in the system; otherwise the system Siff vly does Hot work.",
        "Lexicon-driven formalisms are all motivated by linguistically \"Interesting\" phenomena, arid they are not suited for language-specific low level constructions.",
        "It doe;; riot teal«) stay sense to try to write those rules in the lexicon-driven way, oven If it is mathematically possible.",
        "It is clear that the power of phrase structure is necessary for practical applications.",
        "fellowieg sections, we describe how to combine lexicon•Liriven [aiming and phrase-structure-based parsing.",
        "Silifi41edlic4\","
      ]
    },
    {
      "heading": "Lot us c011iiider Beth lexicon-dilvon",
      "text": [
        "parsing to be shift-reduce parsing.",
        "In aldfUresluce parairig, there is stock, arid all words ire the input seritence are pushed (shifted) mite the stack from loft to right.",
        "In delea so, the first II (or words) from the 10p of the slack are occasionally (reduced), by popping the ri constituents hero the stack, 14)mpiiiirio a now constituent from 910 COOStiit1011IS, ;mid post RIOW constituent onto the stack.",
        "A shift-reduce parser necda to / controlled to determine when and how constituents should be reduced, and when a word should be shifted.",
        "In phrase-structure-based parsing, it is controlled by a set of language-specific rules, typically a context-free phrase structure grammar, augmented in one way or another.",
        "In lexicon-driven parsing, it is controlled by information encoded in each constituent to be reduced, and (if any) a set of language universal rules which reside inside the parser permanently, but with no language-specific outside rules.",
        "In the Categorial Grammar formalism, this information is encoded as complex categories with functor and argument features.",
        "Two elements can be reduced if and only if the category of one element is the same as the argument feature of the other element, and the category of the new element will be the functor of the latter element.",
        "In G13 Parsing, categories are encoded In accordance with the X-bar theory, and some language-universal rules (often called principles) are fired to decide whether a particular pair of elements can be reduced.",
        "In both phrase-structure-based and lexicon-driven parsing, there are cases where it cannot be uniquely determined whether the next action should be reduce or shift, or cases where more than one reduce action is possible at the same time.",
        "This means that the parser must handle some non-determinism, and naive techniques such as simple back tracking or breath first search would require exponential time.",
        "The parsing time, however, can be reduced to polynomial with a graph-structured stack, which is described in the following section."
      ]
    },
    {
      "heading": "4. The Graph-Structured Stack",
      "text": [
        "The graph-structured stack was introduced in the Generalized LR Parsing algorithm [11, 12], to handle non-determinism in LR parsing in polynomial time.",
        "In this section, three key notions, splitting, combining and local ambiguity packing, are described."
      ]
    },
    {
      "heading": "4.1. Splitting",
      "text": [
        "When a stack needs to be reduced (or popped) in more than one way, the top of the stack is split as in the following example.",
        "Suppose that the stack Is in the following state.",
        "The left most element, A, is the bottom of the stack, and the right most element, E, is the top of the stack.",
        "In a graph-structured stack, there can be more than one top, whereas there can be at most one bottom.",
        "Suppose that the stack needs to be reduced in the following three different ways."
      ]
    },
    {
      "heading": "4.2. Combining",
      "text": [
        "When an element needs to be shifted (pushed) onto two or more tops of the stack, it is done only once by combining the tops of the stack.",
        "For example, If \"I\" is to be shifted to F, G and H in the above example, then the stack will look like: /-- \\"
      ]
    },
    {
      "heading": "4.3. Local Ambiguity Packing",
      "text": [
        "If two or more branches of the stack turned out to be identical, then they represent local ambiguity; the Identical state of stack has been obtained in two or more different ways.",
        "They are merged and treated as a single branch.",
        "Suppose we have two rules: <-J <-- G After applying these two rules to the example above, the stack will look like: The branch of the stack, \"A-B-C-..1\", has been obtained In two ways, but they are merged and only one Is shown in the stack."
      ]
    },
    {
      "heading": "5. Lexicon-Driven Parsing with a Graph-Structured Stack",
      "text": [
        "There is an obvious way to implement a lexicon-driven parser with the graph-structured stack.",
        "Basically, the parser parses a sentence strictly from left to right, shifting a word onto the stack one by one.",
        "The tops of the stack are Inspected to see if there are any ways to reduce the stack (remember, there are no outside phrase structure rules In lexicon-driven parsing).",
        "The stack gets reduced non-destructively, wherever possible.",
        "A non-destructive reduce action simply adds a new branch to the stack, without removing the old branch of the stack that has been reduced.",
        "The following example shows the stack before and after the reductions of C and D into E, and B and E into F. Repeat until no further reduce action Is possible (note that one reduce action can trigger another reduce action).",
        "When no further reduce action is possible, the next word is shifted.",
        "When a word Is shifted, all tops of the stack are inspected whether they can be shifted the word onto.",
        "Even when a word has been shifted onto more than one top of the stack, there is at most one element on the top of the stack, due to stack combining described In the previous",
        "When an how top elements can be reduced is determined by information encoded In each element itself, and the method varies from one formalism to another, as described in section 2."
      ]
    },
    {
      "heading": "6. Phrase-Structure-Based Parsing with a Graph-Structured Stack",
      "text": [
        "Tomita [11, 12] introduced a generalized LR parsing algorithm, which is an LR parsing algorithm generalized to handle arbitrary context-tree grammars with the graph-structured stack.",
        "The standard (not generalized) LR parsing algorithm is one of the most efficient parsing algorithms.",
        "It is totally deterministic, no backtracking or search is involved, and it runs in linear time.",
        "This standard LR parsing algorithm, however, can deal with only a small subset of context-free grammars called LH grammars, which is often sufficient for programming languages but clearly not for natural language 3.",
        "If, for example, a grammar is ambiguous, then Its LR table would have multiple entries, and hence deterministic parsing would be no longer possible.",
        "By introducing the graph-structured stack, however, multiple entries can be handled efficiently in polynomial time.",
        "Figures 6-1 and 6-2 show an example of a non-LR grammar and Its LR table.",
        "Grammar symbols starting with \"*\" represent pre-terminals.",
        "Entries \"sh n\" in the action table (the left part of the table) Indicate that the action \"shift one word from Input buffer onto the stack, and go to state n\".",
        "Entries \"re n\" Indicate that the action \"reduce constituents on the stack using rule n\".",
        "The entry \"acc\" stands for the action \"accept\", and blank spaces represent \"error\".",
        "The goto table (the right part of the table) decides to what state the parser should go after a reduce action.",
        "The LR parsing algorithm pushes state numbers (as well as constituents) onto the stack; the state number on the top of the stack indicates the current state.",
        "The exact definition and operation of the LR parser can be found in Aho and Ullman [2].",
        "We can see that there are two multiple entries in the action table; on the rows of state 11 and 12 at the column labeled \"\"prep\".",
        "Roughly speaking, this is the situation where the parser encounters a preposition of a PP right after a NP.",
        "If this PP does not modify the NP, then the parser can go ahead to reduce the NP to a higher nonterminal such as PP or VP, using rule 6 or 7, respectively (re6 and re7 In the multiple entries).",
        "II, on the other hand, the PP does modify the NP, then the parser must wait (sh6) until the PP Is completed so it can build a higher NP using rule 5.",
        "With a graph-structured stack, we can handle these non-deterministic phenomena nicely.",
        "Figure 6-3 shows the graph-structured stack right after shifting the word \"with\" in the sentence \"I",
        "(1) --> NP VP (2) --> S PP (3) NP --> An (4) NP --> *det *n (5) NP NP PP (6) PP *prep NP (7) VP --> Av NP",
        "State *det An *v *prep $ NP PP VP S",
        "SAW a men on the bed In the apartmora with a telescope.\"Idc discussions on tho generalized I. parsing algorithm can be fousat In TornHa [11, 12].",
        "7.",
        "Combining Phrase-Structure-Dased and Lexicon-Driven Parsing",
        "In tfir) previous sections, we have described the use of the graph-structured stack for lexicon-driven and phrase-etruclure-based parsing.",
        "II is now rather obvious that we can combine lexicoe-driven and phrase-structure-based parsing; there are two ways.",
        "We con enhance the generalized LA parsing algorithm by allowing lexicons to (optionally) have lexicon-driven rules.",
        "That Is, the stack is periodically inspected to see if any part of the stack cart be reduce by a lexicon-driven rule inside lexicons.",
        "This way IS preferable if a system has many phrase structure rules, with a tow lexicon-driven rules to handle certain linguistic phenomena more easily.",
        "Alternatively, we can enhance lexicon-driven parsing described in section 5 by allowing the parser to reduce tops of the stack tieing outside phrase structure rules as well.",
        "That is, the stack Is periodically inspected to see if any part of the stack can be reduced using one of the phrase-structure rules.",
        "This way is preferable if a system is heavily lexicon-driven, with a few phrase structure rules to handle low level and/or exceptional phenomena."
      ]
    },
    {
      "heading": "8. Summary",
      "text": [
        "This paper first argued that it is necessary to enhance lexicon-driven parsing with phrase structure rules in practical applications.",
        "We then suggested a shift-reduce implementation of lexicon-driven parsing with a graph-structured stack, which is readily combinable with a shift-reduce implementation of phrase-structure-based parsing with a graph-structured stack (i.e., the generalized LA algorithm).",
        "Viefa'oriods Ader, A. Ea and Stecehoun, M. J.",
        "On the Order of Words.",
        "LMouistics and Philosophy 4(4):517-558, 1992."
      ]
    }
  ]
}
