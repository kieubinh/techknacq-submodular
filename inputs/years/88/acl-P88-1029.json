{
  "info": {
    "authors": [
      "Robert T. Kasper"
    ],
    "book": "Annual Meeting of the Association for Computational Linguistics",
    "id": "acl-P88-1029",
    "title": "Conditional Descriptions in Functional Unification Grammar",
    "url": "https://aclweb.org/anthology/P88-1029",
    "year": 1988
  },
  "references": [
    "acl-P84-1075",
    "acl-P86-1038",
    "acl-P87-1033"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "A grammatical description often applies to a linguistic object only when that object has certain features.",
        "Such conditional descriptions can be indirectly modeled in Kay's Functional Unification Grammar (FUG) using functional descriptions that are embedded within disjunctive alternatives.",
        "An extension to FUG is proposed that allows for a direct representation of conditional descriptions.",
        "This extension has been used to model the input conditions on the systems of systemic grammar.",
        "Conditional descriptions are formally defined in terms of logical implication and negation.",
        "This formal definition enables the use of conditional descriptions as a general notational extension to any of the unification-based grammar representation systems currently used in computational linguistics."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "Functional Unification Grammar [Kay79] (FUG) and other grammatical formalisms that use feature structures and unification provide a general basis for the declarative representation of natural language grammars.",
        "In order to utilize some of the computational tools available with unification grammars, we have developed a mapping from systemic grammars [Ha1176] into FUG notation.",
        "This mapping has been used as the first step in creating a general parsing method for systemic grammars tKas87a1.",
        "The experience of translating systemic grammars into FUG has shown several ways in which the notational resources of FUG may be improved.",
        "In particular, FUG has limited notational resources for expressing conditional information.",
        "In this paper we describe how FUG has been enhanced by the addition of conditional descriptions, building on research that has already been reported [Kas87a,Kas86,Kas87b].",
        "Conditional information is stated explicitly in systemic grammars by the input conditions of systems that specify when a system must be used.",
        "Consider, for example, the two systems (MoodType and IndicativeType)1 shown in Figure 1.",
        "The input condition for the MoodType system is the feature",
        "Clause, and the input condition for the IndicativeType system is the feature Indicative.",
        "Because the features of a systemic grammar are normally introduced by a unique system, these input conditions actually express a bidirectional type of logical implication:",
        "1.",
        "If a constituent has the feature(s) specified by a system's input condition, then exactly one of the alternatives described by that system must also be valid for the constituent; 2.",
        "If a constituent has one of the feature alternatives described by a system, then it must also have the feature(s) specified by that system's input condition.",
        "Thus the input condition of the Indicative Type system expresses the following implications: 1.",
        "If a clause has the feature Indicative, then it must also have exactly one of the alternatives from the indicative Type system (either Declarative or Interrogative).",
        "2.",
        "If a clause has one of the feature alternatives described by the Indicative Type system (either Declarative or Interrogative), then it must also have the feature Indicative.",
        "While it is theoretically correct to regard the two directions of implication as exact converses of each other, there is a subtle difference between them.",
        "The consequent of the first type of implication is the description of the entire system, including systemic features and their realizations.",
        "The antecedent of the second type of implication can be safely abbreviated by the systemic features without their realizations, because the presence of a systemic feature implies that its realizations also hold.",
        "We will return to this distinction when we provide a formal definition of conditional descriptions in Section 2.",
        "For simple input conditions, the first type of implication can be expressed in FUG, as it was originally formulated by Kay [Kay79], by embedding the description of one system inside the description of another.",
        "For example, we can capture this implication for the IndicativeType system by embedding it within the description of the Indicative alternative of the",
        "MoodType system, as shown in Figure 2.",
        "Note that the second type of implication expressed by systemic input conditions has not been expressed by embedding one functional description inside another.",
        "To express the second type of implication, we have used a different notational device, called a feature existence condition; it will be defined in Section 2.4.",
        "Not all systems have simple input conditions consisting of single features.",
        "Those input conditions which are complex boolean expressions over features cannot be expressed directly by embedding.",
        "Consider the BenefactiveVoice system shown in Figure 3 as an example.",
        "Its input condition is the conjunction of two features, Agentive and Benefactive.",
        "One way to express a system with a complex input condition in FUG is to use a disjunction with two alternatives, as shown in Figure 4.",
        "The first alternative corresponds to what happens when the BenefactiveVoice system is entered; the second alternative corresponds to what happens when the BenefactiveVoice system is not entered.",
        "The first alternative also includes the features of the input condition.",
        "The second alternative includes the features of the negated input condition.",
        "Notice that the input condition and its negation must both be stated explicitly, unlike in systemic notation.",
        "If the negation of the input condition was not included in the second alternative, it would be possible to use this alternative 'The BenefactivcVoice system is also extracted from the Nigel grammar [Mann83].",
        "It describes the active and passive voice options that are possible in clauses that have both an agent and a beneficiary.",
        "The active/passive distinction is not primitive in systemic grammars of English.",
        "Instead, it is decomposed into several cases depending on which participant roles are present in the clause.",
        "In this case the subject of a passive clause may be conflated with either beneficiary or medium.",
        "even when the input condition for the system holds.",
        "Thus the description of the system would not always be used when it should be.",
        "Note that this method of encoding systemic input conditions presupposes an adequate treatment of negated features.' A formal definition of negation will be developed in Section 2.3.",
        "While it is formally possible to encode complex input conditions by disjunction and negation, such encoding is not altogether satisfactory..",
        "It should not be necessary to state the negated input condition explicitly, since it can always be derived automatically from the unnegated condition.",
        "It is also rather inefficient to mix the features of the input condition with the other features of the system.",
        "The features of the input condition contain exactly the information that is needed to choose between the two alternatives of the disjunction (i.e., to choose whether the system is entered or not).",
        "It would be more efficient and less verbose to have a notation in which the features of the input condition are distinguished from the other features of the system, and in which the negation of the input condition does not need to be stated explicitly.",
        "Therefore, we have developed an extension to FUG that uses a conditional operator (-0), as illustrated by the encoding of the BenefactiveVoice system shown in Figure 5.",
        "A description corresponding to the input condition appears to the left of the symbol, and the description to be included when the input condition is satisfied appears to its right.",
        "A formal definition of what it means for a description to be satisfied will be given in Section 2.1.",
        "*Some negations of atomic features can be replaced by a finite disjunction of other possible values for that feature, but this technique only works effectively when the set of possible values is small and can be enumerated.",
        "Note: In systemic notation curly braces represent conjunction and square braces represent disjunction, while in FUG curly braces represent disjunction and square braces represent conjunction.",
        "NIL denoting no information; a where a E A, to describe atomic values; : where 1 E L and 0 E FDL, to describe structures in which the feature labeled by 1 has a value described by 0; where each pi E Ls, to describe an equivalence class of paths sharing a common value in a feature structure; where 0; E FDL, denoting conjunction; where 0; E FDL, denoting disjunction.",
        "01 A 02 or [01.• • On] 01 V 02 or {01...0„)"
      ]
    },
    {
      "heading": "2 Definitions",
      "text": [
        "The feature description logic (FDL) of Kasper and Rounds [Kas861 provides a coherent framework to give a precise interpretation for conditional descriptions.",
        "As in previous work, we carefully observe the distinction between feature structures and their descriptions.",
        "Feature structures are represented by directed graphs (DGs), and descriptions of feature structures are represented by logical formulas.",
        "The syntax for formulas of FDL is given in Figure 6.",
        "We define several new types of formulas for conditional descriptions and negations, but the domain of feature structures remains DGe, as before."
      ]
    },
    {
      "heading": "2.1 Satisfaction and Compatibility",
      "text": [
        "In order to understand how conditional descriptions are used, it is important to recognize two relations that may hold between a particular feature structure and a description: satisfaction and compatibility.",
        "Satisfaction implies compatibility, so there are three possible states that a particular structure may have with respect to a description: the structure may fully satisfy the description, the structure may be incompatible with the description, or the structure may be compatible with (but not satisfy) the description.",
        "To define these terms more precisely, consider the state of an arbitrary structure, A, with respect to an atomic feature description, f : v: A satisfies f : v if f occurs in A with value v; A is incompatible with f: v if f occurs in A with value z, for some z v; A is (merely) compatible with f : v if f does not occur in A.",
        "Because feature structures are used to represent partial information, it is possible for a structure that is merely compatible with a description to be extended (i.e., by adding a value for some previously nonexistent feature) so that it either satisfies or becomes incompatible with the description.",
        "Consider, for example, the structure (Ai) shown in Figure 7, and the three descriptions:",
        "Description (1) is satisfied by A1, because Ai is fully instantiated with all the required feature values.",
        "Description (2) is incompatible with A1, because Ai has a different value for the feature subj : person.",
        "Description (3) is merely compatible with A1 (but not satisfied by Ai), because Ai has no value for the feature subj : case.",
        "In the following definitions, the notation A 0 means that the structure A satisfies the description 0, and the notation A \", 0 means that the structure A is compatible with the description 0.",
        "Logical combinations of feature descriptions are evaluated with their usual semantics to determine whether they are satisfied by a structure.",
        "Thus, a conjunction is satisfied only when every conjunct is satisfied, and a disjunction is satisfied if any disjunct is satisfied.",
        "The formal semantics of the satisfaction relation has been specified in our previous work describing FDL [Kas86].",
        "The semantics of the compatibility relation is given by the following conditions:",
        "1.",
        "A-' NIL always; 2.",
        "A a •:=:.• A is the atomic structure a; 3.",
        "A \", 1.< pi < p. 4=.",
        "all DGs in the set {Al < pi >,..., Al < p,, >} can be unified (any member of this set may be undefined; such members are equivalent to null DGs); 4.",
        "A1:0 <=>.",
        "All is undefined or All \", d; 5.",
        "An,0V0 4=:.",
        "A \", orAn-.0; 6.",
        "A 0 A 0 4=:- A \", canonical form of 0 A 0.",
        "Unlike satisfaction, the semantics of compatibility cannot be defined by simple induction over conjunctive formulas, because of a subtle interaction between path equivalences and",
        "nonexistent features.",
        "For example, consider whether A:, shown in Figure 7, is compatible with the description: number : pi A ll< number >,< aubj number >1.",
        "A1 is compatible with number : pl, and A1 is also compatible with l< number >, < 'Raj number >1, but A: is not compatible with the conjunction of these two descriptions, because it requires subj : number : pi and A1 has sing as the value of that feature.",
        "Thus, in order to determine whether a structure is compatible with a conjunctive description, it is generally necessary to unify all conjuncts, putting the description into the canonical form described in [Kas87c].",
        "This canonical form (i.e. the feature-description data structure) contains definite and indefinite components.",
        "The definite component contains no disjunction, and is represented by a DG structure that satisfies all non-disjunctive parts of a description.",
        "The indefinite component is a list of disjunctions.",
        "A structure is compatible with a description in canonical form if and only if it is unifiable with the definite component and it is compatible with each disjunction of the indefinite component."
      ]
    },
    {
      "heading": "2.2 Conditional Description",
      "text": [
        "We augment FDL with a new type of formula to represent conditional descriptions, using the notation, a #, and the standard interpretation given for material implication: A -ia V fl.",
        "(4) This interpretation of conditionals presupposes an interpretation of negation over feature descriptions, which is given below.",
        "To simplify the interpretation of negations, we exclude formulas containing path equivalences and path values from the antecedents of conditionals."
      ]
    },
    {
      "heading": "2.3 Negation",
      "text": [
        "We use the classical interpretation of negation, where A -10 4=4.",
        "A (P. Negated descriptions are defined for the following types of formulas:",
        "1.",
        "A •:=- A is not the atom a; 2.",
        "A -1(t : 4)) -4==.",
        "A : -10 or A 1 is not defined; 3.",
        "A --1(95 V 1,0 <=i.",
        "A 4 A -4; 4.",
        "A -v(4) A 0) <=>.",
        "Note that we have not defined negation for formulas containing path equivalences or path values.",
        "This restriction makes it possible to reduce all occurrences of negation to a boolean combination of a finite number of negative constraints on atomic values.",
        "While the classical interpretation of negation is not strictly monotonic with respect to the normal sub-sumption ordering on feature structures, the restricted type of negation proposed here does not suffer from the inefficiencies and order-dependent unification properties of general negation or intuitionistic negation [Mosh87,Per87].",
        "The reason for this is that we have restricted negation so that all negative information can be specified as local constraints on single atomic feature values.",
        "Thus, these constraints only come into play when specific atomic values are proposed for a feature, and they can be checked as efficiently as positive atomic value constraints."
      ]
    },
    {
      "heading": "2.4 Feature Existence Conditions",
      "text": [
        "A special type of conditional description is needed when the antecedent of a conditional is an existence predicate for a particular feature, and not a regular feature description.",
        "We call this type of conditional a feature existence condition, and use the notation:"
      ]
    },
    {
      "heading": "3f – ■ (k, where A3f <=> Al f is defined.",
      "text": [
        "This use of 3!",
        "is essentially equivalent to the use off = ANY in Kay's FUG, where ANY is a place-holder for any substantive (i.e., non-NIL) value.",
        "The primary effect of a feature existence condition, such as 3f --• 4,, is that the consequent is asserted whenever a substantive value is introduced for a feature labeled by f. The treatment of feature existence conditions differs slightly from other conditional descriptions in the way that an unsatisfiable consequent is handled.",
        "In order to negate the antecedent of 3f – ■ 4o, we need to state that f may never have any substantive value.",
        "This is accomplished by unifying a special atomic value, such as NONE, with the value of f. This special atomic value is incompatible with any other real value that might be proposed as a value for f. Feature existence conditions are needed to model the second type of implication expressed by systemic input conditions - namely, when a constituent has one of the feature alternatives described by a system, it must also have the feature(s) specified by that system's input condition.",
        "Generally, a system named f with input condition a and alternatives described by fi, can be represented by two conditional descriptions:",
        "1. a 7+ 13; 2.",
        "3f --• a.",
        "For example, recall the BenfactiveVoice system, which is represented by the two conditionals shown in Figure 5.",
        "It is important to note that feature existence conditions are used for systems with simple input conditions as well as for those with complex input conditions.",
        "The use of feature existence conditions is essential in both cases to encode the bidirectional dependency between systems that is implicit in a systemic network."
      ]
    },
    {
      "heading": "3 Unification with Conditional Descriptions",
      "text": [
        "The unification operation, which is commonly used to combine feature structures (i.e., non-disjunctive, non-conditional DGs), can be generalized to define an operation for combining the information of two feature descriptions (i.e., formulas of FDL).",
        "In FDL, the unification of two descriptions is equivalent to their logical conjunction, as discussed in [Kas871,].",
        "We",
        "have shown in previous work 1Kas87c1 how unification can be accomplished for disjunctive descriptions without expanding to disjunctive normal form.",
        "This unification method factors descriptions into a canonical form consisting of definite and indefinite components.",
        "The definite component contains no disjunction, and is represented by a DG structure that satisfies all non-disjunctive parts of a description.",
        "The indefinite component of a description is a list of disjunctions.",
        "When two descriptions are unified, the first step is to unify their definite components.",
        "Then the indefinite components of each description are checked for compatibility with the resulting definite component.",
        "Disjuncts are eliminated from the description when they are inconsistent with definite information.",
        "When only one alternative of a disjunction remains, it is unified with the definite component of the description.",
        "This section details how this unification method can be extended to handle conditional descriptions.",
        "Conditionals may be regarded as another type of indefinite information in the description of a feature structure.",
        "They are indefinite in the sense that they impose constraints that can be satisfied by several alternatives, depending on the values of features already present in a structure."
      ]
    },
    {
      "heading": "3.1 How to Satisfy a Conditional Description",
      "text": [
        "The constraints imposed on a feature structure by a conditional description can usually be determined most efficiently by first examining the antecedent of the conditional, because it generally contains a smaller amount of information than the consequent.",
        "Examining the antecedent is often sufficient to determine whether the consequent is to be included or discarded.",
        "Given a conditional description, C = a #, we can define the constraints that it imposes on a feature structure (A) as follows.",
        "When: A a, then A A 96 a, then C imposes no further constraint on A, and can therefore be eliminated; A a, then check whether # is compatible with A.",
        "If compatible, then C must be retained in the description of A.",
        "If incompatible, then A la (and C can be eliminated).",
        "These constraints follow directly from the interpretation (4) that we have given for conditional descriptions.",
        "These constraints are logically equivalent to those that would be imposed on A by the disjunction Ice V # , as required.",
        "However, the constraints of the conditional can often be imposed more efficiently than those of the equivalent disjunction, because examining the antecedent of the conditional carries the same cost as examining only one of the disjuncts.",
        "When the constraints of a disjunction are imposed, both of the disjuncts must be examined in all cases."
      ]
    },
    {
      "heading": "5Ftead this constraint as: 'make sure that A satisfies a.\" 3.2 Extending the Unification Algorithm",
      "text": [
        "The unification algorithm for disjunctive feature descriptions [Kas87c) can be extended to handle conditionals by recognizing two types of indefinite information in a description: disjunctions and conditionals.",
        "The extended feature-description data structure has the components: definite: a DG structure; disjunction': a list of disjunctions; conditionals: a list of conditional descriptions.",
        "The part of the unification algorithm that checks the compatibility of indefinite components of a description with its definite component is defined by the function CHECK-INDEF, shown in Figure 8.",
        "This algorithm checks the disjunctions of a description before conditionals, but an equally correct version of this algorithm might check conditionals before disjunctions.",
        "In our application of parsing with a systemic grammar it is generally more efficient to check disjunctions first, but other applications might be made more efficient by varying this order."
      ]
    },
    {
      "heading": "4 Potential Refinements",
      "text": [
        "Several topics merit further investigation regarding conditional descriptions.",
        "The implementation we describe has the constraints of conditionals and disjunctions imposed in an arbitrary order.",
        "Changing the order has no effect on the final result, but it is likely that the efficiency of unification could be improved by ordering the conditionals of a grammar in a deliberate way.",
        "Another way to improve the efficiency of unification with conditionals would involve indexing them by the features that they contain.",
        "Then a conditional would not need to be checked against a structure until some feature value of the structure might determine the manner in which it is satisfied.",
        "The amount of efficiency gained by such techniques clearly depends largely on the nature of the particular grammar being used in an application.",
        "A slightly different type of conditional might be used as a way to speed up unification with binary disjunctive descriptions.",
        "If it is known that the values of a relatively small number of features can be used to discriminate between two alternative descriptions, then those features can be factored into a separate condition in a description such as"
      ]
    },
    {
      "heading": "IF condition THEN alti ELSE alt2.",
      "text": [
        "When the condition is satisfied by a structure, then alt i is selected.",
        "When the condition is incompatible with a structure, then alt2 is selected.",
        "Otherwise both alternatives must remain under consideration.",
        "As it oftm requires a considerable amount of time to check which alternatives of a disjunction are applicable, this technique might offer a significant improvement in an application where large disjunctive descriptions are used.",
        "Remember that we have restricted conditionals by requiring that their antecedents do not contain path equivalences.",
        "Function CHECK-INDEF (desc) Returns feature-description: where desc is a feature-description.",
        "Let D = desc.definite (a DG).",
        "Let disjunctions = desc.disjunctions.",
        "Let conditionals = desc.conditionals.",
        "Let unchecked-parts = true."
      ]
    },
    {
      "heading": "unchecked-parts := false.",
      "text": []
    },
    {
      "heading": "Cluck compatibility of disjunction& with D (omited, see [Kas87c]). Check compatibility of conditionals with D:",
      "text": [
        "This restriction has been acceptable in our use of conditional descriptions to model systemic grammars.",
        "It is unclear whether a treatment of conditional descriptions without this restriction will be needed in other applications.",
        "If this restriction is lifted, then further work will be necessary to define the behavior of negation over path equivalences, and to handle such negations in a reasonably efficient manner."
      ]
    },
    {
      "heading": "5 Summary",
      "text": [
        "We have shown how the notational resources of FUG can be extended to include descriptions of conditional information about feature structures.",
        "Conditional descriptions have been given a precise logical definition in terms of the feature description logic of Kasper and Rounds, and we have shown how a unification method for feature descriptions can be extended to use conditional descriptions.",
        "We have implemented this unification method and tested it in a parser for systemic grammars, using several hundred conditional descriptions.",
        "The definition of conditional descriptions and the unification method should be generally applicable as an extension to other unification-based grammar frameworks, as well as to FUG and the modeling of systemic grammars.",
        "In fact, the implementation described has been carried out by extending PATR-II [Shie841, a general representational framework for unification-based grammars.",
        "While it is theoretically possible to represent the information of conditional descriptions indirectly using notational devices already present in Kay's FUG, there are practical advantages to representing conditional descriptions directly.",
        "The indirect encoding of conditional descriptions by disjunctions and negations entails approximately doubling the size of a description, adding many explicit nonexistence constraints on features (NONE values), and slowing the unification process.",
        "In our experiments, unification with conditional descriptions requires approximately 50% of the time required by unification with an indirect encoding of the same descriptions.",
        "By adding conditional descriptions as a notational resource to FUG, we have not changed the theoretical limits of what FUG can do, but we have developed a representation that is more perspicuous, less verbose, and computationally more efficient."
      ]
    },
    {
      "heading": "Acknowledgements",
      "text": [
        "I would like to thank Bill Rounds for suggesting that it might be worthwhile to clarify ideas about conditional descriptions",
        "that were only partially formulated in my dissertation at the [Per87I Fernando C.N.",
        "Pereira.",
        "Grammars and Logics of University of Michigan.",
        "Helpful comments on earlier versions [Shie841 Partial Information.",
        "In Proceedings of the Inter-of this paper were provided by Bill Mann, Ed Hovy and John national Conference on Logic Programming, Mel-Bateman.",
        "bourne, Australia, May 1987.",
        "This research was sponsored by the United States Air Stuart M. Shieber.",
        "The design of a computer lan-Force Office of Scientific Research under contract F49620- guage for linguistic information.",
        "In Proceedings of 87-C-0005; the opinions expressed here are solely those of the Tenth International Conference on Computa-the author.",
        "tional Linguistics: COLING 84, Stanford University, Stanford, California, July 2-7, 1984."
      ]
    }
  ]
}
