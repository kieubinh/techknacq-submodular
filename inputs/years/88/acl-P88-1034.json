{
  "info": {
    "authors": [
      "David Weir",
      "Aravind K. Joshi"
    ],
    "book": "Annual Meeting of the Association for Computational Linguistics",
    "id": "acl-P88-1034",
    "title": "Combinatory Categorial Grammars: Generative Power and Relationship to Linear Context-Free Rewriting Systems",
    "url": "https://aclweb.org/anthology/P88-1034",
    "year": 1988
  },
  "references": [
    "acl-C86-1047",
    "acl-C86-1048",
    "acl-P86-1012",
    "acl-P87-1015"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "Recent results have established that there is a family of languages that is exactly the class of languages generated by three independently developed grammar formalisms: Tree Adjoining Grammars, Head Grammars, and Linear Indexed Grammars.",
        "In this paper we show that Combina-tory Categorial Grammars also generates the same class of languages.",
        "We discuss the structural descriptions produced by Combinatory Categorial Grammars and compare them to those of grammar formalisms in the class of Linear Context-Free Rewriting Systems.",
        "We also discuss certain extensions of Combinatory Categorial Grammars and their effect on the weak generative capacity."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "There have been a number of results concerning the relationship between the weak generative capacity (family of string languages) associated with different grammar formalisms; for example, the theorem of Gaifman, et al.",
        "[3] that Classical Categorial Grammars are weakly equivalent to Context-Free Grammars (CFG's).",
        "More recently it has been found that there is a class of languages slightly larger than the class of Context-Free languages that.is generated by several different formalisms.",
        "In particular, Tree Adjoining Grammars (TAG's) and Head Grammars (HG's) have been shown to be weakly equivalent [15], and these formalism are also equivalent to a restriction of Indexed Grammars considered by Gazdar [6] called Linear Indexed Grammars (110's) [13].",
        "In this paper, we examine Combinatory Categorial Grammars (CCG's), an extension of Classical Categorial Grammars developed by Steedman and his collaborators [1,12,9,10,111.",
        "The main result in this paper is",
        "that CCG's are weakly equivalent to TAG's, HG's, and LIG's.",
        "We prove this by showing in Section 3 that Combinatory Categorial Languages (CCL's) are included in Linear Indexed Languages (LIL's), and that Tree Adjoining Languages (TAL's) are included in CCL's.",
        "After considering their weak generative capacity, we investigate the relationship between the structural descriptions produced by CCG's and those of other grammar formalisms.",
        "In [14] a number of grammar formalisms were compared and it was suggested that an important aspect of their descriptive capacity was reflected by the derivation structures that they produced.",
        "Several formalisms that had previously been described as mildly context-sensitive were found to share a number of properties.",
        "In particular, the derivations of a grammar could be represented with trees that always formed the tree set of a context-free grammar.",
        "Formalisms that share these properties were called Linear Context-Free Rewriting Systems (LCFRS ' s) [14].",
        "On the basis of their weak generative capacity, it appears that CCG's should be classified as mildly context-sensitive.",
        "In Section 4 we consider whether CCG's should be included in the class of LCFRS's.",
        "The derivation tree sets traditionally associated with CCG's have Context-free path sets, and are similar to those of LIG's, and therefore differ from those of LCFRS's.",
        "This does not, however, rule out the possibility that there may be alternative ways of representing the derivation of CCG's that will allow for their classification as LCFRS's.",
        "Extensions to CCG's have been considered that enable them to compare two unbounded structures (for example, in [12]).",
        "It has been argued that this may be needed in the analysis of certain coordination phenomena in Dutch.",
        "In Section 5 we discuss how these additional features increase the power of the formalism.",
        "In so doing, we also give an example demonstrating that the Parenthesis-free Categorial Grammar formalism [5,4] is more powerful that CCG's as defined here.",
        "Extensions to TAG's (Multicomponent TAG) have been considered for similar",
        "Restrictions can be associated with the use of the com-binatory rule in R. These restrictions take the form of constraints on the instantiations of variables in the rules.",
        "These can be constrained in two ways.",
        "reasons.",
        "However, in this paper, we will not investigate the relationship between the extension of CCG's and Multicomponent TAG."
      ]
    },
    {
      "heading": "2 Description of Formalisms",
      "text": [
        "In this section we describe Combinatory Categorial Grammars, Tree Adjoining Grammars, and Linear Indexed Grammars."
      ]
    },
    {
      "heading": "2.1 Combinatory Categorial Grammars",
      "text": [
        "Combinatory Categorial Grammar (CCG), as defined here, is the most recent version of a system that has evolved in a number of papers [1,12,9,10,11].",
        "A CCG, G, is denoted by (VT,VN,S, f , R) where VT is a finite set of terminals (lexical items), VN is a finite set of nontenninaLs (atomic categories), S is a distinguished member of VN, f is a function that maps elements of VT U {E} to finite subsets of C(VN), the set of categories', where VN C C(VN) and",
        "(ci/c2) E C(VN) and (ct \\c2) E C(VN).",
        "R is a finite set of combinatory rules, described below.",
        "We now give the combinatory rules, where x, y, z are variables over categories, and each I; denotes either \\ or",
        "I.",
        "1. forward application: (01Y) y 2. backward application: y (x\\y) 3. generalized forward composition for some n > 1: (x/Y) (• • • (Ylizt)I2 • • Inzn) (• • •(xlizt)I2 • • • Inzn) 4. generalized backward composition for some n > 1:",
        "'Note that f can assign categories to the empty string, 6, though, to our knowledge, this feature has not been employed in the linguistic applications of CCG.",
        "1.",
        "The initial nonterminal of the category to which x is instantiated can be restricted.",
        "2.",
        "The entire category to which y is instantiated can be restricted.",
        "Derivations in a CCG involve the use of the combinatory rules in R. Let the derives relation be defined as follows.",
        "if R contains a combinatory rule that has c1c2 c as an instance, and a and # are (possibly empty) strings of categories.",
        "The string languages, L(G), generated by a CCG, G, is defined as follows.",
        "Although there is no type-raising rule, its effect can be achieved to a limited extent since f can assign type-raised categories to lexical items, which is the scheme employed in Steedman's recent work."
      ]
    },
    {
      "heading": "2.2 Linear Indexed Grammars",
      "text": [
        "Linear Indexed Grammars (LIG's) were introduced by Gazdar [6], and are a restriction of Indexed Grammars introduced by Aho [2].",
        "LIG's can be seen as an extension of CFG's in which each nontenninal is associated with a stack.",
        "An LIG, G, is denoted by G = (VN,VT,VS,S, P) where VN is a finite set of nontenninals, VT is a finite set of terminals, Vs is a finite set of stack symbols,",
        "where An E Vii, 1€ Vs, and a€ VT U {E}.",
        "The notation for stacks uses [.",
        "1] to denote an arbitrary stack whose top symbol is 1.",
        "This system is called Linear Indexed Grammars because it can be viewed as a",
        "restriction of Indexed Grammars in which only one of the non-terminals on the right-hand-side of a production can inherit the stack from the left-hand-side.",
        "The derives relation is defined as follows."
      ]
    },
    {
      "heading": "23 Tree Adjoining Grammars",
      "text": [
        "A TAG [8,7] is denoted G= (VN ,VT ,S,I, A) where VN is a finite set of nonterminals, VT is a finite set of terminals, S is a distinguished nonterminal, I is a finite set of initial trees and A is a finite set of auxiliary trees.",
        "Initial trees are rooted in S with w E 1771 on their frontier.",
        "Each internal node is labeled by a member of VN Auxiliary trees have w1Atc2 E ViWN V4; on their frontier.",
        "The node on the frontier labeled A is called the foot node, and the root is also labeled A.",
        "Each internal node is labeled by a member of VN • Trees are composed by tree adjunction.",
        "When a tree 7' is adjoined at a node ry in a tree y the tree that results, y \" , is obtained by excising the subtree under q from 7 and inserting 7' in its place.",
        "The excised subtree is then substituted for the foot node of 7'.",
        "This operation is illustrated in the following figure.",
        "Each node in an auxiliary tree labeled by a nontenninal is associated with adjoining constraints.",
        "These constraints specify a set of auxiliary trees that can be adjoined at that node, and may specify that the node has obligatory adjunction (OA).",
        "When no tree can be adjoined at a node that node has a null adjoining (NA) constraint The string language L(G) generated by a TAG, G, is the set of all strings lying on the frontier of some tree that can be derived from an initial trees with a finite number of adjtmctions, where that tree has no OA constraints."
      ]
    },
    {
      "heading": "3 Weak Generative Capacity",
      "text": [
        "In this section we show that CCG's are weakly equivalent to TAG's, HG's, and 1.10's.",
        "We do this by showing the inclusion of CCL's in LIL's, and the inclusion of TAL's in CCL's.",
        "It is know that TAG and LIG are equivalent [13], and that TAG and HG are equivalent [15].",
        "Thus, the two inclusions shown here imply the weak equivalence of all four systems.",
        "We have not included complete details of the proofs which can be found in [16]."
      ]
    },
    {
      "heading": "3.1 CCL's C L1L's",
      "text": [
        "We describe how to construct a JIG, GI, from an arbitrary CCG, G such that G and GI are equivalent.",
        "Let us assume that categories are written without parentheses, unless they are needed to override the left associativity of the slashes.",
        "A category c is minimally parenthesized if and only if one of the following holds.",
        "where co E VN and each ci is minimally parenthesized.",
        "It will be useful to be able to refer to the components of a category, c. We first define the immediate components of c.",
        "when c = A the immediate component is A, when c = (colic1i2 • • !nen ) the immediate components are co, c1,..., en.",
        "The components of a category C are its immediate components, as well as the components of its immediate components.",
        "Although in CCG's there is no bound on the number of categories that are derivable during a derivation (categories resulting from the use of a combinatory rule), there is a bound on the number of components that derivable categories may have.",
        "This would no longer hold if unrestricted type-raising were allowed during a derivation.",
        "Let the set Dc(G) be defined as follows.",
        "Clearly for any CCG, G, Dc(G) is a finite set.",
        "Dc(G) contains the set of all derivable components because for every category c that can appear in a sentential form of a derivation in some CCG, G, each component of c is in Dc (G).",
        "This can be shown, since, for each combinatory rule, if it holds of the categories on the left of the rule then it will hold of the category on the right.",
        "Each of the combinatory rules in a CCG can be viewed as a statement about how a pair of categories can be combined.",
        "For the sake of this discussion, let us name the members of the pair according to their role in the rule.",
        "The first of the pair in forward rules and the second of the pair in backward rules will be named the primary category.",
        "The second of the pair in forward rules and the first of the pair in backward rules will be named the secondary category.",
        "As a result of the form that combinatory rules can take in a CCG, they have the following property.",
        "When a combinatory rule is used, there is a bound on the number of immediate components that the secondary categories of that rule may have.",
        "Thus, because immediate constituents must belong to Dc(G) (a finite set), there is a bound on the number of categories that can fill the role of secondary categories in the use of a combinatory rule.",
        "Thus, there is a bound on the number of instantiations of the variables y and zi in the combinatory rules in Section 2.1.",
        "The only variable that can be instantiated to an unbounded number of categories is x.",
        "Thus, by enumerating each of the finite number of variable bindings for y and each z, the number of combinatory rules in R can be increased in such a way that only x is needed.",
        "Notice that x will appears only once on each side of the rules (i.e. they are linear).",
        "We are now in a position to describe how to represent each of the combinatory rules by a production in the LIG, G'.",
        "In the combinatory rules, categories can be viewed as stacks since symbols need only be added and removed from the right.",
        "The secondary category of each rule will be a ground category: either A, or (Alicti2 • • Incn), for some n > 1.",
        "These can be represented in a LIG as AO or An c,i] , respectively.",
        "The primary category in a combinatory rule will be unspecified except for the identity of its left and rightmost immediate components.",
        "Its leftmost component is a nonterminal, A, and its rightmost component is a member of Dc(G), c. This can be represented in a LIG by A[• In addition to mapping combinatory rules onto productions we must include productions in G' for the mappings from lexical items.",
        "We are assuming an extension of the notation for productions that is given in Section 2.2.",
        "Rather than adding or removing a single symbol from the stack, a fixed number of symbols can be removed and added in one production.",
        "Furthermore, any of the nonterminals on the right of productions can be given stacks of some fixed size."
      ]
    },
    {
      "heading": "3.2 TAL's C CCL's",
      "text": [
        "We briefly describe the construction of a CCG, G' from a TAG, G, such that G and G' are equivalent.",
        "For each nonterminal, A of G there will be two nonter-minaLs Aa and AC in G'.",
        "The nonterminal of G' will also include a nonterminal Ai for each terminal ai of the TAG.",
        "The terminal alphabets will be the same.",
        "The combinatory rules of G' are as follows.",
        "Forward and backward application are restricted to cases where the secondary category is some X°, and the left immediate component of the primary category is some ya.",
        "Forward and backward composition are restricted to cases where the secondary category has the form (()Cc I )I2e2), and the left immediate component of the primary category is some Ya.",
        "An effect of the restrictions on the use of combinatory rules is that only categories that can fill the secondary role during composition are categories assigned to terminals by f. Notice that the combinatory rules of G' depend only",
        "on the terminal and nonterminal alphabet of the TAG, and are independent of the elementary trees.",
        "f is defined on the basis of the auxiliary trees in G. Without loss of generality we assume that the TAG, G, has trees of the following form.",
        "/ contains one initial tree:"
      ]
    },
    {
      "heading": "S OA",
      "text": [
        "Thus, in considering the language derived by G, we need only be concerned with trees derived from auxiliary trees whose root and foot are labeled by S. There are 5 kinds of auxiliary trees in A.",
        "1.",
        "For each tree of the following form include AG/Ca/B` E f(e) and Ac/Ca/13` E f(e)"
      ]
    },
    {
      "heading": "at ANA",
      "text": [
        "The CCG, G', in deriving a string, can be understood as mimicking a derivation in G of that string in which trees are adjoined in a particular order, that we now describe.",
        "We define this order by describing the set, Ti(G), of all trees produced in i or fewer steps, for i > 0.",
        "To(G) is the set of auxiliary trees of G. Ti(G) is the union of Ti_i(G) with the set of all trees y produced in one of the following two ways.",
        "1.",
        "Let 7' and 7\" be trees in (G) such that",
        "there is a unique lowest OA node, Th in 7' that does not dominate the foot node, and 7\" has no OA nodes.",
        "7 is produced by adjoining 7\" at n in 7'.",
        "2.",
        "Let 7' be trees in Ti_i(G) such that there is OA node, rh in 7' that dominates the foot node and has no lower OA nodes.",
        "7 is produced by adjoining an auxiliary tree flat 77 in 7'.",
        "Each tree y EZ(G) with frontier w1Aw2 has the property that it has a single spine from the root to a node that dominates the entire string wlAw2.",
        "All of the OA nodes remaining in the tree fall on this spine, or hang immediately to its right or left.",
        "For each such tree 7 there will be a derivation tree in G', whose root is labeled by a category c and with frontier w1 w2, where c encodes the remaining obligatory adjunctions on this spine in 7.",
        "Each OA nodes on the spine is encoded in c by a slash and nonterminal symbol in the appropriate position.",
        "Suppose the OA node is labeled by some A.",
        "When the OA node falls on the spine C will contain Mc (in this case the direction of the slash was arbitrarily chosen to be forward).",
        "When the OA node falls to the left of the spine c will contain \\Aa, and when the OA node falls to the right of the spine C will contain /A°.",
        "For example, the following tree is encoded by the category A\\AT/AVAAA1"
      ]
    },
    {
      "heading": "Ai OA A20A",
      "text": [
        "We now give an example of a TAG for the language { a'b' I n > 0} with crossing dependencies.",
        "We then give the CCG that would be produced according to this construction."
      ]
    },
    {
      "heading": "4 Derivations Trees",
      "text": [
        "Vijay-Shanlcer, Weir and Joshi [14] described several properties that were common to various constrained grammatical systems, and defined a class of such systems called Linear Context-Free Rewriting Systems (LCFRS's).",
        "LCFRS's am constrained to have linear non-erasing composition operations and derivation trees that are structurally identical to those of context-free grammars.",
        "The intuition behind the latter restriction is that the rewriting (whether it be of strings, trees or graphs) be performed in a context-free way; i.e., choices about how to rewrite a structure should not be dependent on an unbounded amount of the previous or future context of the derivation.",
        "Several well-known formalisms fall into this class including Context-Free Grammars, Generalized Phrase Structure Grammars (GPSG), Head Grammars, Tree Adjoining Grammars, and Multicomponent Tree Adjoining Grammars.",
        "In [14] it is shown that each formalism in the class generates semffinear languages that can be recognized in polynomial time.",
        "In this section, we examine derivation trees of CCG's and compare them with respect to those of formalisms that are known to be LCFRS's.",
        "In order to compare CCG's with other systems we must choose a suitable method for • the representation of derivations in a CCG.",
        "In the case of CPU, TAG, HG, for example, it is fairly clear what the elementary structures and composition operations should be, and as a result, in the case of these formalisms, it is apparent how to represent derivations.",
        "The traditional way in which derivations of a CCG have been represented has involved a binary tree whose nodes are labeled by categories with annotations indicating which combinatory rule was used at each stage.",
        "These derivation trees are different from those systems in the class of LCFRS's in two ways.",
        "They have context-free path sets, and the set of categories labeling nodes may be infinite.",
        "A property that they share with LCFRS's is that there is no dependence between unbounded paths.",
        "In fact, the derivation trees sets produced by CCG's have the same properties as those produced by LIG's (this is apparent from the construction in Section 3.1).",
        "Although the derivation trees that are traditionally associated with CCG's differ from those of LCFRS's, this does not preclude the possibility that there may be an alternative way of representing derivations.",
        "What appears to be needed is some characterization of CCG's that identifies a finite set of elementary structures and a finite set of composition operations.",
        "The equivalence of TAG's and CCG's suggests one way of doing this.",
        "The construction that we gave from TAG's to CCG's produced CCG's having a specific form which can be thought of as a normal form for CCG's.",
        "We can represent the derivations of grammars in this form with the same tree sets as the derivation tree sets of the TAG from which they were constructed.",
        "Hence CCG's in this normal form can be classified as LCFRS's.",
        "TAG derivation trees encode the adjunction of specified elementary trees at specified nodes of other elementary trees.",
        "Thus, the nodes of the derivation trees are labeled by the names of elementary trees and tree addresses.",
        "In the construction used in Section 3.2, each auxiliary tree produces assignments of elementary categories to lexical items.",
        "CCG derivations can be represented .with trees whose nodes identify elementary categories and specify which combinatory rule was used to combine it.",
        "For grammars in this normal form, a unique derivation can be recovered from these trees, but this is not true of arbitrary CCG's where different orders of combination of the elementary categories can result in derivations that must be distinguished.",
        "In this normal form, the combinatory rules are so restrictive that there is only one order in which elementary categories can be combined.",
        "Without such restrictions, this style of derivation tree must encode the order of derivation."
      ]
    },
    {
      "heading": "5 Additions to CCG's",
      "text": [
        "CCG's have not always been defined in the same way.",
        "Although TAG's, HG's, and CCG's, can produce the crossing dependencies appearing in Dutch, two additions to CCG's have been considered by Steedman in [12] to describe certain coordination phenomena occurring in Dutch.",
        "For each addition, we discuss its effect on the power of the system."
      ]
    },
    {
      "heading": "5.1 Unbounded Dependent Structures",
      "text": [
        "A characteristic feature of LCFRS's is that they are unable to produce two structures exhibiting an unbounded dependence.",
        "It has been suggested that this capability may be needed in the analysis of coordination in Dutch, and an extension of CCG's has been proposed by Steedman [12] in which this is possible.",
        "The following schema is included.",
        "x* conj x where, in the analysis given of Dutch, x is allowed to match categories of arbitrary size.",
        "Two arbitrarily large structures can be encoded with two arbitrarily large categories.",
        "This schema has the effect of checking that the encodings are identical.",
        "The addition of rules such as this increases the generative power of CCG's, e.g., the following language can be generated."
      ]
    },
    {
      "heading": "{(wc)n I WE {a, b}}",
      "text": [
        "In giving analysis of coordination in languages other than Dutch, only a finite number of instances of this schema are required since only bounded categories are involved.",
        "This form of coordination does not cause problems for LCFRS' s."
      ]
    },
    {
      "heading": "5.2 Generalized Composition",
      "text": [
        "Steedman [12] considers a CCG in which there are an infinite number of composition rules for each n > 1 of the form",
        "This form of composition is permitted in Parenthesis-free Categorial Grammars which have been studied in [5,4], and the results of this section also apply to this system.",
        "With this addition, the generative power of CCG's increases.",
        "We show this by giving a grammar for a language that is known not to be a Tree Adjoining language.",
        "Consider the following CCG.",
        "We allow unrestricted use of arbitrarily many combinatory rules for forward or backwards generalized composition and application.",
        "When the language, L, generated by this grammar is intersected with the regular language",
        "we get the following language.",
        "{ cill'a32b71c7'142ce212(13241 I n1 n2 > } The pumping lemma for Tree Adjoining Grammars [13] can be used to show that this is not a Tree Adjoining Language.",
        "Since Tree Adjoining Languages are closed under intersection with Regular Languages, L can not be a Tree Adjoining Language either."
      ]
    },
    {
      "heading": "6 Conclusions",
      "text": [
        "In this paper we have considered the string languages and derivation trees produced by CCL's.",
        "We have shown that CCG's generate the same class of string languages",
        "as TAG's, HG's, and LIG's.",
        "The derivation tree sets normally associated with CCG's are found to be the same as those of LIG's.",
        "They have context-free path sets, and nodes labeled by an unbounded alphabet.",
        "A consequence of the proof of equivalence with TAG is the existence of a normal form for CCG's having the property that derivation trees can be given for grammars in this normal form that are structurally the same as the derivation trees of CFG's.",
        "The question of whether there is a method of representing the derivations of arbitrary CCG's with tree sets similar to those of CFG's remains open.",
        "Thus, it is unclear, whether, despite their restricted weak generative power, CCG's can be classified as LCFRS's."
      ]
    }
  ]
}
