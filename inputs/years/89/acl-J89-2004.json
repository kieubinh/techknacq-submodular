{
  "info": {
    "authors": [
      "Marcus Kracht II"
    ],
    "book": "Computational Linguistics",
    "id": "acl-J89-2004",
    "title": "On the Logic of Category Definitions",
    "url": "https://aclweb.org/anthology/J89-2004",
    "year": 1989
  },
  "references": [],
  "sections": [
    {
      "text": [
        "In their paper on category structures, Gazdar et al.",
        "(1988) define a constraint language Lc for categories and a logic Ac of admissible category structures.' The intuitive idea is that for a constraint 4) expressed in Lc, 4) is a nontrivial constraint if and only if Ac 1/ 4); and it is a satisfiable constraint if and only if Ac From a practical point of view it is therefore important to know whether Ac is decidable and even better that the decision can be given in a time bounded by a recursive function on the length of 4).",
        "However, the remarks made in their paper only suffice to show that the modal fragment of Ace contains S4.Grz = K(❑p – > p, Op ---> ❑❑p, ❑(❑(p – > Op) – > p) – > p), which does not show that this fragment is decidable.",
        "In this note, I will establish both that the modal fragment of Ac and Ac itself are decidable, and I will prove it in that order.",
        "As a result, I will also axiomatize Ac.",
        "Thus I show first that the modal reduct of Ac, which I call AM, is decidable.",
        "This paper will be rather hardgoing for anyone not acquainted with modal logic.",
        "We advise the reader to have Gazdar et al.",
        "(1988) at hand while reading this paper, or better still, to read it once through beforehand.",
        "For the modal logics we refer the reader to Boolos (1979), Harel (1984), and Segerberg (1971), but in principle any introduction to modal logic will provide enough background to be able to understand the gist of the arguments.",
        "Without going into too many details of the construction, I will show that there is an easy way to give a proof that in fact shows that AM = S4.Grz using the structure of the models those logics admit.",
        "Intuitively, categories correspond to Kripke models.",
        "For let a be a category.",
        "Then a defines a set of categories W, which is obtained by successively applying type 13 features to a.",
        "An accessibility relation is defined via a /3 ifff(a) = /3 for some type 1 feature f. This accessibility relation is irreflexive, intransitive, finite, and defines a tree-structure on W. Most importantly, it is cycle free.",
        "Thus, if we look at the reflexive and transitive closure 4+ of <1, it is again finite and has no non-trivial cycles.",
        "It therefore is an S4.Grz structure (see, e.g., Boolos 1979).",
        "Conversely, an S4.Grz structure <W, <1±> which is a tree can be represented as a category.",
        "If we then take a model <W, <+, val> based on that frame, where val: X – > 2W maps a finite set of propositional variables into 2w, we can code this model by adding a type 0 feature fp for each p E X that takes values T or 1.",
        "Thus the resulting category a not only codes the successor function by means of type 1 features, but also the valuation val.",
        "W is in one-to-one correspondence 4) with the set F of categories generated by a.",
        "We then make the following definitions: Let /3 be in F: p fp: Tiff (1)(13) E val(p) iff 4)(p) p ii.",
        "/3 fp : 1 iff 4)(13) E val(p) iff 4)(f3) It is easy to see that for any modal formula P with variables in X, the corresponding translation T induced by p 4-0 fp: T satisfies /3 7(P) iff (1)((3) P. The logic of <141,<4-> therefore coincides with the logic of all categories that differ from a only in the assignment of type 0 features.",
        "To conclude, the logic of categories as defined in Gazdar et al.",
        "(1988) coincides with the logic of all finite, reflexive, transitive trees.",
        "It is easily seen that the finite, reflexive, transitive trees generate the class of finite models for S4.Grz.",
        "Thus the logic of categories is the logic of the finite models of S4.Grz which, since S4.Grz has the finite model property, is identical to S4.Grz (end of proof).",
        "A few remarks are in order:",
        "1.",
        "I used a purely semantical argument, which in this case is the most direct way, because it is fairly easy to see why we get just the models we get, though there is some footwork to be done.",
        "2.",
        "Alternatively I could have built a canonical model out of a category structure 1, whose worlds are the categories that E admits and whose accessibility relation is as defined above for categories.",
        "The proof is essentially the same.",
        "3.",
        "The idea of encoding frames and valuations into a single structure has also been explored in Fagin (1985).",
        "4.",
        "In Rautenberg (1983) a simple tableau calculus for",
        "S4.Grz is given which shows that S4.Grz consistency is effectively decidable, and that the decision procedure is primitive recursive.",
        "Furthermore, the size of a tableau is bounded by a function of the number o(P) of subformulas of P, or, more precisely, the theoremhood of P can be decided with a tableau of length 27-1-6o(P).",
        "Given the proof, the same holds for AM, since the translation procedure reduces the size of a formula.",
        "So we have the same bound for Ac.",
        "5.",
        "In Gazdar et al.",
        "(1988) another logic is mentioned which arises from restricting the number of type 1 features to 1.",
        "The resulting logic is equal to S4.3.Grz = S4.Grz(Op A 0q.",
        " – > .0(p A 0q) 0(q A 0 p) 0.",
        "(p A q)), the logic of all finite linear orders, as can be seen in the same way.",
        "Since finitely generated S4.3.Grz models are finite, this logic is decidable as well.",
        "I will now proceed to the full case.",
        "Before I embark on the proof, let me remark on a few things.",
        "First, although each particular category structure contains only a finite number of features and values, Lc contains infinitely many of them.",
        "As regards the type 0 features, this causes no problem, since we treat f : a as a proposition and we allow ourselves infinitely many of those.",
        "However, type 1 features will create some problems that are not very serious but have to be dealt with carefully.",
        "Second, as we defined a translation of Lc into modal logic, we will now define a translation of Lc into elementary propositional dynamic logic (EPDL) so that every type 1 feature has a program associated with it",
        "Computational Linguistics, Volume 15, Number 2, June 1989 Technical Correspondence On the Logic of Category Definitions whose interpretation is an accessibility relation between categories.",
        "This translation is harmless and allows us to forget about type 0 features altogether.",
        "i. T(f : a) = p<f:a> where f is of type 0 ii.",
        "r(f• : = <yi> .0 where fi is of type 1 iii.",
        "= [41> a is a program that by definition contains all other programs; that is, if two categories are related by y„ they are also related by a.",
        "However, although the intuition is that a is the reflexive and transitive closure of all the y,'s, this fact is not expressible in EPDL nor in Lc because it requires a formula of infinite length.",
        "But, as it turns out, this is a harmless deficiency of our language.",
        "The translation of Ac into EPDL will be called E. I will now give a full axiomatization of E. As we saw earlier, the axioms governing the behaviour of [a] are exactly the axioms for S4.Grz, since [a] is the old O.",
        "Similar reasoning will reveal that the [y,] behave alike, and the corresponding logic is the logic otherwise known as which stands for \"only one alterna-tive\".",
        "The accessibility relation for K.Alt, allows a world to have at most one successor.",
        "Although it has more models, K.Alt, is the logic of all irreflexive, linear and finite frames, which shows that it is the logic we are looking for.",
        "If we take all this together with the observation that a includes y,, we get the following axioms for E:",
        "Note that E is not finitely axiomatizable and so Ac isn't either.",
        "Note also that if it weren't for the axiom(s) called Mix, life would be very easy for us now.",
        "Since the axioms for the various programs are independent, the finite model property for each of those programs individually would yield the finite model property for the whole logic by simple induction on the number of programs.",
        "Thus let us call the logic without Mix E'e. Also, since we have a tableau calculus for S4.Grz and a tableau calculus for K.Alt , we have a calculus for Ee as well, simply by putting all tableau rules together.",
        "The tableau rule for y, would look as follows: from F; <y,> 0 step to r°; 4), where F° := {4) I <yi> E F or [yi]tii E I shall spare the reader an exact specification of the tableau rules and refer him to Rautenberg (1983) again.",
        "Note that the length of the tableaus for K.Alt, is bounded by the size of 4) so that the actual size of the tableau is at most 2\"`\"), where n is the length of 0 and a(0) the number of subformulas of 4>.",
        "This bound could be sharpened somewhat but we ignore this point.",
        "What I want to show is how the fact that Ee can be shown to have all those properties can be made to explain why E must have those properties, too.",
        "What the reader should understand at this point is that tableaus are a way of systematically constructing a model for a formula (if it is consistent) and showing inconsistency by exhausting all possible choices, of which there are only finitely many.",
        "What I do now is boost up a model construction procedure for Ee to a model construction procedure for E. This is done as follows: Suppose we want to construct a E-model for 4>.",
        "Since we do not know how to do this we construct a Ee-model instead.",
        "However, this model might be deficient by not respecting Mix.",
        "Therefore we add a finite set 0# of instances of Mix which will ensure that Mix is respected for subformulas of 4>.",
        "The Ee model can then safely be turned into an 5 model.",
        "Let me therefore define the modal degree d of a formula.",
        "Furthermore, let V)) be the set of subformulas of 0.",
        "Then define = U < y, occurs in 4 > Ua",
        "Then we say that an E tableau for ci) is simply an Ee tableau for 0;0#.",
        "Let us see how el makes everything right for us.",
        "The failure of Ee is to allow models for <ye> tp A [atm/i.",
        "For suppose we build a simple Ee tableau for 0 and we encounter a line F; <ye> tif A [a]-10.",
        "In the next step we get r; <yi> 0;[a]-10 and then F°;0.",
        "But if we added 4>#, then F would necessarily contain a formula yielding <ye> tp---> <a> 4r, which would close this branch of the tableau.",
        "Thus an Ee tableau for 0;0# results in a model <W, val> in which, though a is an independent program, for every subformula (/) of 0, if s,val <ye> IP, then also s,val <a> Thus it is easy to see that if we now reinterpret the a relation as as the reflexive, transitive closure of a and the yi, we get an E model < W, val> for 4, which obviously is of the same size.",
        "Thus, if Ee has the finite model property, E has the finite model property, and if the decision procedure for Ee is bounded a priori by a function on the length of .0, the same holds for E. Obviously, the bound is much higher than for Ee because of the 0*, but this is the price we have to pay (end of proof).",
        "Given the above proof we can now change the tableau calculus for E by redefining the rule for y, to the following: from F; <yi> 0. infer F<>; F ;4 where F° := {0 I <yi> tft E F or [yi]fli E n and F° := I [a]0 E U I [a]0 E rl.",
        "The proof method I used for proving decidability for E (Ac) from the decidability of Ee is explained in full detail in Kracht (1988).",
        "The same method applies to the case when we only allow a single type 1 feature, since it only requires the base logic – in",
        "Technical Correspondence On the Logic of Category Definitions this case S4.3.Grz – to have the finite model property.",
        "The resulting logic 5.3 can be (finitely) axiomatized as follows:",
        "Alt, y E.3 <71> c/A <71> 4, <-0 <71> (0 A') Mix E.3 <71> 4, – > <a> 0 The model construction requires some care since we do not have an unlimited resort of extra features, but it can be done in the same spirit.",
        "This shows decidability for E.3 and hence for the corresponding logic mentioned in the paper.",
        "An alternative formulation of E.3 could be given with the help of propositional dynamic logic using the star operator *.",
        "We would then simply have an axiom <yr> 4 <--o <a> d) that says nothing else, but that a is the reflexive and transitive closure of yl.",
        "This trick would also work if we restrict E to any finite number of features.",
        "But the star does not gain us much for E itself since we still could not express the fact that a is the reflexive and transitive closure of the yi's because we have infinitely many of them."
      ]
    },
    {
      "heading": "ACKNOWLEDGMENTS",
      "text": [
        "This paper was written while I was at the Centre for Cognitive Science in Edinburgh.",
        "I wish to thank Jaap van der Does for encouraging me to write this proof down and for proofreading it.",
        "I also wish to thank G. Gazdar for remarks on an earlier version of the paper and an anonymous referee for further suggestions."
      ]
    },
    {
      "heading": "REFERENCES",
      "text": [
        "and the logic, which defines a subset of that language, namely the set of its theorems.",
        "We make this distinction here by calling the logic as well as the set of theorems it defines Ac.",
        "2.",
        "We define a logic as a set of rules, which are pairs A/0, where A is the set of premises of that rule and q5 its consequence.",
        "Modus Ponens thus takes the form 0,0 -+ 04.",
        "Rules are closed under substitution.",
        "Axioms are rules because we can take A = 0.",
        "The modal fragment of A,- is then simply the subpart of rules that only involve modal formulas, i.e. no type 1 features.",
        "3.",
        "Remember that type 1 features take propositions as values, whereas type 0 features only take atoms."
      ]
    }
  ]
}
