{
  "info": {
    "authors": [
      "Anuj Dawar",
      "K. Vijay-Shanker"
    ],
    "book": "Annual Meeting of the Association for Computational Linguistics",
    "id": "acl-P89-1003",
    "title": "A Three-Valued Interpretation of Negation in Feature Structure Descriptions",
    "url": "https://aclweb.org/anthology/P89-1003",
    "year": 1989
  },
  "references": [
    "acl-P84-1008",
    "acl-P86-1038",
    "acl-P88-1029"
  ],
  "sections": [
    {
      "heading": "ABSTRACT",
      "text": [
        "Feature structures are informational elements that have been used in several linguistic theories and in computational systems for natural-language processing.",
        "A logical calculus has been developed and used as a description language for feature structures.",
        "In the present work, a framework in three-valued logic is suggested for defining the semantics of a feature structure description language, allowing for a more complete set of logical operators.",
        "In particular, the semantics of the negation and implication operators are examined.",
        "Various proposed interpretations of negation and implication are compared within the suggested framework.",
        "One particular interpretation of the description language with a negation operator is described and its computational aspects studied."
      ]
    },
    {
      "heading": "1 Introduction and Background",
      "text": [
        "A number of linguistic theories and computational approaches to parsing natural language have employed the notion of associating informational elements, called feature structures, consisting of features and their values, with phrases.",
        "Rounds and Kasper [KR86, RK86] developed a logical calculus that serves as a description language for these structures.",
        "Several researchers have expressed a need for extending this logic to include the operators of negation and implication.",
        "Various interpretations have been suggested that define a semantics for these operators (see Section 1.2), but none has gained universal acceptance.",
        "In [Feral, Pereira set forth certain properties that any such interpretation should satisfy.",
        "In this paper we present an extended logical calculus, with a semantics in three-valued logic (based on Kleene's three-valued logic [K1e52]), that includes an interpretation of negation motivated by the approach given by Kart-tunen [Kar84].",
        "We show that our logic meets the conditions stated by Pereira.",
        "We also show that the three-valued framework is powerful enough to express most of the proposed definitions of negation and implication.",
        "It therefore makes it possible to compare these different approaches."
      ]
    },
    {
      "heading": "1.1 Rounds-Kasper Logic",
      "text": [
        "In [Kas87] and [RK86], Rounds and Kasper introduced a logical formalism to describe feature structures with disjunctive specification.",
        "The language is a form of modal propositional logic (with modal operator \":\").",
        "In order to define the semantics of this language, feature structures are formally defined in terms of acyclic finite automata.",
        "These are finite-state automata whose transition graphs are acyclic.",
        "The formal definition may be found in [RK86].",
        "A fundamental property of the semantics is that the set of automata satisfying a given formula is upward-closed under the operation of subsumption.",
        "This is important, because we consider a formula to be only a partial description of a feature structure.",
        "The property is stated in the following theorem [RK86]:"
      ]
    },
    {
      "heading": "1.2 The Problem of Adding Negation",
      "text": [
        "Several researchers in the area have suggested that the logic described above should be extended to include negation and implication.",
        "Karttunen [Kar841 provides examples of feature structures where a negation operator might be useful.",
        "For instance, the most natural way to represent the number and person attributes of a verb such as sleep would be to say"
      ]
    },
    {
      "heading": "2 Feature Structure Descriptions with Negation",
      "text": [
        "that it is not third person singular rather than expressing it as a disjunction of the other five possibilities.",
        "Karttunen also suggests an implementation technique to handle negative information.",
        "Johnson [Joh87], defined an Attribute Value Logic (AVL), similar to the Rounds-Kasper Logic, that included a classical form of negation.",
        "Kasper [Kas88] discusses an interpretation of negation and implication in an implementation of Functional Unification Grammar [Kay79] that includes conditionals.",
        "Kasper's semantics is classical, but his unification procedure uses notions similar to those of three-valued logic'.",
        "One aspect of the classical approach is that the property of upward-closure under subsumption is lost.",
        "Thus the evaluation of negation may not be freely interleaved with unification 2.",
        "In [Kas88], Kasper localized the effects of negation by disallowing path expressions within the scope of a negation.",
        "This restriction may not be linguistically warranted as can be seen by the following example from Pereira [Per87] which expresses the semantic constraint that the subject and object of a clause cannot be coref-erential unless the object is a reflexive pronoun: obj :type : reflexive V – 1(subj : ref 7z obj : ref) Moshier and Rounds [MR87] proposed an intuitionistic interpretation of negation that preserves upward-closure.",
        "They replace the notion of satisfaction with one of model-theoretic forcing as described in Fitting [Fit69].",
        "They also provide a complete proof system for their logic.",
        "The satisfiability problem for this logic was shown to be PS PACE-complete."
      ]
    },
    {
      "heading": "1.3 Outline of this Paper",
      "text": [
        "In the following section we will present our proposed solution in a three-valued framework, for defining the semantics of feature structure descriptions including negation'.",
        "This solution is a formalization of the notion of negation in Karttunen [Kar84].",
        "In Section 3 we will show that the framework of three-valued logic is flexible enough to express most of the different interpretations of negation mentioned above.",
        "In Section 4 we will show that the satisfiability problem for the logic we propose is NP-complete."
      ]
    },
    {
      "heading": "lsee Section 3.4",
      "text": [
        "We will now present our extended version of the Rounds.",
        "Kasper logic including negation.",
        "We do this by giving the semantics of the logic in a three-valued setting.",
        "This provides an interpretation of negation that is intuitively appealing, formally simple and computationally no harder than the original Rounds-Kasper logic.",
        "With each formula we associate the set (Tset) of automata that satisfy the formula, a set (Fset) of automata that contradict it and a set ( Uset) of automata which neither satisfy nor contradict ie.",
        "Different interpretations of negation are obtained by varying definitions of what constitutes \"contradiction.\" In the semantics we will define, we choose a definition in which contradiction is equivalent to essential incompatibility 5.",
        "We will define the Tset and the Fset so that they are upward-closed with respect to subsumption for all formulae.",
        "Thus, we avoid the problems associated with the classical interpretation of negation.",
        "In our logic, negation is defined so that an automaton A satisfies 4 if and only if it contradicts 0."
      ]
    },
    {
      "heading": "2.1 The Syntax",
      "text": [
        "The symbols in the descriptive language, \"other than the connectives :, v, A, and are taken from two primitive domains: Atoms (A), and Labels (L).",
        "The set of well formed formulae (W), is given by: NIL; TOP; a; 1: 0; 0 A 0; 0 V 0; – ,0 and pi 192, where a E A; I EL; 0,0 E W and pi , p2 E"
      ]
    },
    {
      "heading": "2.2 The Semantics",
      "text": [
        "Formally, the semantics is defined over the domain of partial functions from acyclic finite automata6 to boolean values.",
        "4A similar notion was used by Kasper [Kas86], who introduces the notion of compatibility.",
        "We shall compare this approach with ours in greater detail in Section 3.4.",
        "5 In general, a feature structure is incompatible with a formula it the information it contains is inconsistent with that in the formula.",
        "We will distinguish two kinds of incompatibility.",
        "A feature structure is essentially incompatible with a formula if the information in it contradicts the information in the formula.",
        "It is trivially incompatible with the formula if the inconsistency is due to an excess of information within the formula itself."
      ]
    },
    {
      "heading": "6 In this paper we will not consider cyclic feature structures",
      "text": [
        "3. r is a countable set (the output alphabet), 4.",
        "6 : Q x E --• Q is a finite partial function (the transition function), 5. qo E Q (the initial state), 6.",
        "F C Q (the set of final states), 7.",
        "A:F--•r is a total function (the output function), 8. the directed graph (Q, E) is acyclic, where pEq if for some IE E, 5(p, l) = q 9. for every q E Q, there exists a directed path from go to q in (Q, E), and 10. for every q E F, b(q,1) is not defined for any 1.",
        "A formula over the set of labels L and the set of atoms A is characterized by a partial function: : {A1.4 =< Q, L, A, 6, qo, F, A >} {True, False} F4(A) is True iff A satisfies 0.",
        "It is False if A contradicts q7 and is undefined otherwise.",
        "The formal definition is given below.",
        "1.",
        "We have not included an implication operator in the formal language, since we find that defining implication in terms of negation and disjunction (i.e 4.",
        "Ei -10 V 0) yields a semantics for implica",
        "tion that corresponds exactly to our intuitive understanding of implication.",
        "2.",
        "As one would expect, an atomic formula is satisfied by the corresponding atomic feature structure.",
        "On the other hand, only atomic feature structures are defined as contradicting an atomic formula.",
        "Though a complex feature structure is clearly incompatible with an atomic formula we do not view it as being essentially incompatible with it.",
        "An interpretation of negation that defines a complex feature structure as contradicting a (and hence satisfying --,a) is also possible.",
        "However, our definition is motivated by the linguistic intention of the negation operator as given by Karttunen [Kar84].",
        "Thus, for instance, we require that an automaton satisfying the formula case : -,dative have an atomic value for the case feature.",
        "3.",
        "In 4. above, we state that: Yo(A) = (All) if .All is defined.",
        "When All is defined, 74,1(A11) may still",
        "be True, False or undefined.",
        "In any of these cases, Ap(A) = Fo1(A/08.",
        ".7.4,(A) is not defined if All is not defined.",
        "Not only is this condition required to preserve upward-closure, it is also linguistically motivated.",
        "Here again, we could have said that a formula of the form I : gil is contradicted by any atomic feature structure, but we have chosen not to do so for the reasons outlined in the previous note.",
        "4.",
        "We have chosen to state that the set of automata that are incompatible with the formula p1 7)2 is not the set of automata for which 6(go, pi) and 6(go, p2) are defined and 5(go,pi) 5(go,p2), since such an automaton could subsume one in which 6(go, pi) = 6(go,p2).",
        "Thus, we would lose the property of upward-closure under subsumption.",
        "However, an automaton, A, in which b(go,pi) and 6(go,p2) are defined and A/pi is not unifiable' with Alp2 cannot subsume one in which 6(go, pi) = 5(go, p2 )."
      ]
    },
    {
      "heading": "2.2.1 Upward-Closure",
      "text": [
        "As has been stated before, the set of automata that satisfy a given formula in the logic defined above is upward-closed under subsumption.",
        "This property is formally stated below."
      ]
    },
    {
      "heading": "Proof:",
      "text": [
        "The proof is by induction on the structure of the formula.",
        "The details may be found in Dawar [Daw88]."
      ]
    },
    {
      "heading": "2.3 Examples",
      "text": [
        "We now take a look at the examples mentioned earlier and see how they are interpreted in the logic just defined.",
        "The first example expressed the agreement attribute of the verb sleep by the following formula:",
        "This formula is satisfied by any structure that has an agreement feature which, in turn, either has a person feature with a value other than third or a number feature with a value other than singular.",
        "Thus, for instance, the following two structures satisfy the given formula:",
        "On the other hand, for a structure to contradict formula( 1) it must have an agreement feature defined for both person and number with values third and singular respectively.",
        "All other automata would have an undefined truth value for formula( 1).",
        "Turning to the other example mentioned earlier, the formula:",
        "is satisfied by the first two of the following structures, but is contradicted by the third (here co-index boxes are used to indicate co-reference or path-equivalence)."
      ]
    },
    {
      "heading": "3 Comparison with Other Interpretations of Negation",
      "text": [
        "As we have stated before, the semantics for negation described in the previous section is motivated by the discussion of negation in Karttunen (Kar84), and that it is closely related to the interpretation of Kasper [Kas88].",
        "In this section, we take a look at the interpretations of negation that have been suggested and how they may be related to interpretations in a three-valued framework."
      ]
    },
    {
      "heading": "3.1 Classical Negation",
      "text": [
        "By classical negation, we mean an interpretation in which an automaton A satisfies a formula NO if and only if it does not satisfy 0.",
        "This is, of course, a two-valued logic.",
        "Such an interpretation is used by Johnson in his Attribute-Value Language [3oh81.",
        "We can express it in our framework by making .7-4, a total function such that wherever .7\"(A) was undefined, it is now defined to be False.",
        "Returning to our earlier example, we can observe that for formula( 1) the structure",
        "has a truth value of false in the classical semantics but has an undefined truth value in the semantics we define.",
        "This illustrates the problem of non-monotonicity in the classical semantics since this structure does subsume one that satisfies formula (1). ]"
      ]
    },
    {
      "heading": "3.2 Intuitionistic Logic",
      "text": [
        "In [MR87], Moshier and Rounds describe an extension of the Rounds-Kasper logic, including an implication operator and hence, by extension, negation.",
        "The semantics is based on intuitionistic techniques.",
        "The notion of satisfying is replaced by one of forcing.",
        "Given a set of automata K, a formula 0, and A such that A E K, A forces in K -\"qt.",
        "(Al- - -,0) if and only if for all B E K such that A C B, B does not force 0 in K. Thus, in order to find if a formula, 0, is satisfiable, we have to find a set K and an automaton A such that forces in K Moshier and Rounds consider a version in which forcing is always done with respect to the set of all automata, i.e.",
        "This means that the set of feature structures that satisfy is the largest upward-closed set of feature structures that do not satisfy 0 (i.e. the set of feature structures incompatible with 0).",
        "We can capture this in the three-valued framework described above by modifying the definition of .ro to make it False for all automata that are incompatible (trivially or essentially) with 0 (we call this new function 7).",
        "The definition of .n differs from that of .F0 in the following cases:",
        "F(8) 0 True or F,,2(B) 0 True) 7,6(.4) is undefined otherwise • 4, = 01 V 02 .77(A) = True",
        "771,1(8) 0 True and n2(5) 0 True) .F.0(A) is undefined otherwise ;",
        "if Alpi and A/p2 are both defined and are not unifiable or if A is atomic .n(A) is undefined otherwise .",
        "In the other cases, the definition of .F' parallels that of F. To illustrate the difference between .Fc;, and 74„ we define the following (somewhat contrived) formula:",
        "We also define the automaton A = [11 : b] We can now observe that ./.4.",
        "(A) is undefined but .14, (A) = False.",
        "To see how this arises, note that in either system, the truth value of A is undefined with respect to each of the conjuncts of 0.",
        "This is so because A can certainly be extended to satisfy either one of the conjuncts, just as it can be extended to contradict either one of them.",
        "But, for F(A) to be False, A must have a truth value of False for one of the conjuncts and therefore .F0(.4) is undefined.",
        "On the other hand, since A can never be extended to satisfy both conjuncts of 0 simultaneously, it can never be extended to satisfy 0.",
        "Hence A is certainly incompatible with 0, but because this incompatibility is a result of the excess of information in the formula itself, we say that it is only trivially incompatible with 0.",
        "To see more clearly what is going on in the above example, consider the formula -10 and apply distributivity and DeMorgan's law (which is a valid equivalence in the logic described in the previous section, but not in the intuitionistic logic of this section) which gives us: -10 =(-ilj : a A : a) V : b We can now see why we do not wish A to satisfy which would be the case if F(A) were False.",
        "One justification given for the use of forcing sets other than K' is the interpretation of formulae such as --,11 NIL.",
        "It is argued that since h: NIL denotes all feature structures that have a feature labeled h, : NIL should denote those structures that do not have such a feature.",
        "However, the formula -di, : NIL is unsatisfiable both in the interpretation given in the last section as well as in the IC version of intuitionistic logic.",
        "It is our opinion that the use of negation to assert the non-existence of features is an operation distinct from the use of negation to describe values and should be described by a distinct operator.",
        "The present work attempts to deal only with the latter notion of negation.",
        "The authors expect to present in a forthcomitg paper a simple extension to the current semantics that will deal with issues of existence of features."
      ]
    },
    {
      "heading": "3.3 Karttunen's Implementation of Negation",
      "text": [
        "As mentioned earlier, our approach was motivated by Karttunen's implementation as described in [Kar84].",
        "In the unification algorithm given, negative constraints axe attached to feature structures or automata (which themselves do not have any negative values).",
        "When the feature structure is extended to have enough information to determine whether it satisfies or falsifies' the formula then the constraints may be dropped.",
        "We feel that our definition of the Uset elegantly captures the notion of associating constraints with automata that do not have sufficient information to determine whether they satisfy or contradict a given formula."
      ]
    },
    {
      "heading": "3.4 Kasper's Interpretation of Negation and Conditionals",
      "text": [
        "As mentioned earlier, Kasper [Kas88] used the operations of negation and implication in extending Functional Unification Grammar.",
        "Though the semantics defined for these operators is a classical one, for the purposes of the algorithm Kasper identified three classes of automata associated with any formula: those that satisfy it, those that are incompatible with it and those that are merely compatible with it.",
        "We can observe that these are closely related to our Tset, Fset and Uset respectively.",
        "For instance, Kasper states that an automaton ,4 satisfies a formula 1: v if it is defined for f with value v; it is incompatible with 1: v if it is defined for f with value x (x v) and it is merely compatible with f : v if it is not defined for f. In three-valued logic, we incorporate these notions into the formal semantics, thus providing a formal basis for the unification procedure given by Kasper.",
        "Our logic also gives a more uniform treatment to the negation operator since we have removed the restriction that disallowed path equivalences in the scope of a negation."
      ]
    },
    {
      "heading": "4 Computational Issues",
      "text": [
        "In this section, we will discuss some computational aspects related to determining whether a formula is satisfiable or not.",
        "We will show that the satisfiability problem is NP-complete, which is not surprising considering that the problem is NP-complete for the logic not involving negation (Rounds-Kasper logic).",
        "The NP-hardness of this problem is trivially shown if we observe that for any formula, 0, without negation, Tset(0) is exactly the set of automata that satisfy 0 according to the definition of satisfaction given by Rounds 10It is not clear whether falsification is equivalent to incompatibility or only essential incompatibility, but from the examples involving case and agreement, we believe that only essential incompatibility is intended.",
        "and Kasper [KR86, RK86] in their original logic.",
        "Since the satisfiability problem in that logic is NP-complete, the given problem is NP-hard.",
        "In order to see that the given problem is in NP, we observe that a simple nondeterministic algorithm\" can be given that is linear in the length of the input formula 0 and that returns a minimal automaton which satisfies cb , provided it is satisfiable.",
        "To see this, note that the size (in terms of the number of states) of a minimal automaton satisfying 0 is linear in the length of 0 and verifying whether a given automaton satisfies 0 is a problem linear in the length of 0 and the size of the automaton.",
        "The details of the algorithm can be found in Dawar [Daw881."
      ]
    },
    {
      "heading": "5 Conclusions",
      "text": [
        "A logical formalism with a complete set of logical operators has come to be accepted as a means of describing feature structures.",
        "While the intended semantics of most of these operators is well understood, the negation and implication operators have raised some problems, leading to a variety of approaches in their interpretation.",
        "In the present work, we have presented an interpretation that combines the following advantages: it is formally simple as well as uniform (it places no special restriction on the negation operator); it is motivated by the linguistic applications of feature structures; it takes into account the partial nature of feature structures by preserving the property of monotonicity under unification and it is computationally no harder than the Rounds-Kasper logic.",
        "More significantly, perhaps, we have shown that most existing interpretations of negation can also be expressed within three-valued logic.",
        "This framework therefore provides a means for comparing and evaluating various interpretations."
      ]
    }
  ]
}
