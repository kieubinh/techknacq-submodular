{
  "info": {
    "authors": [
      "Claire Gardent",
      "Gabriel G. Bias",
      "Pierre François Jurie",
      "Karine Baschung"
    ],
    "book": "Annual Meeting of the Association for Computational Linguistics",
    "id": "acl-P89-1034",
    "title": "Efficient Parsing for French",
    "url": "https://aclweb.org/anthology/P89-1034",
    "year": 1989
  },
  "references": [
    "acl-E89-1034",
    "acl-P87-1011",
    "acl-P87-1012"
  ],
  "sections": [
    {
      "heading": "ABSTRACT",
      "text": [
        "Parsing with categorial grammars often leads to problems such as proliferating lexical ambiguity, spurious parses and overgeneration.",
        "This paper presents a parser for French developed on an unification based categorial grammar (FG) which avoids these problems.",
        "This parser is a bottom-up chart parser augmented with a heuristic eliminating spurious parses.",
        "The unicity and completeness of parsing are proved."
      ]
    },
    {
      "heading": "INTRODUCTION",
      "text": [
        "Our aim is twofold.",
        "First to provide a linguistically well motivated categorial grammar for French (henceforth, FO) which accounts for word order variations without overgenerating and without unnecessary lexical ambiguities.",
        "Second, to enhance parsing efficiency by eliminating spurious parses, i.e. parses with different derivation trees but equivalent semantics.",
        "The two goals are related in that the parsing strategy relies on properties of the grammar which are independently motivated by the linguistic data.",
        "Nevertheless, the knowledge embodied in the grammar is kept independent from the processing phase."
      ]
    },
    {
      "heading": "1. LINGUISTIC THEORIES AND WORD ORDER",
      "text": [
        "Word order remains a pervasive issue for most linguistic analyses.",
        "Among the theories most closely related to FG, Unification Categorial Grammar (UCG : Zeevat et al.",
        "1987), Combinatory Categorial Grammar (CCG : Steedman 1985, Steedman 1988), Categorial Unification Grammar (CUG : Karttunen 1986) and Head-driven Phrase Structure Grammar (FTPSG : Pollard & Sag 1988) all present inconveniences in their way of dealing with word order as regards parsing efficiency and/or linguistic data.",
        "* The work reported here was carried out in the ESPRIT Project 393 ACORD, «The Construction and Interrogation of Knowledge Bases using Natural Language Text and Graphics.",
        "In UCG and in CCG, the verb typically encodes the notion of a canonical ordering of the verb arguments.",
        "Word order variations are then handled by resorting to lexical ambiguity and jump rules' (UCG) or to new combinators (CCG).",
        "As a result, the number of lexical and/or phrasal edges increases rapidly thus affecting parsing efficiency.",
        "Moreover, empirical evidence does not support the notion of a canonical order for French (cf. Bes & Gardent 1989).",
        "In contrast, CUG, GPSG (Gazdar et al.",
        "1985) and HPSG do not assume any canonical order and subcate-gorisation information is dissociated from surface word order.",
        "Constraints on word order are enforced by features and graph unification (CUG) or by Linear Precedence (LP) statements (HPSG, GPSG).",
        "The problems with CUG are that on the computational side, graph-unification is costly and less efficient in a Prolog environment than term unification while from the linguistic point of view (a) NP's must be assumed unambiguous with respect to case which is not true for - at least - French and (b) clitic doubling cannot be accounted for as a result of using graph unification between the argument feature structure and the functor syntax value-set.",
        "In HPSG and GPSG (cf. also Uszko-reit 1987), the problem is that somehow, LP statements must be made to interact with the corresponding rule schemas.",
        "That is, either rule schemas and LP statements are precompiled before parsing and the number of rules increases rapidly or LP statements are checked on the fly during parsing thus slowing down processing."
      ]
    },
    {
      "heading": "2. THE GRAMMAR",
      "text": [
        "The formal characteristics of FG underlying the parsing heuristic are presented in §4.",
        "The characteristics of FG necessary to understand the grammar are resumed here (see (Bes &Gardent 89) for a more detailed presentation).",
        "FG accounts for French linearity phenomena, embedded sentences and unbounded dependencies.",
        "It is derived from UCG and conserves most of the basic characteristics of the model : monostratality, lexica-lism, unification-based formalism and binary combinatory rules restricted to adjacent signs.",
        "Furthermore, FG, as UCG, analyses NP's as type-raised categories.",
        "FG departs from UCG in that (i) linguistic entities such as verbs and nouns, sub-categorize for a set – rather than a list – of valencies ; (ii) a feature system is introduced which embodies the interaction of the different elements conditioning word order ; (iii) FG semantics, though derived directly from MI.",
        ":, leave the scope of scoping operators undefined.",
        "The FG sign presents four types of information relevant to the discussion of this paper : (a) Category, (b) Valency set ; (c) Features ; (d) Semantics.",
        "Only two combinatory rules – forward and backward concatenation – are used, together with a deletion rule.",
        "A Category can be basic or complex.",
        "A basic category is of the form Head, where Head is an atomic symbol (n(oun), np or s(entence)).",
        "Complex categories are of the form C/Sign, where C is either atomic or complex, and Sign is a sign called the active sign.",
        "With regard to the Category information, the FO typology of signs is reduced to the following.",
        "(1)Type Category Linguistic entities Head verb, noun fl Head/fl) NP, PP, adjective, adverb, auxiliary, negative particles",
        "Thus, the result of the concatenation of a NP (f1) with a verb (M) is a verbal sign (M).",
        "Wrt the concatenation rules, M signs are arguments; fl signs are either functors of M signs, or arguments of 12 signs.",
        "Signs of type 12 are leaves and functors.",
        "Valencies in the Valency Set are signs which express sub-categorisation.",
        "The semantics of a M sign is a predicate with an argumental list.",
        "Variables shared by the semantics of each valency and by the predicate list, relate the semantics of the valency with the semantics of the predicate.",
        "Nouns and verbs sub-categorize not only for \"normal\" valencies such as nom(inative), dat(ive), etc, but also for a mod(ifier) valency, which is consumed and recursively reintroduced by modifiers (adjectives, PP's and adverbs).",
        "Thus, in FG the com-InL (Indexed Language) is the semantics incorporated to UCG ; it derives from Kamp's DRT.",
        "From hereafter werefer to FG semantics as/nt.",
        "plete combinatorial potential of a predicate is incorporated into its valency set and a unified treatment of nominal and verbal modifiers is proposed.",
        "The active sign of a fl functor indicates the valency – if any – which the ftmctor consumes.",
        "No order value (or directional slash) is associated with valencies.",
        "Instead, Features express adjacent and non-adjacent constraints on constituent ordering, which are enforced by the unification-based combinatory rules.",
        "Constraints can be stated not only between the active sign of a functor and its argument, but also between a valency, of a sign,, the signs and the active sign of the fl functor consuming valency, while concatenating with signs.",
        "As a result, the valency of a verb or of a noun imposes constraints not only on the functor which consumes it, but also on subsequent concatenations.",
        "The feature percolation system underlies the partial associativity property of the grammar (cf. §4).",
        "As mentioned above, the Semanticspart of the sign contains an InL' formula.",
        "In FG different derivations of a string may yield sentence signs whose InL' formulae are formally different, in that the order of their sub-formulae are different, but the set of their sub-formulae are equal.",
        "Furthermore, sub-formulae are so built that formulae differing in the ordering of their sub-formulae can in principle be translated to a semantically equivalent representation in a first order predicate logic.",
        "This is because : (i) in InL', the scope of scoping operators is left undefined ; (ii) shared variables express the relation between determiner and restrictor, and between scoping operators and their semantic arguments ; (iii) the grammar places constants (i.e. proper names) in the specified place of the argumental list of the predicate.",
        "For instance, FG associates to (2) the InL' formulae in (3a) and (3b) :",
        "(2) Un garcon presente Marie a une fille (3) (a) [E] [ind(X) & garcon(X) & ind(Y) & fille(Y) & presenter (E,X,marie,Y)] (b) [E] [ind(Y) & fille(Y) & ind(X) & garcon(X) & presenter (E,X,marie,Y)]",
        "While a scoping operator of a sentence constituent is related to its argument by the index of a noun (as in the above (3)), the relation between the argument of a scoping operator and the verbal unit is expressed by the index of the verb.",
        "For instance, the negative version of (2) will incorporate the sub-formula neg (E).",
        "In InL' formulae, determiners (which are leaves and 12 signs, cf. above), immediately precede their res-trictors.",
        "In formally different InL' formulae, only the ordering of scoping operators sub-formulae can differ, but this can be shown to be irrelevant with regard to the semantics.",
        "In French, scope ambiguity is the same for members of each of the following pairs, while the ordering of their corresponding semantic sub-forrnu",
        "lae, thanks to concatenation of adjacent signs, is inescapably different.",
        "(4) (a) Jacques avait donne un livre (a) a tousles itu-diants (b).",
        "(a') Jacques avait donne dtous les itudiants(b) un livre (a).",
        "(b) Un livre a ete commande par chaque etudiant (a) a une librairie (b).",
        "(b') Un livre a ete commanded une librairie ( b) par chaque itudiant (a).",
        "At the grammatical level (i.e. leaving aside pragmatic considerations),the translation of an InL' formula to a scoped logical formula can be determined by the specific scoping operator involved (indicated in the sub-formula) and by its relation to its semantic argument (indicated by shared variables).",
        "This translation must introduce the adequate quantifiers, determine their scope and interpret the '&' separator as either A or as well as introduce in negative forms.",
        "For instance, the InL' formulae in (Y) translate' to : (5) 3E, 3X, 3Y (garcon(X) A fille(Y) A presenter (E,X,marie,Y)).",
        "We assume here the possibility of this translation without saying any more on it.",
        "Since this translation procedure cannot be defined on the basis of the order of the sub-formulae corresponding to the scoping operators, MI.",
        ": formulae which differ only wrt the order of their sub-formulae are said to be semantically equivalent."
      ]
    },
    {
      "heading": "3. THE PARSER",
      "text": [
        "Because the subcategorisation information is represented as a set rather than as a list, there is no constraint on the order in which each valency is consumed.",
        "This raises a problem with respect to parsing which is that for any triplet X,Y,Z where Y is a verb and X and Z are arguments to this verb, there will often be two possible derivations i.e., (XY)Z and X(YZ).",
        "The problem of spurious parses is a well-known one in extensions of pure categorial grammar.",
        "It derives either from using other rules or combinators for derivation than just functional application (Pareschi and Steedman 1987, Wittenburg 1987, Moortgat 1987, Morrill 1988) or from having unordered set valencies (ICarttunen 1986), the latter case being that of FG.",
        "Various solutions have been proposed in relation to this problem.",
        "Karttunen's solution is to check that for any potential edge, no equivalent analysis is already In (5) BE can be paraphrased as \"There exists an event\".",
        "stored in the chart for the same string of words.",
        "However as explained above, two semantically equivalent formulae of InL' need not be syntactically identical.",
        "Reducing two formulae to a normal form to check their equivalence or alternatively reducing one to the other might require 2n permutations with n the number of predicates occuring in the formulae.",
        "Given that the test must occur each time that two edges stretch over the same region and given that itrequires exponential time, this solution was disguarded as computationally inefficient.",
        "Pareschi's lazy parsing algorithm (Pareschi, 1987) has been shown (Hepple, 1987) to be incomplete.",
        "Wittenburg's predictive combinators avoid the parsing problem by advocating grammar compilation which is not our concern here.",
        "Morill's proposal of defining equivalence classes on derivations cannot be transposed to FG since the equivalence class that would be of relevance to our problem i.e., ((X,Z)Y, X(ZY)) is not an equivalence class due to our analysis of modifiers.",
        "Finally, Moortgat's solution is not possible since it relies on the fact that the grammar is structurally com-plete' which FG is not.",
        "The solution we offer is to augment a shift-reduce parser with a heuristic whose essential content is that no same functor may consume twice the same valency.",
        "This ensures that for all semantically unambiguous sentences, only one parse is output.",
        "To ensure that a parse is always output whenever there is one, that is to ensure that the parser is complete, the heuristic only applies to a restricted set of edge pairs and the chart is organized as aqueue.",
        "Coupled with the partial-associativity of FG, this strategy guarantees that the parser is complete (cf. §4)."
      ]
    },
    {
      "heading": "3.1 THE HEURISTIC",
      "text": [
        "The heuristic constrains the combination of edges in the following way2.",
        "Let el be an edge stretching from Si to El labelled with the type fO, a predicate identifier pl and a sign Signl , let e2 be an edge stretching from El to S2 labelled with type f/ and a sign Sign2, then e2 will reduce with el by consuming the valency Val of pl if e2 has not already reduced with an edge el 'by consuming the valency Valofpl where el 'stretches from Si' to El and Si' Si.",
        "In the rest of this section, examples illustrate how A structurally complete grammar is one such that :",
        "where Ed4 = Edl(Ed2,p1,subj) indicates that the edge Ed!",
        "reduces with Ed2 by consuming the subject valency of the edge Ed2 with predicate pl.",
        "Ed5 and Ed10 are ruled out by the grammar since in French no lexical (as opposed to clitics and wh-NP) object NP may appear to the left of the verb.",
        "Ed9 is ruled out by the heuristic since Ed3 has already consumed the object valency of the predicate pl thus yielding Ed6.",
        "Note also that Edl may consume twice the subject valency of pl thus yielding Ed4 and Ed8 since the heuristic does not apply to pairs of edges labelled with signs of type fl and 10 respectively.",
        "Producing as many parses as there are readings The proviso that a functor edge cannot combine with two different edges by consuming twice the same valency on the same predicate ensures that PP attachment ambiguities are preserved.",
        "Consider (7) for ins-tance'.",
        "where pl and p2 are the predicate identifiers labelling the edges Ed!",
        "and Ed3 respectively.",
        "The above heuristic allows a functor to concatenate twice by consuming two different valencies.",
        "This case 'For the sake of clarity, all irelevant edges have been omitted.",
        "This practice will hold throughout the sequel.",
        "of real ambiguity is illustrated in (8).",
        "(8) Quel homme prdsente Marie a Rose ?",
        "0 ---- Edl ---- 1 --- Ed2 -- 2 -- Ed3--- 3 -- Ed4--- 4",
        "Thus, only edges of the same length correspond to two different readings.",
        "This is the reason why the heuristic allows a functor to consume twice the same valency on the same predicate ill it combines with two edges E and E' that stretch over the same region.",
        "A case in point is illustrated in (9)",
        "(9) Quel homme presente Marie a Rose ?",
        "0---- Ed 1----1 --- Ed2 2 Ed3--- 3 -- Ed4--- 4",
        "where a Rose concatenates twice by consuming twice the same – dative – valency of the same predicate."
      ]
    },
    {
      "heading": "3.2 THE PARSING ALGORITHM",
      "text": [
        "The parser is a shift-reduce parser integrating a chart and augmented with the heuristic.",
        "An edge in the chart contains the following information: edge [Name, Type, Hew, S,E, Sign] where Name is the name of the edge, S and E identifies the starting and the ending vertex and Sign is the sign labelling the edge.",
        "Type and Heur contain the information used by the heuristic.",
        "Type is either M, fl and f2 while the content of Hew depends on the type of the edge and on whether or not the edge has already combined with some other edge(s).",
        "Heur pX where X is an integer.",
        "pX identifies the predicate associated with any edge.",
        "type M fl before combination : Var where Var is the anonymous variable.",
        "This indicates that there is as yet no information available that could violate the heuristic.",
        "after combination : Hew-List where Hew-List is a list of triplets of the form [Edge,pX,Val] and Edge indicates an argument edge with which the functor edge has combined by consuming valency Val of the predicate pX label",
        "ling Edge.",
        "f2 nil The basic parsing algorithm is that of a normal shift-reduce parser integrating a chart rather than a stack i.e.,",
        "1.",
        "Starting from the beginning of the sentence, for each word W either shift or reduce, 2.",
        "Stop when there is no more word to shift and no more reduce to perforni, 3.",
        "Accept or reject.",
        "Shifting a word W consists in adding to the chart as many lexical edges as there are lexical entries associated with Win the lexicon.",
        "Reducing an edge E consists in trying to reduce E with any adjacent edge E' already stored in the chart.",
        "The operation applies recursively in that whenever a new edge E\" is created it is immediately added to the chart and tried for reduction.",
        "The order in which edges tried for reduction are retrieved from the chart corresponds to organising the chart as a queue i.e., first-in-first-ouL Step 3 consists in checking the chart for an edge stretching from the beginning to the end of the chart and labelled with a sign of category s(entence).",
        "If there is such an edge, the string is accepted – else it is rejected.",
        "The heuristic is integrated in the reduce procedure which can be defined as follows.",
        "Two edges Edge!",
        "and Edge2 will reduce to a new edge Edge3 iff",
        "Either (a) 1.",
        "Edge!",
        "= [el ,Type 1 ,H I ,E2,S ign 1] and 2.",
        "Edge2 = [e2,Type2,H2,E2,Sign2] and <Type 1 ,Type2> < f0,f I > and 3. apply(S ign 1,S ign2,S ign3) and 4.",
        "Edge3 = [e3,Type3,H3,E3,Sign31 and <S3,E3> = <S1,E2> Or (b) 1.",
        "Edge!",
        "= [el,f0,p1,S1,E1,Signl] and 2.",
        "Edge2 = [e2,f1,H2,S2,E2,Sign2] and El = S2 and 3. bapply(Signl,Sign2,Sign3) by consuming the valency Val and 4.",
        "H2 does not contain a triplet of the form [e l',p 1 ,Val] where Edge 1' = [e 1 ',f0,p 1,S'l ,S2] and S'1=S1 5.",
        "Edge3 = [e3,f0,p 1,S 1,E2,Sign3] 6.",
        "The heuristic information H2 in Edge2 is updated to [e 1,p 1 ,Val]+H2",
        "where '+ 'indicates list concatenation and under the proviso that the triplet does not already belong to H2.",
        "Where apply(Sign1 ,Sign2,Sign3)meansthat Sign 1 can combine with Sign2 to yield Sign3 by one of the two combinatory rules of FG and bapply indicates the backward combinatory rule.",
        "This algorithm is best illustrated by a short example.",
        "Consider for instance, the parsing of the sentence Pierre aime Marie.",
        "Stepl shifts Pierre thus adding Edgel to the chart.",
        "Because the grammar is designed to avoid spurious lexical ambiguity, only one edge is created.",
        "Since there is no adjacent edge with which Edgel could be reduced, the next word is shifted i.e., aime thus yielding Edge2 that is also added to the chart.",
        "Edge2 can reduce with Edge!",
        "since Sign 1 can combine with Sign2 to yield Sign3 by consuming the subject valency of the predicate p1.",
        "The resulting edge Edge3 is added to the chart while the heuristic information of the functor edge Edgel is updated :",
        "Edg4 first reduces with Edeg2 by consuming the subject valency of pl thus creating Edge5.",
        "It also reduces with Edge2 by consuming the object valency of pl to yield Edge6.",
        "At this stage, the chart contains the following edges.",
        "Pierre aime Marie",
        "Now Edgel can reduce with Edge6 by consuming the subject valency of p1 thus yielding Edge7 .",
        "However, the heuristic forbids Edge4 to consume the object valency of pl on Edge3 since Edge4 has already consumed the object valency of p1 when combining with Edge2 .",
        "In this way, the spurious parse Edge8 is avoided.",
        "The final chart is as follows.",
        "Pierre aime Marie"
      ]
    },
    {
      "heading": "4. UNICITY AND COMPLETNESS OF THE PARSING DEFINITIONS",
      "text": [
        "1.",
        "An indexed lexical f0 is a pair <X,i> where X is a lexical sign of f0 type (c.f.",
        "2) and i is an integer.",
        "2.",
        "PARSE denotes the free algebra recursively defined by the following conditions.",
        "2.1 Every lexical sign of type fl or 12, and every indexed lexical 10 is a member of PARSE.",
        "2.2 If P and Q are elements of PARSE, i is an integer, and k is a name of a valency then (P+LkQ) is a member of PARSE.",
        "2.3 If P and Q are elements of PARSE, (P+0Q) is a member of PARSE, where a) is a new symbol.1 3.",
        "For each member, P, of PARSE, the string of the leaves of P is defined recursively as usual : 3.1 If P is a lexical functor or a lexical indexed argument, L(P) is the string reduced to P. 3.2 L(P+ikQ) is the string obtained by concatenation of L(P) and L(Q).",
        "4.",
        "A member P of PARSE, is called a well indexed parse (WP) if two indexed leaves which have different ranges in L(P), have different indicies.",
        "5.",
        "The partial function, S(P), from the set of WP to the set of signs, is defined recursively by the following conditions :"
      ]
    },
    {
      "heading": "5.1 If P is a leave S(P) = P 5.2 S(F+ikA) = Z [resp. S(A+ikF) = Z] (k )",
      "text": [
        "If S(F) is a functor of type fl, S(A) is an argument and Z is the result sign by the FC rule [resp.",
        "BC rule] when S(F) consumes the valency named k in the leave of S(A) indexed by i."
      ]
    },
    {
      "heading": "5.3 S(F+k3A) = Z [res. S(AtatF) = Z] if S(F) is a functor",
      "text": [
        "of type fl or 12, S(A) is an argument sign and Z is the result sign by the FC rule [reap.",
        "BC rule].",
        "1.",
        "(Unicity) If P and Q are accepted WP's and if P .2.-- Q, then P and Q are formally equal.",
        "2.",
        "(Completeness) If P is a WP which is accepted by the grammar, and S(P) is a sign corresponding to a grammatical sentence, then there exists a WP Q such that :",
        "F, F... (resp.",
        "A,A,...) will denote WP's such that S(F), S(F')...are functors of type fl (resp.",
        "S (A), S(A')..., are arguments of type 10).",
        "The proof of the theorem is based on the following properties 1 to 3 of the grammar.",
        "Property 1 follows directly from the grammar itself.",
        "(cf. §2) ; the other two are strong conjectures which we expect to prove in a near future.",
        "PROPERTY 111 S(K) is defined and L(K) is not a lexical leaf, then :",
        "For every i and k",
        "For every F,A,F such that L(F) L(A) L(F) is a sub-string of a string of lexical entries which is accepted by the grammar as a grammatical sentence,",
        "Proof : Suppose, a contrario, that (Al-F)A-uF is not accepted.",
        "Then there must exist an edge A' = A\"+ikF such that :",
        "This implies that A\" is shorter than A.",
        "Therefore Ai-1F would not be accepted."
      ]
    },
    {
      "heading": "PROOF OF THE PART 1 OF THE THEOREM",
      "text": [
        "The proof is by induction on the lengh, lg(P), of L(P).",
        "So we suppose a) and b) : a) (induction hypothesis).",
        "For every P' and Q' such that P' and Q' are accepted, if P' s Q', and",
        "and we have to prove that c)P=Q.",
        "By the Lemma 1 P'1 and Q'1 must be both functors or both arguments.",
        "And if and Q'i are functors (res.",
        "arguments) then 1\"2 and Q'2 are arguments (resp.",
        "functors).",
        "So by Property 2, we have : i = k = k', P'1 Q'1, and Q.",
        "Then the induction hypothesis implies that P', = Q', and that F2 = Q'2.",
        "Thus we have proved that P = Q."
      ]
    },
    {
      "heading": "PROOF OF THE PART 2 OF THE THEOREM",
      "text": [
        "Let P be a WP such that S(P) is define and corms-ponds to a grammatical sentence.",
        "We will prove, by induction on the lengh of L(K), that for all the subtrees K of P, there exists K' such that :",
        "We consider the following cases (Property 1)",
        "1.",
        "If K is a leaf then K' = K 2.",
        "If K = F+ikA, then by the induction hypothesis",
        "there exist F and A' such that : (i) F and A' are accepted, and (ii) F s F, A E A'.",
        "Then F+A' is also accepted.",
        "So that K' can be choosed as F'+A'.",
        "3.",
        "If K = A+ikF, we define F, A' as in (2) and we consider the following subcases : 3.1 If A' is a leaf or if A' = Fl+uAl where S(Al+tkF) is not defined, then A'+7 is accepted, and we can take it as K."
      ]
    },
    {
      "heading": "3.2 If A' = A1+uF1, then by the Lemma 2 A'+u,F is",
      "text": [
        "accepted.",
        "Thus we can define K' as A'+±F.",
        "3.3 If A' = Fl+uAl and S(A1+F) is defined.",
        "Let A2 = Al+ikF.",
        "By the Property 3 S(F1+uA2) is defined and K A'+ikF s F1+uA2.",
        "Thus this case reduces to case 2.",
        "4.",
        "If K = Fu+upAr, where Fu is of type f2 and Ar is of type f0 or fl, then by induction hypothesis there exists At' such that Ar z Ar' and Ar' is accepted.",
        "Then K can be defined as Fu+koAr'."
      ]
    },
    {
      "heading": "5. IMPLEMENTATION AND COVERAGE",
      "text": [
        "FG is implemented in PIMPLE, a PROLOG term unification implementation of PATR II (cf. Calder 1987) developed at Edinburgh University (Centre for Cognitive Studies).",
        "Modifications to the parsing algorithm have been introduced at the \"Universite Blaise Pascal\", Clermont-Ferrand.",
        "The system runs on a SUN M 3/50 and is being extensively tested.",
        "It covers at present : declarative, interrogative and negative sentences in all moods, with simple and complex verb forms.",
        "This includes yes/no questions, constituent questions, negative sentences, linearity phenomena introduced by interrogative inversions, semi free constituent order, elides (including reflexives), agreement phenomena (including gender and number agreement between obj NP to the left of the verb and participles), passives, embedded sentences and unbounded dependencies."
      ]
    },
    {
      "heading": "REFERENCES",
      "text": []
    }
  ]
}
