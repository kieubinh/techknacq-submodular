{
  "info": {
    "authors": [
      "Mark Johnson",
      "Martin Kay"
    ],
    "book": "International Conference on Computational Linguistics",
    "id": "acl-C90-1003",
    "title": "Semantic Abstraction and Anaphora",
    "url": "https://aclweb.org/anthology/C90-1003",
    "year": 1990
  },
  "references": [
    "acl-C86-1156",
    "acl-J87-1005"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "This paper describes a way of expressing syntactic rules that associate semantic formulae with strings, but in a manner that is independent of the syntactic details of these formulae.",
        "In particular we show how the same rules construct predicate argument formulae in the style of Montague grammarlln representations reminiscent of situation semantics(Barwise and Perry I2I) and of the event logic of Davidson [5], or representations inspired by the discourse representations proposed by Kamp I91.",
        "The idea is that semantic representations are specified indirectly using semantic construction operators, which enforce an abstraction barrier between the grammar and the semantic representations themselves.",
        "First we present a simple grammar which is compatible with the three different sets of constructors for the three formalisms.",
        "We then extend the grammar to provide one treatment that accounts for quantifier raising in the three different semantic formalisms"
      ]
    },
    {
      "heading": "Introduction",
      "text": [
        "Grammars specifying the relationship between strings and semantic representations often have details of these representations embedded in them.",
        "We show how grammar rules can be written in a form which, by abstracting away from details of the semantic representation, acquires greater modularity and hence theoretical perspicuity and practical robustness.",
        "In particular, we believe that the approach helps clarify the relationship between apparently disparate theories of semantic representation).",
        "The basis of our proposal is that each grammatical rule should contain, or be paired with, an expression written in terms of semantic construction operators.",
        "Different operations can be associated with these operators and, depending on the set in force at a given time, the effect of interpreting the expression will be to construct a representation in one semantic formalism or another.",
        "The set of operators contains members corresponding to such notions as composition, conjunction, etc.",
        "The set is small and independent of the semantic formalism.",
        "The operations are associated with the operators independently of the grammar and they determine the form of the semantic representation.",
        "We present three different sets of semantic constructors here, which we have dubbed the predicate-logic, the sets-of-infons and the discourse-representation constructors.",
        "We begin by introducing the constructors used in this paper: no claims are made for their general sufficiency.",
        "Not all of the constructors arc relevant to all semantic theories and those not needed for a particular one are given degenerate definitions.",
        "The simplest kind of construction operator is the identity function which maps every input i onto just one output, namely The operators are the following:",
        "external(S,EF) relates a semantic representation S and an external form EF, e.g. a representation that constitutes the parser's output.",
        "The internal and external forms are distinguished because the (internal) representation S will, in general, contain information that plays a role in the process of analyzing a sentence (e.g. for anaphora tracking) but that is not part of the logical form (EF) of the sentence as a whole.",
        "atom(S, Prop) specifies that the content of the (internal) semantic representation, , is the atomic proposition Prop.",
        "This is used to construct the semantic values for lexical entries, for example.",
        "conjoin(S1, 52,512) relates three semantic representations.",
        "It specifics that the content of S12 is constructed by conjoining Si and 52.",
        "This operator occurs crucially in the semantics of indefinite determiners.",
        "new _index(S, I) specifies that the content of S is I, a referential index for a non-anaphoric NP.",
        "The form of a referential index is defined by the particular semantic theory.",
        "accessible_index(S, I) specifies that the content of S is a referential index I of some noun phrase that is a potential antecedent of an anaphor.",
        "Constraints on accessible indices are defined by the particular semantic theory.",
        "While the primitives discussed in this paper have relatively simple definitions, in other more elaborate theories they may involve nontrivial computation.",
        "For example, the compose primitive might impose certain discourse-consistency requirements arising from a more restrictive theory of discourse structure than those described here.",
        "A key insight of the Discourse Representation and Situation Semantics accounts, but originating with Karttunen[10], is that anaphoric and quantificational domains coincide.",
        "Thus, in (1), it can be co-indexed with a donkey only if a donkey is interpreted as having wide-scope.",
        "(1) Every man kicked a donkey.",
        "It developed blue bumps.",
        "The relationship between these sentences is one of (semantic) precedence, and we call the operator that relates the corresponding semantic representations compose: compose(S1, S2, 512) specifies that the information in the representation 512 is the information in Si followed by the information in S2.",
        "Compose defines an ordering of semantic operations that particular semantic theories may or may not he sensitive to.",
        "(In this paper, the Montague constructors are not sensitive to this ordering, while the other two types of semantic representations are).",
        "When a donkey is interpreted as having narrow scope with respect to every man in (1), the reference marker introduced by a donkey is located in a context subordinate to the sentence as a whole, and hence not accessible to anaphors in the following discourse.",
        "To provide for this, we introduce the following operator: subordinate(S â€ž5' ubN ame, Sub) specifies that S contains an anaphorically and quantifi-cationally subordinate representation Sub, which has the \"name\" S ublV arne.",
        "The SubName would be distinguished from Sub in non-extensional theories of meaning, where a meaning is distinguished from its propositional content (say), as in the sets-of-infons representation described below.",
        "We turn now to the grammar without quantifier-raising.",
        "We formulate both the grammar and the semantic constructors in pure Prolog (exploiting the syntactic sugar of Definite Clause Grammar (Pereira and Shieber [12], pp.",
        "70-79)) because it is expressive enough for our purposes and is widely used in work of this kind(sce, inter alia Colmerauer [3], Abramson and Dahl [1] and [11])."
      ]
    },
    {
      "heading": "A Grammar using Semantic Constructors",
      "text": [
        "The grammar generates simple transitive clauses and subject-relative clauses that do not",
        "involve long-distance dependencies.",
        "It is based on the Montague-style grammars presented in Chapter 4 of Pereira and Shieber[12], and the treatments of agreement, Wh-dependencies, etc., presented there could also be incorporated without difficulty."
      ]
    },
    {
      "heading": "* The lexicon",
      "text": []
    },
    {
      "heading": "*A* A *A **A* **A* AA** A*** k AA** A A AA AAA-A/",
      "text": [
        "Most of the grammar should be familiar, even if it is somewhat more pedantically expressed than is usual.",
        "Following Pereira and Shieber (who were in turn inspired by Montague), VP and N meanings are represented by terms of the form x S, where X represents a referential index and S represents an S meaning.",
        "NP meanings are represented by terms of the form VP - S (or equivalently, (x ^S0)\"S), where VP represents a VP meaning, X a referential index, and S and SO represent S meanings.",
        "All manipulation of semantic values is performed by constructor primitives, rather than by explicit construction of terms.",
        "For example, the N1 production that introduces relative-clauses invokes conjoin explicitly to conjoin the semantic values of the N and the relative clause to yield the semantic value of the Nl.",
        "The sharing of the referential index x between the N and the VP is performed in the grammar alone, since it is a syntactic rather than semantic property of the construction.",
        "The semantic component of the production that introduces lexical nouns has two parts.",
        "SO represents the atomic predicate Pred associated with the lexical meaning of the noun.",
        "S2 represents the fact that X is a (possibly new) referential index.",
        "The component S of the semantic value associated with the noun contains all of the information in SO and S2.",
        "The production introducing (lexical) pronouns requires that the referential index x of the pronoun be accessible in SO, and specifies that the S component is the composition of SO and the SO component of the VP meaning.",
        "(Recall that the semantic representations of pronouns, like all NP's, are terms of the",
        "form VP-S, so the SO is a component of the meaning of the VP or V phrase that this pronoun is an argument of.).",
        "Undoubtedly the most complex component of the grammar is the lexical entry for every.",
        "Because the structure of the lexical entries for all anaphoric scope-inducing quantifiers will be similar to the entry for every, we explain it in some detail.",
        "The quantification induced by the determiner every is described in terms of the determiner's restriction, which defines the entities that the quantification ranges over, and its scope, the component of the expression quantified over.",
        "(2) indicates the components of the utterance corresponding to the restriction and the scope of the quantifier every in the absence of quantifier-raising.",
        "(2) Every man that saw a donkey kicked it."
      ]
    },
    {
      "heading": "Restrictor",
      "text": [
        "The grammars presented here identify the re-strictor and the scope of a determiner in the syntax; e.g. quantifier-raising arises from the grammar permitting multiple assignments of components of the utterance to the restrictions and scopes of the determiners of that utterance.",
        "The semantic value associated with lexical entry for a determiner in the grammars presented here is a term of the form Res^Scope^Sentence, where Res is the semantic value associated with the restrictor and Scope is the semantic value associated with the scope.",
        "A grammar directly constructing predicate-logic style semantic representations would assign the lexical entry in (3) to the determiner every, where `-===>' is interpreted as the implication operator in semantic representations (see Pereira and Shieber [121).",
        "(3) determiner(every, Res\"ScopeiRes==>Scope)).",
        "This lexical entry does not suffice for our purposes, since it provides no information about the relative anaphoric scope relationships between the restrictor, the scope, and that portion of the utterance external to the quantificational expression as a whole.",
        "Anaphors in opaque quantificational expressions can refer to entities superordinate to the quantificational expression, but in general anaphors outside of an opaque quantificational expression cannot refer to entities introduced in either the restriction or scope of the quantificational expression2.",
        "Anaphors in the scope of an opaque quantificational expression can refer to entities introduced in the restriction of that expression (e.g. as in (3) above), but anaphors in the restriction cannot refer to entities introduced in the scope.",
        "The compose and subordinate predicates in the lexical entry for every in the grammar presented above express subordination relationships that describe the behavior of opaque determiners.",
        "The semantic representation S is the composition of S1 and S2, where S2 is the semantic atom ResName ScopeName.",
        "Res is subordinate to Sl, and is itself the composition of Res() and Res 1, where Res 0 is the semantic representation of the re-strictor.",
        "Scope is subordinate to Resl, and is the semantic representation of the scope.",
        "The diagram on the following page sketches the relationship between the various semantic entities mentioned in the lexical entry for every.",
        "Subordination relationships are depicted by vertical lines (the name of the subordinate space is written alongside the line), and composition relationships are indicated by V-shaped diagonals."
      ]
    },
    {
      "heading": "The Predicate-Logic Constructors",
      "text": [
        "These constructors build a predicate-logic type of semantic representation in a fairly transparent fashion.",
        "Pronouns are treated as free variables, there are no constraints on their distribution, and anaphoric binding is not 2 There are exceptions to this: for example, anaphors can refer to proper names introduced in the restrictor or scope of opaque determiners.",
        "Within the framework described below, this can be treated by adding a new semantic construction operator add Lopievol, which adds a referential index to the most superordinate level",
        "new index, accessible index, compose and subordinate have degenerate definitions.",
        "A property is identical with the term representing it:",
        "There are no constraints on accessible indices.",
        "accessible index(,).",
        "Sequencing is unimportant.",
        "compose(P,P,P).",
        "A Subordinate space can he introduced freely.",
        "subordinate(,Sub,Sub).",
        "Internal and external forms arc identical.",
        "external(P,P).",
        "The grammar described above and the predicate-logic constructors yield analyses such as the following:",
        "Roughly this latter form might he interpreted as: if X is a man and Y is a donkey and X owns Y, then there is a Z such that X beats Z."
      ]
    },
    {
      "heading": "The Sets-of-Infons Constructors",
      "text": [
        "The constructors for the sets-of-infons and the discourse-representation both constrain anaphora by requiring that the referential indices provided by the accessible index constructor he indices that were introduced by new_index in some earlier representation (where precedence is defined by the compose constructor).",
        "This entails that the internal form of these semantic representations encode information about preceding representations.",
        "Both constructors thread this information using the difference-list technique described in 18].",
        "The primitive element of the sets-of-infons representation is inspired by the infons of Situation Semantics PI.",
        "We represent an infon as a term of the form Sit:P, which means that P is true in the situation Sit.",
        "For example, Kim's sleeping in situation s 0 is represented by s 0: sleep (kim).",
        "For simplicity arbitrarily named constants (like the gensyrns of Lisp) are used as the names of situations in this representation: this has the disadvantage that the definitions of the external and subordinate constructors are not declaratively specified.",
        "The internal form of a sets of infons representation has three components.",
        "We represent them in Prolog with a term of the form @ (Sits, Infonsln, InfonsOut).",
        "The first is a stack whose top element is the situation currently being defined, and whose other elements are the situations superordinate to this one (as defined by the subordinate constructor).",
        "The second component is the set of all infons introduced in representations preceding this one.",
        "The infons in this list associated with the current or a superordinate situation provide the information needed for the accessible index constructor.",
        "The third component of the representation is the set",
        "of infons introduced in preceding representations with the addition any infons added to the representation by the semantic representation constructor.",
        "In describing the term @ (Sit s , Infonln, InfonsOut), we use the names Inf ons In and In fonsOut to stress the fact that they constitute a difference list.",
        "accessibleindex(Index,@(Ss,Is,Is)):member(Sit:i(Index),Is), member(Sit,Ss).",
        "external(@([Sit], [], Is), Sit:Is):gensym(Sit).",
        "The atom constructor introduces a new atomic proposition P as an infon Sit :P, where Sit is the situation currently being constructed.",
        "Notice that InfonsOut is the same as InfonsIn but for the addition of (Sit :P).",
        "The compose constructor threads the difference list of infons through both of the representations, so the composed representation contains all of the infons added to the sets of infons composed.",
        "The conjoin constructor is equivalent to the compose constructor.",
        "The subordinate constructor introduces a new subordinate representation by pushing a new situation name Sit on to the list of (now superordinate) situations.",
        "The difference list of infons is threaded through the subordinate representation so that any infons added to it will appear in the superordinate representation as well.",
        "The new index constructor adds an atom of the form i (Index) to the representation S: no constraints are placed on Index.",
        "The accessible index4 constructor is The predicate member used here, and elsewhere in this paper, has its standard logical definition: viz: member (X, [X I ) .",
        "member (X, f , ) member (X, T) .",
        "If this definition is satisfied for a referential index Index if Index was introduced by new index to a preceding non-subordinate representation, i.e. if the context contains an infon Sit (Index), where Sit is the current or a superordinate situation name.",
        "The external (internal, External) predicate initializes Internal to have no superordinate situations and no preceding context, and returns the list of infons associated with this Internal representation as its external form.",
        "When these constructors are used with the grammar defined above, the following analyses are obtained:",
        "This can be paraphrased as: Situation SO contains individuals X and Y; in .s0 X is a man, Y is a donkey and X owns Y.",
        "This can be paraphrased as: Situation sO contains the fact that all situations of type sl are also situations of type s2.",
        "A situation is of type sl if it contains individuals X and Y, and X is a man and Y is a donkey.",
        "A situation is of type s2 if X owns Y.",
        "This can be paraphrased as: Situation sO contains the fact that all situations of type 81 are also situations of type $2.",
        "A situation is of type sl if it contains individuals X and Y, X used with the grammars and constructors given in this paper, the SI,D selection rule of Prolog may lead to non-termination.",
        "It is in general necessary to delay the evaluation of the member predicate until its second argument is instantiated, which can be done using the freeze primitive of Prolog II.",
        "is a man, Y is a donkey and X owns Y.",
        "A situation is of type 32 if X beats Y.5"
      ]
    },
    {
      "heading": "The Discourse-Representation Constructors",
      "text": [
        "The representations built by these constructors are inspired by the \"box representations\" of Kamp's (1981) Discourse Representation Theory [9].",
        "A discourse representation \"box\" is represented by the list of items that constitute its contents.",
        "A representation is a difference-pair of the lists of the representations of the currently open boxes (i.e. the current box and all superordinate boxes), as in Johnson and Klein [8].",
        "In Prolog, we use the binary ' â€“ ' operator to separate the two members os the pair.",
        "The atom constructor introduces a new atomic proposition P. by adding it to the current box, i.e. the first element of the list of open boxes.",
        "The compose constructor threads the difference list representing the open boxes through both compose representations of the items being composed in the same way that the compose constructor of the sets-of-infons representations does.",
        "The conjoin constructor is equivalent to the compose constructor.",
        "The subordinate constructor introduces an empty subordinate box onto the list of cur5 The grammar and the sets of infons constructors also generate an additional reading in which the man that owns the donkey beats himself; i.e. it is taken as anaphorically dependent on every man.",
        "Simple extensions to the grammar (e.g. requiring the index of a pronoun to differ from the index of all c-commanding NI's) or the semantics (e.g. requiring the gender of the pronoun to agree with its antecedent's gender) would rule out this spurious analysis.",
        "rently open boxes.",
        "The \"name\" B of the subordinate box is the list of atoms it contains.",
        "The new index constructor adds an atom of the form i (Index) to the semantic representation: no constraints arc placed on Index (as in the sets-of-infons representation).",
        "The accessible index constructor is satisfied by a referential index Index if Index is introduced by new index in a preceding non-subordinate representation, i.e. if one of the superordinate boxes contains i (Index) .",
        "The external (Internal, External) predicate initializes Internal to have exactly one open box (empty), and returns the contents of that box as its external form.",
        "With these constructors, the parser yields the following semantic values for the test sentences.",
        "This representation is true just in case there are two individuals X and Y, X is a man and Y is a donkey, and X owns Y.",
        "This representation is true just in case for all individuals X and Y such that X is a man and Y a donkey and X owns Y, it is also true that X beats Y."
      ]
    },
    {
      "heading": "Extending the Grammar to handle Quantifier-Raising",
      "text": [
        "In this section we sketch a syntactic account of quantifier-raising inspired by the implementation of Cooper-storage (Cooper [4])",
        "presented in Pereira and Shieber [12], to which we refer the reader for details.",
        "Each syntactic constituent is associated with a list of quantifiers that are \"in storage\" (this corresponds in an LF-movement account of quantifier-scope to being raised out of this constituent).",
        "Quantifi-cational determiners add items to the quantifier store, and at S nodes, quantifiers are removed from the store and applied to the semantic representation.",
        "The quantifier-store of nodes at which quantifiers are neither added nor removed is the shuffle of the quantifier-stores of its children.6.",
        "The grammar presented below is simply the grammar presented above with the addition of quantifier-storage.",
        "The lexical entries for this grammar arc the same as the above, and so are not listed here.",
        "6 Treating the quantifier-store as a syntactic feature can express many properties of LP-movement accounts, such as quantificational islandhood, etc., without the explicit construction of additional representations compose(S1,S2,S), atom(Pred,S1), new_index(X,S2)}.",
        "detHX-Res)-(X-Scope)-Scope, [Quant]) --> [Det], fdeterminer(Det, Res-Quant)).",
        "The proposition shuffle (L1, L2, L3) is true just in case L3 is a list that can be seen as having been constructed in a sequence of steps in each of which the next available item is taken from either Li or L2 and added to the end.",
        "So long as items remain on both L1 and L2, it is immaterial which of them supplies the next member of L3.",
        "What is important is that the members of Ll and L2 should all be on L3, and in their original order.",
        "This relationship is assured by the following Prolog clauses:",
        "The first clause asserts that the proposition is true of three empty lists, and serves to terminate the recursion implicit in the other two.",
        "The second clause says that, if Q2 s and Q3s are suffixes of a pair of lists to be shuffled, and that shuffling them gives Qls, then the item that precedes Qls in the final result can come from the first list, that is, it can be the item preceding Qls.",
        "The third clause says that, alternatively, the item preceding Qls can come from the second list.",
        "The grammar also makes use of the predicate apply some(Quants, OldSemantic-Value, UnappliedQuants, NewSemanticValue) which is true if applying zero or more quantifiers from the beginning of the list Quants to a given OldSemanticValue yields NewSernantic-Value and leaves a suffix of that list of quantifiers, namely UnappliedQuants still unapplied.",
        "It can be defined with the following pair of clauses, the first of which terminates the sequence of applications and the second of which applies the next quantifier in sequence.",
        "The new grammar can be used with the three different semantic constructors presented above.",
        "Using the Predicate-Logic constructors, it yields results like the following: ?- q([a,man,owns,a,donkey],S).",
        "S â€¢ donkey(Y)&man(X)&own(X,Y); man(X)&donkey(Y)&own(X,Y) This example has two (semantically-equivalent) representations corresponding to the two scope possibilities for the two existentially quantified NPs.",
        "In this example the two non-equivalent representations correspond to the two different scope possibilities for the quantified NPs.",
        "These readings paraphrase as: There is a donkey Y and for each man X, X owns Y and For each man X there is a donkey Y and X owns Y\".",
        "In this example the two non-equivalent representations correspond to the two different scope possibilities for the quantified NPs.",
        "These readings paraphrase as: There is a donkey Y and for each man X such that X owns Y it is the case that X beats Y, and \"For each man X and donkey Y such that X owns Y, it is the case that X beats Y.",
        "Using the sets-of-infons constructors, we get the following results:",
        "The scope possibilities are indicated here by the situation in which the noun phrases are interpreted.",
        "The first reading displayed corresponds to the quantifier-raised interpretation, which paraphrases as: Situation sO contains the individual Y, the fact that Y is a donkey, and the fact that for all ways of making sl true, s2 is also true, where si contains the individual X and the fact that X is a man, and s2 contains the fact that X owns Y.",
        "Since Y is in sO, under this reading it is a potential antecedent for anaphors in for following sentences.",
        "The second reading differs from the first in that the NP a donkey is interpreted in the subordinate situation si instead of SO.",
        "As well as causing a donkey to be quantificationally subordinate to every man, this also makes a donkey unavailable as a potential antecedent for anaphors in following sentences.",
        "We can therefore account for the fact that under normal intonation a donkey is interpreted as having wide scope over every man in the following discourse fragment (3).",
        "(3) Every man saw a donkey.",
        "It had a bushy tail",
        "We now consider one of the famous \"donkey\" sentences: ?- q([every,man,that,owns,a,donkey, beats,it],S).",
        "The first reading displayed again corresponds to the quantifier-raised interpretation, which paraphrases as: Situation sO contains an individual Y, and the facts that Y is a donkey and that every way of making S1 true also makes 82 true, where Si contains the individual X and the facts that X is a man and X owns Y, and S2 contains the fact that X heats Y.",
        "Finally, the discourse-representation constructors yield the following: ?- q([every,man,owns,a,donkey],S).",
        "These representations arc direct notational variants of the two set-of-infons representations of this sentence given above.",
        "The truth conditions of the first reading correspond to the wide-scope interpretation of a donkey, and can be paraphrased as: There is a donkey Y, and for every man X, X owns Y.",
        "?- q([every,man,that,owns,a,donkey, beats,it],S).",
        "Again, these representations arc direct notational variants of the two sets-of-infons representations of this sentence given above.",
        "The truth conditions of the first reading correspond to the wide-scope interpretation of a donkey, and can be paraphrased as: There is a donkey Y, and for every man X such that X owns Y, X beats Y.",
        "The same correlation between quantificational scope and anaphoric scope holds with these constructors, as expected."
      ]
    },
    {
      "heading": "Conclusion",
      "text": [
        "We have worked out a scheme for computing the logical forms of sentences incrementally in the course of parsing them which we believe achieves an unprecedented level of abstraction of the semantic from the syntactic parts of the grammar.",
        "The very incrementality of the scheme might be used to argue against it.",
        "Given the prevalence of scope ambiguities, the interests of computational efficiency may be best served by a scheme that delays all semantic computation until the parsing is complete so as not to work unnecessarily on phrases that turn out not to be capable of incorporation in a complete analysis of the sentence.",
        "Hobbs and Sheiber [7] adopt such a scheme apparently on the grounds of greater perspicuity.",
        "In any case, the modifications that need to be made to our scheme are entirely trivial, requiring only the introduction of a modest amount of symbolic computation.",
        "Basically, the idea is to use operations which, instead of returning pieces of the final logical form incrementally and nondeterministically, return expression that will exhibit this nondeterministic behavior when evaluated later.",
        "The later evaluation will, of course, be as specified be the definitions we have given.",
        "In short, we believe that the abstractions we have created effectively isolate the syntactic rules both from the corresponding semantic formalism and from the architecture of the system by which both of them will be interpreted."
      ]
    },
    {
      "heading": "Bibliography",
      "text": []
    }
  ]
}
