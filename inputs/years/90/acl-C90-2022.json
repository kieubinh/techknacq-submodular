{
  "info": {
    "authors": [
      "Claire Gardent",
      "Agnes Plainfosse"
    ],
    "book": "International Conference on Computational Linguistics",
    "id": "acl-C90-2022",
    "title": "Generating from a Deep Structure",
    "url": "https://aclweb.org/anthology/C90-2022",
    "year": 1990
  },
  "references": [
    "acl-C88-2128",
    "acl-E89-1032",
    "acl-P89-1002",
    "acl-P89-1034"
  ],
  "sections": [
    {
      "text": [
        "ABSTRACT: Noncanonical semantic representations are representations which cannot be derived by some grammar C although they are semantically equivalent to representations which can be derived by G .",
        "This paper presents a generation algorithm which deals with non-canonical input.",
        "The proposed approach also enhances portability and language independence in that (i) linguistic decisions made by independent modules (e.g., planner, transfer component) can be communicated to the generator in a natural way and (ii) the same algorithm coupled with different grammars will yield sentences in the corresponding languages."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "not derivable under G. Representations that cannot be derived under a grammar G are said to be noncanonica/ with respect to G. In this paper, we present a generation algorithm for Unification Categorial Grammar [61 (ucc) which addresses the problem raised by non-canonical input (section 2 and 3).",
        "An interesting upshot of the strategy we propose is that it allows for language independent generation.",
        "Section 4 illustrates this point by considering how, starting from one semantic representation, two sentences can be generated: one in English and one in French.",
        "Section 5 relates our work to previous proposals by Van Noord and Shieber.",
        "Two major requirements on a generator is that it be correct and complete.",
        "A generator is said to be correct if given two semantic representations R1 and R2 which are not semantically equivalent, R1 and R2 do not generate the same string.",
        "A generator is said to be complete if any two semantically equivalent representations generate the same set of strings.",
        "An obvious case of incompleteness occurs when the generator fails to terminate on seine well-defined input.",
        "Another less obvious cause for incompleteness can be explained as follows.",
        "Consider a grammar G and its associated semantic representation language L. It is often the case that syntactically different strings of L will have equivalent semantics.",
        "A simple case in point is the semantic equivalence holding between 0 A 11) and 0 A 0 in e.g. propositional logic.",
        "On the other hand, it is also often the case that the same grammar G will not derive for a given string all the formulae which may represent its meaning.",
        "From the point of view of generation, this means that given two semantically equivalent representations R.1 and R2 there is always a possibility that R1 generates a string S but that R2 doesn't because R2 is \"The work reported here has been carried out as part of the ESPRIT project P393 ACORD on \"The Construction and Interrogation of Knowledge-Bases using Natural Language Text and Graphics\".",
        "It is the result of joint work with Michael .Reape of the Center for Cognitive Science, University of Edinburgh (Scotland, UK).",
        "2 Generating from a deep structure It is sometimes the case that a grammar will assign to a string several possible derivations with equivalent semantics.",
        "This phenomena is particularly acute in categorial grammars [21 and is referred to in the literature as that of spurious ambiguity.",
        "In grammars where the semantics is built by unification, the syntactic differences holding between these equivalent semantics resides in the relative ordering of the subformulae within the formula.",
        "That is, there is a direct relationship between the syntactic shape of a semantic formula and the derivational history of the corresponding string.",
        "Consequently, a given formula will be non-canonical wrt to a particular grammar G if the relative sequencing of its subformulae does not reflect a possible derivation in G. Hence, to allow for generation from non-canonical input, we need to abstract away from the derivational information reflected in the linear ordering of the input formula.",
        "Three major alternatives come to mind.",
        "First, we could try to generate all sentences whose semantics are logically equivalent to the input semantics.",
        "In ucc, this means that generation is carried out with the two additional logical axioms of associativity and commutativity.",
        "However, this solution produces a search space factorial in the number of conjunctions and must thus be rejected as computationally intractable.",
        "The second possibility is to define a semantic representation language for which all well-formed formulas are in normal form.",
        "This approach is essentially unavailable to any grammar framework in which the semantics of a given expression results from the unification of partially specified semantic representations because normal forms can only be defined on languages with fully instantiated formulae.",
        "A third possibility consists in generating from an alternative representation i.e. one that is related to but not identical with the semantic representation used by the grammar.",
        "This is what we chose to do.",
        "The alternative representation we adopted is closely related to D-structure in GB theory where D-structure is a level of syntactic structure which mirrors semantic functor-argument dependencies.",
        "Syntactic information is encoded in terms of schematic X theory familiar from modern generative grammar.",
        "The deep structures (DS) we generate from consist of four types: heads, complements, modifiers and specifiers (we follow LFG f-structure and uc.a subcate-gorisation structure in treating subjects as ordinary complements rather than specifiers of clauses) whereby Specifiers are of the form: speciiier(Semantics, Head).",
        "That is, they specify their own semantics and the properties of their head.",
        "In contrast, Heads are of the form: head(Semantics, ArgList, AdjunctList).",
        "That is, they specify their own head semantics and a list of arguments and adjuncts which are also either specifier or head structures.",
        "All of these structures also allow the encoding of syntactic requirements on arguments and adjuncts.",
        "In relation with the problem raised by non-canonical input, an important property of DSs is that they contain no indication of either surface syntactic order of the complements and adjuncts or of the relative scope of quantifiers occurring in either complements or modifiers.",
        "Instead, thematic dependencies between subformulae are kept track of by the X schema where no reference is made to derivational history.",
        "The generator is thus free to realize both scope and surface syntactic structure in any way which is consistent with the deep structure specification and the particular grammar used.",
        "The reader might object to this elimination of scope distinctions.",
        "However, within UOG any scope distinctions which are produced by the individual grammars or as a result of some semantics construction process are in fact artefactual.",
        "Furthermore, it might reasonably be argued that it should be possible to generate all possible scopes.",
        "This is typically done with quantifier shifting rules.",
        "Our solution is simply not to specify scope.",
        "An immediate consequence of using DSs is that non-canonical input is no longer a problem.",
        "The reason for this simply is that the generation algorithm no longer relies on the assumption that the input semantic representation is canonical i.e. derivable under the grammar used.",
        "Rather, the assumption is that the input will be some well-formed DS that will contain all the information contained in the corresponding semantics but none of the information embodied in the linear ordering of the formula about the derivational history of the corresponding string.",
        "The use of DSs has two other consequences.",
        "First, by allowing for the association of syntactic with semantic information, D-structures offer a way to mediate the results of linguistic decisions made by an eventual planner to the generator.",
        "This may be useful.",
        "For instance, NP planning could be accounted for.",
        "In the present context, a planner is any system which given some information about what to say will return some decision about how to say it.",
        "For instance, if we want to express the fact that Jon runs, the planner will have to decide on how to refer to Jon, i.e. it could decide to describe him using a complex NP as in 'the man with the red scarf who stands next to Irene', or a pronoun e.g. 'he' or simply his name i.e. 'Jon'.",
        "The point is that the syntactic decision made by the planner must be communicated to the generator.",
        "Since DSs contain syntactic information, they are a good candidate for the necessary interface between planner and generator.",
        "A second advantage of DSs is that because they are language independent, they allow for language independent generation.",
        "That is, for any acceptable input deep structure, the algorithm presented below will generate e.g., a French sentence if coupled with a UCG grammar for French and an English sentence if coupled with a uCG grammar for English.",
        "This is only possible because the input deep structure the generation algorithm relies on is both sufficiently abstract to be language-independent and general enough that it can be mapped onto language dependent surface syntactic structures.",
        "Language independent generation is discussed in more detail in section 4."
      ]
    },
    {
      "heading": "3 The bask algorithm",
      "text": []
    },
    {
      "heading": "3.1 A brief introduction to UCG",
      "text": [
        "In UCG the basic linguistic unit is a sign which includes phonological, syntactic, semantic and ordering information.",
        "In the sequel, a sign will be represented either by a complex feature structure or as Pho : Synt : Hem: Order.",
        "The phonological field of a sign contains its orthographic string.",
        "The syntactic field is categorial i.e. it can be either basic (e.g s,np,n etc) or complex in which case, it will be of the form C/Sign where C is a syntactic field and Sign is a sign.",
        "Moreover, any basic category can be assigned some morphosyntactic information.",
        "For instance s[fin] denotes the category sentence with morphology feature value: finite.",
        "The semantic field contains the semantics of the expression whereby the semantic representation language is a linear version of Discourse Representation Theory in which each condition is preceded by a sorted variable called the index.",
        "As in most unification based grammars, the semantics of any expression results from the unification of the semantics of its subparts.",
        "Finally, the Order field is a binary feature with value either pre or post which constrains the applicability of grammar rules.",
        "Grammar rules in UCG are of two types: binary and 128 2 unary.",
        "Binary rules include forward and backward functional application.",
        "These are stated below.",
        "Pho:(Synt/Sign):Sem:Order, Sign --> Pho:Synt:Sem:Order if the order value of Sign is pre Sign, Pho:(Synt/Sign):Sem:Order --> Pho:Synt:Sem:Order if the order value of Sign is post Unary rules are of the form a 13 where a and /3 are signs.",
        "Unary rules are used for the treatment of unbounded dependencies, syntactic forms of type-raising and subcategorisation for optional modifiers."
      ]
    },
    {
      "heading": "3.2 A sketch of the algorithm",
      "text": [
        "Following work by [1], [5] and [3], the algorithm we present here follows a mixed top-clown and bottom-up strategy.",
        "The generation process starts with a deep structure DS and a sign Sign whose syntax embodies the goal category (e.g. sentence(finite)).",
        "get_deepstr_info extracts from the deep structure some semantic (Sem) and syntactic (Synt;) information on the next sign to be generated.",
        "create_sign creates a new sign Sign() on the basis of Sem and Synt.",
        "Lexical lookup on Sign° returns a sign with instantiated syntax and phonology.",
        "The call to reduce ensures that this lexical sign is reduced to the goal sign Sign in the process instantiating the generated string.",
        "generate(DS, Sign) :- get_deepstr_info(DS,[Synt,Sem],Rest0fDS), create_sign(Synt,Sem,Sign0), lexical(Sign0), reduce(SignO,Sign,Rest0fDS).",
        "There are two main ways of reducing a sign Signo to a goalsign Sign.",
        "The base case occurs when SignO unifies with Sign and the deep-structure is empty i.e. all the input semantic material has been made use of in generating the result string.",
        "The recursive case occurs when Signo is a syntactic functor.",
        "If the syntax of Sign° is of the form Result/Active, we apply Result/Active to Active thus getting a new sign Result.",
        "retrieve nondeterministically retrieves from the current deep structure DS, a substructure SubDS and returns the remaining deep-structure NewDS.",
        "The argument Active is then generated on the basis of the extracted substructure SubDS with a new goal sign whose syntax is that predicted by the syntactic functor Sign°.",
        "The resulting sign Result is recursively reduced to the original goal sign Sign.",
        "reduce(Sign,Sign, [[] , M).",
        "reduce (Sign°, Sign, DS) :- active(SignO,Active), apply(SignO,Active,Result), retrieve(DS,SubDS,NewDS), generate(SubDS, Active), reduce(Result,Sign,NewDS).",
        "The algorithm presented above makes many simplifying assumptions which are incompatible with a wide coverage uco grammar.",
        "To produce a complete generator with respect to UCG we need to extend the basic algorithm to account for type-raised NPs, identity semantic functors, lexical modifiers and unary rules.",
        "For more details on the general content of these extensions see H. For their implementation cf. the listing of the generation algorithm given in the appendix."
      ]
    },
    {
      "heading": "4 Bilingual Generation",
      "text": [
        "There are two main differences between (la) and (lb).",
        "First, a NP (the mouse) translates to a PP (a hz s our s).",
        "Second, a structural transfer occurs i.e. the object NP in (la) becomes a subject in (lb) and vice-versa.",
        "For the generator described above, this poses no particular problem.",
        "Because DSs encode thematic rather than grammatical dependencies, structural transfer is no issue.",
        "Further, since at DS all arguments are represented as NPs 1, the generation of (la) is straightforward.",
        "Generating (lb) is a little more intricate but results naturally from the interaction of the generator with the grammar 2.",
        "Note that if the PP were represented as such in the DS, then generation would fail for the English sentence.",
        "This suggests that the deep structures we generate from offer the right level of abstraction for generation to be possible in several languages.",
        "The case of structural transfer illustrated in (1) is a good example of the problems that occur with generators that are unable to deal with non-canonical input.",
        "To illustrate this consider the following situation.",
        "Suppose that given two grammars, one for English(GE) and one for French (Gp), (la) and (1b) each have one unique derivation with resulting semantics as in (2).",
        "Furthermore, suppose (3a) is non-canonical with respect to GI, (i.e. (3a) is not derivable under Gp) and (3b) is non-canonical wrt GE.",
        "For any generator G that cannot deal with non-canonical input, this means that G cannot be used in a system where parsing occurs on one language 'This is in accordance with the view that prepositions oc-curing within argumental PPe have no semantic content.",
        "'For more details on the generation of subcategorised PPs within UCG see [1).",
        "and generation on another.",
        "More to the point, if G is coupled with the grammar GE, then it will fail to generate when given (2b) as input - and similarly when coupled with Gp and given input (2a).",
        "To understand why deep structures allow for grammar independent generation, let us first examine why traditional top-down/bottomup generators such as the one described in [1] fail on non-canonical input.",
        "3 Consider the case where we try to generate under GB the English sentence in (la) from the semantic (2b) and - as already mentioned - (2b) is non-canonical wrt GE.",
        "The main steps of the generation process will be as follows.",
        "Suppose the goal sign is Sign0 with category s[ fin].",
        "First, a sign Signl is created whose semantics is as in (2b).",
        "Lexical access on Signl returns the sign for 'the'.",
        "On the basis of the syntactic and semantic predictions made by Signl, the sign Sign2 for `cat' is then generated.",
        "Reduction of Signl with Sign2 yields a new sign Sign3 with phonology 'the cat' and syntax C/(C/np) 5.",
        "In turn, Sign3 makes some predictions which lead to the generation of a new sign Sign4 with syntax C/(C/np) and phonology 'the mouse'.",
        "Finally, on the basis of Sign4, the sign Signs for 'miss' is generated.",
        "At this point in generating, the two signs in (3) must combine to reduce to a sign with category C/np.",
        "But under the UCG rules of combination (see 3.1), these two signs cannot combine because of the unification clash occuring between the semantics of the accusative NP in the verbal sign (c.NP2) and that of the NP sign within 3 Note that in this case, reduction to normal form is no longer a possible solution even if we were able to define a normal form for our semantic representation language.",
        "For suppose that (2a) is the normal form, then (lb) is not derivable and if (2b) is, then (la) is not derivable.",
        "the sign for 'the mouse' (m.mouse(m)).",
        "Hence generation fails.",
        "Consider now how the problem is dealt with when generating from deep structures.",
        "Rather than being as indicated in (2b), the input to the generator is 6",
        "Roughly, generation will proceed as follows.",
        "Suppose the goal sign Sign° has category s[fin].",
        "First, the semantics corresponding to the head of the clause (i.e. miss (in, c)) is extracted from (3) and a sign Signl is created with semantics miss(m,c).",
        "Lexical access on Signl returns the sign given in (3) above.",
        "Signl must then be reduced to Sign° with category s[f in].",
        "At this stage, the remaining DS is [speci f ier (the, head(mouse(m), [], [])) , speci f ier(the, head(cat(c),[],[]))1 To generate the first argument of Signl, we then have the choice between generating on the basis of specifier(the, head(mouse(m),[],[])) or of specifier(the, head(cat(c), [], [])) 7 As demonstrated above, if we generate the sign for 'the mouse' first, reduction cannot apply and generation will fail.",
        "But here, failure is only temporary and on backtracking, the sign for 'the cat' will eventually be generated; it will then reduce with Signl to generate Sign2 with phonology `misses the cat'.",
        "At this point, the remaining DS will be [speci f ier(the, head(mouse(m), [], []))].",
        "This will trigger the generation of Sign3 with phonology 'the mouse' which will then combine with Sign2 to reduce to Sign° with resulting phonology 'the mouse misses the cat'.",
        "To generate the French sentence `le chat manque ?1 la souris', the same generation process applies but this time in connection with Gp and in a reverse order i.e. the sign for `la souris' (the mouse) is generated before the sign corresponding to the NP `le chat' (the cat).",
        "Further, because in the French lexicon `manque' (miss) subcategorises for a dative NP, the preposition a is generated and combined with the sign for 'la souris' before reduction of the thus obtained PP with the verb.",
        "Because DSs make no assumption about the linear ordering of the constituents to be generated, the problem raised by non-canonicity simply does not arise."
      ]
    },
    {
      "heading": "5 Comparisons with Related Research",
      "text": [
        "To compare our algorithm with previous work, we first show how it can be amended to phrase structure grammars.",
        "Consider the following extension to reduce.",
        "This clause is very similar in structure to the second clause of reduce, the main difference being that the new clause makes fewer assumptions about the feature structures being manipulated.",
        "rule enumerates rules of the grammar, its first argument representing the mother constituent, its second the head daughter and its third a list of non-head daughters which are to be recursively generated by the predicate generate_sisters.",
        "The behaviour of this clause is just like that of the clause for reduce which implements the ucn rules of function application.",
        "On the basis of the generated lexical sign Sign() an application of the rule is hypothesised and we then attempt to prove that rule application will lead to a new sign Mom which reduces to the original goal Sign.",
        "Having generalised our basic algorithm to phrase structure crarrimars, we can now compare it to previous work by [5] and [3] Van Noord's Bottom-Up Generator (BUG) is very similar in structure to our basic algorithm.",
        "Closer examination of the two programs however reveals two differences.",
        "The first is that daugthers in a rule are separated into those that precede the semantic head and those that follow it.",
        "The eecond more meaningful difference involves the use of a 'link' predicate implementing the transitive closure of the semantic head relation over the grammar rules.",
        "The link predicate is similar in purpose to reachibility tables in parsing algorithms and contributes to reducing the search space by producing some syntactic information on the sign to be generated.",
        "However, such a predicate is of little use when generating with a categorial grammar in particular and with any strongly lexicalist linguistic theory in general since in these, the grammar rules are extremely schematised.",
        "Their information content is so impoverished that the computation of and resort to a link predicate cannot be expected to reduce the search space in any meaningful way.",
        "In the algorithm presented above however, this shortcoming is redressed by exploiting the syntactic information contained in the deep-structure we start from.",
        "In [5], Shieber et al.",
        "present a \"semantic-head-driven\" generation algorithm that is closely related to van No-ord's.",
        "In contrast to Van Noord's algorithm however, this algorithm also operate on grammars violating the semantic head constraint (SHC) according to which any semantic representation is a further instantiation of the semantic representation of one of its constituents called the semantic head.",
        "This is achieved as follows.",
        "First, a distinction is made between chain-rules and non-chain-rules whereby non-chain-rules are used to introduce semantic material syncategorematically.",
        "The distinction",
        "1.",
        "Chain-rule (Sem, lhs --> Head(Sem), Sisters) 2.",
        "Non-Chain-rule (Sem, lhs(Sem) --> Daughters) (1) indicates that given a semantic Sem, a chain rule",
        "will be such that Sem unifies with the head daughter's semantics whilst (2) shows that non-chain-rules are such that the input semantics must unify with the semantics of the lhs of the rule.",
        "The intuition is that non-chain-rules will help find the lowest node in the derivation tree whose semantics unify with the input semantics.",
        "Furthermore, the top-down base case for non-chain-rules corresponds to the case in which the lhs of the rule has no non-terminal daughters i.e. to lexical look up.",
        "Consider now the top call to generate.",
        "generate (Root) :- non_chain_rule (Root ,Pivot ,Rhs) , generate_rhs(Rhs), connect(Pivot,Root).",
        "Two cases obtain with regard to the application of the non chain-rule predicate.",
        "Either the base case occurs and lexical lookup takes place exactly as in our algorithm or a non-chain-rule is triggered top-down before the constituents in the rhs are generated by a recursive call to generate.",
        "Hence the solution to the introduction of syncategorematic material is essentially a reintroduction of the top-down generation strategy.",
        "The result is that there is no guarantee that the algorithm will terminate.",
        "This point seems to have been overlooked in [5].",
        "Therefore, the extension may be of less utility than it appears to be at first sight although it may well be the case for linguistically motivated grammars that termination problems never arise."
      ]
    },
    {
      "heading": "6 Further Research",
      "text": [
        "The general backtracking regime characterising the algorithm presented in this paper means that failure at a first attempt to generate might induce the recomputation of partial results.",
        "Perhaps the use of a chart could contribute to enhance generation efficiency.",
        "In relation to [4] where chart edges contain no ordering information, it would be interesting to investigate whether during the generation process some ordering information can be recovered.",
        "That is, whether the chart could be constructed in such a way that the relative positioning of edges mirrors the knowledge embodied in the grammar about linear precedence within and between constituents, In this way, only the relevant part of the chart would need to be looked up before attempting to build a new edge.",
        "The algorithm described above is implemented in CPro-log on a Sun4 and constitutes part of the generation corn",
        "ponent in the ACORD prototype.",
        "The generator can be coupled with either a UCG grammar for French or one for English thus generating either French or English sentences."
      ]
    }
  ]
}
