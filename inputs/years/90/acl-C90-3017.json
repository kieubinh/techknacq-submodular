{
  "info": {
    "authors": [
      "Marc Dymetman",
      "Pierre Isabelle",
      "Francois Perrault"
    ],
    "book": "International Conference on Computational Linguistics",
    "id": "acl-C90-3017",
    "title": "A Symmetrical Approach to Parsing and Generation",
    "url": "https://aclweb.org/anthology/C90-3017",
    "year": 1990
  },
  "references": [
    "acl-C88-1053",
    "acl-C88-2128",
    "acl-J81-4003",
    "acl-P89-1002"
  ],
  "sections": [
    {
      "text": [
        "CCRIT, Communications Canada.",
        "1575 Bid Chomedey.",
        "Laval (Quebec) H7V 2X2 CANADA Abstract.",
        "Lexical Grammars are a class of unification grammars which share a fixed rule component, for which there exists a simple left-recursion elimination transformation.",
        "The parsing and generation programs are seen as two dual non-left-recursive versions of the original grammar, and are implemented through a standard top-down Prolog interpreter.",
        "Formal criteria for termination are given as conditions on lexical entries: during parsing as well as during generation the processing of a lexical entry consumes some amount of a guide; the guide used for parsing is a list of words remaining to be analyzed, while the guide for generation is a list of the semantics of constituents waiting to be generated."
      ]
    },
    {
      "heading": "1 . Introduction",
      "text": []
    },
    {
      "heading": "Symmetry between parsing and",
      "text": [
        "generation.",
        "There is a natural appeal to the attempt to characterize parsing and generinion in a symmetrical way.",
        "This is because the statement of the problem of reversibility is naturally symmetrical: parsing is concerned with recovering semantic content from phonological content, generation phonological content from semantic content.",
        "It has been noted by several researchers ([S881, li\\r,89], [SNMP89]) that certain problems (left-recursion) and techniques (left-corner processing.",
        "linking, Earley deduction) encountered in the parsing domain hove correlates in the generation domain.",
        "It is then natural to try and see parsing and generation as instances of a single paradigm; [S88] and D188, D1901 are attempts in this direction, but are hindered by the fact that there is no obvious correlate in generation of the string indexing techniques so prominent in parsing (string indices in chart parsing, differential lists in DCG parsing).",
        "Guides.",
        "What we propose here is to take a step back and abstract the notion of string index to that of a gui,le.",
        "This general notion will apply to both parsing and ,gcneratiOil, but it will he instantiated differently in the two (nodes.",
        "The purpose of a guide is to orient the proof procedure, specific to either parsing or generation, in such a way that: (i) the guide is initialized as a direct function of the input (the string in parsing, the semantics in generation), (ii) the current state of the guide strongly constrains the next access to the lexicon, (iii) after lexical access, the size of the guide strictly decreases (guide-consumption condition, see section 3).",
        "Once a guide is specified, the generation problem (respectively the parsing problems) then reduces to a problem formally similar to the problem of parsing ith a DCG [PW80] containing no empty productions' (ie rules whose right-hand side is the empty string H).",
        "Several parsing techniques can be applied to this problem; we will be concerned here with a top-down parsing approach directly implementable through a standard Prolog interpreter.",
        "This approach relies on a left-netnrsion-elimination transformation for a certain class of definite clause programs (see section 3).",
        "The ability to specify guides, for parsing or for generation, depends on certain compositionality hypotheses which the underlying grammar has to satisfy.",
        "Thin, half of the statement may seem tautological, but it is not: see the attempt at a reinterpretation of left extraposition in terms of guides in section 5.",
        "Also called null rides 111181.",
        "Hypotheses on compositionality.",
        "The parsing and generation problems can be rendered tractable only if certain hypotheses are made concerning the composition of linguistic structures.",
        "Thus generation can be arduous if the semantics associated with the composition of two structures is the unrestricted lambda-applications of the first structure's semantics on the second structure's semantics: this is because knowledge of the mother's semantics does not constrain in a usable way the semantics of the daughters.4 On the contrary, parsing is greatly simplified if the string associated with the composition of two structures is the concatenation of the strings associated with each structure: one can then use string indexing to orient and control the progression of the parsing process, as is done in DCG under the guise of \"differential lists\".",
        "Lexical Grammar.",
        "The formalism of Lexical GraM171til (1.",
        "(;) makes explicit certain compositionality hypotheses which ensure the existence of guides for parsing as well as for generation.",
        "A Lexical Grammar has two parts: a (variable) lexicon and a (fixedI rule component.",
        "The rule component, a definite clause specification, spells out basic linguistic compositionality rules: (i) how a well-formed linguistic structure ,1 is composed from well-formed structures B and C: (ii) what are the respective statuses of B and C (left constituent vs right constituent, syntactic head vs syntactic dependent, semantic head vs semantic dependent); and (iii) how the string (resp.",
        "semantics, subcategorization list, ...) associated with A is related to the strings (resp.",
        "semantics, subcategorization lists, ...) associated with B and C (see section 2).",
        "The ability to define a guide for parsing is a (simple) consequence of the fact that the string associated with A is the concatenation of the strings associated with B and CD.",
        "The ability to define a guide for generation is a (less simple) consequence of LG's hypotheses on subcategorization (see sections 2 and 4).",
        "- combine_sirings :B is to the left of C in the surface order, or conversely to the right of C. This information is attached to each constituent through the string_order feature.",
        " – combine_syns :B is the syntactic-head and C the syntactic-dependent, or conversely (syn_order feature).",
        "- combine sans :B is the semantic-head and C the semantic-dependent, or conversely (semorder feature).",
        "Because B and C play symmetrical roles°, these seemingly eight combinations actually reduce to four different cases.",
        "To avoid duplicating cases, in the definition of the phrase predicate, the symmetry has been \"broken\" by arbitrarily imposing that B be the left constituent.",
        "?",
        "Parsing and Generation with Lexical Grammar.",
        "Fig.",
        "I gives an overview of our approach to parsing and generation.",
        "Let us briefly review the main points: – (P0) is a definite clause specification of the original LG rules.",
        "It contains a purely declarative definition of linguistic compositionality, but is unsuitable for direct implementation (see section 2).",
        "(P1p) (resp (Plg)) is a guided conservative extension of (P0) for parsing (resp.",
        "for generation); that is, (Plp) (resp (Pig)) is a specification which describes the same linguistic structures as (PO), but adds a certain redundancy (guiding) to help constrain the parsing (resp.",
        "generation) process.",
        "However, these definite clause programs are not yet adequate for direct top-down implementation, since they are left-recursive (see section 3).",
        " – (Pip) and (Pig) can be seen as symmetrical instantiations of a common program schema (P1); (P1) can be transformed into (P2), an equivalent non-left-recursive program schema (see section 3).",
        " – (P2p) (resp (P2g)) is the non-left-recursive version of (Pip) (resp.",
        "(Pig)).",
        "Under the guide-consumption condition, it is guaranteed to terminate in top-down interpretation, and to enumerate all solutions to the parsing (resp.",
        "generation) problem (see section 4).",
        "For lack of space, theorems are stated here without proofs; these, and more details, can be found in [D9Ohl."
      ]
    },
    {
      "heading": "2. Lexical Grammar",
      "text": [
        "Rule component The fixed rule component of LG (see Fig. 3) describes in a generic way the combination of constituents.",
        "A constituent A is either lexically specified (second clause in the phrase definition), or is a combination of two constituents B and C (first clause in the phrase definition).",
        "B and C play complementary roles along the following three dimensions:",
        "Our notion of semantic-head is a variant of that given in [SNMP89], where a daughter is said to be a semantic-head if it shares the semantics of its mother.",
        "The combine sems predicate is responsible for assigning semItead status (versus senidep status) to a phrase, and for imposing the following constraints:",
        "i. the semantic-head shares its semantics with its mother, ii.",
        "the semantic-head always subcategorizes its sister ((b) in Fig. 3), iii.",
        "the mother's subcategorization list is the concatenation of the semantic-dependent list and of the semantic-head list minus the element just incorporated ((c) in Fig. 3).8",
        "The subcategorization list attached to a constituent X corresponds to constituents higher in the derivation tree which are expected to fill semantic roles inside X. Subcategorization lists are percolated from the lexical entries up the derivation tree according to iii.",
        "Semantic-heads need not correspond to syntactic-heads.",
        "In the case of a modifier like often, in paris, or hidden by john, the modifier phrase, which is the syntactic-dependent, is the semantic-head and semantically subcategorizes its sister: thus, in the example of Fig. 2, the modifier phrase D semantically subcategorizes its sister E; combinesems has then the effect of unifying the semantics of E (visit(mary,nd)) to the substructure X in the semantics (often(X)) attached to D (see the lexical entry for often in Fig. 4).",
        "This is reminiscent of work done in categorial grammar (see for instance [ZKCSTI), where a modifier is seen as having a category of the form 21/A, and acts as a funetor on the group it modifies.",
        "The combinesyns predicate is responsible for assigning semi head status (versus syn_dep status) to a phrase, and for ensuring the following constraints:",
        "i.",
        "The category cat of the syntactic-head is transmitted to the mother.",
        "The category of a phrase is therefore always a projection of the category (m,r.p.a,...) of some lexical item.",
        "ii.",
        "When the syntactic-dependent is the same as the semantic-dependent, then the syntactic-dependent is semantically saturated (its subcat is empty).",
        "This is the case when the syntactic-dependent plays the syntactic role of a complement to its syntactic-head.",
        "iii.",
        "When the syntactic-dependent is the same as the semantic-head, then the syntactic-dependent's wheat contains only one element19.",
        "This is the case when the syntactic-dependent plays the syntactic role of a",
        "modifier to its syntactic-head.",
        "The lexicon in LG Because LGs have a fixed rule component, all specific linguistic knowledge Here, as in the sequel, we have made use of a \"dot notation\" for functional access to the different features of a linguistic structure A; for instance, A.cat represents the content of the rat feature in A.",
        "10 The \"external argument\" of the modifier, identified with the semantic-dependent by the semantic combination rule.",
        "is contained in the lexicon.",
        "Fig.",
        "4 lists a few possible lexical entries.",
        "Consider a typical entry, for instance the entry for in.",
        "This entry specifies a possible leaf 7' of a derivation tree.",
        "T has the following properties: i. T has string [in], and is of category p (preposition).",
        "ii.",
        "T semantically subcategorizes two phrases: 0 (the object of the preposition), of category n. and S (the 'implicit subject\" of the preposition), of category r. By the general constraints associated with combinesems, this means that S and 0 will both have semantic-dependent status.",
        "iii.",
        "In the surface order, S is to the left of its semantic-head, while 0 is to the right of its semantic-head.",
        "iv.",
        "The semantics in(S.sem,O.sem) of T is obtained by unification from the semantics of its subcategorized constituents S and 0. v. S is constrained to having syntactic-head status, and 0 to having syntactic-dependent status.",
        "Because of the constraints imposed by combine syns, this means that 0 will be a syntactic complement of the preposition, and that the prepositional phrase will be a modifier of its \"subject\" S.",
        "Idioms.",
        "The lexical apparatus allows for a direct account of certain types of idiomatic constructions.",
        "For instance, if the lexical entries of Fig. 5 are added to the",
        "lexicon, then the expression \"X kicked the bucket\" will be assigned the semantics die(X).",
        "Entry (a) expresses the fact that (in its idiomatic use), the verb form kicked subcategorizes for a subject S and an object 0 whose semantics is the_bucket, and is itself assigned the semantics die(S.sem).",
        "3.",
        "Guides and left-recursion elimination Guides.",
        "Consider a finite string 1t, and let /, be a proper suffix of //, 13 be a proper suffix of /,, and so on.",
        "This operation can only be iterated a finite number of times.",
        "The notion of guide-structure generalizes this situation.",
        "Consider now the following elementary definite clause program (P0)12:",
        "We assume here that :-/J is an abbreviation which stands for a disjunction of conjunctions (7, of goals of the form a(A), t(A), or (Tr.--S1 (unification goals) where the 7'.",
        "S are variables or partially instantiated terms.",
        "Among the variables appearing inside V. only the \"interface\" variables A, 13 are explicitly mentioned.",
        "We further assume that the defining clauses (not shown) for the t predicate have right-hand sides which are conjunctions of term unification goals (T=5).",
        "We call t the lexicon predicate, and a the generic nonterminal predicate.",
        "Consider now the following program (P1), called a guided extension of (PO):",
        "(PI) is obtained from (P0) in the following way: (i) guide variables (1,1„, Linter, 1,0„,) have been threaded throughout (PO), and (ii) the 1-predicate t has been replaced by a 3-predicate t' which is assumed to be a refinement of 1, ie, for all A, 1,,„, L„„,,r(A,L,„,L0„,) implies t(A).",
        "Program (PI) is a more constrained version of program (P0): t' can be seen as a version of t which is able to \"consult\" Lin, thus constraining lexical access at each step.",
        "We will be interested in programs (P1) which respect two conditions: (i) the guide-consumption",
        "(PO) there exist Lin,L„„, such that a'(A,Li„,Lout) is provable in (PI).",
        "The part of the previous definition is automatically satisfied by any program (P1) defined as above.",
        "The part, on the other hand, is not, but depends on further conditions on the refinement t' of t. Saying that (P1) is a conservative extension of (PO) is tantamount to saying that (P1) adds some redundancy to (PO), which can be computationally exploited to constrain processing.",
        "Left-recursion elimination\".",
        "Program (P1) is left-recursive: in a top-down interpretation, a call to a' will result in another immediate call to a', and therefore will loop.",
        "On the other hand the following program .",
        "(P2) is not left-recursive, and Theorem 3.4 shows that it is equivalent to (P1): A 0,L aux(A 0,A „,1.0,L „).",
        "(P2) aux(A„,A„,L„,L„).",
        "Here, '1)\" and t' are the same as in (P1), and a new predicate au.v, called the auxiliary nonterminal predicate has been introduced.\" THEOREM 3.4.",
        "Programs (P1)) and (P2) are equivalent in predicate The fact that (P2) is not left-recursive does not alone guarantee termination of top-down interpretation.",
        "However, if (P1) respects the guide-consumption condition and a further condition, the no-chain condition, then (P2) does indeed terminate.IC",
        "associated with it (in other words, all its solutions will be enumerated through backtracking, and the program will terminate)."
      ]
    },
    {
      "heading": "4. Parsing and generation in Lexical Grammar",
      "text": [
        "The rules of Fig. 3 are completely symmetrical in their specification of syntactic compositionality,",
        "• .",
        "- The general problem of left-recursion elimination in 1XXIs (including chain rules and null rules [1-1781) is studied in [D90a1; the existence of a Generalized Greibaeh Normal Form is proven, and certain decidability results are given.",
        "Orienting the rules.",
        "The phrase predicate can be rewritten in either one of the two forms: phrase p, where emphasis is put on the relative linear order of constituents (left vs. right), and phrase_g, where emphasis is put on the relative semantic status (semantic head vs. semantic dependent) of constituents.",
        "where P(B ,A) stands for:",
        "where G(B,A) stands for:",
        "LEMMA 4.1. phrase_p and phrase_g are both equivalent to phrase.",
        "The phrase_p (resp.",
        "phrase_g) programs are now each in the format of the (PO) program of section 3, where a has been renamed: phrasep (resp.",
        "phrase_g), and 9): P(resp.",
        "G).",
        "These programs can be extended into guided programs (Pip) and (Pig), as was done in section 3: phrase_p'(A,Lin,Low):- (Pip) phrase_p1B,Lin,Linted, VB,A,Linter,Lout)• phrase_plA,Li„,Lout) term_plA,Lin,Lout)• where:",
        "In these programs, term_p' and term g' are the refinements of term (corresponding to t' in program (P1) of section 3) used for parsing and generation respectively.",
        "Their definitions, which contain the substance of the guiding technique, are given below.",
        "N.B.",
        "Programs (131p) and (Pig) respect the no-chain condition: phrase_p' is called inside and phrase_g' is called inside GI A conservative guide for parsing.",
        "Let us define terrn_p' in the following way: termp'(A,L)„,L,)„,) term(A), (Gp) append(A.string,Loia,Lin).",
        "It is obvious that term_p' is a refinement of term.",
        "Using the definition of combine_ strings in section 2, one can easily show that program (Plp) is a conservative extension of program (POp).",
        "The guide-structure Gp is the set of character strings, ordered in the following way: st: _st2 iff sr/ is a suffix of st2.",
        "If the lexicon is such that for any entry term(A), A.string is instantiated and is different from the empty list, then it can easily be shown that (Pip) respects the guide-consumption condition.",
        "The guide just introduced for parsing is simply a restatement in terms of guides of the usual differential lists used in the Prolog translation of DCG rules.",
        "A conservative guide for generation.",
        "Let us define term_;' in the following way (using the auxiliary predicate extractsems):",
        "The guide structure L used for generation is a list of semantic structures, initially instantiated to [S.seml, where S is the linguistic structure to be generated, of which the semantics S.sem is known.",
        "When a call term _g 1 A lama) to the lexicon is made, with Lin instantiated to a list of semantic structures, the lexical structure A selected is constrained to be such that its semantics A.sem is the first item on the Lin list.",
        "The A.sent element is \"popped\" from the guide, and is replaced by the list of the semantics of the phrases subcategorized by A.",
        "(Fig.",
        "7 illustrates the evolution of the guide in generation.)",
        "It is obvious that term_g' is then.",
        "a refinement of term, and furthermore, using the definition of combine sems in section 2, one can prove: LEMMA 4.2.",
        "Program (Plg) is a conservative extension of program (130g).",
        "The guide-consumption condition in generation.",
        "Let us define recursively the size of an LG semantic representation as the function from terms to natural numbers such that:",
        "Assume now that, for any entry term(A), the lexicon respects the following condition: If A.sem is fully instantiated, then the A.subcat list is instantiated sufficiently sp that, for any element X of this list, (i) X.sem is instantiated, and (ii) X.sem has a strictly smaller size than A.sem.",
        "Under these conditions, one can define a guide-structure Gg (see [D9Ob]), and one can prove: LEMMA 4.3.",
        "Program (Pig) satisfies the guide-consumption condition.",
        "The resulting programs for parsing and generation.",
        "After the left-recursion elimination transformation of section 3 is performed, the parsing and generation programs take the following forms:",
        "That is, after expliciting termp',tertn_g', IL' and G' (see (Gp), (Gg), (Dp), (Dg), above), these programs take the forms (P2p) and (P2g) in Fig. 8; for",
        "convenience interface predicates parse and generate are provided.",
        "Under the conditions on the lexicon given above -- which are satisfied by the lexicon of Fig. 4 --, programs (Pip) and (PI g) both respect the guide-consumption condition; they also respect the no-chain condition (see remark following the description of (Pip) and (Pig)); Theorem 3.6 applies, and we have the following result: If parse(A.string,A.sem) (resp.",
        "generate(A.string,A.sem)) is called with A.string instantiated (resp.",
        "A.sem instantiated), then all solutions will he enumerated on backtracking, and the query will terminate."
      ]
    },
    {
      "heading": "5. Further research",
      "text": [
        "Handling extraposition with guides.",
        "The specific guides defined above for parsing and generation are not the only possible ones.",
        "If for sonic reason certain conditions on the lexicon are to he relaxed, then more sophisticated guides must and can be defined.",
        "Thus, the guide introduced above for parsing essentially assumes that no lexical entry has an empty string realization.",
        "This condition may be too strict for certain purposes, such as handling traces.",
        "Interestingly, however, the guide consumption condition can still be imposed in these cases, if one takes care to suitably enrich the notion of guide.",
        "Let us assume, for instance, that there be a general syntactic constraint to the effect that two empty lexical",
        "items cannot immediately follow each other19.",
        "Let us then posit as a guide structure, instead of a list L of words, a couple <L,B>, where B is a variable restricted to taking values 0 or I.",
        "Suppose further that these couples are ordered \"lexicographically\", ie that:",
        "It is easy to see that the set of guides is then a partially ordered set which respects the descending chain condition.",
        "Let us finally assume that term_p' is redefined in the following manner:",
        "It can be shown that this definition of guide parse is sufficient to ensure the guide-consumption condition, and therefore guarantees the termination of the parsing process.",
        "Variations on this idea are possible: for instance, one could define the guide as a couple <L,X> where X is a list of left-extraposed constituents (see [P81]).",
        "Any time a constituent is added to the extraposition list X, this operation is required to consume some words from L, and any time a trace is encountered, it is required to \"cancel\" an element of X.",
        "Because the lexicographical order defined on such guides in the following way:",
        "respects the descending chain condition, the parsing process will be guaranteed to terminate."
      ]
    },
    {
      "heading": "6. Conclusion",
      "text": [
        "This paper shows that parsing and generation can be seen as symmetrical, or dual, processes exploiting one and the same grammar and lexicon, and using a basic left-recursion elimination transformation.",
        "Emphasis is on the simplicity and symmetry of linguistic description, which is mostly contained in the lexicon; compositionality appears under three aspects: string compositionality, semantic compositionality, and syntactic compositionality.",
        "The analysis and generation processes each favor one aspect: string compositionality in analysis, semantic compositionality in generation.",
        "These give rise to two guides (analysis guide and generation guide), which are generalizations of string indexes.",
        "The left-recursion elimination transformation described in the paper is stated using the general notion of guide, and is provably guaranteed, under certain explicit conditions, to lead to termination of the parsing and generation processes.",
        "We claim that the approach provides a simple, yet powerful solution to the problem of grammatical bidirectionality, and are currently testing it as a possible replacement for a more rule-oriented",
        "person who john persuaded e1 PRO to drink.",
        "However, the assumption gives the flavor of a possible set of strategies for handling empty categories.",
        "grammatical component in the context of the CRITTER translation system [IDM88]."
      ]
    },
    {
      "heading": "Acknowledgments",
      "text": [
        "Thanks to Michel Boyer, Jean-Luc Cochard and Elliott Macklovitch for discussion and comments."
      ]
    }
  ]
}
