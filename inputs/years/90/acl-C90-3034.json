{
  "info": {
    "authors": [
      "Ian Lewin"
    ],
    "book": "International Conference on Computational Linguistics",
    "id": "acl-C90-3034",
    "title": "A Quantifier Scoping Algorithm Without a Free Variable Constraint",
    "url": "https://aclweb.org/anthology/C90-3034",
    "year": 1990
  },
  "references": [
    "acl-J87-1005",
    "acl-P89-1019"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "Three recent demands on quantifier scoping algorithms have been that they should be explicitly stated, they should be sound and complete with respect to the input sentence [Hobbs and Shieber 1987] and they should not employ a 'Free Variable Constraint' [Pereira 1989].",
        "The first demand is for good academic practice.",
        "The second is to ask for an algorithm that generates all and only the possible scopings of a sentence.",
        "The third demand is for an algorithm that avoids appealing to the syntax of logical form in order to determine possible scopings.",
        "I present a modified version of [Hobbs and Shieber 1987], which simplifies its operation, and can be considered sound and complete, depending on what interpretations of English sentences are deemed possible.",
        "Finally, any doubts concerning the use of logical form syntax are avoided."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "[Hobbs and Shieber 1987] presented an algorithm to generate quantifier scopings from a representation of \"predicate-argument relations and the relations of grammatical subordination\" (pg 49).",
        "This representation is successively modified by a recursive algorithm until all the quantifiers present in the input have been dealt with and given scope over some part of the output.",
        "A sample input representation is,",
        "1. lovesk a x woman(x)> <every y man(y)>)",
        "where representations of quantified noun phrases, called complex terms, are left as arguments to 1",
        "the verb.",
        "A sample output is 2.",
        "(a x woman(x) (every y man(y) loves(x,y)))",
        "which uses a four-part quantifier notation, and in which no complex terms are present.",
        "In converting 1) into 2) the recursive procedure may be called upon representations of intermediate format, eg (a x woman(x) loves(x <every y man(y)>)) where a four part quantifier phrase has an embedded complex term.",
        "The algorithm is claimed to be more successful than previous accounts in dealing with complex noun phrases such as \"every representative of a company\" and in coping with certain 'opaque' predicates such as negation.",
        "1 Two properties of an algorithm which Hobbs and Shieber (H&S) approve of are completeness and soundness.",
        "An algorithm with these properties might be used as a benchmark for other algorithms designed for efficiency or the use of heuristics governing the plausibility of the various interpretations.",
        "Unfortunately, demonstrating that H&S's algorithm is sound requires a semantics for the input language and the intermediate forms.",
        "That is not straightforward.",
        "I present a modified algorithm which avoids such intermediate forms.",
        "The input to the algorithm consists of English syntax.",
        "The steps of the algorithm retrace steps through a truth definition for the input language.",
        "Clearly, the algorithm is sound and complete with respect to that.",
        "The algorithm is also sound and complete with respect to English, if you agree that the input 'They acknowledge [Keller 1986] as a similar solution",
        "language fairly represents the actual language of English speakers.",
        "Furthermore, the algorithm is somewhat simpler than H&S's algorithm and makes no appeal to logical syntax.",
        "There is a Prolog implementation of the algorithm."
      ]
    },
    {
      "heading": "2 Quantification in Logic",
      "text": [
        "Semantic theories generally recurse over the syntax of the object language.",
        "For example, following the procedure and notation of [Tennant 1978], 2 we say that g satisfies \"(V x f(x))\" iff for every a, g(x a) satisfies \"f(x)\" Thus, the satisfaction of \"(V x f(x))\" is given in terms of the satisfaction of formulae of the form \"f(x)\".",
        "Truth is defined as satisfaction by the null assignment, N. Given the following axiom g(x a) satisfies \"f(x)\" iff f'(a) then we can produce the following proof \"(V x f(x))\" is true iff N satisfies \"(V x f(x))\" iff for every a, N(x a) satisfies \"f(x)\" if for every a, P(a) Finally, formalising our metalanguage gives \"(V x f(x))\" is true if (V a f'(a)) This idea can be extended to structurally ambiguous sentences of English.",
        "Suppose C is some environment containing a complex term such as \"<a y woman(y)>\", then g satisfies C(<all y woman(y)>) if (All a g(y a) satisfies \"woman(y)\" g(y a) satisfies C(y)) Here, C(y) indicates the environment C(<a y woman(y)>) with y replacing the complex term.",
        "The extension involves two key changes.",
        "First, we employ a four part notation in the metalanguage.",
        "Let us say that (All x f(x) g(x)) abbreviates the English: for every object x such 2We assume g is an assignment from variables to objects dealing with all variables required.",
        "g(z a) is g modified so that z is assigned to a. Greek letters are reserved for metalanguage variables.",
        "that f(x) holds, g(x) also holds.",
        "Secondly, we use a simple conditional rather than a bi-conditional in the rule.",
        "The reason for this is simply that an ambiguous sentence such as 1) is true in either of two conditions.",
        "The theory will predict \"(loves <a x woman(y)> <every y man(y)>)\" is true if (a a woman'(a) (every ,8 man'(fl) lovesla,0)) and also that \"(loves <a x woman(x)> <every y man(y)>)\" is true if (every a man'(a) (a 0 woman'(/9) loves'(a,0)) We ensure 1) is not true in any other conditions by adopting a general exclusion clause that a sentence is not true except in virtue of the clauses of the given theory."
      ]
    },
    {
      "heading": "3 Comparison and Illustration",
      "text": [
        "The primitive operation of our algorithm will be to apply a complex term to a formula containing it, e.g. to apply <q x r(x)> to p(<q x r(x)>).",
        "The result of application is a new four part quantifier expression whose first two parts are q and x, whose third part is the result of recursing on r(x) and whose fourth part is the result of recursing on p(x) (the formula itself with the complex term replaced by the variable it restricts).",
        "For example, by choosing <a x woman(y)> first in 1), the algorithm will construct a new expression derived from \"a\", \"x\" and recursions on \"woman(y)\" and \"loves(x <every y man(y)>)\".",
        "The first recursion will result in woman(y).",
        "The second will build yet another term from \"every\", \"y\" and further recursion on \"man(y)\" and \"loves(x,y)\".",
        "The final result will be (a x woman(x) (every y man(y) loves(x,y))) Clearly, by choosing <every y man(y)> first, the alternative reading of the sentence would have been produced.",
        "Quantifiers chosen earlier receive wider scope.",
        "We work our way through the formula outside-in.",
        "[Woods 1968] explained the advantages of a top-down treatment of quan2 tified noun phrases.",
        "The basic operation of H&S is similar.",
        "An application builds a four part term whose first two parts are q and x, whose third part is r(x) and whose fourth part is the formula with x replacing <q x r(x)>).",
        "The result is then recursed upon in order to deal with other complex terms in the formula.",
        "Now consider complex noun phrases such as \"every representative of a company\" .",
        "These are success cases for H&S. The new algorithm deals with them without alteration.",
        "For example 3",
        "We allow \"every\" to take wide scope as follows.",
        "First, we construct a new term from \"every\",\"x\" and recursions on \"arrived(x)\" and \"and(rep(x), of(x, <a y company(y)>))\".",
        "The recursion on \"arrived(x)\" simply produces \"arrived(x)\".",
        "The recursion on \"and(rep(x), of(x, <a y company(y)>))\" will lead us to construct a new term from \"a\", \"y\" and the results of recursions on \"company(y)\" and \"and(rep(x),of(x,y))\".",
        "These last two recursions are again simple cases, 4 resulting in (a y company(y) and(rep(x), of(x,y))) for \"and(rep(x), of(x, <a y company(y)>))\".",
        "With this result, we can complete our analysis of 3 itself.",
        "for the whole input.",
        "In comparison, H&S use a much more complex mechanism.",
        "They do this because otherwise dealing with <a y company(y)> first results in"
      ]
    },
    {
      "heading": "31 assume H&S's syntactic analysis",
      "text": [
        "4Actually, there is an issue concerning \"and\", forced on us by H&S's syntactic analysis.",
        "The issue is whether quantifiers can be extracted across conjunctions.",
        "For present purposes, I assume they can - indeed, that the recursive rule for \"and\" only applies when the environments C and D in \"and(C,D)\" contain no complex terms.",
        "3",
        "which is not the required reading of the sentence.",
        "It also contains a free variable.",
        "H&S therefore forbid the algorithm to apply complex terms which are embedded within other complex terms.",
        "Also, the restrictions of complex terms are recursively scoped with a flag set so that this call of the procedure returns partial results (still containing complex terms), as well as full results."
      ]
    },
    {
      "heading": "4 Negation",
      "text": [
        "There are two readings of the sentence 4.",
        "Everyone isn't here depending on whether \"not\" or \"every\" takes wider scope.",
        "In ordinary logic we have \"not(p)\" is true iff it is not the case that \"p\" is true Suppose C is an environment containing an occurrence of \"not\", then g satisfies C(..not..) if it is not the case that g satisfies C(.. ..) Here the formula on the right-hand-side is just that on the left, with the occurrence of \"not\" removed.",
        "The ambiguity in 4) arises in exactly the same manner as quantifier scope ambiguities.",
        "Using one rule (negation) before another (quantification) leads to wider scope for the first application.",
        "In contrast, H&S analyse 4 syntactically as not(here(<every x person(x)>)) and mark \"not\" as being opaque in its only argument.",
        "The rule for opaque arguments allows them to be scoped first thus giving H&S the narrow scope \"every\" reading.",
        "This use of the term \"opaque\" is somewhat non-standard since \"not\" is not usually considered to be opaque."
      ]
    },
    {
      "heading": "5 Pronouns",
      "text": [
        "Introducing complex noun phrase led to increased complexity in the H&S algorithm.",
        "The introduction of structure such as",
        "5.",
        "Every man saw a picture of himself",
        "where \"him\" is bound by \"every man\" leads to yet more.",
        "Take the representation of 5. as"
      ]
    },
    {
      "heading": "6. saw(<every x man(x)>,<a y picture(y,x)>)",
      "text": [
        "Applying <every x man(x)> first,'via the H&S mechanism, gives (every z man(x) saw(x,<a y picture(y,x)>)) Application of <a y picture(y,x)> would now lead to \"x\" being free, H&S prevent this by stipulating that a complex term is applicable only if all free variables in the term are also free in the containing formula.",
        "[Pereira 1989] calls this `The Free Variable Constraint' and complains of appeal to logical syntax.",
        "Our own methodology avoids this.",
        "First, note that 6) is supposed to be a purely syntactic structure.",
        "The occurrence of \"x\" in \"picture(y,x)\" represents the pronoun \"himself\", and the fact that \"x\" also occurs in \"<every x man(x)>\" represents the grammatical relation holding between \"<every x man (x)>\" and \"himself\".",
        "Coin-dexing is used here just to indicate certain grammatical relations.",
        "5 The following notation is clearer.",
        "Now, we alter our quantification rule so that if C is an environment containing <q x r(x)>, our new term is constructed from \"q\", \"x\" , and recursions on \"r(x)\" and C where <q x r(x)> and all embedded coindexed reflexives are replaced by \"x\" suppose we choose to apply (\"rills is one area where H&S's analysis is difficult to follow - what is the role of variables in the input and intermediate forms ?",
        "4",
        "first to 6).",
        "Then we construct our result from \"a\", \"y\" and recursions on both \"saw(<every x man(x)>,y)\" and \"picture(y,himself-x)\" ; the final recursion cannot proceed however, for we have no rule to interpret a reflexive in this position.",
        "There is no appeal to logical syntax, only English syntax.",
        "The same holds true of non-reflexives as in 7.",
        "Every man saw a friend of his where \"every man\" and \"his\" are co-indexed.",
        "6"
      ]
    },
    {
      "heading": "6 Summary and Conclusion",
      "text": [
        "A modification to the algorithm of [Hobbs and Shieber 1987] based on a hint from standard logical theory has led to a simpler algorithm, and one which makes no illegitimate appeal to the syntax of logical form.",
        "The algorithm is sound and complete with respect to the input language since it retraces the semantic definition of that language.",
        "The degree to which it matches our intuitions concerning English determines how good a contribution to natural language processing it is."
      ]
    },
    {
      "heading": "Acknowledgements",
      "text": [
        "The research was supported by SERC research studentship no.",
        "88304590"
      ]
    }
  ]
}
