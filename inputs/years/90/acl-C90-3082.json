{
  "info": {
    "authors": [
      "Dieter Kohl",
      "Agnes Plainfosse",
      "Claire Gardent"
    ],
    "book": "International Conference on Computational Linguistics",
    "id": "acl-C90-3082",
    "title": "The General Architecture of Generation in ACORD",
    "url": "https://aclweb.org/anthology/C90-3082",
    "year": 1990
  },
  "references": [],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "This paper describes the general architecture of generation in the ACORD project.",
        "The central module of this architecture is a planning component, which allows to plan single sentences as an answer to a KB query.",
        "The planner works for three different languages (English, French and German) and for sentence generators based on two different grammar formalisms (UCG for English and French, LFG for German) independent of the particular grammar or grammar formalism.",
        "It uses several knowledge sources of the ACORD system to make its decisions.",
        "The output of the planner is used for the language specific generators as well as for the update of information needed for pronoun resolution."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "The ACORD prototype offers an interactive update and query of a knowledge-base (KB).",
        "In the query situation the user asks the KB using natural language and possibly graphical pointing.",
        "The final response composed of natural language and also if appropriate, graphical highlighting, is generated with a language specific generator, in the three ACORD languages (English, French and German) using the same grammar formalisms and grammars employed in parsing: UCG for English and French, and LFG for German.",
        "The generators are fully described in [9] for the UCG framework, and in [3] and [5] for the LFG framework.",
        "The objective of this paper is to describe the modules common to the three languages, which build the semantics of the answer to be generated using the semantics of the question posed to the system, the dialogue history, and the KB answer."
      ]
    },
    {
      "heading": "2 The Semantic Representation",
      "text": [
        "Most components in the ACORD system share a semantic representation language called InL (Indexed Language (see [8] ) ).",
        "InL is based upon Kamp's Discourse Representation Theory (see [1] and [2]).",
        "The generators work on a derived representation called SynInL, which was designed during the project."
      ]
    },
    {
      "heading": "2.1 Resolution within InL",
      "text": [
        "The parsers produce information which allows a central component, the resolver, to determine the possibilities of coreference between anaphoric expressions and their antecedents (see [7]).",
        "This additional information is incorporated into an InL expression in the form of occurrence information or lists, stating for every element which may be coreferential with some other element properties relevant for determining coreference.",
        "We refer to InL expressions which incorporate such information as unresolved InLs and to InL expressions where this information has been used to determine coreference (and thereafter removed) as resolved InLs.",
        "*The work reported here has been carried out as part of the ESPRIT project P393 ACORD on \"The Construction and Interrogation of Knowledge-Bases using Natural Language Text and Graphics\"."
      ]
    },
    {
      "heading": "2.2 The problems encountered using InL for generation",
      "text": [
        "Planning and generation operate on a different but derivated semantics formalism called SynInL.",
        "Several reasons brought us to design and use SynInL as opposed to InL: First, to work efficiently the UCG generators require that their input be canonical with respect to the respective grammars.",
        "Canonicity means that only those InL formulas are treated, which could be produced by the parser, but not all formulas, which are logically equivalent' In the context of InL, the notion of canonicity cannot be formalized outside the grammar definition.",
        "We then needed a semantic language where canonicity could always be provided, even though an expression was produced without any grammar dependent information.",
        "Second, the generator needs NP planning to control the generation of referring expressions (see [6]).",
        "In order to specify information about the type of NP to be generated, a representation is required which allows the encoding of syntactic information in addition to semantic information.",
        "Furthermore, the individual bits of semantics must be related to the syntactic structure.",
        "More generally speaking, we need a mechanism for modifying or structuring the semantic representation to be generated prior to generation.",
        "Standard InL, being a purely semantic representation language, is inadequate for encoding this syntactic information.",
        "Third, and most importantly, all of this has to be achieved in a language-, grammar and formalism-independent way'."
      ]
    },
    {
      "heading": "3 Designing SynInL",
      "text": []
    },
    {
      "heading": "3.1 State of the art",
      "text": [
        "There is a main difficulty in the concept of planning-based generation systems which explains the monolithic nature of many systems described in the relevant literature.",
        "If a planner plans a particular type of syntactic structure in the absence of grammatical information, there is no guarantee that the structure specified will actually be accepted by the grammar as being well-formed.",
        "There are basically two solutions to this problem.",
        "One is to simply assume that the planner only specifies structures from which it will be always possible to generate.",
        "This works perfectly when there are no interactions between structures specified locally.",
        "An example of a grammar formalism with this \"locality\" property is the context free languages.",
        "However, for most modern approaches to grammar (including Government and Binding theory (GB) and all unification-based grammar formalisms), the locality property does not hold.",
        "In this case, we have to assume that the grammar is \"loose enough\" that anything we might plan can in fact be generated despite any interactions.",
        "Such a planning could 1To determine whether two syntactically distinct InL expressions are logically equivalent under laws such as commutativity and associativity is factorial in complexity.",
        "2Language independence must be viewed as language independence regarding French, English and German.",
        "be done deterministically.",
        "However, using this approach such a planner would always run the risk that it would fail to generate due to inconsistencies with the grammar.",
        "The second solution is to interleave planning and generation and allow the possibility that failure to generate, results in different planning choices.",
        "Such systems also exist, although they seem to be comparatively recent in the literature.",
        "We did not investigate this possibility since it requires a fairly tight integration of planner and (grammar and formalism specific) generator which seems inconsistent with our requirement that we generate with three languages and two grammar formalisms."
      ]
    },
    {
      "heading": "3.2 Description of our approach",
      "text": [
        "Our solution is to attempt an independent level of syntactic representation which abstracts away from the peculiarities of the surface syntactic structures of particular languages and deals directly with syntactic notions which are language-independent.",
        "Whether one thinks that this is possible, depends to a large degree on one's particular theoretical perspective.",
        "What might such au \"abstract\" syntactic representation look like?",
        "There are several related concepts in diverse linguistic theories which satisfy the criteria.",
        "The most directly related concept is that of 1)-structure nit.",
        "D-structure is a level of syntactic structure which mirrors semantic functor-argnment structure directly (via the e-criterion and the Projection Principle) and which is also related to surface syntactic structure by the rule of Move-n, a transformation that moves constituents from one position to another.",
        "Related notions of structure which capture the relation between semantic functor-argument structure (or predicate-argument structure) and \"abstract\" or \"deep' syntactic structure are the f-structures of Lrci and the grammatical function hierarchy-based accounts of subcategorisation in arse; and ecu.",
        "All of these have the desirable property that.",
        "they express a level of representation which relate subcategorisation, semantics and surface structure.",
        "By using such representations which are hypothesized to be \"linguistically universal\" to associate partial semantic representations with abstract syntactic constituents, we also solve the other requirements mentioned above.",
        "first, most instances of noncanonicity are eliminated because sub-formulas are associated directly with syntactic constituents.",
        "Second, quantifier scope readings are eliminated from consideration at this level of representation.",
        "Third, since the level of representation is taken to be universal, there are language-dependent maps from the representation to surface syntactic structure."
      ]
    },
    {
      "heading": "3.3 SynInI, description",
      "text": [
        "'the approach taken here is to encode syntactic struc-i tire in terms of schematic X theory familiar from most.",
        "modern generative grammar formalisms.",
        "As mentioned above, this is most similar to 1)-structure in CB theory.",
        "expresses both syntactic and semantic information.",
        "Idealizing considerably, Synlia, formulas consist of four types: heads, complements, modifiers and specifiers.",
        "This corresponds directly to the standard constituent types in X theory.",
        "(We follow 1,1,G f-structure and BCC subcategorisation structure in treating subjects as ordinary complements rather than specifiers of clauses).",
        "These four categories are ideal for attaining a level of language-iudependence in linguistic description and are general enough that it is reasonable to expect that such X representations can lie mapped on to laligna.ge-dependent surface syntactic structures.",
        "The idea then is to encode this X. structure in SynInL formulas.",
        "Specifiers in SynItil, are of the general form: specifier (Semantics, Head) That is, they specify their own semantics and the properties of their head.",
        "Heads are of the general form: head(Semantics, ArgList, AdjunctList) That is, they specify their own head semantics and a list of arguments and adjuncts which are also either specifier or head structures.",
        "All of these structures also allow the encoding of syntactic requirements on arguments and adjuncts.",
        "However, there is no indication of either surface syntactic order of the complements and adjuncts or of the relative scope of quantifiers occurring in either complements or modifiers.",
        "The language generators are free to realize both scope and surface syntactic structure in any way which is consistent with the Synint, specification.",
        "How is this augmented representation built'?",
        "The parsers produce unresolved This Tab contains enough syntactic information for a unique mapping into an equivalent SynInL expression.",
        "This mapping is done by the SynhiL module.",
        "(liven an expression, it distinguishes between structural and prime predicates.",
        "For prime predicates there is always a mapping into a SynlnL formula with a unique category.",
        "'The structural predicates then determine how to merge the SynIni: formulas which replace the original partial In L expression."
      ]
    },
    {
      "heading": "4 The Planning Component",
      "text": [
        "The role of the planning component.",
        "is to produce Sy n In I., expressions from which phrases can be generated by the language specific generators arid to decide whether any objects on the screen have to be highlighted.",
        "Within Acorn), the planner gets as input the SynlnL expression corresponding to the user question (yes/no question, wh-question or 'how much'/'how many'-question) and the KB answer.",
        "The planner output consists of an optional canned text marker and the Syn.",
        "( n I, of the answer to be generated.",
        "The planner uses three sub-planners for planning verb phrases, Nt.'s and modifications."
      ]
    },
    {
      "heading": "4.1 Architecture of the generator",
      "text": [
        "The answer process consists of the following steps:",
        "• The question is parsed.",
        "The output is the InL representation of the question with information fm: resolution.",
        "• This hi L expression is transformed into SynInL by the In I, SyrilnL module and also resolved using the occurrence information by the resolver.",
        "The resolver provides the generator with information which encodes the user's question as understood by the systemic • The resolved LA is passed on to the Ii13 which provides the KB answer.",
        "• The planner module takes as input the SynInL expression of the query and the NO answer.",
        "Depending on the type of questions asked, the planner makes decisions such as: what kind of canned text prefix is needed, what type of NP planning is necessary, what, kind of answer is expected and what type of processing can be done on this answer.",
        "it calls Hie NP sub-planner in order to process all tile NI'S appearing in the question, as well as the Kit answer which is transformed into an appropriate Synlia, expression (generally an NP).",
        "The output",
        "of the planner is a SynInL representation of the answer.",
        "• The SynInL answer is the input to the language specific generator of the current language.",
        "The selected generator produces the final answer."
      ]
    },
    {
      "heading": "4.2 Planning the Structure of Verb Phrases",
      "text": [
        "Within the ACORD lexicon, verbal predicates may only take arguments which refer to objects.",
        "This means that we do riot do any planning for arguments which denote events or states, i.e., verbal or sentential complements.",
        "Consequently we only distinguish between two types of predicates: the copula, which only takes a subject and a noun phrase or PPs as complement, and all other verbs.",
        "Other active verb forms take either one, two, or three arguments.",
        "The first argument always corresponds to the subject (in an active clause), the second to the object or a prepositional complement, and the third to the second object or a prepositional complement.",
        "Given a list of arguments, the verb planner calls the NP planner on each argument, providing information relative to the function of the argument position under scrutiny, its position in the argument list, and the subject of the sentence in which the argument occurs.",
        "The list of modifications of the original query (if any) is processed last.",
        "For each element of this list, a call to the modification sub-planner is made."
      ]
    },
    {
      "heading": "4.3 Planning Noun Phrases",
      "text": [
        "The planning component is responsible for providing the best expression for NPS.",
        "It uses the dialogue history as well as KB knowledge to decide whether to adopt a pronominalization strategy, or find a non-pronominal description for the NP under analysis.",
        "The NP planner must be provided with enough information to decide whether and which kind of pronominalization is allowed, and whether a name could be used instead of a pronoun where such an option is available.",
        "It roust also decide when to use demonstratives, definite or indefinite articles, and whether a complex description should include relative clauses and adjuncts.",
        "In addition, our planner has to decide which objects should be highlighted on the screen.",
        "To do so, the NP planner needs a fully specified discourse referent and information about the syntactic environment of the NP to be produced.",
        "The output of the NP planner is a fully specified SynInL expression, a possible extension of the list of objects to highlight on the screen, a possible extension of the list of local antecedents, and a possible change of the information corresponding to the answer in the event that the NP planner has produced the NP for the answer."
      ]
    },
    {
      "heading": "4.4 Planning modifications",
      "text": [
        "Modifications appear either in the context of a verb or in the context of an NP.",
        "\"They express negation, PPS, relative clauses, adjectives and adverbs.",
        "The modification planner is currently handling relatives and PPS.",
        "In the case of a relative clause, the identifier of the object of the verb is set to the NP discourse referent, and the verb planner is called.",
        "In case of a PP with exactly one argument, if this argument is in the focus of a wh-question, the KB answer has to give both the internal name and the new argument of the preposition.",
        "If the answer is no, the planner fails, since we currently don't have a semantic definition for the various PP negations like 'nowhere' or 'never'.",
        "The overall result is then the canned text I don't know.",
        "Otherwise there is in general a list of adjunct-argument pairs.",
        "For each pair a. SynInL expression for the preposition is generated, calling the planner recursively on the argument (pronominalization is not allowed in the context of a PP).",
        "If there is more than one pair in the list, a PP coordination is initialized and reduced as will be explained below.",
        "Coordinated PPS are allowed to appear in answers.",
        "A list of SynInL expressions for Pr's can be reduced, if the same preposition is used more than once, and the prepositional arguments are not demonstrative pronouns.",
        "The resulting SynInt, expression contains the common preposition, and an NP coordination corresponding to the arguments of the former SynInL expressions.",
        "The NP coordination then can also be reduced as described in [4]."
      ]
    },
    {
      "heading": "5 Conclusion",
      "text": [
        "Generation in ACORD demonstrates how planning can be done for several languages with a minimum of language-specific information.",
        "The basis of our approach is the concept.",
        "of SynInL which encodes language-independent syntactic information in addition to semantic information.",
        "A SynInL expression can be derivated from an expression using a deterministic process.",
        "Language-specific dependencies are still necessary concerning gender and the syntactic function of NPs.",
        "They could be reduced further by adopting a slightly different architecture concerning the interelation of the generator and the resolver."
      ]
    }
  ]
}
