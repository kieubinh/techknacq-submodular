{
  "info": {
    "authors": [
      "Gosse Bouma"
    ],
    "book": "Annual Meeting of the Association for Computational Linguistics",
    "id": "acl-P90-1021",
    "title": "Defaults in Unification Grammar",
    "url": "https://aclweb.org/anthology/P90-1021",
    "year": 1990
  },
  "references": [
    "acl-C86-1045",
    "acl-C86-1050",
    "acl-C86-1129",
    "acl-C88-1018",
    "acl-E89-1008",
    "acl-E89-1009",
    "acl-P85-1032",
    "acl-P86-1038",
    "acl-P88-1035"
  ],
  "sections": [
    {
      "heading": "ABSTRACT",
      "text": [
        "Incorporation of defaults in grammar formalisms is important for reasons of linguistic adequacy and grammar organization.",
        "In this paper we present an algorithm for handling default information in unification grammar.",
        "The algorithm specifies a logical operation on feature structures, merging with the non-default structure only those parts of the default feature structure which are not constrained by the non-default structure.",
        "We present various linguistic applications of default unification."
      ]
    },
    {
      "heading": "INTRODUCTION",
      "text": [
        "There are two, not quite unrelated, reasons for incorporating defaults mechanisms into a linguistic formalism.",
        "First, linguists have often argued that certain phenomena are described most naturally with the use of rules or other formal devices that make use of a notion of default (see, for instance, Gazdar 1987).",
        "The second reason is that the use of defaults simplifies the development of large and complex grammars, In particular, the development of lexicons for such grammars (Evans & Gazdar 1988).",
        "The latter suggests that the use of defaults is of particular relevance for those brands of Unification Grammar (UG) that are lexicalist, that is, in which the lexicon is the main source of grammatical information (such as Categorial Unification Grammar (Uskoreit 1986; Calder et al. 1988) and Head-driven Phrase Structure Grammar (Pollard & Sag 1987)).",
        "We propose a method for incorporating defaults into UG, in such a way that it both extends the linguistic adequacy of UG and supports the formulation of rules, templates and lexical entries for many unification-based theories.",
        "In the next section, we define default unification.",
        "a logical operation on feature structures.",
        "It is defined for a language.",
        "FML*, which is in many respects identical to the language FML as defined in Kasper & Rounds (1986).",
        "Next, we come to linguistic applications of default unification.",
        "A linguistic notation is introduced, which can be used to describe a number of linguistically interesting phenomena, such as feature percolation, coordination, and many aspects of inflectional morphology.",
        "Furthermore, it can be used in the sense of Flickinger et al. (1985) to define exceptions to rules, non-monotonic specialization of templates or irregular lexical entries."
      ]
    },
    {
      "heading": "BACKGROUND.",
      "text": [
        "There are several proposals which hint at the possibility of adding default mechanisms to the linguistic formalisms and theories just mentioned.",
        "The fact that GPSG (Gazdar et al.. 1985) makes heavy use of defaults, has led to some research concerning the compatibility of GPSG with a formalism such PATR-II (Shieber 1986a) and concerning the logical nature of the mechanisms used in GPSG (Evans 1987).",
        "Shieber (1986a) proposes an operation add conservatively, which adds Information of a feature structure A to a feature structure B, in as far as this information is not in conflict with information in B.",
        "Suggestions for similar operations can be found in Shieber (1986b:59-61) (the overwrite option of PATR-II) and Kaplan (1987) (priority union).",
        "Flickinger et al.",
        "(1985) argue for the incorporation of default inheritance mechanisms in UG as an alternative for the template system of PATR-II.",
        "A major problem with attempts to define an operation such as default unification for complex feature structures, is that there are at feast two ways to think about this operation.",
        "It can be defined as an operation which is like ordinary unification, with the exception that in case of a unification failure, the value of the non-default feature structure takes precedence (Kaplan 1987.",
        "Shieber 1986a).",
        "Another option is not to rely on unification failure, but to remove default information about a feature f already if the non-default feature structure constrains the contents off in some way.",
        "This view underlies most of the default mechanisms used in GPSG1.",
        "The"
      ]
    },
    {
      "heading": "1 Actually, in GPSG both notions of",
      "text": [
        "default unification are used.",
        "In Shieber's (1986a) formulation of the of the Foot Feature Principle.",
        "for example, the operation add conservatively (which normally relies on unification failure) is restricted to features that are free (i.e. uninstantiated and not covarying with some other feature).",
        "distinction between the two approaches is especially relevant for reentrant feature values.",
        "of the form <p> : a (where a is atomic or NIL or TOP).",
        "The definition presented in the next section is defined as an operation on arbitrary feature structures, and thus it is more general than the operations add conservatively or overwrite, in which only one sentence at a time (say, <X0 head> <X1 head> or <subject case> nominative) is added to a feature description.",
        "An obvious advantage of our approach is that overwriting a structure F with r is equivalent to adding F as default information to r. Default unification, as defined below, follows the approach in which default information is removed if it is constrained in the non-default structure.",
        "This decision is to a certain extent linguistically motivated (see section 3), but perhaps more important is the fact that we wanted to avoid the following problem.",
        "For arbitrary feature structures, there is not always a unique way to resolve a unification conflict, nor is it necessarily the case that one solution subsumes other solutions.",
        "Consider for instance the examples in (1).",
        "To resolve the conflict, in (a), either one of the equations could be removed.",
        "In (b), either the fact that <g> = b or the reentrancy could be removed (in both cases, this would remove the inplicit fact that <f› h).",
        "An approach which only tries to remove the sources of a unification conflict, will thus be forced to make arbitrary decisions about the outcome of the default unification procedure.",
        "At least for the purposes of grammar development, this seems to be an undesirable situationl."
      ]
    },
    {
      "heading": "2. DESCRIPTION OF THE ALGORITHM",
      "text": [
        "THE LANGUAGE FMIA Default unification is defined in terms of a formal language for feature structures, based on Kasper St Rounds' (1986) language FML.",
        "FML* does not contain disjunction, however, and furthermore, equations of the form 1 f (where • is an arbitrary formula) are replaced by equations 1 However, in Evans' (1987) version of Feature Specification Defaults, it is simply allowed that a category description has more than one 'stable expansion'.",
        "(2) SnerAx or FML* NIL TOP a a e A (the set of atoms) ry> : a p e (L the set of labels) and a€ Au rIDP,NIL) kP 1>s-eV/IA each pi e Le $ w Cl/ e FML* We assume that feature structures are represented as directed acyclic graphs (dogs).",
        "The denotation D(41) of a formula • is the minimal element w.r.t.",
        "subsumption2 in the set of dags that satisfy it.",
        "The conditions under which a dag D satisfies a formula of FML* (where D/rp> is the dag that is found if we follow the path p through the dag D) are as follows :",
        "D Irvi>,...<pn>] if the values of all pi (1 i 5 n) are equivalent.",
        "NORMAL FORM REQUIREMENTS.",
        "Default unification should be a semantically well-behaved operation, that is, the result of this operation should depend only on the denotation of the formula's involved.",
        "Since default unification is a non-monotonic operation, however, in which parts of the default information may disappear, and since there are in general many formulae denoting the same dag, establishing this is not completely trivial.",
        "In particular, we must make sure that the formula which provides the default information is in the following normal form: 2 A dag D subsumes a dag D' if the set of formulae satisfying D' contains the set of formulae satisfying D (Eisele & Diirre.",
        "1988: 287)."
      ]
    },
    {
      "heading": "3 D/.4› is defined tiff e Dom(D).",
      "text": [
        "D/r1p> is defined iff DRI> and D'/<p> are defined, where D'= D/<1>.",
        "defined in D(0) E L) (cf. Eisele & DOrre, 1988: 288).",
        "For every formula O in FML*, there is a formula 0' in FML\" NF.",
        "which is equivalent to it w.r.t unification, that is, for which the following holds: A default formula has to be in FMI..* NF for two reasons.",
        "First, all information which is Implicit in a formula, should be represented explicitly, so we can check easily which parts of a formula need to be removed to avoid potential unification conflicts with the non-default formula.",
        ".",
        "This is guaranteed by (4a.b).",
        "Second, all reentrant paths should have NIL as value.",
        "This is guaranteed by (4c,d) and makes It possible to replace an equivalence class by a weaker set of equations, in which arbitrary long extensions of the old pathnames may occur (if some path would have a value other than NIL, certain extensions could lead to Inconsistent results).",
        "LAWS FOR DEFAULT UNIFICATION.",
        "Default unification is an operation which takes two formulas as arguments, representing default and non-default information respectively.",
        "The dag denoted by the resultant formula is subsumed by that of the non-default argument.",
        "but not necessarily by that of the default argument The laws for default unification (defined as Default 0 Non-default = Result.",
        "where Default Is in FML*-NF) are listed below.",
        "(6) Vx e FML*: 4, Ax * TOP ea 0' AX # TOP (9) DEFAULT UNIFICATION:",
        "Note that this does not imply that 4, and O' have the same denotation.",
        "The two formulae below, for example.",
        "are equivalent w.r.t.",
        "unification, yet denote different dags :",
        "(7) a cf> : a n 1<f>,<g>1 b.",
        "<I> : a n (g).",
        ": a",
        "For conditions (4a,b), it is easy to see that (6) holds (it follows, for instance, from the equivalence laws (21) and (22) in Kasper & Rounds, 1986: 261).",
        "Condition (4c) can be met by replacing every occurence of an equivalence class frp i>,....4pn>1 in a formula 4, by a conjunction of equivalences (V/1›,...‹Pn1>/ for every epil> (1 5l n) realized In D(4).",
        "For example, if L (f,g), (8b) is the NF of Via).",
        "(8) a.",
        "[d).cp] A •cfra : ML b. kff>,<gf>1 A [cfg>or.gg:>] A <ff> : NIL",
        "Condition (4d) can be met by eliminating equivalence classes of paths leading to an atomic value.",
        "Thus.",
        "(7b) is the NF of (7a).",
        "Note that the effect of (4c,d) is that the value of every path which is member of some equivalence class is NIL a 0 • NIL =4$ 43 TOP = TOP NIL 0 0 = TOP ED =4' b. a ED O .4) e a = a C. <p>: O = 0, if D(0) I= ‹p'› :a , p' apreflxofp,a€A.",
        "= If D(0) I=<pp').",
        ":a.",
        "= If 3p' e E: D(0)1= E and p' Is a prefix of p, <p>: a AO, otherwise.",
        "d. E 041 where E' is ( rp>e E I D(0) E' and p' e El <p>€ El D(4,) <P.> : a) (p' a prefix of p, a e A) and Z is (‹p'>.",
        "I D(0) I= <P135 :a. and p e E).",
        "This definition of default unification removes all default information which might lead to a unification conflict.",
        "Furthermore.",
        "It is designed in such a way that the order in which information is removed is irrelevant (note that otherwise the second case in (9e) would be invalid).",
        "The first two cases of (9c) are needed to remove all sentences rp> : a, which refer to a path which is blocked or which cannot receive an atomic value in 45.",
        "The third case in (9c) is needed for situations such as (10).",
        "(10) (cfp• : a A .r.h g> : b) kf>,",
        "In (9d), we first remove from an equivalence class all paths which have a prefix that is already in an equivalence class or which has an atomic value.",
        "The result of this step is E-E. Next, we modify the equivalence class, so that it allows exceptions (i.e. the possibility of non-unifiable values) for all paths which are extensions of paths in E-E' and are defined in O.",
        "We can think of modified equivalence classes as abbreviations for a set of (unmodified) equivalence classes: [<P1>,...<13n>1//2 , where is the conjunction of all equivalence classes I<P1Pb,•..<1:0nPl>1. such that pits not defined in 2, but pl' is in 2, for some 1,1' E An example should make this clearer:",
        "(12) [cf.>, <g>,<Iii>] (<g> : a A cf : b) = [4>,.e.h> Iiii<g>1 A (4> : a A <fp : b).",
        "The result of default unification in this case is that one element ( <g>) is removed from the default equivalence class since it is constrained in by the non-default information.",
        "Furthermore, the equivalence is modified, so that it allows for exceptions for the paths <f g> and g>.",
        "Applying the rule in (11).",
        "and assuming that L = (f,g,h1, we conclude that",
        "Note that the replacement of modified equivalence classes by ordinary equivalence classes is always possible, and thus the result of (9c1) is equivalent to a formula in FML*.",
        "Finally.",
        "(9e) says that, given a consistent default formula, the order in which default information is added to the non-default formula is unimportant.' (This does not hold for inconsistent default formulae, however, since default unification with the individual conjuncts might filter out enough information to make the resultant formula a consistent extension of the non-default formula.",
        "whereas",
        "The monotonicity properties of default unification are listed below (where s is subsumption):",
        "(but not 5 O' (Z A (p) (Z A43. )",
        ") (14a) says that default unification is montonic addition of information to the non-default Information.",
        "(14b) says that the function as a whole is monotonic only w.r.t.",
        "the default argument: adding more default information leads to extensions of the result.",
        "Adding non-default information is non-monotonic, however, as this might cause more of the default information to get removed or overwritten.",
        "The laws in (9) prove that formulae containing the 0-operator can always be reduced to standard formulae of FML*.",
        "This implies that formulae using the 0-operator can still be interpreted as denoting dags.",
        "Furthermore, it follows that addition of default unification to a unification-based formalism should be seen only as a way to increase the expressive power of tools used in defining the grammar (and thus, according to DOI-re et al.",
        "(1990) default unification would be an 'off line' extension of the formalism, that is, its effects can be computed at compile time).",
        "A NOTE ON IMPLEMENTATION.",
        "We have implemented default unification in Prolog, Feature structures are represented by open ended lists (containing elements of the form Iabel=Value ), atoms and variables to represent complex feature structures, atomic values and reentrancies respectively (see Gazdar & Mellish, 1989).",
        "This implementation has the advantage that it is corresponds to FML* NF.",
        "If we unify (15a) with (fmcilyil, we get (15b), in which the value of g has been updated as well Thus, the requirements of (4a,b) are always met, and furthermore, the reentrancy as such between f and g is no longer visible (condition 4c).",
        "If we unify (15a) with (f=th=a I _X.21 I_Y31.",
        "we get (15c), in which the variable X has been replaced by XL which can be interpreted as ranging over all paths that are realized but not defined tmderf (condition (4d)).",
        "Note also that this representation has the advantage that we can define a reentrancy for all realized features, without having to specify the set of possible features or expanding the value of f into a list containing all these features.",
        "If we default unify (15a) with tf=fh=a I _X211 _XV as non-default information, for instance, the result is representable as (15d).",
        "The reentrancy for all undefined features under (is represented by XL The constant NIL of FML* is represented as a Prolog variable ( _Z in this case).",
        "Thus, the seemingly space consuming procedure of bringing a formula into FML* NF and transforming the output of (9d) into FML* is avoided completely.",
        "The actual default unification procedure is a modified version of the merge operation defined in D8rre & Eisele (1986)."
      ]
    },
    {
      "heading": "3. LINGUISTIC APPLICATIONS",
      "text": [
        "Default unification can be used to extend the standard PATR-II (Shieber et al., 1983) methods for defining feature structures.",
        "In the examples.",
        "we freely combine default and non-default information (prefixed by I') in template definitions.",
        "b. NP ( <cab = noun <bar> =2 ).",
        "c. N : ( <cat> = noun <bar> =1 ).",
        "(16) describes a fragment of Categorial Unification Grammar (Uszkoreit, 1986, Calder et al.",
        "1988.",
        "Houma, 1988).",
        "The corresponding feature structure for a definition such as (16a) is determined as follows: first, all default Information and all non-default information is unified separately, which results in two feature-structures (17a,b).",
        "The resulting two feature structures are merged by means of default unification (17c).",
        "In (17c) the equivalence <cat val, = <cat arg> had to be replaced by a weaker set of equivalences, which holds for all features under val or arg, except cat and bar.",
        "We represent this by using 11-bracketed indices, instead of <> and by marking the attributes which are exceptions in bold italic.. Two things are worth noticing.",
        "First of all, the unification of non-default information prior to merging it with the non-default information, guarantees that all default information must be unifiable, and thus it eliminates the possibility of inheritance conflicts inside template definitions.",
        "Second, the distinction between default and non-default information is relevant only in definitions, not in the corresponding feature structures.",
        "This makes the use of the 1-operator completely local: if a definition contains a template.",
        "we can replace this template by the corresponding feature structure and we do not need to won',' about the fact that this template might contain the '1-operator.",
        "The notation Just introduced increases the expressive power of standard methods for the description of feature structures and can be used for an elegant treatment or several linguistic phenomena.",
        "TEMPLATES.",
        "The use of default unification enables us to use templates even in those cases where not all the information in the template is compatible with the information already present in the definition.",
        "German transitive verbs normally take an accusative NP as argument, but there are some verbs which take a dative or genitive NP as argument.",
        "This is easily accounted for by defining the case of the argument of these verbs and inheriting all other information from the template IV."
      ]
    },
    {
      "heading": "SPECIALIZATION OF REENTRANCIES. An important",
      "text": [
        "function of default unification is that it allows us to define exceptions to the fact that two reentrant feature structures always have to denote exactly the same feature structures.",
        "There is a wide class of linguistic constructions which seems to require such mechanisms.",
        "Specifiers in CUG can be defined as functors which take a constituent of category C as argument, and return a constituent of category C, with the exception that one or more specific feature values are changed (see Bach, 1983.",
        "Bouma, 1988).",
        "Examples of such categories are determiners (see (16a)), complementizers and auxiliaries.",
        "Note that the equation <cat vat> = <cat arg> will cause all additional features on the argument which are not explicitly mentioned in the non-default part of the definition to percolate up to the value.",
        "Next, consider coordination of NPs.",
        "(20) xo --> x1x2X3",
        "(20) could be used as a rule for conjunction of NPs in UG.",
        "It requires identity between the mother and the two coordinated elements.",
        "However, requiring that the three nodes be unifiable would be to strict.",
        "The number of a conjoined NP is always plural and does not depend on the number of the coordinated NPs.",
        "Furthermore, the number of two coordinated elements need not be identical.",
        "The non-default information in (20) takes care of this.",
        "The effect of this statement is that adding the default information <X0> = <X1> and <X0> <X3> will result in a feature structure in which X0.",
        "Xi and X3 are unified, except for their values for <num>.",
        "We are not interested in the num-values of the conjuncts, so they are set to NIL (which should be interpreted as in section 2) .",
        "The nrun value of the result is always piu."
      ]
    },
    {
      "heading": "Iivrt.EcrioNAL MORPHOLOGY. When seen from a",
      "text": [
        "CUG perspective, the categories of inflectional affixes are comparable to those of specifiers.",
        "The plural suffix s for forming plural nouns can, for instance, be encoded as a function from (regular) singular nouns into identical, but plural, nouns.",
        "Thus, we get the following categorization:",
        "<cat arg cat> = noun <cat arg class> = regular 1<cat arg num> = sg kcat val num> = plu ).",
        "Again, all additional information present on the argument which is not mentioned in the non-default part of the definition, is percolated up to the value automatically.",
        "LEXICAL DErAuLrs.",
        "The lexical feature specification defaults of GPSG can also be Incorporated.",
        "Certain information holds for most lexical items of a certain category, but not for phrases of this category.",
        "A uniflciation-based grammar that includes a morphological component (see, for instance.",
        "Calder, 1989 and Evans & Gazdar, 1989), would probably list only (regular) root forms as lexical items.",
        "For regular nouns, for instance,",
        "only the singular form would be listed in the lexicon.",
        "Such information can be added to lexicon definitions by means of a lexical default nile: (22) a N ==> ( 3SG <class> = regular) b. cow = N. sheep = ( <nura> =NIL <class> = irregular).",
        "The interpretation of A ==> B is as follows: If the definition D of a lexical item is unifiable with A. than extend D to B 49 D. Thus, the lexical entry cow would be extended with all the information in the default rule above, whereas the lexical entry for sheep would only be extended with the information that <person> = 3.",
        "Note that adding the default information to the template for N directly.",
        "and then overwriting it in the irregular cases is not a feasible alternative, as this would force us to distinguish between the template N if used to describe nouns and the template N if used in complex categories such as NP/N or N/N (i.e. for determiners or adjectives it is not typically the case that they combine only with regular and singular nouns)."
      ]
    },
    {
      "heading": "CONCLUSIONS",
      "text": [
        "We have presented a general definition for default unification.",
        "The fact that it does not focus one the resolution of feature conflicts alone, makes it possible to define default unification as an operation on feature structures, rather than as an operation adding one equation at a time to a given feature description.",
        "This generalization makes it possible to give a uniform treatment of such things as adding default information to a template, overwriting of feature values and lexical default rules.",
        "We believe that the examples in section 3 demonstrate that this is a useful extension of UG, as it supports the definition of exceptions, the formulation more adequate theories of feature percolation, and the extension of UG with a morphological component."
      ]
    },
    {
      "heading": "REFERENCES",
      "text": [
        "Bach.",
        "Emmon 1983 Generalized Categorial Grammars and the English Auxiliary.",
        "In F.Heny and B.Richards (eds.)",
        "Linguistic Categories, Vol II, Dordrecht, Reidel.",
        "Botuna, Gosse 1988 Modifiers and Specifiers In Categorial Unification Grammar.",
        "Linguistics, vol 26.",
        "21-46.",
        "Calder, Jonathan 1989 Paradigmatic Morphology.",
        "Proceedings of the fourth Conference of the European Chapter of the ACL.",
        "58- 65.",
        "Calder, Jo; Klein, Ewan & Zeevat.",
        "Henk 1988 Unification Categorial Grammar: a concise, extendable grammar for natural language processing.",
        "Proceedings of Coling 1988, Hungarian Academy of Sciences, Budapest, 83-86.",
        "Eisele, Andreas & DOrre, Jochen 1988 Unification of Disjunctive Feature Descriptions.",
        "Proceedings of the 26th Annual Meeting of the Association for Computational Linguistics.",
        "State University of New York, Buffalo.",
        "NY.",
        "286- 294.",
        "Evans, Roger 1987 Towards a Formal specification of Defaults in GPSG.",
        "In E. Klein & J. van Benthem (eds.), Categories, Polymorphism and Unification."
      ]
    }
  ]
}
