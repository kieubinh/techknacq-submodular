{
  "info": {
    "authors": [
      "Mark Johnson"
    ],
    "book": "Annual Meeting of the Association for Computational Linguistics",
    "id": "acl-P90-1022",
    "title": "Expressing Disjunctive and Negative Feature Constraints With Classical First-Order Logic",
    "url": "https://aclweb.org/anthology/P90-1022",
    "year": 1990
  },
  "references": [
    "acl-C86-1045",
    "acl-J88-1001",
    "acl-P84-1027",
    "acl-P86-1038",
    "acl-P89-1003"
  ],
  "sections": [
    {
      "heading": "ABSTRACT",
      "text": [
        "In contrast to the \"designer logic\" approach, this paper shows how the attribute-value feature structures of unification grammar and constraints on them can be axiomatized in classical first-order logic, which can express disjunctive and negative constraints.",
        "Because only quantifier-free formulae are used in the axiornatization, the satisfiability problem is 7P-complete."
      ]
    },
    {
      "heading": "INTRODUCTION.",
      "text": [
        "Many modern linguistic theories, such as Lexical-Functional Grammar [11, Functional Unification Grammar [12] Generalized Phrase-Structure Grammar [6], Categorial Unification Grammar [20] and Head-driven Phrase-Structure Grammar [18], replace the atomic categories of a context-free grammar with a \"feature structure\" that represents the syntactic and semantic properties of the phrase.",
        "These feature structures are specified in terms of constraints that they must satisfy.",
        "Lexical entries constrain the feature structures that can be associated with terminal nodes of the syntactic tree, and phrase structure rules simultaneously constrain the feature structures that can be associated with a parents and its immediate descendants.",
        "The tree is well-formed if and only if all of these constraints are simultaneously satisfiable.",
        "Thus for the purposes of recognition a method for determining the satisfiability of such constraints is required: the nature of the satisfying feature structures is of secondary importance.",
        "Most work on unification-based grammar (including the references cited above) has adopted a type of feature structure called an attribute-value structure.",
        "The elements in an attribute-value structure come in two kinds: constant elements and complex elements.",
        "Constant elements are atomic entities with no internal structure: i.e. they have no attributes.",
        "Complex elements have zero or more attributes, whose",
        "e6 and two constant elements, singular and third.",
        "The complex element ei has two attributes, sub] and preil, the value of which are the complex elements e2 and e3 respectively.",
        "If constraints on attribute-value structures are restricted to conjunctions of equality constraints (i.e. requirements that the value of a path of attributes is equal to a constant or the value of another path) then the set of satisfying attribute-value structures is the principal filter generated by the minimal structure that satisfies the constraints.",
        "The generator of the satisfying principal filter of the conjunction of such constraints is the unification of the generators of the satisfying principal filters of each of the conjuncts.",
        "Thus the set of attribute-value structures that simultaneously satisfy a set of such constraints can be characterized by computing the unification of the generators of the corresponding principal filters, and the constraints are satisfiable iff the resulting generator is not T (i.e. T represents unification failure).",
        "Standard unification-based parsers use unification in exactly this way.",
        "When disjunctions and negations of constraints are permitted, the set of satisfying attribute-value structures does not always form a principal filter [11], so the simple unification-based technique for determining the satisfiability of feature structure constraints must be extended.",
        "Kasper and Rounds [11] provide a formal framework for investigating such constraints by reviving a distinction originally made (as far as I am aware) by Kaplan and Bresnan 1101 between the language in which feature structure constraints are expressed and the structures that satisfy these constraints.",
        "Unification is supplanted by conjunction of constraints, and disjunction and negation appear only in the constraint language, not in the feature structures themselves (an exception is 131 and [2], where feature bundles may contain negative arcs).",
        "Research in this genre usually follows a general pattern: an abstract model for feature structures and a specialized language for expressing constraints on such structures are \"custom-crafted\" to treat some problematic feature constraint (such as negative feature constraints).",
        "Table 1 sketches some of the variety of feature structure models and constraint types that previous analyses have used.",
        "This paper follows Kasper and Rounds and most proposals listed in Table 1 by distinguishing the constraint language from feature structures, and restricts disjunction and negation to the constraint language alone.",
        "It",
        "Author Model of Feature Structures Constraint Language Features Kaplan and Bresnan [101 Partial functions Disjunction, negation, set-values Pereira and Shieber [17] Information Domain F=LIAFI-f-C Kasper and Rounds [11] Acyclic finite automata Disjunction Moshier and Rounds [14] Forcing sets of acyclic finite Intuitionistic negation automata Dawar and Vijayashankar 13] Acyclic finite automata Three truth values, negation Gazdar, Pull um, Carpenter, Category structures Based on propositional modal Klein, Hukari and Levine [7] logic Johnson [9] \"Attribute-value structures\" Classical negation, disjunction...",
        "(Al) For all constants c and attributes a, a(c) = I.",
        "(A2) For all distinct pairs of constants ci, c2, cj# c2.",
        "(A3) For all attributes a, a(1) (A4) For all constants c, c * 1.",
        "(A5) For all terms u, v, u----v(u=vi\\u-1)",
        "differs by not proposing a custom-built \"designer logic\" for describing feature structures, but instead uses standard first-order logic to axiomatize attribute-value structures and express constraints on them, including disjunctive and negative constraints.",
        "The resulting system is a simplified version of Attribute-Value Logic [9] which does not allow values to be used as attributes (although it would be easy to do this).",
        "The soundness and completeness proofs in 191 and other papers fisted in Table 1 are not required here because these results are well-known properties of first-order logic.",
        "Since both the axiornatizion and the constraints are actually expressed in a decidable class of first-order formulae, viz, quantifier-free formulae with equality,1 the decidability of feature structure constraints follows trivially, in fact, because the satisfiability problem for quantifier-free formulae is V-complete [15] and the relevant portion of the axiomatization and translation of constraints can be constructed in polynomial time, the satisfiability problem for feature constraints (including negation) is also V-complete."
      ]
    },
    {
      "heading": "AXIOMATIZING ATTRIBUTE-VALUE STRUCTURES",
      "text": [
        "This section shows how attribute-value structures can be axiornatizecl using first-order quantifier-free formulae with equality.",
        "In the next section we see that equality and inequality constraints on the values of the attributes can also be expressed as such formulae, so systems of these constraints can be solved using standard techniques such as the Congruence Closure algorithm [15], [5].",
        "The close relationship between quantifier-free formulae and attribute-value constraints was first noted in Kaplan and 13resnan [10].",
        "The elements of the attribute-value structure, both constant and complex, together with an additional element 1 constitute the domain of individuals of the intended interpretation.",
        "The attributes are unary partial functions over this domain (i.e. mappings from elements to elements) which are always undefined on constant elements.",
        "We capture this partiality by the standard technique of adding an additional element 1 to the domain to serve as the value 'undefined'.",
        "Thus a(x) =1 if x does not have an attribute a, otherwise at x) is the value of x's attribute a.",
        "We proceed by specifying the conditions an interpretation must satisfy to be an attribute-value structure.",
        "Modelling attributes with functions automatically requires attributes to be single-valued, as required.",
        "Axiom schema (Al) describes the properties of constants.",
        "It expresses the requirement that constants have no attributes.",
        "Axiom schema (A2) requires that distinct constant symbols denote distinct elements in any satisfying model.",
        "Without (A2) it would be possible for two distinct constant elements, say singular and plural, to denote the same individual.2 Axiom schema (A3) and (A4) state the properties of the \"undefined value\" I.",
        "It has no attributes, and it is distinct from all of the constants (and from all other elements as well – this will be enforced by the translation of equality constraints).",
        "This completes the axiomatization.",
        "This axiomatization is finite iff the sets of attribute symbols and constant symbols are finite: in the intended computational and linguistic applications this is always the case.",
        "The claim is that any interpretation which satisfies all of these 2 Such a schema is required because we are concerned with satisfiability rather than validity (as in e.g. logic programming).",
        "axioms is an attribute-value structure; i.e. (Al) – (A4) constitute a definition of attribute-value structures.",
        "express conjunctive, disjunctive and negative feature constraints.",
        "Example (continued): The interpretation corresponding to the attribute-value structure (1) has as its domain the set D = e6,",
        "singular, third, 1).",
        "The attributes denote functions from D to D. For example, agr denotes the function whose value is 1 except on e2 and e5, where its values are e4 and e6 respectively.",
        "it is straightforward to check that all the axioms hold in the three attribute-value structures given above.",
        "In fact, any model for these axioms can be regarded as a (possibly infinite and disconnected) attribute-value feature structure, where the model's individuals are the elements or nodes, the unary functions define how attributes take their values, the constant symbols denote constant elements, and 1 is a sink state."
      ]
    },
    {
      "heading": "EXPRESSING CONSTRAINTS AS QUANTIFIER-FREE FORMULAE.",
      "text": [
        "Various notations are currently used to express attribute-value constraints: the constraint requiring that the value of attribute a of (the entity denoted by) x is (the entity denoted by) y is written as (x a) = y in PATR-l1 [19], as (x a) = y in LFG [10], and as x(a) y in [9], for example.",
        "At the risk of further confusion we use another notation here, and write the constraint requiring that the value of attribute a of x is y as a(x) y-This notation emphasises the fact that attributes are modelled by functions, and simplifies the definition of Clearly for an attribute-value structure to satisfy the constraint u v then u and v must denote the same element, i.e. u = v. However this is not a sufficient condition: nurn(x) num(y) is not satisfied if nun(x) or nun(y) is I.",
        "Thus it is necessary that the arguments of denote identical elements distinct from the denotation of 1.",
        "Even though there are infinitely many instances of the schema in (A5) (since there are infinitely many terms) this is not problematic, since u v can be regarded as an abbreviation for u=vnu*1.",
        "Thus equality constraints on attribute-value structures can be expressed with quantifier-free formulae with equality.",
        "We use classically interpreted boolean connectives to"
      ]
    },
    {
      "heading": "SATISFACTION AND UNIFICATION",
      "text": [
        "Given any two formulae 4 and cp, the set of models that satisfy both and p is exactly the set of models that satisfy (1) A (p. That is, the conjunction operation can be used to describe the intersection of two sets of models each of which is described by a constraint formula, even if these satisfying models do not form principal filters [11] [9].",
        "Since conjunction is idempotent, associative and commutative, the satisfiability of a conjunction of constraint formulae is independent of the order in which the conjuncts are presented, irrespective of whether they contain negation.",
        "Thus the evaluation (i.e. simplification) of constraints containing negation can be freely interleaved with other constraints.",
        "Unification identifies or merges exactly the elements that the axiomatization implies are equal.",
        "The unification of two complex elements e and e' causes the unification of elements are) and a(e') for all attributes a that are defined on both e and e'.",
        "The constraint x x' a(x) – a(x') in exactly the same circumstances; i.e. when a(x) and a(x') are both distinct from I. Unification fails either when two different constant elements are to be unified, or when a complex element and a constant element are unified (i.e. constant-constant clashes and constant-complex clashes).",
        "The constraint x x' is unsatisfiable under exactly the same circumstances.",
        "x x' is unsatisfiable when x and x' are also required to satisfy x c and x' c' for distinct constants c, c', since c c' by axiom schema (A2).",
        "x x' is also unsatisfiable when x and x' are required to satisfy a(x) t and x' c'",
        "for any attribute a, term t and constant c', since a(c\") 1 by axiom schema (A3).",
        "Since unification is a technique for determining the satisfiability of conjunctions of atomic equality constraints, the result of a unification operation is exactly the set of atomic consequences of the corresponding constraints.",
        "Since unification fails precisely when the corresponding constraints are unsatisfiable, failure of unification occurs exactly when the corresponding constraints are equivalent to False.",
        "Example (continued): The sets of satisfying models for the formulae (1') and (2') are precisely the principal filters generated by (1) and (2) above.",
        "Because the principal filter generated by the unification of ei and e7 is the intersection of the principal filters generated by (1) and (2), it is also the set of satisfying models for the conjunction of (1') and (2') with the formula Xi 17 (3').",
        "The satisfiabllity of a formula like (3') can be shown using standard techniques such as the Congruence Closure Algorithm 115], [5].",
        "In fact, using the substitutivity and transitivity of equality, (3') can be simplified to (3\").",
        "It is easy to check that (3) is a satisfying model for both (3\") and the axioms for attribute-value structures.",
        "The treatment of negative and disjunctive constraints is straightforward.",
        "Since negation is interpreted classically, the set of satisfying models do not always form a filter (i.e. they are not always upward closed f161).",
        "Nevertheless, the quantifier-free language itself is capable of characterizing exactly the set of feature structures that satisfy any boolean combination of constraints, so the failure of upward closure is not a fatal flaw of this approach.",
        "At a methodological level, I claim that after the mathematical consequences of two different interpretations of feature structure constraints have been investigated, such as the classical and intuitionistic interpretations of negation in feature structure constraints [14], it is primarily a linguistic question as to which is better suited to the description of natural language.",
        "I have been unable to find any linguistic analyses which can yield a set of constraints whose satisfiablity varies under the classical and intuitionistic interpretations, so the choice between classical and intuitionistic negation may be moot.",
        "For reasons of space the following example (based on Pereira's example 1161 demonstrating a purported problem arising from the failure of upward closure with classical negation) exhibits only negative constraints.",
        "Example: The conjunction of the formulae number(agr(x)) - singular and",
        "can be simplified by substitution and transitivity of equality and boolean equivalences to",
        "This formula is satisfied by the structure (4) when x denotes rand y denotes f. Note the failure of upward closure, e.g. (5) does not satisfy (4'), even though (4) subsumes (5)."
      ]
    },
    {
      "heading": "CONCLUSION",
      "text": [
        "This paper has shown how attribute-value structures and constraints on them can be axiomatized in a decidable class of first-order logic.",
        "The primary advantage of this approach over the \"designer logic\" approach is that important properties of the logic of the feature constraint language, such as soundness, completeness, decidability and compactness, follow immediately, rather than proven from scratch.",
        "A secondary benefit is that the substantial body of work on satisfiability algorithms for first-order formulae (such as ATMS-based techniques that can efficiently evaluate some disjunctive constraints [13]) can immediately be applied to feature structure constraints.",
        "Further, first-order logic can be used to axiornatize other types of feature structures in addition to attribute-value structures (such as \"set-valued\" elements) and express a wider variety of constraints than equality constraints (e.g. subsumption constraints).",
        "In general these extended systems cannot be axiornatized using only quantifier-free formulae, so their decidability may not follow directly as it does here.",
        "However the decision problem for sublanguages of first-order logic has been intensively investigated [4], and there are decidable classes of first-order formulae 181 that appear to be expressive enough to axiomatize an interesting variety of feature structures (e.g. function-free universally-quantified prenex formulae can express linguistically useful constraints on \"set-valued\" elements).",
        "An objection that might be raised to this general approach is that classical first-order logic cannot adequately express the inherently \"partial information\" that feature structures represent.",
        "While the truth value of any formula with respect to a model (i.e. an interpretation and variable assignment function) is completely determined, in general there will be many models that satisfy a given formula, i.e. a formula only partially identifies a satisfying model (i.e. attribute-value structure).",
        "The claim is that this partiality suffices to describe the partiality of feature structures."
      ]
    },
    {
      "heading": "BIBLIOGRAPHY",
      "text": []
    }
  ]
}
