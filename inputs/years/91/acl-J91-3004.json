{
  "info": {
    "authors": [
      "Frederick Jelinek",
      "John D. Lafferty"
    ],
    "book": "Computational Linguistics",
    "id": "acl-J91-3004",
    "title": "Computation of the Probability of Initial Substring Generation by Stochastic Context-Free Grammars",
    "url": "https://aclweb.org/anthology/J91-3004",
    "year": 1991
  },
  "references": [],
  "sections": [
    {
      "text": [
        "IBM T. J. Watson Research Center Speech recognition language models are based on probabilities P(Wk+1 = v I w1 w2, • • • , wk) that the next word Wk+1 will be any particular word v of the vocabulary, given that the word sequence w1, w2, , wk is hypothesized to have been uttered in the past.",
        "If probabilistic context-free grammars are to be used as the basis of the language model, it will be necessary to compute the probability that successive application of the grammar rewrite rules (beginning with the sentence start symbol s) produces a word string whose initial substring is an arbitrary sequence w1, w2, ,wk+1.",
        "In this paper we describe a new algorithm that achieves the required computation in at most a constant times k3-steps."
      ]
    },
    {
      "heading": "1. Introduction",
      "text": [
        "The purpose of this article is to develop an algorithm for computing the probability that a stochastic context-free grammar (SCFG) (that is, a grammar whose production rules have attached to them a probability of being used) generates an arbitrary initial substring of terminals.",
        "Thus, we treat the same problem recently considered by Wright and Wrigley (1989) from the point of view of LR grammars.",
        "Probabilistic methods have been shown most effective in automatic speech recognition.",
        "Recognition (actually transcription) of natural unrestricted speech requires a \"language model\" that attaches probabilities to the production of all possible strings of words (Bahl et al.",
        "1983).",
        "Consequently, if we believe that word generation can be modeled by context-free grammars, and if we want to base speech recognition (or handwriting recognition, optical character recogition, etc.)",
        "on such models, then it will become necessary to embed them into a probabilistic framework.",
        "In speech recognition we are presented with words one at a time, in sequence, and so we would like to calculate the probability P(s w1w2 ...wk ...) that an arbitrary string w1w2 wk is the initial substring of a sentence generated by the given SCFG.1"
      ]
    },
    {
      "heading": "2. Definition of Stochastic Context-Free Grammars",
      "text": [
        "We will now define stochastic context free grammars (SCFGs) and establish some notation.",
        "We will use script symbols for sets, lowercase letters for elements of the sets or specific string items, and capitals for variables.",
        "We start with a vocabulary V =-- {v1, v2, .",
        ", vN} whose elements, words vi, are the terminal symbols of the language.",
        "We next list a set of nonterminals g = {gi = s, g21 • • • )gA/1} whose elements glare grammatical phrase markers.",
        "They include the distinguished phrase marker s, the sentence \"start\" symbol.",
        "The purpose of our grammar is to generate sentences wi w2 wn of varying length n. The generation is accomplished by use of production rules, belonging to a set 'IL, that rewrite individual phrase markers as sequences of phrase markers or words.",
        "For simplicity of manipulation but without loss of generality, we will limit the productions to the Chomsky Normal Form (CNF).",
        "That is, only the following types of productions will be allowed:",
        "The grammar is stochastic, because to each rule there is assigned a probability of its use.",
        "Let H be any nonterminal, and let #(H) be the number of productions rewriting H. The ith of these productions will then take place with probability P(i H).",
        "It is assumed that for all i = 1,2, ... , #(H), P(i I H) is a strictly positive number and that",
        "It will be convenient to denote the probabilities P(i H) by the productions they refer to, e.g., P(H Gi G2) or P(H – * V).",
        "A context-free grammar is assumed to generate sentences from top to bottom, starting with some rule s Gi G2 that rewrites the sentence symbol s and is used with probability P(s G1G2).",
        "The generated nonterminals G1 and G2 are then rewritten, and the rewriting process continues until no nonterminals remain to be rewritten, all having been replaced by words through use of rewrite rules of type (1).",
        "The probability of the entire process is equal to the product of the probabilities of the individual rewrite rules used.",
        "We say that a SCFG is well defined in case it forms a language model; that is, the total probability of strings of terminals generated by the grammar is equal to 1:",
        "A context-free grammar is said to be proper if starting from the distinguished nonterminal s, the only nonterminals produced are those whose further rewriting can eventually result in a string of terminals.",
        "In fact, condition (2) is necessary and sufficient for a SCFG to be well defined if the underlying grammar is proper.",
        "The solutions to the following four problems are of interest.",
        "1.",
        "What is the probability P(s w1w2 wn) that the grammar, beginning with the start nonterminal s, generates a given word string (sentence) w1 w2 Wni E v?",
        "The desired probability is computed by the Inside Algorithm (Baker 1979), which is a modification of the well-known CYK parsing algorithm (Younger 1967; Graham et al.",
        "1980).",
        "2.",
        "What is the most probable parse of a given word string w1 w2 Wk?",
        "That is, which sequence of rewrite rules resulting in w1w2...wk is such that the product of its probabilities is maximal?",
        "This parse is computed by the Viterbi Algorithm (Jelinek 1985), which uses the same chart as the CYK algorithm.",
        "3.",
        "What is the probability P(s w2 wn ...) that the grammar, beginning with the start nonterminal s, generates a word string (sentence) whose initial substring is wi wn?",
        "The algorithm providing the answer to this question is developed in the present paper.",
        "4.",
        "Given the set of rules specifying a context-free grammar, how should the probabilities of their use be determined?",
        "An answer to this question requires a criterion by which to judge it.",
        "The maximum likelihood criterion is as follows: given a \"training corpus\" WT (that is, a set of sentences), determine the production probabilities so as to maximize the probability that the grammar generated WT.",
        "The Inside – Outside Algorithm (Baker 1979) extracts probabilities that locally (i.e., not necessarily globally) maximize the likelihood of WT.",
        "3.",
        "Development of the Left-to-Right Inside (LRI) Algorithm",
        "In this section we will develop the Left-to-Right (LRI) Algorithm, which will allow us to calculate the desired probabilities P(s wi w2 wk...).",
        "In order to present the LRI Algorithm, we will introduce some notation that will simplify the appearance of the following formulas.",
        "Let P(H(i,j)) denote the probability P(H ... TO that starting with the nonterminal H, successive application of grammar rules has produced the sequence w,wi+1...w1.",
        "That is, if the SCFG production process is represented by the usual tree diagram, then P(H(i,j)) is the sum of the probabilities of all trees whose root is H and whose leaves are wi,w,±1, • • • , W1.",
        "1.",
        "If S = g, the grammar is proper.",
        "Stop.",
        "Else if S g, then find the set A of all nonterminals H not belonging to S that rewrite as H G1 G2 with G1 and G2 belonging to S.",
        "2.",
        "If A is not empty, include the set A in S and go to 1.",
        "3.",
        "If s E 5, eliminate from g all nonterminals not belonging to S and purge all rules involving nonterminals not belonging to S. The resulting grammar is proper.",
        "Else if s S, the grammar cannot be made proper by purging.",
        "",
        "Note that the first sum in (3) is over all possible words x1, the second is over all possible word pairs x1x2, and the third sum (the general term) is over all possible word n-tuples x1x2 xn.",
        "Using the notation (3), the desired probability P(s 4 Wi W2 • • • Wk .",
        "• .)",
        "is denoted by P(s << 1, k).",
        "In what follows we will need PL (H G), the sum of the probabilities of all the rules H Gi G2 whose first righthand side element is G1 = G. That is,",
        "which is the sum of probabilities of all trees with root node H that produce G as the leftmost (first) nonterminal.",
        "Note that the last displayed (general) term accounts for all trees whose leftmost leaf has depth k. Note further that the above sum converges since we assume that our underlying grammar is proper, and that rule probabilities are non-zero.",
        "We are now ready to compute",
        "Jelinek and Lafferty Probability of Initial Substring Generation Thus, using definition (5) we get",
        "which can be seen to be the sum of probabilities of all trees with root node H whose last leftmost production results in leaves G1 and G2.",
        "To compute P(H << i + n) we will rely on the strict CN form of the grammar.",
        "Obviously,",
        "since to generate the initial substring w,w,+1 • • • Wi+n, some rule H G1 G2 must first be applied and then the first part of the substring must be generated from G1 and its remaining part (and perhaps more!)",
        "from G2.",
        "Defining the function",
        "where we took advantage of the definition (4) and denoted the variable in the last sum by Ai instead of by G1."
      ]
    },
    {
      "heading": "",
      "text": [
        "Substituting (11) into (10) and collecting and factoring out common terms, we get",
        "tends to 0 as k grows without limit, then using definition (7) and successive re-substitutions, we get the final formula",
        "where the last equality follows from (9), the definition of R(G1, G2).",
        "We can now notice that formula (14) is very similar to the well-known formula",
        "that allows an iterative calculation of the (inside) probabilities P(H(i, i +n)) ((15) serves as the basis for the Inside Algorithm (Baker 1979)).",
        "There are two differences between (14) and (15): instead of the rule probability P(H Gi G2) in (15), we have in (14) the sum-of-tree-probability function QL (H G1 G2) (defined in (7)), and instead of the simple span generation probability P(G2 (i + j, i + n)) in (15), we have in (14) the initial substring generation probability P (G2 < i + j, i + n) (defined in (3)).",
        "It follows that once we determine how to calculate the values of QL (H z G1G2) (this is discussed in the next section), we will be able to compute iteratively all the other quantities (that",
        "Jelinek and Lafferty Probability of Initial Substring Generation is, P(H j) and P(H(i, j))).",
        "In fact, it follows from (14) that to calculate P(s << 1, k) one proceeds as follows:",
        "1.",
        "Calculate probabilities P (G(i, i + n)) for i = 1, 2, ... , k – 1, n 0, 1, 2, ... , k – i – 1, iteratively by formula (15).",
        "2.",
        "Calculate probabilities P(H << k, k) by formula (6).",
        "3.",
        "Calculate probabilities"
      ]
    },
    {
      "heading": "4. Determination of the Functions QL(H GiG2) and P(H << i, i)",
      "text": [
        "Let us first observe that if w, = v then P(H << i) P(H v .",
        ".",
        ".)",
        "which, consistent with previous notation (5), we denote by QL(H v).",
        "We then get from (6)",
        "It follows from (16) and (7) that to calculate the desired quantities P(H << i) and QL(H z Gi G2) we must first determine the left corner probability sums QL(H G).",
        "We will use matrix algebra to compute them.",
        "Let PL and QL denote the square matrices (their dimension is equal to the number of nonterminals) whose elements in the Hth row and Gth column are PL(H G) (defined in (4)) and QL (H G), respectively.",
        "Then equation (5) can be rewritten in matrix form as",
        " where PL denotes i-fold multiplication of the matrix PL with itself.",
        "Post-multiplying both sides of (17) by the matrix PL, subtracting the resulting equation from (17), and cancelling terms, we get",
        "Finally, denoting by I the diagonal unit matrix of the same dimension as FL, we get from (18) the desired solution",
        "where [I - PL]-1 denotes the inverse of the matrix [I - PL].",
        "Equation (16) can also be stated in matrix form.",
        "Denoting by Pw and Qw the rectangular matrices with elements P(H w) and QL(H --> w) in the Hth row and wth column, respectively, we get from (16) that"
      ]
    },
    {
      "heading": "5. Conclusion",
      "text": [
        "While the LRI algorithm together with formulas (19) and (20) constitutes the solution to the stated problem, its practicality is limited to grammars whose total number of nonterminals is sufficiently limited so as to allow the calculation of the inverse - PL]-1.",
        "The algorithm itself has exactly twice the complexity of the Inside Algorithm computing P(H(i, i + n)) by formula (15), and is thus of order n3.",
        "In fact, once all the probabilities required for the computation of P(s << 1, k) are computed, to get the next probability of interest, P(s << 1, k + 1), one needs to compute the following quantities:",
        "1.",
        "The probabilities P(G(i,k)) for i = k, k - 1, , 1, in that order.",
        "2.",
        "The probabilities P(H << i, k + 1) for i = k + 1, k, , 2, in that order.",
        "3.",
        "The probability P(s << 1, k + 1).",
        "Let us finally recall that the language model of speech recognition provides to the recognizer the probability P(Wk = V I w1w2 ...wk_i) for all possible words v, and that we therefore must be able to compute the probability P(s -> w1w2 wk_iv ...) for all N words v of the vocabulary.",
        "Fortunately, this does not mean carrying out the LRI algorithm N times for each word position k, but only M times, where M is the number of nonterminals of the grammar.",
        "In fact, a simple modification of the algorithm allows one to compute the probabilities of P(s -> w1w2 wk_i g, ...) where g, is an element of the set of nonterminals g = {gi = s, g2, • .. ,gm}.",
        "This may be done, for example, by setting",
        "in the algorithm of Section 3.",
        "Our desired LRI probabilities can then be computed by the formula",
        "This modification is particularly practical when the size of the vocabulary greatly exceeds the number of nonterminals in the grammar.",
        "Jelinek and Lafferty Probability of Initial Substring Generation"
      ]
    }
  ]
}
