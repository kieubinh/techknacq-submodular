{
  "info": {
    "authors": [
      "Carl Weir",
      "Timothy W. Finin",
      "Robin McEntire",
      "Barry Silk"
    ],
    "book": "Message Understanding Conference",
    "id": "acl-M91-1032",
    "title": "UNISYS: Description of the UNISYS System Used for MUC-3",
    "url": "https://aclweb.org/anthology/M91-1032",
    "year": 1991
  },
  "references": [],
  "sections": [
    {
      "heading": "INTRODUCTION",
      "text": [
        "This paper describes the Unisys MUC-3 text understanding system, a system based upon a three-tiered approach to text processing in which a powerful knowledge-based form of information retrieval plays a central role.",
        "This knowledge-based form of information retrieval makes it possible to define an effective level of text analysis that falls somewhere between what is possible with standard keyword-based information retrieval techniques and deep linguistic analysis.",
        "The Unisys Center for Advanced Information Technology (CAIT) has a long-standing commitment to NLP research and development, with the Pundit N LP system developed at CAIT serving as the Center's primary research vehicle [3].",
        "The Unisys MUC-3 system, however, consists primarily of components that are less than 7 months old and still in a developmental stage.",
        "Although the three-tiered processing approach that the MUC-3 system's architecture is based upon includes Pundit as its third level of (linguistic) analysis, the incorporation of Pundit into the MUC-3 system was not achieved in time for the final MUC-3 test in May, 1991.",
        "A decision was made to focus on the development of a knowledge-based information retrieval component, and this precluded the integration of Pundit into the prototype.",
        "The Unisys MUC-3 system without its linguistic analysis component is depicted in Figure 1.",
        "This is the version of the system that was actually used in the MUC-3 test."
      ]
    },
    {
      "heading": "APPROACH AND SYSTEM DESCRIPTION",
      "text": [
        "The Unisys MUC-3 system's architecture consists of five main processing components, three of which represent levels of text understanding.",
        "An initial preprocessing component transforms texts into an appropriate format for the text understanding components to manipulate.",
        "The three text understanding components engage in (1) standard keyword-based information retrieval, (2) knowledge-based information retrieval, and (3) linguistic analysis.2 A final, template generation component gathers together all the facts extracted from a given text and builds template data structures out of them.",
        "These five components are described in more detail below."
      ]
    },
    {
      "heading": "A Message Preprocessing Component",
      "text": [
        "The Unisys MUC-3 system's message preprocessing component is a special, low-level processor which parses texts into their component parts and generates output in a form compatible with the KBIRD rule processing system (i.e., as a set of Prolog terms).",
        "This processor is a special C program which was generated using an Application Specific Language called MFPL (Message Format Processing Language) [6].",
        "MFPL was specifically designed as a high-level language for processing the formatted portions of electronic messages.",
        "In addition to producing a representation of the text in Prolog terms, this module identifies and encodes sentence boundaries, paragraph boundaries, and the standard formatted portions of the text (e.g., date, time, location, etc.",
        ")."
      ]
    },
    {
      "heading": "A Keyword-Based Information Retrieval Component",
      "text": [
        "The keyword analysis component of the Unisys MUC-3 system predicts when various types of terrorist acts (bombings, murders, kidnappings, and so forth) have been referred to in a text.",
        "The probability of an act of a given type having occurred is determined by a search for words, word stems, and pairs of words and pairs of word stems, that are associated with types of acts.",
        "The probability of such a word (or word stem, or word pair or stem pair) occurring in a text for which an act of a given type is associated is determined as follows.",
        "The frequency of presence for a given word W (or word stem ...) in texts for which a terrorist act of a given type T occurs is computed (f(W,T)), as is the presence of the word in any text at all in the complete corpus (f(W, C)).",
        "The probability of the word appearing in texts for which a terrorist act of a given type occurs",
        "and the probability of the word occurring in any text",
        "are calculated, and these two values are used to determine the conditional probability of the word (or word stem ... ) predicting the given type of terrorist act.",
        "Only words with relatively high probabilities of predicting a given type of terrorist act are searched for in a text, and words that do not occur frequently enough in the text corpus based on some empirically-derived threshold are not used.",
        "Training the keyword-based analysis component.",
        "A database of key words, two-word phrases, word stems and two-stem phrases was compiled from the DEV corpus using a collection of GAWK scripts.",
        "After some experimentation, we decided not to use the word stem and stem-pair data in the final test, because it was not making any positive difference in the system's event detection performance.",
        "Currently, an event class, T, is predicted for a text if it contains any single word (or two-word phrase), W, where P(W, T) > .65 or if it contains two words (or two two-word phrases) W1 and W2 where P(1471, T) > .55 and P(W2, > .55.",
        "Further experimental variation of the scoring algorithm should result in continued enhancements to this component's event detection capabilities."
      ]
    },
    {
      "heading": "A Knowledge-based Information Retrieval Component (KBIRD)",
      "text": [
        "Once a set of terrorist acts have been predicted, the task of generating templates describing those acts falls to the knowledge-based information retrieval component called KBIRD.",
        "KBIRD is a rule-based system for concept-spotting in free text [2, 7].",
        "KBIRD rules are forward-chaining horn clauses whose antecedents are constituents discovered and recorded in a chart data structure and whose consequents are newly inferred constituents – concepts (or facts) – to be added to the chart.",
        "The antecedents and consequents of KBIRD rules can include arbitrary Prolog goals just as in Definite Clause Grammars [5].",
        "It is tempting to think of a set of KBIRD rules as implementing a kind of bottom up chart parser, but there are several interesting differences.",
        "One distinctive feature is that the concepts that KBIRD rules infer are associated with a specific region of text, a region which is the maximal cumulative span of the regions of text associated with each expression in a given rule's antecedent.",
        "Moreover, these regions can be explicitly reasoned about by subsequent KBIRD rules.",
        "In typical natural language parsers, there is an implicit constraint that adjacent constituents in a rule must be realized by contiguous strings of text in the input.",
        "KBIRD allows one to write rules which specify other constraints on the relative positions of the strings which realize rule constituents.",
        "The antecedent of a KBIRD rule may consist of several facts (words or concepts) that are the arguments of operators illustrated below.",
        "New operators are easy to define."
      ]
    },
    {
      "heading": "Antecedent Format Operator Description",
      "text": [
        "AB A is contiguous with B.",
        "A , B A is in the same text as B.",
        "A .. B A is in the same sentence as B.",
        "A.. > B A is in the same sentence as and precedes B.",
        "A ... B A is in the same paragraph as B.",
        "A B A is in the same region as B. KBIRD rules are compiled into a combination of Prolog backward chaining rules and forward chaining rules in Pfc [1].",
        "A simple optimizer is applied to the output of this compilation process to improve performance.",
        "KBIRD has many additional features which are inherited from the Pfc rule language, such as the ability to write non-monotonic rules which specify that no occurrence of a certain constituent or concept be found in a given region.",
        "Some examples of KBIRD rules are shown below.",
        "The first rule states that if the wordstem \"MURDER*\" has been found in the text, then a fact should be added to the factbase stating that a potential murder event has been found.",
        "The second rule illustrates KBIRD's ability to recognize phrases, asserting that if the string \"ARMY OF NATIONAL LIBERATION\" is discovered, a fact should be added to the factbase stating that a terrorist organization exists in the text at the same location as the string.",
        "The third rule illustrates the use of operations on concepts derived from the text, asserting that if a terrorist event E is found in the same sentence as a potential victim V, then a fact should be added to the factbase indicating that V is the actual victim of E.",
        "1.",
        "\"MURDER*\" ==> potential_murder_event.",
        "2.",
        "\"ARMY\"-\"OF\"^\"NATIONAL\"-\"LIBERATION\" ==> terrorist_organization.",
        "3. terrorist_event(E) potential_victim(V) ==> victim(E,V).",
        "Several additional features of the KBIRD rule language should be mentioned, all of which appear in the following, more complex rule used to infer individual perpetrators: generic_perpetratorOJCP, [unlikely_perpetrator(Name)], {get_full_text_at_loc(P,Name)} ==> potential_ind_perpetrator(1, Name).",
        "In the first clause of the antecedent of this rule, the text location index associated with the concept generic_perpetrator(A) is bound to the logic variable P with the operator.",
        "This allows the location to be explicitly constrainted later in the rule.",
        "If a clause is enclosed in square brackets, as is the case for the second clause of the antecedent, then its location is ignored.",
        "This condition also shows the use of the tilde () as a negation operator.",
        "Thus, this second clause specifies that it is not the case that Name has been determined to be an \"unlikely perpetrator\" anywhere else in the text.",
        "The final clause of the antecedent in this rule is enclosed in curly brackets, which indicates that it is a Prolog constraint which must be met – this clause is used to extract the actual text associated with the concept bound to the logic variable P."
      ]
    },
    {
      "heading": "A Template Generator",
      "text": [
        "The Template Generator has three tasks: to select the actual templates to be produced as output, to choose between candidate slot fillers if more than one has been found, and to print the template in the proper format.",
        "Template Selection.",
        "The process of determining which template structures to build out of the facts inferred by KBIRD begins by determining if any events at all have been predicted.",
        "If no event has been predicted, then an \"irrelevant template\" is created.",
        "If several events of the same type have been created, the template generator will attempt to merge them using a set of heuristics which hypothesize that two event descriptions refer to the same event.",
        "Some of the general heuristics used for merging events of the same class are:",
        "• Merge two events if there is a significant overlap in the text regions found by the event locator rules.",
        "• Merge two events if they share human targets whose scores are above a certain threshold.",
        "• Merge two events if they share physical targets whose scores are above a certain threshold.",
        "Slot Filler Selection.",
        "After merging events, the template generator must select the final slot filler values.",
        "The KBIRD rules which propose slot fillers attach a score (an integer between 0 and 100) to each candidate which represents the system's confidence in that value.",
        "If multiple candidate fillers exist for a given template, several general heuristics are used to select among them:",
        "• Candidate slot values with scores below a given threshold are dropped from consideration.",
        "• A set of synonymous expressions are dropped in favor of their canonical expression.",
        "• If one candidate expression is a substring of another, then the shorter one is dropped.",
        "• A generic description (e.g., vehicles) is dropped in favor of one or more subsumed ones (e.g., ambulance, truck).",
        "• If a slot can only take a single value then the candidate receiving the highest value is selected."
      ]
    },
    {
      "heading": "A Linguistic Analysis Component (Pundit)",
      "text": [
        "The Pundit natural language processing system has been under development at Unisys for the last five years and is capable of performing a detailed linguistic analysis of an input text.",
        "Unlike KBIRD, Pundit abstracts away from the actual strings used to convey information in a text at the very beginning of its analysis process by determining to which syntactic properties and domain concepts the lexical items in the text correspond.",
        "These syntactic properties and domain concepts are then processed without much attention being paid to their physical location in the text.",
        "In KBIRD, on the other hand, everything that is manipulated, even concepts that have been asserted, are explicitly associated with regions of text.",
        "A key capability that the deeper linguistic processing of Pundit can provide is the determination of the grammatical and thematic roles of expressions in a text.",
        "Thus, it can determine that in the sentence \"Castellar is the second mayor that has been murdered in Colombia in the last 3 days\" that Castellar is the subject of the copular verb in the matrix clause, and that Castellar should inherit properties asserted of the predicate nominal argument.",
        "It can also recognize the passive voice of the relative/subordinate clause headed by that and thus that it is Castellar that has been murdered (as the second mayor) in Columbia.",
        "It would be possible to build a KBIRD rulebase that performs the sort of detailed linguistic analysis now being performed by Pundit.",
        "Merging KBIRD and Pundit in this way would minimize the complications of integrating the text analyses that they perform.",
        "However, such a merger would very likely reduce the modularity of the three-tiered approach to text processing that we have been following."
      ]
    },
    {
      "heading": "AN EXTENDED EXAMPLE",
      "text": [
        "In this section, we illustrate in a more concrete fashion how the Unisys MUC-3 system goes about processing messages by examining in more detail what happens during the processing of a specific text, message TST1-MUC3-0099 in the MUC-3 corpus (see Figure 2).",
        "Our discussion will proceed through the various processing phases that have been identified."
      ]
    },
    {
      "heading": "Phase One: Message Preprocessing",
      "text": [
        "In this phase, the message is parsed (by a special low-level processor) into its components and output in a form compatible with the KBIRD rule processing system.",
        "This processor is a special C program generated by MFPL, the ASL mentioned earlier in this paper.",
        "This phase produces text input of the following sort to the Prolog portion of the system, including default (header) information about the date and location.",
        "msg(id,\"TST1-MUC3-0099\").",
        "msg(loc,\"LIMA\").",
        "msg(date, [25,\"OCT\",89]).",
        "msg(src,\"EFE\").",
        "msg(type,'TEXT').",
        "msg(text,PPOLICE,'HAVE','REPORTED','THAT','TERRORISTS','TONIGHT',"
      ]
    },
    {
      "heading": "Phase Two: Keyword analysis",
      "text": [
        "In the second phase, the keyword analysis component predicts three event classes – bombings with a probability of 87%, attacks with a probability of 66%, and murders with a probability of 63%.",
        "Figure 3 shows the particular words and word pairs which gave rise to these predicted event types.",
        "The last column in this table contains triples consisting of a probability, a word or two-word phrase, and its location in the text.",
        "Given our current thresholds, the murder prediction was judged to be too weak for further consideration."
      ]
    },
    {
      "heading": "Phase Three: KBIRD processing",
      "text": [
        "KBIRD examines the text word by word and applies forward chaining rules whenever their preconditions are met.",
        "KBIRD's task is to take the event classes predicted by the keyword analysis stage and try to predict additional event classes as well as instantiate the predicted types with individual events.",
        "Event instances are associated with particular regions within the text.",
        "When an event instance is created, additional rules will be triggered to look for values to fill each of the instance's slots.",
        "Predicting Additional Event Types.",
        "In some cases the co-occurrence of an instance of some event type predicted by the keyword-based analysis component with words or inferred concepts that have been detected in a text will allow KBIRD to infer additional event types.",
        "For example, the following KBIRD rule, which was triggered in the processing of message 0099, asserts that the occurrence of \"BURNED\" in the active voice in a message for which an instance of a bombing event has been discovered is enough to predict the likely occurrence of an arson event.",
        "\"BURNED\" ‹.",
        "be_word(W).",
        "actual_event('BOMBING',_,_), [-predicted_event_type('IRSON')] ==> probable_event('iRSON').",
        "Locating Events.",
        "The process of instantiating event types, or locating events, is initiated in KBIRD through a class of locator rules, which attempt to find \"hot spots\" in the text which seem to be discussing events of the predicted type.",
        "The following locator rules were used to detect bombing, attack, and arson instances in this message:",
        "Although the rule above for detecting an instance of an attack event will initially fire as the words in the message are examined sequentially by KBIRD and the phrase \"THE ATTACK WAS CARRIED OUT\" is encountered, the attack event instance that has been created will eventually be retracted when, in the same sentence, the description of a bomb device is encountered (\"THE BOMBS\").",
        "On the other hand, the second rule for inferring instances of bombing events will suddenly have all of its antecedent constraints met when this latter phrase is encountered, and so it will fire to create a new instance of a bombing.",
        "Locating perpetrator ids and orgs.",
        "The following two rules are triggered when, in the first sentence of 0099, the word \"TERRORISTS\" is encountered.",
        "The latter rule licenses the inference that \"TERRORISTS\" describes a potential perpetrator.",
        "\"TERRORISTS\" ==> generic_perpetratoreTERRORIST9.",
        "generic_perpetrator(1)1P, [unlikely_perpetrator(Name)], {get_full_text_at_loc(P,Name)} ==> potential_ind_perpetrator(A, Name).",
        "Later, in the fourth paragraph of the text, the following rules are used to infer that the known guerrilla organizations \"SHINING PATH\" and \"TUPAC AMARU REVOLUTIONARY MOVEMENT\" have been encountered.",
        "\"SHINING\" \"PATH\" ==> organization ('GUERRILLA').",
        "\"TIIPAC\"-\"IMIRII\"-\"REVOLUTIONIRY\"-\"MOVEMENT\" ==>organizationOGUERRILLA9.",
        "Locating a Physical Target.",
        "In processing the first three paragraphs of the text, a number of rules fire to trigger the recognition of potential physical targets.",
        "Embassies and vehicles are frequent physical targets, and so the following inference rules have been written to capture essential information about them:",
        "vehicle(Q) ==> structure('TRANSPORT VEHICLE',Q).",
        "structure(Type,Quantity)CP, iget_full_text_at_loc(P,Text)} ==> structure(Text,Type,Quantity).",
        "structure(Text,Type,Quantity) ==> potential_physical_target(Text,Type,Quantity).",
        "Detecting Event Instances, Revisited.",
        "The discovery of a physical target satisfies the last of the antecedent constraints for the arson and the first bombing event locator rules mentioned earlier, and so actual events (event instances) can now be inferred by them.",
        "Actual events are represented in the chart as facts of the following sort: chart (actual_ event(BOMBING,E1,bombing),6:7).",
        "chart (actual_ event(BOMBING,E3,bombing),90:91).",
        "chart (actual_ event(BOMBING,E4,bombing),78:81).",
        "chart (actual _event(BOMBING,E5,bombing),78:81).",
        "chart (actual_ event(BOMBING,E6,bombing),165:166).",
        "chart (actual _event(IRSON,E7,arson),246:248).",
        "Multiple bombing instances are created because of the many different ways in which the various rules for inferring bombing instances can be satisfied.",
        "It will be the job of the template generator to detect and merge references to the same event.",
        "Generating Slot Values.",
        "Once an event instance has been asserted, KBIRD will begin to infer tmp clauses, which will later be written to a file to serve as input to the template generator for filling template slots.",
        "Each clause has as one of its parameters a score that indicates how likely it is to be an appropriate slot value.",
        "The following rules illustrate how a perpetrator that is a terrorist is favored in a bombing event.",
        "actual_event(_,ID,bombing) potential_ind_perpetrator( 'TERRORIST',P) ==> tmp(ID, slot05, P, kbird, 95).",
        "actual_event(_,ID,_) potential_ind_parpetrator(_,P) ==> tmp(ID, slot05, P, kbird, 50).",
        "Similarly, the following rules illustrate how, in templates representing bombing events, organizations that have been identified as guerrilla groups are favored over drug cartels and military groups as likely values for the perpetrator ORG slot.",
        "actual_event(_,ID,bombing)..organization( G, 'GUERRILLA') ==> tmp(ID, slot06, [G,'GUERRILLIP], kbird, 85).",
        "actual_event(_,ID,bombing)..organization( G, 'DRUGGIES') ==> tmp(ID, slot06, [G,'REBELS'], kbird, 77).",
        "actual_event(_,ID,bombing)..organization( G, 'MILITARY') ==> tmp(ID, slot06, kbird, 35).",
        "The arson template generated by the system was almost completely correct.",
        "The only problem was that the perpetrator confidence reported for \"SHINING PATH\" was CLAIMED OR ADMITTED and not REPORTED AS FACT.",
        "In the bombing template generated by the system, the date was incorrectly identified as being a span of time in July instead of a span of time in October.",
        "The July inference was",
        "based on information in the fifth paragraph.",
        "The system also failed to report the TUPAC AMARU group as a perpetrator ORG value, even though the group was identified in the text.",
        "An uninteresting bug in the template generator caused this error.",
        "Finally, rules for inferring that the physical targets belonged to foreign nations were not sensitive enough to be activated."
      ]
    },
    {
      "heading": "CONCLUSIONS",
      "text": [
        "The value of the three-tiered approach realized in the Unisys MUC-3 system is twofold.",
        "First, the terrorist domain is sufficiently well-defined that a deep linguistic analysis is often unneccessary, and using linguistic analysis sparingly provides a dramatic improvement in robustness and processing time.",
        "Second, in the MUC-3 evaluation task we have discovered that a small amount of modeling effort, i.e., writing KBIRD rules, produces a significant improvement in our ability to extract pertinent information.",
        "Since KBIRD is a forward chaining rule-driven methodology, the creation, modification and removal of rules is a very easy and intuitive process.",
        "The three-tiered approach of combining traditional information retrieval and linguistic analysis techniques with the type of analysis that our knowledge-based information retrieval system, KBIRD, provides offers significant advantages to solving common text processing problems.",
        "The modularity of this approach allows us to utilize advances made in keyword analysis and NLP technology with relative ease."
      ]
    },
    {
      "heading": "REFERENCES",
      "text": []
    }
  ]
}
