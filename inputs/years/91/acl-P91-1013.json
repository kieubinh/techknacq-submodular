{
  "info": {
    "authors": [
      "Mark Perlin"
    ],
    "book": "Annual Meeting of the Association for Computational Linguistics",
    "id": "acl-P91-1013",
    "title": "LR Recursive Transition Networks for Earley and Tomita Parsing",
    "url": "https://aclweb.org/anthology/P91-1013",
    "year": 1991
  },
  "references": [],
  "sections": [
    {
      "heading": "ABSTRACT*",
      "text": [
        "Efficient syntactic and semantic parsing for ambiguous context-free languages are generally characterized as complex, specialized, highly formal algorithms.",
        "In fact, they are readily constructed from straightforward recursive transition networks (RTNs).",
        "In this paper, we introduce LR-RTNs, and then computationally motivate a uniform progression from basic LR parsing, to Earley's (chart) parsing, concluding with Tomita's parser.",
        "These apparently disparate algorithms are unified into a single implementation, which was used to automatically generate all the figures in this paper."
      ]
    },
    {
      "heading": "1. INTRODUCTION",
      "text": [
        "Ambiguous context-free grammars (CFGs) are currently used in the syntactic and semantic processing of natural language.",
        "For efficient parsing, two major computational methods are used.",
        "The rust is Earley's algorithm (Earley, 1970), which merges parse trees to reduce the computational dependence on input sentence length from exponential to cubic cost.",
        "Numerous variations on Earley's dynamic programming method have developed into a family of chart parsing (Winograd, 1983) algorithms.",
        "The second is Tomita's algorithm (Tomita, 1986), which generalizes Knuth's (Knuth, 1965) and DeRemer's (DeRemer, 1971) computer language LR parsing techniques.",
        "Tomita's algorithm augments the LR parsing \"set of items\" construction with Earley's ideas.",
        "What is not currently appreciated is the continuity between these apparently distinct computational methods.",
        "• Tomita has proposed (Tomita, 1985) constructing his algorithm from Earley's parser, instead of DeRemer's LR parser.",
        "In fact, as we shall show, Earley's algorithm may be viewed as one form of LR parsing.",
        "• Incremental constructions of Tomita's algorithm (Heering, Klint, and Rekers, 1990) may similarly be viewed as just one point along a continuum of methods.",
        "* This work was supported in part by grant R29 LM 04707 from the National Library of Medicine, and by the Pittsburgh NMR Institute.",
        "The apparent distinctions between these related methods follows from the distinct complex formal and mathematical apparati (Lang, 1974; Lang, 1991) currently employed to construct these CF parsing algorithms.",
        "To effect a uniform synthesis of these methods, in this paper we introduce LR Recursive Transition Networks (LR-RTNs) as a simpler framework on which to build CF parsing algorithms.",
        "While WINs (Woods, 1970) have been widely used in Artificial Intelligence (AI) for natural language parsing, their representational advantages have not been fully exploited for efficiency.",
        "The LR-RTNs, however, are efficient, and shall be used to construct:",
        "(1) a nondeterministic parser, (2) a basic LR(0) parser, (3) Earley's algorithm (and the chart parsers), and (4) incremental and compiled versions of Tomita's algorithm.",
        "Our uniform construction has advantages over the current highly formal, non-RTN-based, nonuniform approaches to CF parsing:",
        "• Clarity of algorithm construction, permitting LR, Earley, and Tomita parsers to be understood as a family of related parsing algorithm.",
        "• Computational motivation and justification for each algorithm in this family.",
        "• Uniform extensibility of these syntactic methods to semantic parsing.",
        "• Shared graphical representations, useful in building interactive programming environments for computational linguists.",
        "• Parallelization of these parsing algorithms.",
        "• All of the known advantages of RTNs, together with efficiencies of LR parsing.",
        "All of these improvements will be discussed in the paper."
      ]
    },
    {
      "heading": "2. LR RECURSIVE TRANSITION NETWORKS",
      "text": [
        "A transition network is a directed graph, used as a finite state machine (Hoperoft and Ullman, 1979).",
        "The network's nodes or edges are labelled; in this paper, we shall label the nodes.",
        "When an input sentence is read, state moves from node to node.",
        "A sentence is accepted if reading the entire sentence directs the network traversal so as to arrive at an",
        "accepting node.",
        "To increase computational power from regular languages to context-free languages, recursive transition networks (RTNs) are introduced.",
        "An RTN is a forest of disconnected transition networks, each identified by a nonterminal label.",
        "All other labels are terminal labels.",
        "When, in traversing a transition network, a nonterminal label is encountered, control recursively passes to the beginning of the correspondingly labelled transition network.",
        "Should this labelled network be successfully traversed, on exit, control returns back to the labelled calling node.",
        "The linear text of a context-free grammar can be cast into an RTN structure (Perlin, 1989).",
        "This is done by expanding each grammar rule into a linear chain.",
        "The top-down expansion amounts to a partial evaluation (Futamura, 1971) of the rule into a computational expectation: an eventual bottom-up data-directed instantiation that will complete the expansion.",
        "Figure 1, for example, shows the expansion of the grammar rule #1 S--*NP VP.",
        "First, the nonterminal S, which labels this connected component, is expanded as a nonterminal node.",
        "One method for realizing this nonterminal node, is via Rule#1; its rule node is therefore expanded.",
        "Rule#1 sets up the expectation for the VP symbol node, which in turn sets up the expectation for the NP symbol node.",
        "NP, the first symbol node in the chain, creates the start node S. In subsequent processing, posting an instance of this start symbol would indicate an expectation to instantiate the entire chain of Rule#1, thereby detecting a nonterminal symbol S. Partial instantiation of the Rule's chain indicates the partial progress in sequencing the Rule's right-hand-side symbols.",
        "The expansion in Figure 1 constructs an LR-RTN.",
        "That is, it sets up a Left-to-right parse of a Rightmost derivation.",
        "Such derivations are developed in the next Section.",
        "As used in Al natural language parsing, RTNs have more typically been LL-RTNs, for effecting parses of leftmost derivations (Woods, 1970), as shown in Figure 2A.",
        "(Other, more efficient, control structures have also been used (Kaplan, 1973).)",
        "Our shift from LL to LR, shown in Figure 2B, uses the chain expansion to set up a subsequent data-driven completion, thereby permitting greater parsing efficiency.",
        "In Figure 3, we show the RTN expansion of the simple grammar used in our first set of examples:",
        "Chains that share identical prefixes are merged (Perlin, 1989) into a directed acyclic graph (DAG) (Aho, Hoperoft, and Ullman, 1983).",
        "This makes our RTN a forest of DAGs, rather than trees.",
        "For example, the shared NP start node initiates the chains for Rules #2 and #3 in the NP component.",
        "In augmented recursive transition networks (ATNs) (Woods, 1970), semantic constraints may be expressed.",
        "These constraints can employ case grammars, functional grammars, unification, and so on (Winograd, 1983).",
        "In our RTN formulation, semantic testing occurs when instantiating rule nodes: failing a constraint removes a parse from further",
        "processing.",
        "This approach applies to every parsing algorithm in this paper, and will not be discussed further.",
        "Figure 3.",
        "The RTN of an entire grammar.",
        "The three connected components correspond to the three nonterminals in the grammar.",
        "Each symbol node in the RTN denotes a subsequence originating from its leftmost start symbol."
      ]
    },
    {
      "heading": "3. NONDETERMINISTIC DERIVATIONS",
      "text": [
        "A grammar's RTN can be used as a template for parsing.",
        "A sentence (the data) directs the instantiation of individual rule chains into a parse tree.",
        "The RTN instances exactly correspond to parse-tree nodes.",
        "This is most easily seen with nondeterministic rightmost derivations.",
        "Given an input sentence of n words, we may derive a sentence in the language with the nondeterministic algorithm (Perlin, 1990): Put an instance of nonterminal node S into the last column.",
        "From right to left, for every column: From top to bottom, within the column:",
        "(1) Recursively expand the column top-down by nondeterministic selection of rule instances.",
        "(2) Install the next (leftward) symbol instance.",
        "In substep (1), following selection, a rule node and its immediately downward symbol node are instantiated.",
        "The instantiation process creates a new object that inherits from the template RTN node, adding information about column position and local link connections.",
        "For example, to derive \"I Saw A Man\" we would nondeterministically select and instantiate the correct rule choices #1, #4, #2, and #3, as in Figure 4.",
        "Following the algorithm, the derivation is (two dimensionally) top-down: top-to-bottom and right-to-left.",
        "To actually use this nondeterministic derivation algorithm to obtain all parses, one might enumerate and test all possible sequences of rules.",
        "This, however, has exponential cost in n, the input size.",
        "A more efficient approach is to reverse the top-down derivation, and recursively generate the parse(s) bottom-up from the input data.",
        "Figure 4.",
        "The completed top-down derivation (parse-tree) of \"I Saw A Man\".",
        "Each parse-tree symbol node denotes a subsequence of a recognized RTN chain.",
        "Rule #0 connects a word to its terminal symbol(s)."
      ]
    },
    {
      "heading": "4. BASIC LR(0) PARSING",
      "text": [
        "To construct a parser, we reverse the above top-down nondeterministic derivation technique into a bottom-up deterministic algorithm.",
        "We first build an inefficient LR-parser, illustrating the reversal.",
        "For efficiency, we then introduce the Follow-Set, and modify our parser accordingly."
      ]
    },
    {
      "heading": "4.1 AN INEFFICIENT BLR(0) PARSER",
      "text": [
        "A simple, inefficient parsing algorithm for computing all possible parse-trees is: Put an instance of start node S into the 0 column.",
        "From left to right, for every column: From bottom to top, within the column:",
        "(1) Initialize the column with the input word.",
        "(2) Recursively complete the column bottom-up using the INSERT method.",
        "This reverses the derivation algorithm into bottom-up generation: bottom-to-top, and left-to-right.",
        "In the inner loop, the Step (1) initialization is straightforward; we elaborate Step (2).",
        "Step (2) uses the following method (Perlin, 1991) to insert instances of RTN nodes:",
        "INSERT (instance) ASK instance (1) Link up with predecessor instances.",
        "(2) Install self.",
        "(3) ENQUEUE successor instances for insertion. }",
        "the label of N is identical to the label of the rule's nonterminal successor node 1.",
        "For every symbol node in SAME-LABEL(rule), instances may be enqueued.",
        "If X E SAME-LABEL(rule) immediately follows a start node, i.e., it begins a chain, then a single instance of it is enqueued.",
        "If Y E SAME-LABEL(rule) does not immediately follow a start node, then more effort is required.",
        "Let X be the unique RTN node to the left of Y.",
        "Every instantiated node in the parse tree is the root of some subtree that spans an interval of the input sentence.",
        "Let the left border j be the position just to left of this interval, and k be the rightmost position, i.e., the current column.",
        "Then, as shown in Figure 5, for every instance x of X currently in position j, an instance y (of Y) is a valid extension of subsequence x that has support from the input sentence data.",
        "The cartesian product",
        "forms the set of all valid predecessor pairs for new instances of Y.",
        "Each such new instance y of Y is enqueued, with some x and the rule instance as its two predecessors.",
        "Each y is a parse-tree node representing further progress in parsing a subsequence.",
        "the root of a parse-subtree that spans (j+1 ,k).",
        "Therefore, the rule instance r enqueues (at least) all instances of y, indexed by the predecessor product: {x in column j} x {r}."
      ]
    },
    {
      "heading": "4.2. USING THE FOLLOW-SET",
      "text": [
        "Although a rule parse-node is restricted to enqueue successor instances of WIN nodes in SAME-LABEL(rule), it can be constrained further.",
        "Specifically, if the sentence data gives no evidence for a parse-subtree, the associated symbol node instance need never be generated.",
        "This restriction can be determined column-by-column as the parsing progresses.",
        "We therefore extend our bottom-up parsing algorithm to: Put an instance of start node S into the 0 column.",
        "From left to right, for every column: From bottom to top, within the column:",
        "(1) Initialize the column with the input word.",
        "(2) Recursively complete the column bottom-up using the INSERT method.",
        "(3) Compute the column's (rightward) Follow-Set.",
        "With the addition of Step (3), this defmes our Basic LR(0), or BLR(0), parser.",
        "We now describe the Follow-Set.",
        "Once an RTN node X has been instantiated in some column, it sets up an expectation for • The RTN node(s) Yg that immediately follow it; • For each immediate follower Yg, all those RTN symbol nodes Wg,h that initiate chains that could recursively lead up to Yg.",
        "This is the Follow-Set (Aho, Sethi, and Ullman, 1986).",
        "The Follow-Set(X) is computed directly from the RTN by the recursion:",
        "halts.",
        "The set of symbol RTN nodes that a rule instance r spanning (j+1 ,k) can enqueue is therefore not SAME-LABEL(rule), but the possibly smaller set of R1N nodes SAME-LABEL(rule) r Follow-Set(j).",
        "To enqueue es successors in INSERT, LET Nodes = SAME-LABEL(rule) n Follow-Set(j).",
        "For every RTN node Y in Nodes, create and enqueue all instances y in Y: Let X be the leftward RTN symbol node neighbor of Y.",
        "Let PROD = (x I x an instance of X in column j) x Cr), if X exists; (r), otherwise.",
        "Enqueue all members of PROD as instances of y.",
        "The cartesian product PROD is nonempty, since an instantiated rule anticipates those elements of PROD mandated by Follow-Sets of preceding columns.",
        "The pruning of Nodes by the Follow-Set eliminates all bottom-up parsing that cannot lead to a parse-subtree at column k. In the example in Figure 7, Rule instance r is in position 4, with j=3 and k=4.",
        "We have: SAME-LABEL(r) = IN2, N31, i.e, the two symbol nodes labelled N in the sequences of Rules #2 and #3, shown in the LR-RTN of Figure 6."
      ]
    },
    {
      "heading": "5. EARLEY'S PARSING ALGORITHM",
      "text": [
        "Natural languages such as English are ambiguous.",
        "A single sentence may have multiple syntactic structures.",
        "For example, extending our simple grammar with rules accounting for Prepositions and Prepositional-Phrases (Tomita, 1986)",
        "the sentence \"I saw a man on the hill with a telescope through the window\" has 14 valid derivations.",
        "In parsing, separate reconstructions of these different parses can lead to exponential cost.",
        "For parsing efficiency, partially constructed instance-trees can be merged (Earley, 1970).",
        "As before, parse-node x denotes a point along a parse-sequence, say, v-w-x.",
        "The left-border i of this parse-sequence is the left-border of the leftmost parse-node in the sequence.",
        "All parse-sequences of RTN symbol node X that cover columns i+1 through k may be collected into a single equivalence class X(i,k).",
        "For",
        "the purposes of (1) continuing with the parse and (2) disambiguating parse-trees, members of X(i,k) are indistinguishable.",
        "Over an input sentence of length n, there are therefore no more than 0(n2) equivalence classes of X. of algorithms that couple efficient parse-tree merging with various control organizations (Winograd, 1983)."
      ]
    },
    {
      "heading": "6. TOMITA'S PARSING ALGORITHM",
      "text": [
        "Suppose X precedes Y in the RTN.",
        "When an instance y of Y is added to position k, k5n, and the cartesian product is formed, there are only 0(k2) possible equivalence classes of X for y to combine with.",
        "Summing over all n positions, there are no more than 0(n3) possible product formations with Y in parsing an entire sentence.",
        "(1) Link up with predecessor instances.",
        "(2) Install self.",
        "(3) ENQUEUE successor instances for insertion. }",
        "The parsing merge predicate considers two instantiated sequences equivalent when:",
        "(1) Their RTN symbol nodes X are the same.",
        "(2) They are in the same column k. (3) They have identical left borders i.",
        "The total number of links formed by INSERT during an entire parse, accounting for every grammar RTN node, is 0(n3)x0(1G1).",
        "The chart parsers are a family In our BLR(0) parsing algorithm, even with merging, the Follow-Set is computed at every column.",
        "While this computation is just 0(101), it can become a bottleneck with the very large grammars used in machine translation.",
        "By caching the requisite Follow-Set computations into a graph, subsequent Follow-Set computation is reduced.",
        "This incremental construction is similar to (Heering, Klint, and Rekers, 1990)'s, asymptotically constructing Tomita's all-paths LR parsing algorithm (Tomita, 1986).",
        "The Follow-Set cache (or LR-table) can be dynamically constructed by Call-Graph Caching (Perlin, 1989) during the parsing.",
        "Every time a Follow-Set computation is required, it is looked up in the cache.",
        "When not present, the Follow-Set is computed and cached as a graph.",
        "Following DeRemer (DeRemer, 1971), each cached Follow-Set node is finely partitioned, as needed, into disjoint subsets indexed by the RTN label name, as shown in the graphs of Figure 8.",
        "The partitioning reduces the cache size: instead of allowing all possible subsets of the RTN, the cache graph nodes contain smaller subsets of identically labelled symbol nodes.",
        "grammar symbol nodes as an already existing Follow-Set node, it is merged into the older node's equivalence class.",
        "This avoids redundant expansions, without which the cache would be an infmite tree of parse paths, rather than a graph.",
        "A comparison is shown in Figure 9.",
        "If the entire LR-table cache is needed, an ambiguous sentence containing all possible lexical categories at each position can be presented; convergence follows from the finiteness of the subset construction."
      ]
    },
    {
      "heading": "7. IMPLEMENTATION AND CURRENT WORK",
      "text": [
        "We have developed an interactive graphical programming environment for constructing LR-parsers.",
        "It uses the color MAC/II computer in the Object LISP extension of Common LISP.",
        "The system is built on CACHE I'm (Perlin, © 1990), a general Call-Graph Caching system for animating Al algorithms.",
        "The RTNs are built from grammars.",
        "A variety of LR-RTN-based parsers, including BLR(0), with or without merging, and with or without Follow-Set caching have been constructed.",
        "Every algorithm described in this paper is implemented.",
        "Visualization is heavily exploited.",
        "For example, selecting an LR-table cache node will select all its members in the RT'N display.",
        "The graphical animation component automatically drew all the RiNs and parse-trees in the Figures, and has generated color slides useful in teaching.",
        "Fine-grained parallel implementations of BLR(0) on the Connection Machine are underway to reduce the costly cartesian product step to constant time.",
        "We are also adding semantic constraints."
      ]
    },
    {
      "heading": "8. CONCLUSION",
      "text": [
        "We have introduced BLR(0), a simple bottom-up LR RTN-based CF parsing algorithm.",
        "We explicitly expand grammars to RTNs, and only then construct our parsing algorithm.",
        "This intermediate step eliminates the complex algebra usually associated with parsing, and renders more transparent the close relations between different parsers.",
        "Earley's algorithm is seen to be fundamentally an LR parser.",
        "Earley's propose expansion step is a recursion analogous to our Follow-Set traversal of the RTN.",
        "By explicating the LR-RTN graph in the computation, no other complex data structures are required.",
        "The efficient merging is accomplished by using an option available to BLR(0): merging parse nodes into equivalence classes.",
        "Tomita's algorithm uses the cached LR Follow-Set option, in addition to merging.",
        "Again, by using the RTN as a concrete data structure, the technical feats associated with Tomita's parser disappear.",
        "His shared packed forest follows immediately from our merge option.",
        "His graph stack and his parse forest are, for us, the same entity: the shared parse tree.",
        "Even the LR table is seen to derive from this parsing activity, particularly with incremental construction from the RTN.",
        "Bringing the RTN into parsing as an explicit realization of the original grammar appears to be a conceptual and implementational improvement over less uniform treatments."
      ]
    },
    {
      "heading": "ACKNOWLEDGMENTS",
      "text": [
        "Numerous conversations with Jaime Carbonell were helpful in developing these ideas.",
        "I thank the students at CMU and in the Tools for Al tutorial whose many questions helped clarify this approach."
      ]
    },
    {
      "heading": "REFERENCES",
      "text": []
    }
  ]
}
