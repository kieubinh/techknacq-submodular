{
  "info": {
    "authors": [
      "Hideto Tomabechi"
    ],
    "book": "Annual Meeting of the Association for Computational Linguistics",
    "id": "acl-P91-1041",
    "title": "Quasi-Destructive Graph Unification",
    "url": "https://aclweb.org/anthology/P91-1041",
    "year": 1991
  },
  "references": [
    "acl-C86-1016",
    "acl-C90-2039",
    "acl-P85-1016",
    "acl-P85-1017",
    "acl-P87-1033",
    "acl-P90-1023"
  ],
  "sections": [
    {
      "heading": "ABSTRACT",
      "text": [
        "Graph unification is the most expensive part of unification-based grammar parsing.",
        "It often takes over 90% of the total parsing time of a sentence.",
        "We focus on two speed-up elements in the design of unification algorithms: 1) elimination of excessive copying by only copying successful unifications, 2) Finding unification failures as soon as possible.",
        "We have developed a scheme to attain these two elements without expensive overhead through temporarily modifying graphs during unification to eliminate copying during unification.",
        "We found that parsing relatively long sentences (requiring about 500 top-level unifications during a parse) using our algorithm is approximately twice as fast as parsing the same sentences using Wrob-lewski's algorithm."
      ]
    },
    {
      "heading": "1. Motivation",
      "text": [
        "Graph unification is the most expensive part of unification-based grammar parsing systems.",
        "For example, in the three types of parsing systems currently used at ATR1, all of which use graph unification algorithms based on [Wroblewski, 1987], unification operations consume 85 to 90 percent of the total cpu time devoted to a parse.",
        "The number of unification operations per sentence tends to grow as the grammar gets larger and more complicated.",
        "An unavoidable paradox is that when the natural language system gets larger and the coverage of linguistic phenomena increases the writers of natural language grammars tend to rely more on deeper and more complex path equations (cycles and frequent reentrancy) to lessen the complexity of writing the grammar.",
        "As a result, we have seen that the number of unification operations increases rapidly as the coverage of the grammar grows in contrast to the parsing algorithm itself which does not seem to",
        "grow so quickly.",
        "Thus, it makes sense to speed up the unification operations to improve the total speed performance of the natural language systems.",
        "Our original unification algorithm was based on [Wroblewski, 19871 which was chosen in 1988 as the then fastest algorithm available for our application (I-LPSG based unification grammar, three types of parsers (Earley, Tomita-LR, and active chart), unification with variables and cycles3 combined with 'Casper 's ([Kasper, 19871) scheme for handling disjunctions.",
        "In designing the graph unification algorithm, we have made the following observation which influenced the basic design of the new algorithm described in this paper:"
      ]
    },
    {
      "heading": "Unification does not always succeed.",
      "text": [
        "As we will see from the data presented in a later section, when our parsing system operates with a relatively small grammar, about 60 percent of the unifications attempted during a successful parse result in failure.",
        "If a unification fails, any computation performed and memory consumed during the unification is wasted.",
        "As the grammar size increases, the number of unification failures for each successful parse increases's. Without completely rewriting the grammar and the parser, it seems difficult to shift any significant amount of the computational burden to the parser in order to reduce the number of unification failuress.",
        "Another problem that we would like to address in our design, which seems to be well documented in the existing literature is that:"
      ]
    },
    {
      "heading": "Copying is an expensive operation.",
      "text": [
        "The copying of a node is a heavy burden to the parsing system.",
        "[Wroblewski, 1987] calls it a \"computational sink\".",
        "Copying is expensive in two ways: 1) it takes time; 2) it takes space.",
        "Copying takes time and space essentially because the area in the random access memory needs to be dynamically allocated which is an expensive operation.",
        "[Godden, 19901 calculates the computation time cost of copying to be about 67 per",
        "cent of the total parsing time in his TIME parsing system.",
        "This time/space burden of copying is non-trivial when we consider the fact that creation of unnecessary copies will eventually trigger garbage collections more often (in a Lisp environment) which will also slow down the overall performance of the parsing system.",
        "In general, parsing systems are always short of memory space (such as large LR tables of Tomita-LR parsers and expanding tables and charts of Earley and active chart parsers6), and the marginal addition or subtraction of the amount of memory space consumed by other parts of the system often has critical effects on the performance of these systems.",
        "Considering the aforementioned problems, we propose the following principles to be the desirable conditions for a fast graph unification algorithm:",
        "• Copying should be performed only for successful unifications.",
        "• Unification failures should be found as soon as possible.",
        "By way of definition we would like to categorize excessive copying of dags into Over Copying and Early Copying.",
        "Our definition of over copying is the same as Wroblewski's; however, our definition of early copying is slightly different.",
        "• Over Copying: Two dags are created in order to create one new dag.",
        " – This typically happens when copies of two input dags are created prior to a destructive unification operation to build one new dag.",
        "aGodden, 19901 calls such a unification: Eager Unification.).",
        "When two arcs point to the same node, over copying is often unavoidable with incremental copying schemes.",
        "• Early Copying: Copies are created prior to the failure of unification so that copies created since the beginning of the unification up to the point of failure are wasted.",
        "Wroblewski defines Early Copying as follows: \"The argument dags are copied before unification started.",
        "If the unification fails then some of the copying is wasted effort\" and restricts early copying to cases that only apply to copies that are created prior to a unification.",
        "Restricting early copying to copies that are made prior to a unification leaves a number of wasted copies that are created during a unification up to the point of failure to be uncovered by either of the above definitions for excessive copying.",
        "We would like Early Copying to mean all copies that are wasted due to a unification failure whether these copies are created before or during the actual unification operations.",
        "Incremental copying has been accepted as an effective method of minimizing over copying and eliminat",
        "ing early copying as defined by Wroblewski.",
        "However, while being effective in minimizing over copying (it over copies only in some cases of convergent arcs into one node), incremental copying is ineffective in eliminating early copying as we define it.7 Incremental copying is ineffective in eliminating early copying because when a graph unification algorithm recurses for shared arcs (i.e. the arcs with labels that exist in both input graphs), each created unification operation recursing into each shared arc is independent of other recursive calls into other arcs.",
        "In other words, the recursive calls into shared arcs are non-deterministic and there is no way for one particular recursion into a shared arc to know the result of future recursions into other shared arcs.",
        "Thus even if a particular recursion into one arc succeeds (with minimum over copying and no early copying in Wroblewski's sense), other arcs may eventually fail and thus the copies that are created in the successful arcs are all wasted.",
        "We consider it a drawback of incremental copying schemes that copies that are incrementally created up to the point of failure get wasted.",
        "This problem will be particularly felt when we consider parallel implementations of incremental copying algorithms.",
        "Because each recursion into shared arcs is non-deterministic, parallel processes can be created to work concurrently on all arcs.",
        "In each of the parallelly created processes for each shared arc, another recursion may take place creating more parallel processes.",
        "While some parallel recursive call into some arc may take time (due to a large number of sub-arcs, etc.)",
        "another non-deterministic call to other arcs may proceed deeper and deeper creating a large number of parallel processes.",
        "In the meantime, copies are incrementally created at different depths of subgraphs as long as the subgraphs of each of them are unified successfully.",
        "This way, when a failure is finally detected at some deep location in some subgraph, other numerous processes may have created a large number of copies that are wasted.",
        "Thus, early copying will be a significant problem when we consider the possibility of parallelizing the unification algorithms as well."
      ]
    },
    {
      "heading": "2. Our Scheme",
      "text": [
        "We would like to introduce an algorithm which addresses the criteria for fast unification discussed in the previous sections.",
        "It also handles cycles without over copying (without any additional schemes such as those introduced by [Kogure, 1989]).",
        "As a data structure, a node is represented with eight fields: type, arc-list, comp-arc-list, forward, copy, comp-arc-mark, forward-mark, and copy-mark.",
        "Although this number may seem high for a graph node data structure, the amount of memory consumed is not significantly different from that consumed by other 7'Early copying' will henceforth be used to refer to early copying as defined by us.",
        "algorithms.",
        "Type can be represented by three bits; comp-arc-mark, forward-mark, and copy-mark can be represented by short integers (i.e. fixnums); and comp-arc-list (just like arc-list) is a mere collection of pointers to memory locations.",
        "Thus this additional information is trivial in terms of memory cells consumed and because of this data structure the unification algorithm itself can remain simple.",
        "The representation for an arc is no different from that of other unification algorithms.",
        "Each arc has two fields for 'label' and 'value'.",
        "'Label' is an atomic symbol which labels the arc, and 'value' is a pointer to a node.",
        "The central notion of our algorithm is the dependency of the representational content on the global timing clock (or the global counter for the current generation of unification algorithms).",
        "This scheme was used in [Wroblewski, 1987] to invalidate the copy field of a node after one unification by incrementing a global counter.",
        "This is an extremely cheap operation but has the power to invalidate the copy fields of all nodes in the system simultaneously.",
        "In our algorithm, this dependency of the content of fields on global timing is adopted for arc lists, forwarding pointers, and copy pointers.",
        "Thus any modification made, such as adding forwarding links, copy links or arcs during one top-level unification (unify0) to any node in memory can be invalidated by one increment operation on the global timing counter.",
        "During unification (in unify 1) and copying after a successful unification, the global timing ID fora specific field can be checked by comparing the content of mark fields with the global counter value and if they match then the content is respected; if not it is simply ignored.",
        "Thus the whole operation is a trivial addition to the original destructive unification algorithm (Pereira's and Wroblewski's unify 1).",
        "We have two kinds of arc lists 1) arc-list and comp-arc-list.",
        "Arc-list contains the arcs that are permanent (i.e., usual graph arcs) and comp-arc-list contains arcs that are only valid during one graph unification operation.",
        "We also have two kinds of forwarding links, i.e., permanent and temporary.",
        "A permanent forwarding link is the usual forwarding link found in other algorithms ([Pereira, 1985], [Wroblewski, 1987], etc).",
        "Temporary forwarding links are links that are only valid during one unification.",
        "The currency of the temporary links is determined by matching the content of the mark field for the links with the global counter and if they match then the content of this field is respected8.",
        "As in [Pereira, 1985], we have three types of nodes: 1) :atomic, 2) :bottom9, and 3) :complex.",
        ":atomic type nodes represent atomic symbol values (such as Noun), :bottom type nodes are variables and :complex type nodes are nodes that have arcs coming out of them.",
        "Arcs are stored in the arc-list field.",
        "The atomic value is also stored in the arc-list if the node type is :atomic.",
        ":bottom nodes succeed in unifying with any nodes and the result of unification takes the type and the value of the node that the :bottom node was unified with.",
        ":atomic nodes succeed in unifying with :bottom nodes or :atomic nodes with the same value (stored in the arc-list).",
        "Unification of an :atomic node with a :complex node immediately fails.",
        ":complex nodes succeed in unifying with :bottom nodes or with :complex nodes whose subgraphs all unify.",
        "Arc values are always nodes and never symbolic values because the :atomic and :bottom nodes may be pointed to by multiple arcs (just as in structure sharing of :complex nodes) depending on grammar constraints, and we do not want arcs to contain terminal atomic values.",
        "Figure 2 is the central quasi-destructive graph unification algorithm and Figure 3 shows the algorithm for copying nodes and arcs (called by unify0) while respecting the contents of comp-arc-lists.",
        "The functions Complementarcs(dg 1 ,dg2) and Inter-sectarcs(dgl ,dg2) are similar to Wroblewski's algorithm and return the set-difference (the arcs with labels that exist in dg 1 but not in dg2) and intersection (the arcs with labels that exist both in dg 1 and dg2) respectively.",
        "During the set-difference and set-intersection operations, the content of comp-arc-lists are respected as parts of arc lists if the comp-arc-marks match the current value of the global timing counter.",
        "Dereference-dg(dg) recursively traverses the forwarding link to return the forwarded node.",
        "In doing so, it checks the forward-mark of the node and if the forward-mark value is 9 (9 represents a permanent forwarding link) or its value matches the current",
        "value of *unify-global-counter*, then the function returns the forwarded node; otherwise it simply returns the input node.",
        "Forward(dgl, dg2, :forward-type) puts (the pointer to) dg2 in the forward field of dg 1.",
        "If the keyword in the function call is :temporary, the current value of the *unify-global-counter* is written in the forward-mark field of dg 1 .",
        "If the keyword is :permanent, 9 is written in the forward-mark field of dg 1.",
        "Our algorithm itself does not require any permanent forwarding; however, the functionality is added because the grammar reader module that reads the path equation specifications into dg feature-structures uses permanent forwarding to merge the additional grammatical specifications into a graph structure10.",
        "The temporary forwarding links are necessary to handle reentrancy and cycles.",
        "As soon as unification (at any level of recursion through shared arcs) succeeds, a temporary forwarding link is made from dg2 to dg 1 (dg 1 to dg2 if dg 1 is of type :bottom).",
        "Thus, during unification, a node already unified by other recursive calls to unify I within the same unify() call has a temporary forwarding link from dg2 to dgl (or dgl to dg2).",
        "As a result, if this node becomes an input argument node, dereferencing the node causes dg 1 and dg2 to become the same node and unification immediately succeeds.",
        "Thus a subgraph below an already unified node will not be checked more than once even if an argument graph has a cycle.",
        "Also, during copying done subsequently to a successful unification, two arcs converging into the same node will not cause over copying simply because if a node already has a copy then the copy is returned.",
        "For example, as a case that may cause over copies in other schemes for dg2 convergent arcs, let us consider the case when the destination node has a corresponding node in dgl and only one of the convergent arcs has a corresponding arc in dgl.",
        "This destination node is already temporarily forwarded to the node in dg 1 (since the unification check was successful prior to copying).",
        "Once a copy is created for the corresponding dgl node and recorded in the copy field of dg 1 , every time a convergent arc in dg2 that needs to be copied points to its destination node, dereferencing the node returns the corresponding node in dgl and since a copy of it already exists, this copy is returned.",
        "Thus no duplicate copy is created\".",
        "10We have been using Wroblewski's algorithm for the unification part of the parser and thus usage of (permanent) forwarding links is adopted by the grammar reader module to convert path equations to graphs.",
        "For example, permanent forwarding is done when a :bottom node is to be merged with other nodes.",
        "11Copying of dg2 arcs happens for arcs that exist in dg2 but not in dgl (i.e., Complementarcs(dg2,dg1)).",
        "Such arcs are pushed to the comp-arc-list of dgl during unify 1 and are copied into the arc-list of the copy during subsequent copying.",
        "If there is a cycle or a convergence in arcs in dgl or in arcs in dg2 that do not have corresponding arcs in dgl, then the mechanism is even simpler than the one discussed here.",
        "A copy is made once, and the same copy is simply returned",
        "Figure 4 shows a simple example of quasi-destructive graph unification with dg2 convergent arcs.",
        "The round nodes indicate atomic nodes and the rectangular nodes indicate bottom (variable) nodes.",
        "First, top-level unify!",
        "finds that each of the input graphs has arc-a and arc-b (shared).",
        "Then unify 1 is recursively called.",
        "At step two, the recursion into arc-a locally succeeds, and a temporary forwarding link with time-stamp(n) is made from node [12 to node s. At the third step (recursion into arc-b), by the previous forwarding, node 02 already has the value s (by dereferencing).",
        "Then this unification returns a success and a temporary forwarding link with time-stamp(n) is created from an immediate return to unib-dg.",
        "17I.e., the existing copy of the node.",
        "18Creates an empty node structure.",
        "node 111 to node s. At the fourth step, since all recursive unifications (unify 1 s) into shared arcs succeeded, top-level unify 1 creates a temporary forwarding link with time-stamp(n) from dag2's root node to dag 1 's root node, and sets arc-c (new) into comp-arc-list of clag 1 and returns success ('*T*).",
        "At the fifth step, a copy of dagl is created respecting the content of comp-arc-list and dereferencing the valid forward links.",
        "This copy is returned as a result of unification.",
        "At the last step (step six), the global timing counter is incremented (n n+1).",
        "After this operation, temporary forwarding links and comp-arc-lists with time-stamp (< n+1) will be ignored.",
        "Therefore, the original dag 1 and dag2 are recovered in a constant time without a costly reversing operations.",
        "(Also, note that recursions into shared-arcs can be done in any order producing the same result).",
        "As we just saw, the algorithm itself is simple.",
        "The 'Unifs' represents the total number of unifications dur-basic control structure of the unification is similar to ing a parse (the number of calls to the top-level 'unifyPereira's and Wroblewski's unify 1.",
        "The essential dif- dg', and not 'unify1').",
        "`I.JSrate' represents the ratio ference between our unifyl and the previous ones is of successful unifications to the total number of uni-that our unify 1 is non-destructive.",
        "It is because the fications.",
        "We parsed each sentence three times on a complementarcs(dg2,dg 1) are set to the comp-arc-list Symbolics 3620 using both unification methods and of dg 1 and not into the arc-list of dgl • Thus, as soon took the shortest elapsed time for both methods (7' as we increment the global counter, the changes made represents our scheme, 'W' represents Wroblewski's to dg 1 (i.e., addition of complement arcs into comp algorithm with a modification to handle cycles and arc-list) vanish.",
        "As long as the comp-arc-mark value variables\").",
        "Data structures are the same for both uni-matches that of the global counter the content of the fication algorithms (except for additional fields for a comp-arc-list can be considered a part of arc-list and node in our algorithm, i.e., comp-arc-list, comp-arc-therefore, dg 1 is the result of unification.",
        "Hence the mark, and forward-mark).",
        "Same functions are used to name quasi-destructive graph unification.",
        "In order to interface with Earley's parser and the same subfunc-create a copy for subsequent use we only need to make lions are used wherever possible (such as creation and a copy of dg 1 before we increment the global counter access of arcs) to minimize the differences that are not while respecting the content of the comp-arc-list of purely algorithmic.",
        "'Number of copies' represents the dgl.",
        "number of nodes created during each parse (and does Thus instead of calling other unification functions not include the number of arc structures that are cre-(such as unify2 of Wroblewski) for incrementally cre- ated during a parse).",
        "'Number of conses' represents the ating a copy node during a unification, we only need amount of structure words consed during a parse.",
        "This to create a copy after unification.",
        "Thus, if unifica- number represents the real comparison of the amount tion fails no copies are made at all (as in [ICarttunen, of space being consumed by each unification algorithm 1986]'s scheme).",
        "Because unification that recurses (including added fields for nodes in our algorithm and into shared arcs carries no burden of incremental copy arcs that are created in both algorithms).",
        "ing (i.e., it simply checks if nodes are compatible), as We used Earley's parsing algorithm for the experi-the depth of unification increases (i.e., the graph gets ment.",
        "The Japanese grammar is based on HPSG anal-larger) the speed-up of our method should get conspic- ysis ([Pollard and Sag, 1987]) covering phenomena uous if a unification eventually fails.",
        "If all unifica- such as coordination, case adjunction, adjuncts, con-tions during a parse are going to be successful, our trol, slash categories, zero-pronouns, interrogatives, algorithm should be as fast as or slightly slower than WH constructs, and some pragmatics (speaker, hearer Wroblewski's algorithm19.",
        "Since a parse that does not relations, politeness, etc.)",
        "([Yoshimoto and Kogure, fail on a single unification is unrealistic, the gain from 1989]).",
        "The grammar covers many of the important our scheme should depend on the amount of unification linguistic phenomena in conversational Japanese.",
        "The failures that occur during a unification.",
        "As the number grammar graphs which are converted from the path of failures per parse increases and the graphs that failed equations contain 2324 nodes.",
        "We used 16 sentences get larger, the speed-up from our algorithm should be from a sample telephone conversation dialog which come more apparent.",
        "Therefore, the characteristics of range from very short sentences (one word, i.e., iie our algorithm seem desirable.",
        "In the next section, we `no') to relatively long ones (such as soredehakochi-will see the actual results of experiments which com- rakarasochiranitourokuyoushiw000kuriitashimasu'In pare our unification algorithm to Wroblewski's algo- that case, we [speaker] will send you [hearer] the reg-rithm (slightly modified to handle variables and cycles istration form.').",
        "Thus, the number of (top-level) uni-that are required by our HPSG based grammar).",
        "fications per sentence varied widely (from 6 to over 500)."
      ]
    },
    {
      "heading": "3. Experiments",
      "text": [
        "Table 1 shows the results of our experiments using an HPSG-based Japanese grammar developed at AIR for a conference registration telephone dialogue domain.",
        "\"Cycles can be handled in Wroblewski's algorithm by checking whether an arc with the same label already exists when arcs are added to a node.",
        "And if such an arc already exists, we destructively unify the node which is the destination of the existing arc with the node which is the destination of the arc being added.",
        "If such an arc does not exist, we simply add the arc.",
        "([Kogure, 1989]).",
        "Thus, cycles can be handled very cheaply in Wroblewski's algorithm.",
        "Handling variables in Wroblewski's algorithm is basically the same as in our algorithm (i.e.. Pereira's scheme), and the addition of this functionality can be ignored in terms of comparison to our algorithm.",
        "Our algorithm does not require any additional scheme to handle cycles in input dgs."
      ]
    },
    {
      "heading": "4. Discussion: Comparison to Other Approaches",
      "text": [
        "The control structure of our algorithm is identical to that of [Pereira, 1985].",
        "However, instead of storing changes to the argument dags in the environment we store the changes in the dags themselves non-destructively.",
        "Because we do not use the environment, the log(d) overhead (where d is the number of nodes in a dag) associated with Pereira's scheme that is required during node access (to assemble the whole dag from the skeleton and the updates in the environment) is avoided in our scheme.",
        "We share the principle of storing changes in a restorable way with EICarttunen, 19861's reversible unification and copy graphs only after a successful unification.",
        "Karttunen originally introduced this scheme in order to replace the less efficient structure-sharing implementations ([Pereira, 1985], [ICarttunen and Kay, 1985]).",
        "In ICarttunen's method21, whenever a destructive change is about to be made, the attribute value pairs22 stored in the body of the node are saved into an array.",
        "The dag node structure itself is also saved in another array.",
        "These values are restored after the top level unification is completed.",
        "(A copy is made prior to the restoration operation if the unification was a successful one.)",
        "The difference between Karttunen's method and ours is that in our algorithm, one increment to the global counter can invalidate all the changes made to nodes, while in ICarttunen's algorithm each node in the entire argument graph that has been destructively modified must be restored separately by retrieving the attribute-values saved in an",
        "221.e., arc structures: 'label' and 'value' pairs in our vocabulary.",
        "array and resetting the values into the dag structure skeletons saved in another array.",
        "In both ICarttunen's and our algorithm, there will be a non-destructive (reversible, and quasi-destructive) saving of intersection arcs that may be wasted when a subgraph of a particular node successfully unifies but the final unification fails due to a failure in some other part of the argument graphs.",
        "This is not a problem in our method because the temporary change made to a node is performed as pushing pointers into already existing structures (nodes) and it does not require entirely new structures to be created and dynamically allocated memory (which was necessary for the copy (create-node) operation).",
        "23 [Godden, 19901 presents a method of using lazy evaluation in unification which seems to be one successful actualization of [Karttunen and Kay, 19851's lazy evaluation idea.",
        "One question about lazy evaluation is that the efficiency of lazy evaluation varies depending upon the particular hardware and programming language environment.",
        "For example, in CommonLisp, to attain a lazy evaluation, as soon as a function is delayed, a closure (or a structure) needs to be created receiving a dynamic allocation of memory (just as in creating a copy node).",
        "Thus, there is a shift of memory and associated computation consumed from making copies to making closures.",
        "In terms of memory cells saved, although the lazy scheme may reduce the total number of copies created, if we consider the memory consumed to create closures, the saving may be significantly canceled.",
        "In terms of speed, since delayed evaluation requires additional bookkeeping, how schemes such as the one introduced by [Godden, 1990] would compare with non-lazy incremental copying schemes is an open question.",
        "Unfortunately Godden offers a comparison of his algo-\"Although, in Karttunen's method it may become rather expensive if the arrays require resizing during the saving operation of the subgraphs.",
        "rithm with one that uses a full copying method (i.e. his Eager Copying) which is already significantly slower than Wroblewski's algorithm.",
        "However, no comparison is offered with prevailing unification schemes such as Wroblewski's. With the complexity for lazy evaluation and the memory consumed for delayed closures added, it is hard to estimate whether lazy unification runs considerably faster than Wroblewsld's incremental copying scheme.24"
      ]
    },
    {
      "heading": "5. Conclusion",
      "text": [
        "The algorithm introduced in this paper runs significantly faster than Wroblewski's algorithm using Ear-ley's parser and an HPSG based grammar developed at AIR.",
        "The gain comes from the fact that our algorithm does not create any over copies or early copies.",
        "In Wroblewsld's algorithm, although over copies are essentially avoided, early copies (by our definition) are a significant problem because about 60 percent of unifications result in failure in a successful parse in our sample parses.",
        "The additional set-difference operation required for incremental copying during unify2 may also be contributing to the slower speed of Wrob-lewski's algorithm.",
        "Given that our sample grammar is relatively small, we would expect that the difference in the performance between the incremental copying schemes and ours will expand as the grammar size increases and both the number of failures 25 and the size of the wasted subgraphs of failed unifications become larger.",
        "Since our algorithm is essentially parallel, parallelization is one logical choice to pursue further speedup.",
        "Parallel processes can be continuously created as unifyl recurses deeper and deeper without creating any copies by simply looking for a possible failure of the unification (and preparing for successive copying in case unification succeeds).",
        "So far, we have completed a preliminary implementation on a shared memory parallel hardware with about 75 percent of effective parallelization rate.",
        "With the simplicity of our algorithm and the ease of implementing it (compared to both incremental copying schemes and lazy schemes), combined with the demonstrated speed of the algorithm, the algorithm could be a viable alternative to existing unification algorithms used in current 2'That is, unless some new scheme for reducing excessive copying is introduced such as structure-sharing of an unchanged shared-forest ([Kogure, 1990]).",
        "Even then, our criticism of the cost of delaying evaluation would still be valid.",
        "Also, although different in methodology from the way suggested by Kogure for Wroblewslci's algorithm, it is possible to attain structure-sharing of an unchanged forest in our scheme as well.",
        "We have already developed a preliminary version of such a scheme which is not discussed in this paper.",
        "For example, in our large-scale speech-to-speech translation system under development, the USrate is estimated to be under 20%, i.e., over 80% of unifications are estimated to be failures.",
        "natural language systems."
      ]
    },
    {
      "heading": "ACKNOWLEDGMENTS",
      "text": [
        "The author would like to thank Akira Kurematsu, Tsuyoshi Morimoto, Hitoshi Iida, Osamu Furuse, Masaald Nagata, Toshiyuki Takezawa and other members of ATR and Masaru Tomita and Jaime Carbonell at CMU.",
        "Thanks are also due to Margalit Zabludowski and Hiroald Kitano for comments on the final version of this paper and Takako Fujiolca for assistance in implementing the parallel version of the algorithm."
      ]
    },
    {
      "heading": "Appendix: Implementation",
      "text": [
        "The unification algorithms, Earley parser and the HPSG path equation to graph converter programs are implemented in CommonLisp on a Symbolics machine.",
        "The preliminary parallel version of our unification algorithm is currently implemented on a Sequent/Symmetry closely-coupled shared-memory parallel machine running Allegro CLiP parallel CommonLisp."
      ]
    }
  ]
}
