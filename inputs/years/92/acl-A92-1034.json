{
  "info": {
    "authors": [
      "John R. R. Leavitt"
    ],
    "book": "Applied Natural Language Processing Conference",
    "id": "acl-A92-1034",
    "title": "MORPHE: A Practical Compiler for Reversible Morphology Rules",
    "url": "https://aclweb.org/anthology/A92-1034",
    "year": 1992
  },
  "references": [
    "acl-A88-1031",
    "acl-P87-1010"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "Morph~ is a Common Lisp compiler for reversible inflectional morphology rules developed at the Center for Machine Translation at Carnegie Mellon University.",
        "This paper describes the Morph~ processing model, its implementation, and how it handles some common morphological processes."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "The input to the Morph~ rule compiler is a rule file containing inflection rules, the specification of a discrimination network of morphological forms, and definitions of certain classes of strings and string mappings.",
        "This rule file can be compiled into either a word generation program or a word parsing program.",
        "The word generation program produces an inflected surface form from a feature structure, 1 while the word parsing program takes an inflected form and produces a set of feature structures for valid parses.",
        "2"
      ]
    },
    {
      "heading": "2 The Processing Model",
      "text": [
        "In Morph~ the process of inflection is seen as consisting of two basic steps: 1.",
        "By making a series of feature and orthographically-based decisions, choose an inflection procedure.",
        "2.",
        "Apply that procedure to the uninflected root.",
        "To implement the first step, Morph~ uses a feature-based discrimination network with orthographically-based inflection rules at the leaves.",
        "Each node in the discrimination network specifies a set of features common to all of its descendants.",
        "For example, at the top of a subtree for nouns, a node might contain the features { (cat: noun) } which wouldbe inherited by the nodes for single-noun and plural-noun, and SO on.",
        "That Morph~ explicitly divides feature-based decisions from orthographic decisions has two important consequences: ical and/or morphological features (e.g. paradigm) can be checked alongside syntactic features (e.g. category).",
        "* A single morpheme can be split across several leaf nodes if feature tests below the morpheme level are necessary.",
        "As shown in Figure 1, a rule consists of a set of clauses, each of which contains orthographic pattern on the left-hand side and a set of inflection operations on the right-hand side.",
        "* Orthographic patterns.",
        "The orthographically-based decisions are made by matching against regular expression-based patterns.",
        "Standard regular expression operations (i.e. Kleene closure, wildcards, etc.)",
        "are included.",
        "In addition, non-standard operations for matching against a predefined class of strings 3, and binding and retrieval of portions of the word 4 are included.",
        "* Inflection Operations.",
        "The application of the inflection procedure is implemented as the sequential execution of the inflection operations in the right-hand side.",
        "The inflection operations include affixation, deletion, and the combined operation of \"replacement\" in prefix, suffix, and infix positions.",
        "Also included is an operation for performing regular string-to-string mapping within a word.5 2.1 The Rule Formalism As shown in Figure 1, a rule consists of a set of clauses, each of which contains orthographic pattern on the left-hand side and a set of inflection operations on the right-hand side.",
        "* Orthographic patterns.",
        "The orthographically-based decisions are made by matching against regular expression-based patterns.",
        "Standard regular expression operations (i.e. Kleene closure, wildcards, etc.)",
        "are included.",
        "In addition, non-standard operations for matching against a predefined class of strings 3, and binding and retrieval of portions of the word 4 are included.",
        "* Inflection Operations.",
        "The application of the inflection procedure is implemented as the sequential execution of the inflection operations in the right-hand side.",
        "The inflection operations include affixation, deletion, and the combined operation of \"replacement\" in prefix, suffix, and infix positions.",
        "Also included is an operation for performing regular string-to-string mapping within a word.5"
      ]
    },
    {
      "heading": "3 Processing",
      "text": [
        "During generation, processing begins with a feature structure entering the tree at the root node, and trickling down to the appropriate leaf node.",
        "Once at the leaf node, the word root is compared against each clause's orthographic pattern in turn.",
        "When a match is found, the inflection procedure for that clause is applied to the word root and the result is returned.",
        "During parsing, processing begins with an inflected form entering the tree at each leaf node where the inflection rules are applied \"in reverse\" and the non-passing results discarded.",
        "Applying a rule \"in reverse\" means that the word is matched against the inflected forms and the operations perform deinflection, rather than vice versa.",
        "After all clauses in all leaves have been tried, and presumably most results have been discarded, each remaining parse follows the network upwards, collecting the features of each node it traverses until a set of full feature structures arrives at the root node.",
        "When this process is finished, a lexicon check is made to ensure that only valid words (of the proper category, paradigm, etc.)",
        "are kept."
      ]
    },
    {
      "heading": "4 Handling Common Morphological",
      "text": [
        "This section explains how common morphological processes are handled by Morph~."
      ]
    }
  ]
}
