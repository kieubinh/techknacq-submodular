{
  "info": {
    "authors": [
      "Luis Damas"
    ],
    "book": "International Conference on Computational Linguistics",
    "id": "acl-C92-1020",
    "title": "On the Satisfiability of Complex Constraints",
    "url": "https://aclweb.org/anthology/C92-1020",
    "year": 1992
  },
  "references": [
    "acl-C90-3002",
    "acl-E91-1030",
    "acl-J91-2001",
    "acl-P87-1033",
    "acl-P88-1035"
  ],
  "sections": [
    {
      "text": [
        "cal information for the German words die and Koffer.",
        "Using this information and the standard axioms of Feature Logics we can rewrite (1) as follows",
        "Again, from the atomic top conjunct in (4) we can refine (2) to obtain = [gend = mascl peps = 3 nuns = pl after which (4) reduces to [(f case).",
        "nom V (f case) = ace] A (lease) 0 did Since no atomic top conjunct remains we would now have to resort to the exponential algorithm to check the satisfiability of (6), which, as it will be shown in the next section, is equivalent to the satisfiability of (I).",
        "However we should point out that the above process, which takes at most quadratic time since, by using adequate data structures, each rewrite can be done in linear time and the number of rewrites is limited by the size of the formula, has succeed in drastically reducing the size of the original formula."
      ]
    },
    {
      "heading": "3 A rewriting system",
      "text": [
        "In tins section we introduce a rewriting system, which is essentially an adaptation to feature structures of the one presented in [DMV91a] for constraints on first order terms.",
        "The purpose of this rewriting system is to formalize the rewriting process illustrated in the previous section.",
        "The rules of the rewriting system, which are justified by theorems of the logic underlying features structures, have been designed with the aim of bringing out conjunctions to the top while avoiding more than a linear growth of the size of constraints.",
        "To formalize the rewriting system we will use Feature Logics [Smo89] and its notation.",
        "Thus we will use a and b to denote atoms, Ito denote a feature name, x and y to denote variables and s and t to denote either an atom or a variable.",
        "We start by recalling the notion of solved feature clause of [Smo89] which is the feature logic version of the standard definition of solved form [Iler30, Ma1i881.",
        "A set of formulae C is said to be a solved feature clause if it satisfies the following conditions: I. every constraint in C has one of the following forms: fx=s, fx 1,xs, xs",
        "2. if x=s is in C then x occurs exactly once in 3. if fx=s and fxt are in C then s 4. if fx is in C, then C contains no constraint fxAs 5. if x0s is in C, then x s. Smolka also shows that any satisfiable set C of, possibly negated, atomic formulae can be reduced to solved form by using the following simplification rules, which again are the feature logic version of Herbrand's rules for solving sets of equations of first order terms: (2) (5) (6) Acres DE COL1NG-92, NanrEs, 23-28 Aoi:rr 1992109 Nor:.",
        "OF COLING-92, NarrrEs, AUG. 23-28, 1992 straint produced before an exponential satisfaction algorithm is applied.",
        "Now given a conjunction C A C' of feature constraints it is easy to prove, using arguments similar to the ones used in the previous section, that a sufficient condition for the conjunction to be satisfiable if each of the conjuncts is independently satisfiable, can be expressed as follows: I. any variable x which occurs in C in an atomic formula x_-s or sx does not occur in C' and vice-versa 2 for every variable x and feature f such that fx occurs in 6', fx does not occur in C\" and vice-versa.",
        "Note that given a conjunctive set of constraints it is possible to partition it into minimal disjoint sets satisfying the conditions above in quadratic time.",
        "Using the above criteria results in achieving the objective described in [MK91] of separating not only the treatment of constraints dealing with completely independent linguistic descriptions but also of independent phenomena for the same the linguistic descriptions."
      ]
    },
    {
      "heading": "5 Conclusions",
      "text": [
        "The strategy for handling complex constraints described in this paper has been successfully put to use in different CLG implementations.",
        "One of the advantages of using a rewrite system is that it is easily extended to other atomic constraints like the ones in CLG(2) dealing with lists.",
        "Similarly it can be adapted to cope with the extensions to feature constraints proposed in [joh911."
      ]
    },
    {
      "heading": "References",
      "text": [
        "sur is theorie de la demonstration, Tlise de Doctoral.",
        "Univ.",
        "Paris, Paris, 1930. fl oh91] Mark Johnson.",
        "Features and formulae.",
        "Computational Linguistics, 17(2), 1991. tKas87i It.",
        "T. Kasper.",
        "A unification method for disjunctive feature descriptions.",
        "In 25th Annual Meeting of the Association for Computational Linguistics, Stanford, CA, 1987.",
        "[Kay85] Martin Kay.",
        "Parsing in functional unification grammar.",
        "In David It.",
        "Dowty, Lauri Karttunen, and Arnold M. Zwicky, editors, Natural Language Parsing.",
        "Ellis Horwood/Wiley, 1985. also appears in [GJ W86]."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "Most of the more recent formalisms in Computational Linguistics involve complex constraints, i.e. involving either disjunction or and negation of equality constraints [Kay85, KB82, PS87).",
        "From a practical point of view, the main problem arising from the introduction of complex constraints is due to the NP-hardness of checking whether a given set of constraints is satisfiable and, in the affirmative case, of generating the set of minimal models which satisfy the constraints.",
        "Since the NP-hardness of the problem tends to manifest in practical applications in a dramatic way there were several proposals of algorithms to minimize this problem [Kas87, ED88, MK91].",
        "However, in our opinion, any practical approach to the problem should rely on applying an exponential satisfaction algorithm as seldom as possible and also, when that cannot be avoided, to reduce as much as possible the size of the input formulae to which the algorithm is applied.",
        "A classical way in which one can reduce the size of input formulae is by factoring, i.e. ex pressing it as a conjunction of smaller formulae which do not have variables in common.",
        "As a matter of fact if instead of checking the satisfiability of a formula of length nk we check the satisfiability of n formulae of size k we are gaining an exponential reduction in time.",
        "This strategy is also explored in [MK91].",
        "Another way of reducing the size of input formulae which has been used in CLG implementations [DV89, BDMV90, DMV91b), and which can be combined with the previous approaches, is to build a partial model of the input formula and to apply the algorithm to the remaining constraints.",
        "Since in many cases this is able to do away with all the constraints this also achieves the goal of using the exponential satisfaction algorithm as seldom as possible.",
        "This method can also be seen as a generalization of steps 1 and 2 of the algorithm described in [Kas87], while avoiding some of its pitfalls.",
        "In this paper we start by showing, by translating to the feature logics context the methods for first order terms introduced in [DMV91a, DMV91b], how the CLG approach to rewriting constraints while constructing a partial model can greatly reduce the size of the original constraints and thus contribute to reduce the computational problem.",
        "After that will review the notion of factorization for feature logic formulae showing under which conditions it can be done."
      ]
    },
    {
      "heading": "2 An example",
      "text": [
        "From an intuitive point of view, our approach attempts to explore the fact that complex constraints arising from combining descriptions of linguistic objects, tend to take the form of a large conjunction of smaller constraints.",
        "To illustrate this approach we will use the following example from [MK911 originated by conjoining the agreement features of the lexi-Acres DE COLING-92, NANTES, 23-28 AODT 19921 OSPitoc.",
        "OF COLING-92, NANrrEs, Aix.",
        "23-28, 1992 [KB82] R. Kaplan and J.",
        "13resban.",
        "Lexical functional grammar: A formal system for grammatical representation.",
        "In Joan Bresnan, editor, The Mental Representation of Grammatical Relations.",
        "MIT Press, 1982.",
        "[Mah88] Michael J. Maher.",
        "Complete axiomatizations of the algebras of finite, rational and infinite trees.",
        "Technical report, IBM Thomas J. Watson Research Center, P.O.",
        "Box 709, Yorktown Heights, NY 10598, U.S.A., 1988.",
        "[MK911 John T. Maxwell and Ronald M. Kaplan.",
        "A method for disjunctive constraint satisfaction.",
        "In Masaru Tornita, editor, Current Issues in Parsing Technology.",
        "Kluwer Academic Publishers, 1991.",
        "1.",
        "{si.=s) U C ^U [s/SIC if s # s and x occurs in C 2.",
        "{ ci=s) U C ^U C 3.",
        "-Lffxr-L-t}UC{fx=L-s,s-=1} UC 4.",
        "Is=s) U C --^ C 5.",
        "{fa I}UC--iC 6.",
        "{iii#s}UCfx#al U C 7.",
        "{a#b}UCC if a # b.",
        "We call a solved feature clause positive if it includes only constraints of the form fxi-L-s and We can now make precise the notion of partial model used in the previous section as a positive solved feature clause M. Note that the form required for M is essentially the one produced by an unification algorithm for feature structures.",
        "Given a set of constraints C we say that a feature clause C' is a minimal model of C if every model of C' is a model of C and no proper subset of C' satisfies this condition.",
        "From Theorem 5.6 of [Smo89] we can conclude that for any C there is a finite number of minimal models of C. The aim of the CLG rewriting system is to produce from a set of constraints Cs a partial model M and a smaller set of constraints C such that any minimal model of Co can be obtained by conjoining (i.e. \"unifying\") a minimal model of C with M and moreover for any minimal model of C the reunion M U C is satisfiable, We start by defining a set of rewriting rules --,AA for terms and constraints:",
        "C V false ---,m C We now define a rewriting system for pairs (M, C) by first closing C under ,.A4 and then using the following rules",
        "with the convention that after each application of one of the rewrite rules the new partial model is reduced to solved form and the resulting set of constraints is closed under As in [DMV91al the rewrite process could be extended to use negated atomic constraints in C. We will now sketch the proof of the claims made above about the rewriting system.",
        "We will first argue that if given an initial set of constraints Co we apply the rewriting system to (0, Co) to obtain (M, C) then Co (more precisely the conjunct of all the constraints in Co) is equivalent to M UC.",
        "As a matter of fact this follows from the fact that each rewrite rule is associated with a similar meta-theorem of First Order Logic and/or the axioms of Feature Logics.",
        "As for the other property of the rewriting system, namely that the minimal models of Co are obtained by conjoining M with those of C, we will only sketch the argument of the proof which follows from the fact that if some minimal model C' of C was inconsistent with M then, after reducing C to disjunctive form, at least one of the disjunctions should subsume C' and thus should be inconsistent with M while admiting itself a model.",
        "Now, since every atomic formula occurring in the disjunction already occured C it is possible to derive a contradiction with the hypothesis that C was closed under To see this we notice that each disjunct in the disjunctive form of C can be regarded as feature clause C\".",
        "Now if M U C\" was unsatisfiable then some sequence of simplification rules should lead to a clash.",
        "Now, noticing that any atomic formula in C\" must already be present in C, it is easy to check that any sequence of simplification rules would involve only formulae from C\" and a clash with a formula in M would thus be impossible."
      ]
    },
    {
      "heading": "4 On the factorization of feature constraints",
      "text": [
        "Although the rewriting system introduced hi the previous section can be seen as a factorization of the original constraint it is also important, in accordance with the discussion in the introduction, to further factorizing the con-ACTES DE COLING-92, NAMES, 23-28 AohT 19921 1 0PRoc.",
        "OF COLING-92, Nmstais, AuG. 23-28, 1992"
      ]
    }
  ]
}
