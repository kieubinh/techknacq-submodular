{
  "info": {
    "authors": [
      "Marc Dymetman"
    ],
    "book": "International Conference on Computational Linguistics",
    "id": "acl-C92-1057",
    "title": "A Generalized Greibach Normal Form for Definite Clause Grammars",
    "url": "https://aclweb.org/anthology/C92-1057",
    "year": 1992
  },
  "references": [
    "acl-P83-1021",
    "acl-P85-1018",
    "acl-P89-1029"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "An arbitrary definite clause grammar can be transfonned into a so-called Generalized Greibach Normal Form (GGNF), a generalization of the classical Greibach Normal Form (GNF) for context-free grammars.",
        "The normalized definite clause grammar is declaratively equivalent to the original definite clause grammar, that is, it assigns the same analyses to the same strings.",
        "Offline-parsability of the original grammar is reflected in an elementary textual property of the transformed grammar.",
        "When this property holds, a direct (top-down) Pro-log implementation of the normalized grammar solves the parsing problem: all solutions are enumerated on backtracking and execution terminates.",
        "When specialized to the simpler case of context-free grammars, the GGNF provides a variant to the GNF, where the transformed context-free grammar not only generates the same strings as the original grammar, but also preserves their degrees of ambiguity (this last property does not hold for the GNF).",
        "The GGNF seems to be the first normal form result for DCGs.",
        "It provides an explicit factorization of the potential sources of undecidability for the parsing problem, and offers valuable insights on the computational structure of unification grammars in general."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "From the point of view of decidability, the parsing problem with a definite clause grammar is much more complex than the corresponding problem with a context-free grammar.",
        "The parsing problem with a context-free grammar is decidable, i.e. there exists an algorithm which determines whether a given string is accepted or not by the grammar:1 by contrast, the parsing problem with a definite clause grammar is undecidable, even if the auxiliary Prolog predicates are restricted to be unifications.2 'For instance the standard top-down parsing algorithm using a GNF of the grammar.",
        "'This assumption, or a similar one, is always made when the decidability properties of logical (or unification) grammars are studied.",
        "The reason is simple: if the auxiliary predicates are defined through an unrestricted Prolog program, there is no means of guaranteeing that calling some auxiliary predicate will not result in nontermination, for reasons quite independent from the structure of the grammar under consideration.",
        "In other words, there does not exist, in general, an algorithm for deciding whether a definite clause grammar DCG1 accepts a string String, i.e. whether there exists some linguistic structure S such that DCG1 \"analyses String into S\".",
        "On the other hand, under the condition that DCGI is offline-parsable, that is, under the condition that the context-free skeleton of DCG1 is not infinitely ambiguous, then the parsing problem is indeed decidable [7].",
        "The fact that the parsing problem with DCG1 is decidable in theory should be carefully distinguished from the fact that a given algorithm for parsing is able to exploit this potentiality.",
        "A parsing algorithm for which this is the case, that is, an algorithm which is able, for any offline-parsable DCG1, to decide whether a given string is accepted or not by DCGi is said to be strongly stable [7].",
        "Most parsing algorithms are not strongly stables, a notable exception being the \"Earley deduction\" algorithm [7], once modified according to the proposals in [10].4 Top-down implementations – and in particular the standard Prolog implementation of a DCG – are especially fragile in this respect, for they fail to terminate as soon as the grammar contains a left-recursive rule such",
        "In [2], automatic local transformations were performed on a DCG in order to eliminate some limited, but frequent in practice, types of left-recursion in such a way that the resulting grammar could be directly implemented in Prolog.",
        "This initial work led us naturally to the more general question: Question: Is it possible to automatically transform an assumption that auxiliary predicates are unifications takes care of this interfering problem.",
        "3 An important class of offline-pa/sable grammars – which we will call here the class of explicitly opine-parsable grammars – is the class of DCGs whose context free skeleton is a proper context-free grammar, that is, a grammar without rules of the type A ti [ 1 (empty productions) or of the type A B (chain rules) [I].",
        "This subclass is much less problematic to parse than the full class of offline-parsable DCGs (for instance a left-corner parsing algorithm will work).",
        "However, it is an easy consequence of the GGNF result that, for any offline-parsable DCG, there exists an explicitly offline-parsable DCG equivalent to it.",
        "'Stuart Shieber, personal communication.",
        "arbitrary offline-parsable DCGI into an equivalent DCG2 in such a way that the standard top-down execution of DCG2 terminates (in success or failure) for any given input string?",
        "To answer this question (in the positive), we have taken an indirect route, and, adapting to the case of definite clause grammars some of the standard techniques used to transform context-free grammars into GNP, 5 have established the following results:",
        "1.",
        "Generalized Greibach Normal Form for definite clause grammars It is possible to transform any definite clause grammar DCG1 (offline-parsable or not) into a definite clause grammar DCG2 equivalent to DCG1 – that is, assigning the same analyses to the same strings – and which is in a certain form, called the Generalized Greibach Normal Form, or GGNF, of DCGI.",
        "2.",
        "Explicit representation of offline-parsabilily in the GGNF The online-parsability of DCGI is equivalent to an elementary textual property of DCG2: the so-called \"unit subgrammar\" contains no cycle, i.e. no nonterminal calling itself directly or indirectly.'",
        "3.",
        "Termination condition for top-down parsing with the GGNF If DCG1 is offline-parsable, and such that its auxiliary predicates it are unifications, then, for any input String, the standard top-down (Prolog) execution of DCG2 enumerates all solutions to the parsing problem for Siring and terminates."
      ]
    },
    {
      "heading": "2 The Generalized Greibach Normal Form for Definite Clause Grammars",
      "text": []
    },
    {
      "heading": "2.1 Definite Grammar Schemes",
      "text": [
        "As usually defined (see [61), a definite clause grammar consists in two separate sets of clauses:",
        "1.",
        "Nonterminal clauses, written as: ,",
        "where a is a nonterminal, 7-4 are terms (variables, constants, or complex terms), and a is a sequence of \"terminal goals\" [term], of \"nonterminal goals\" b(7' ,...,T,',.",
        "), and of \"auxiliary predicate goals\" {p(T1' 'See the Appendix for some indications on the methods used.",
        "6 Thus, a side-effect of the GGNF is to provide a decision procedure for the problem of knowing whether a DCG is ofiline-parsable or not.",
        "This is equivalent to deciding whether a context-free grammar is infinitely ambiguous or not, a problem the decidability of which seems to be \"quasi-folk-knowledge\", although I was innocent of this until the fact was brought to my attention by Yves Schabes, among others: the proof is more or less implicit in the usual technique to make a CFG \"cycle-free\", [1, p. 150] .",
        "See also [4] for a special case of this problem.",
        "(Caveat.",
        "The notion of \"cycle\" in \"cycle-free\" is technically different from the notion used here, which simply means: cycle in the graph associated with the relation \"callable from\".",
        "See note 10.)",
        "2.",
        "Auxiliary clauses, constituting an autonomous definite program, defining the auxiliary predicates appearing in the right-hand sides of nontenninal mles.",
        "These clauses are written: P(71 • • Tt) where h is some sequence of predicate goals.",
        "A definite grammar scheme DGS is syntactically identical to a definite clause grammar, except for the fact that:",
        "1.",
        "The Ti arguments appearing in the nonterminal and auxiliary predicate goals are restricted to being variables: no constants or complex terms arc allowed; 2.",
        "Only nonterminal clauses appear in the definite grammar scheme, but no auxiliary clause; the auxiliary predicates which may appear in the right-hand sides of clauses do not receive a definition.",
        "A definite grammar scheme can be seen as an un-completely specified definite clause grammar, that is, a definite clause grammar \"lacking\" a definition for the auxiliary predicates {p(Xt , , X„)} that it \"uses\".",
        "The auxiliary predicates are \"free\": the interpretation of p is not fixed a priori, but can be an arbitrarily chosen n-my relation on a certain Herbrand universe of tenns.7 Example 1 The following clauses define a definite grammar scheme DGSI:8",
        "In this definite grammar scheme, only variables appear as arguments; the auxiliary predicates pl, p2, p3 and q do not receive a definition.",
        "If a definite program defining these auxiliary predicates is added to the definite grammar scheme, one obtains a full-fledged definite clause grammar, which can be interpreted in the usual manner.",
        "Conversely, every definite clause grammar can be seen as the conjunction of a definite grammar schetne and of a definite clause progratn.",
        "In order to do so, a minor transfommtion must be performed: each complex term T appearing as an argument in the head or body of a nonterminal clause must be replaced by a variable X, this variable being implicitly constrained to unify with T through the addition of an ad-hoc unification goal in the body of the clause (see [31).",
        "?The domain of interpretation can in fact be any set.",
        "Taking it to be the Ilerbrand universe over a certain vocabulary of functional symbols permits to \"simulate\" a DCG, by fixing the interpretation of the free auxiliary predicates in this domain.",
        "Another linguistically relevant domain of interpretation is the set of directed acyclic graphs built over a certain vocabulary of labels and atomic symbols, which pemnts the simulation of unification grammars of the PATR-II type.",
        "6 The usual symbol for the initial nonterminal is a; we prefer to use al for reasons of notational coherence.",
        "Example 2 Consider the following definite clause grammar:",
        "pl(ni1).",
        "P3(0.",
        "Let us define two new predicates p2 and q by the following clauses:",
        "then the definite clause grammar above can be rewritten as:",
        "that is, in the form of a definite grammar scheme to which has been added a set of auxiliary clauses defining its auxiliary predicates.",
        "This definite grammar scheme is in fact identical with DGS1 (see previous example).",
        "In the sequel of this paper, we will be interested, not directly in transformations of definite clause grammars, but in transformations of definite grammar schemes.",
        "The transformation of a definite grammar scheme DGS into DGS' will respect the following conditions:",
        "• The auxiliary predicates of DGS and of DGS' are the same; • For any definite clause program P which defines the auxiliary predicates in DGS (and therefore also those in DGS'), the definite clause grammar DCG obtained through the adjunction of P to DGS has the same denotational semantics as the definite clause grammar DCG' obtained through the adjunction of P to DOS'.",
        "Under the preceding conditions, DGS and DOS' are said to be equivalent definite grammar schemes.",
        "The grammar transformations thus defined are, in a certain sense, universal transformations: they are valid independently from the interpretation given to the auxiliary predicates."
      ]
    },
    {
      "heading": "2.2 GGNF for definite clause grammars",
      "text": [
        "Structure of the GGNF The definite grammar scheme DGS, on the terminal vocabulary V, having Q as its set of auxiliary predicates, is said to be in Generalized Greibach Normal Form if:",
        "1.",
        "The nonterminals of DGS are partitioned in three distinct subsets: A = {al}, called the initial set; U, called the set of unit nonterminals; N, called the set of co-unit nonterminals.",
        "2.",
        "The rules of DGS are partitioned into three groups of rules, called the factorization group (defining the elements of A), the unit group (defining the elements of U), and the co-unit group (defining the elements of N), graphically presented in the following manner.",
        "factorization rules: definition of the elements of A unit rules: definition of the elements of U co-unit rules: definition of the elements of N 3.",
        "Factorization rules are taken among the two following rules:",
        "where n1 E N and ul E U, and where n E N is the arity of the initial nonterminal al.",
        "4.",
        "Unit rules arc of the form: u(X , , X ,„) 4 ,",
        "where re E U is a unit nonterminal of arity in, m N, and where U is a finite sequence of nonterminal unit goals of U, of auxiliary predicates of Q, or is the empty string H. The group of unit rules forms a subscheme of the GGNF definite grammar scheme (see below).",
        "5.",
        "Co-unit rules are of the form: X9) [term] A( ,",
        "where n E N is a co-unit nonterminal of arity k, k E N, where [term] E V and where Ai is a finite sequence of terminal goals of V, of nonterminal unit goals of U, of auxiliary predicates of Q, or of nonterminal co-unit goals of N.",
        "°A context-free grammar is said to be reduced iff it all its nonterminals are accessible from al and are productive (see [5, pp.",
        "The nonterminals of A, U, and N are defined in function of one another, as well as in function of [ ], of the terminals of V, and of the auxiliary predicates of Q, according to the definitional hierarchy illustrated below: A"
      ]
    },
    {
      "heading": "2.3 Structure of the unit subscheme and offline-parsability",
      "text": [
        "One can remark that:",
        "• The group of unit rules is closed: the definition of unit nonterminals involves only unit nonterminals (but no co-unit nonterminal).",
        "For this reason, the group of unit rules is called the unit subscheme (or, loosely, the unit subgrammar) of the GGNF definite grammar scheme.",
        "• The unit subscheme can only generate the empty string [ I.",
        "The unit subscheme of the GGNF is said to contain a cycle iff there exists a unit nonterminal u(Xi, .",
        "• • which \"calls itself recursively\", directly or indirectly, inside this group.° One can show that this property is equivalent to the fact that the context-free skeleton of DGS is infinitely ambiguous, or, in other words, to the fact that DGS is not offline-parsable [3]."
      ]
    },
    {
      "heading": "2.4 Top-down parsing with the GGNF",
      "text": [
        "Let DGS be a definite grammar scheme in GGNF, having Q for its set of auxiliary predicates.",
        "Assume that every element p of Q, of arity n, is defined through a head clause'', of the form:",
        "where T1, ,T„ can be any terms; In other words, the auxiliary predicates are constrained to be simply unifications.",
        "Let DCG be the definite clause grammar obtained through adjunction of these clauses to DGS.",
        "The grammar DCG has the following properties: 'For example, the scheme:",
        "contains a cycle in a,. '",
        "We use the terminology 'head clause' for a clause without body.",
        "A more standard terminology would be 'unit clause', but this would conflict with our technical notion of 'unit' (a nonterminal generating the empty string [",
        "1.",
        "If the unit subscheme does not contain a cycle, then, for any input string String, the standard top-down parsing algorithm terminates, after enumerating all the analyses for String; 2.",
        "If the unit subscheme contains a cycle, the top-down parsing algorithm can terminate or not, depending on the definition given to Use auxiliary predicates.",
        "We give below three examples of definite grammar schemes, and of the equivalent definite grammar schemes in GGNF."
      ]
    },
    {
      "heading": "2.5 Examples",
      "text": [
        "Example 3 Consider the definite grammar scheme DGS1 given in Example 1, repeated below:",
        "Suppose P is any auxiliary definite program which defines the auxiliary predicates pl, p2,p3, q.",
        "Then the definite clause grammars DCG1 and DCG2, obtained by adjunction of this program to DGS1 and DGS2, respectively, are equivalent.",
        "The unit subscheme of DGS2 does not contain a cycle (it is empty12).",
        "One can conclude that DCG1, as well as DCG2, are offiine-parsable.",
        "If, moreover, it is assumed that P defines the auxiliary predicates as being unifications, then it can be concluded that top-down parsing with DCG2 will enumerate all possible analyses for a given string and terminate.",
        "For instance, assume that the auxiliary program consists in the following four clauses (see Example 2): pl(ni/).",
        "F2(/).",
        "P3(0.",
        "These two definite clause grammars are declaratively equivalent.",
        "They both accept strings of the form: oh oui au% where oui is repeated k times, k E N, and assign to each of these strings the (single) analysis represented by the term:",
        "On the other hand, from the operational point of view, if a top-down parsing algorithm is used, DCG1 loops on any input string,\" while DCG2 enumerates all solutions on backtracking – here, zero or one solution, depending on whether the string is in the language generated by the grammar – and terminates.",
        "t3Remark that DCG1 is left recursive in a \"vicious\" (covert) way: nonterminal a1 calls itself, not immediately, but after calling e3, which does not consume anything in the input string.",
        "From an inspection of DGS4 it can be concluded that:",
        "• The unit subscheme does not contain a cycle.\" Therefore DGS4, and consequently DGS3, is oftline-parsable.",
        "• If DCG3 (resp.",
        "DCG4) is the definite clause grammar obtained through the adjunction to SDG3 (resp.",
        "S DG 4) of clauses defining the auxiliary predicates Pi q, r, then DCG3 and DCG4 are equivalent; Furthermore, if these definitions make p, q, r unification predicates, then top-down parsing with DCG4 terminates, after enumerating all solutions.",
        "The GGNF of DGS5 is DGS6 given below:",
        "From an inspection of DGS6 it can be concluded that:",
        "• The unit subscheme contains a cycle.",
        "Therefore neither DGS6 nor DGS5 are offline-parsable.",
        "• If DCG5 (resp.",
        "DCG6) is the definite clause grammar obtained through the adjunction to DGS5 (resp.",
        "DGS6) of clauses defining the auxiliary predicates p, q, then DCG5 and DCG6 are equivalent; • Even if p, q are defined as unifications, top-down parsing with DCG6 may not terminate.",
        "Regarding the last point, let us show that different definitions for p and q result in different computational behaviors: \" It can easily be shown that, iff this is the case, then the unit nonterminals can be completely eliminated, as in the case of example 3 above.",
        "Situation 1 Assume that p, q are defined Appendix: Some indications on the through the following clauses: transformation method q(f (X), X).",
        "In such a situation, top-down parsing with DCG6 of the input string oh does not terminate: an infinite number of solutions (X = nit, X = f (nil), ...) are enumerated on backtracking and the program loops.'",
        "Situation 2 Assume that p, q are defined by the following clauses:",
        "The first clause defines p as being the 'false' (omitting giving a clause for p would have the same result).",
        "In such a situation, top-down parsing with DCG6 terminates.",
        "3 Conclusions: • Few, if any, normal form results for DCGs (and for their close relatives, unification grammars) were previously known.",
        "The GGNF transformation can be applied to any DCG, whether offline-parsable or not.",
        "• In the GGNF, the potential sources of undecidability of the parsing problem are factorized in the unit subgrammar, a grammar \"over\" the empty string [ The GGNF as a whole is offline-parsable exactly when its unit subgrammar is.",
        "This is the case iff the unit subgrammar does not contain a nontenninal calling itself recursively.",
        "• The GGNF seems to provide the closest analogue to the GNF that one can hope to find for DCGs.16 • If the DCG (or equivalently its GGNF) is offline-parsable then top-down parsing with the GGNF finds all solutions to the parsing problem and terminates.",
        "• The transformation under GGNF can be specialized",
        "to the simpler case of a context-free grammar.",
        "In this case, the GGNF provides a variant of the standard GNF preserving degrees of ambiguity.17 \"This is not the worst possible case: here, at least, all solutions end up being enumerated on backtracking.",
        "This would not be the case with more complex definitions for p and q.",
        "\"Justification for this claim is given in Pl.",
        "\"For lack of space, this point was not discussed in the paper.",
        "Consider the context-free grammar CFG (which is the skeleton of example 5):",
        "The GNF for this grammar is the grammar: al fold The original grammar assigns an infinite degree of ambiguity to (oh], while its GNF does not (in fact it is easy to show that a GNF can never be infinitely ambiguous).",
        "On the other hand, We can only give here some brief indications in the hope that the interested reader will be motivated to look into the full description given in [3].",
        "We start with some comments on the GGNF in the CFG case and then move on to the case of definite grammar schemes.",
        "CFGs, Algebraic Systems, and the GGNF.",
        "The most powerful transformation methods existing for context-free grammars are algebraic (\"matrix based\" [8]) ones relying on the concepts of formal power series and algebraic systems (see [5, 9]).",
        "Using such concepts, a context-free grammar such as: i (toy I a2 I ay – V [v] is reformulated into the algebraic system: atay +ay + 1 ay [v] which represents a fixpoint equation in the variables (or \"nonterrninals\") at, a2 on a certain algebraic structure (a non-commutative sennring) of formal power series No.<1,\"*>, where Nan is the set of non-negative integers, extended to infinity.",
        "Informally, an element of Nee <17'› represents a language on the vocabulary V (such that [v] C V), where each string in the language is associated with a number, finite or infinite, which can be interpreted as the degree of ambiguity of this string relative to the system (or, equivalently the corresponding CFG).",
        "Its the example at hand, it can be easily verified that the following assigments of formal power series to al, a2:",
        "satisfy the system.'",
        "8 In terms of Use corresponding CFG, this fact implies that (1) the empty string [ ] is recognized exactly once by the grammar, and that each of the strings [v], [v][v], [v][v][v], ..., is recognized exactly twice by the grammar.",
        "From the point of view of transformations, algebraic systems have certain important advantages over context-free grammars: (1) they make ambiguity degrees explicit, (2) they involve equations (rather than rewriting rules), the GGNF of CFG is: a-']] n1 [oh] u and it can be verified that it preserves degrees of ambiguity.",
        "This difference, which may be considered minor in the case of CFGS, plays an important role in the transformation of DCGs.",
        "\"Furthermore, in the case at hand, they represent the unique solution to this system.",
        "where \"equals can be replaced by equals\", and (3) they possess a rich algebraic structure (addition, multiplication) which endows them with mathematical perspicuity and power.",
        "There am some substantial differences between the transformation steps used to obtain the GGNF of an algebraic system and the standard ones used to obtain its GNF, the principal one lying in the necessity to preserve degrees of ambiguity at each step.",
        "In the GNF case, the initial step consists in first transforming the initial system into a proper system (a notion analoguous to that of proper CFG) – an operation which does not preserve degrees of ambiguity – and then performing the main transformation.",
        "For this reason, the transformation steps in the GGNF case must be formulated in a more global way, which, among other complications, involves the use of certain identities on regular languages.19 However, there are also important similarities between the GNF and the GGNF transformations, among them the observation that the elementary algebraic system in the variable a on the vocabulary V = l[n],[f]}: a = a [n] + [I] has the unique solution a = [t] [v]', an observation which can be much generalized, and which plays a central role in both cases.",
        "DCGs, Mixed Systems, and the GGNF.",
        "In order to define the GGNF in the case of Definite Grammar Schemes (or, equivalently, DCGs), we have introduced so-called mixed systems, a generalization of algebraic systems capable of representing association of structures to strings.",
        "Without going into details, let's consider the following definite grammar scheme:",
        "In this system, the variables (or nonterminats) al, a2 are seen as functions: E B<V*> (where B is the set of booleans {0, 1)) , that is, as functions mapping elements of a set E (often taken to be a Herbrand universe), representing linguistic structures, into formal series of 11<11.>, that is, into languages over V. This can be seen to correspond to the intuitive notion that a nonterminal \"associates\" structures to strings.",
        "As for p, q, r, s, they are seen respectively as fonctions from E3, E2, E, E into B C B.gV'>>, that is, as predicates of different wilts over E. The system represents a fixpoint equation on the variables al , az, given the constants [v], p, q, r, 8.20 Although mixed systems are defined on more complex structures than are algebraic systems, the transformation methods for algebraic systems generalize without difficulty to their case, and these methods form the mathematical basis of the results reported in this paper.",
        "\"Such as the identity (e + Jr' e•Cle'•.",
        "2°Por die interested reader, the given system expresses (using \"conventions of summation\" familiar in tensor algebra) the"
      ]
    },
    {
      "heading": "Acknowledgments",
      "text": [
        "Thanks to C. Bonet, M. Boyer, F. Guenthner, F. Perrault, Y. Schabes, M. Simard, and G. van Noord for comments and suggestions."
      ]
    }
  ]
}
