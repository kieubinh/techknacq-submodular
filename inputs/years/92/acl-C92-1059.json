{
  "info": {
    "authors": [
      "Kiyoshi Kogure"
    ],
    "book": "International Conference on Computational Linguistics",
    "id": "acl-C92-1059",
    "title": "A Treatment of Negative Descriptions of Typed Feature Structures",
    "url": "https://aclweb.org/anthology/C92-1059",
    "year": 1992
  },
  "references": [
    "acl-C90-1013",
    "acl-C90-2039",
    "acl-C90-3052",
    "acl-P84-1008",
    "acl-P86-1038",
    "acl-P89-1001",
    "acl-P89-1003",
    "acl-P91-1002",
    "acl-P91-1041",
    "acl-P91-1042"
  ],
  "sections": [
    {
      "heading": "A TREATMENT OF NEGATIVE DESCRIPTIONS OF TYPED FEATURE STRUCTURES KIYOSHI KOGURE NTT Basic Research Laboratories",
      "text": []
    },
    {
      "heading": "Abstract",
      "text": [
        "A formal treatment of typed feature structures (TFSs) is developed to augment TFSs, so that negative descriptions of them can be treated.",
        "Negative descriptions of TFSs can make linguistic descriptions compact and thus easy to understand.",
        "Negative descriptions can be classified into three primitive negative descriptions: (1) negations of type symbols, (2) negations of feature existences, and (3) negations of feature-address value agreements.",
        "The formalization proposed in this paper is based on Ait-Kaci's complex terms.",
        "The first description is treated by extending type symbol lattices to include complement type symbols.",
        "The second and third are treated by augmenting terns structures with structures representing these negations.",
        "Algorithms for augmented-WS unification have been developed using graph unification, and programs using these algorithms have been written in Common Lisp."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "In unification-based or information-based linguistic frameworks, the most important objects are structures called 'feature structures' (F.Ss), which are used to describe linguistic objects and phenomena.",
        "A feature structure is either atomic or complex: an atomic FS is denoted by an atomic symbol; a complex FS consists of a set of feature-value pairs each of which describes an aspect of an object.",
        "Partial information on an object is merged by applying the unification operation to FSs.",
        "Research on unification-based linguistic theories has been accompanied by research on F.Ss themselves.",
        "Several extensions on FSs or on feature descriptions and formal treatments of the extensions have been proposed.",
        "Disjunctive and negative descriptions on FSs help make the linguistic descriptions simple, compact, and thus easy to understand.",
        "For disjunctive feature descriptions, Kay[14] introduces them into FUG (Functional Unification Grammar) and gives the procedural semantics.",
        "Karttunen[111 also proposes procedural treatments of disjunctions in conjunction with relatively simple negations.",
        "Rounds and Kasper[19, 13] propose a logic-based formalismfeature logic which uses automata to model FSs and can treat disjunctive feature descriptions, and they obtain important results.",
        "For negative descriptions of FSs, one of the most fundamental properties of FSs, the partiality of information they carry, makes its insufficient to adopt relatively simple treatments.",
        "Classical interpretation of negation, for example, does not allow evaluation of negations to be freely interleaved with unification.",
        "Moshier and Rounds[171 propose a formal framework which treats negative feature descriptions on the basis of intuitionistic logic.",
        "However, their formalism has trouble treating double negations.",
        "Dawar[5] proposes a formal treatment based on three-valued logic.",
        "In order to treat feature domains of complex FSs and to treat taxonomic hierarchies of symbolic feature values, type (or sort) hierarchies have been introduced, allowing definition of typed (or sorted) feature-structures (Ms).",
        "A TI'S consists of a type symbol from a lattice and a set of feature-value pairs.",
        "A TFS can be seen as a generalized concept of both atomic and complex FSs.",
        "Pollard and Sag[ 18) introduce sorts into II PSG (Head-driven Phrase Sir ii Grammar) and use sorted P.is to describe linguistic objects.",
        "AH-Kaci[ll proposes an algebraic framework using the sit-types and c-types, one of promising formalizations of 1TSs, based on lattice theory.",
        "This formalization was originally aimed at formalizing and integrating various kinds of knowledge representation frameworks in Al.",
        "In this approach, types are defined as equivalence classes of complex term structures.",
        "A subsumption relation is defined on these term structures.",
        "The join and meet operations on them correspond to the generalization and an operations on TFSs, respectively.",
        "This approach essentially adopts 'type-as-set' semantics.",
        "Subtype relationships on type correspond to subsumption relationships on denotations of types.",
        "Based on this framework, an extension to Prolog,, LOGIN (2], has been developed.",
        "Smolka[20] proposes a feature logic with subsoils.",
        "In this approach, negative descriptions can be decoinposed into three kinds of primitive negations, namely, negations of sorts or complement sorts which denote the complements of sets that positive counterparts denote, negations of feature existences, and negations of feature-address agreement or feature-address disagreement.",
        "Smolka extends feature descriptions but a feature-structure interpretation of an extended description does not include negative in fort nation and corresponds to a simple TI'S.",
        "Some WS-based natural language processing systems have been developed[7, 24, 12, 15, 8, 22].",
        "Carpenter and Pollard [4] propose an interface to build type lattices.",
        "Formalizations of extended FSs and of extended feature-descriptions, described above, are classified into two classes: (1) extensions of FSs themselves, and (2) extensions not of Pis themselves hut of feature-descriptions.",
        "Previous attempts to introduce type hierarchies fall into the former class while previous treatments of disjunctive and negative descriptions mainly fall into the latter.",
        "Li is said to be subsumed by 12, written 11 < 12, if and only if either ti 1 or",
        "1.",
        "Ay C 2.",
        "Ker(v2) C Ker(vi), 3.",
        "Vp E P Ti(P)r2(P), 4.",
        "Vp E Pcb2(p) C sbi(p): and 5.",
        "Vp EC DiRagTto (P)",
        "The subsumption order on IP are defined by [Ii] < [12] if 11 <12 is well-defined.",
        "Lattice operations on P can be defined to be compatible with the above subsumption order relation as follows.",
        "Theorem 1 If (T; <7-) is a lattice, then so is Proof.",
        "This theorem can be proved in a very similar manner to the counterpart for Alt-Kaci's 0-terms.",
        "Therefore, instead of providing the proof in detail, only the definitions of the least upper bounds or joinsand greatest lower boundsor meetsare provided below.",
        "Let Li =T1,vi, 01, Xi) and 12 (12, V2I 02, X2) be WFTs.",
        "First, the join of ti and 12, 13 = Li V 12 = (A3, T3, 03, 03, X3), is defined as follows:",
        "for n > 1 and lif\"\"' is the reflexive extension of Ki from A; to A1 lii A2 for i = 1, 2.",
        "The conditions (11a-11e) define a meet, that collapses to .1 whenever conditions (11c-11e) produce some address p such that type inconsistency, feature inconsistency, or tag inconsistency occurs at p. The V is a join operation and A is a meet operation which are compatible with the subsumption order defined in Definition 13.",
        "Examples of join and meet operations on augmented 0-terms are shown in Figure 3.",
        "The join and meet operations on augmented 0-types correspond to the generalization and unification operations on TESs.",
        "Ait-Kaci defines an c-type as a maximal set of iii types.",
        "It is also possible to defirie an augmented (- type as a maximal set of augmented 0,-types in the same manner, making disjunctive and negative descriptions possible."
      ]
    },
    {
      "heading": "3.2 Type Symbol Lattice Extension to Include Complement Type Symbols",
      "text": [
        "Treating a negative description of a given type symbol, say a, requires a type symbol b such that b has only information that unific.ation of it with is yields inconsistency, or such that a VT b = T and a AT b = I.",
        "Such a symbol is called a complement type symbol of a and written as a'.",
        "If a given type symbol lattice (T; <r) is a Boolean lattice, that is, a complemented3 distributive lattice, we do not need to do anything.",
        "Otherwise, we must extend the lattice to include the complements of the type symbols contained in the given lattice.",
        "For a finite type symbol lattice T, for example, a Boolean lattice T' can be constructed as follows.",
        "Let A : = fat,...,aN1 be the set of atoms of 7, that is, type symbols which cover 1.4 If there are non-atomic type symbols which cover only one symbol, for each such symbol a, a new atom is added 'A lattice is called complemented if its all elements have complements.",
        "[3] 'a is said to cover b if b <7 a and b <7 e <1. a"
      ]
    },
    {
      "heading": "3.1 Typed Feature Structures as Augmented 0-Types",
      "text": [
        "In order to define complex term structures, a signature is used to specify their vocabulary.",
        "It serves as the interface between their syntax and semantics.",
        "A signature is formally defined as follows,",
        "Definition 1 A signature is a quadruple (7, <7 V) consisting of: 1. a set T of type symbols containing T and I., 2. a partial order <7 on T such that (a) I. is the least and T is the greatest element, and (b) every pair of type symbols a, b E 7 have a least upper bound or join, which is denoted by a VT b and a greatest lower bound or meet, which is denoted by a AT b, 3. a set T of feature symbols, and 4. a set V of tag symbols where T, F and V are pairwise disjoint.",
        "A simple `type-as-set' semantics is adopted for these objects, That is, a type symbol in T denotes a set of objects in an interpretation.",
        "Here, T and .1 denote the sets called the universe, written as U, and the empty set 0, respectively.",
        "Another element a denotes a nonempty subset of U, written as [a].",
        "The partial order <7 denotes the subsumption relation between these sets; for any type symbols a, b, and c, 1. a <7 b if and only if[a C [b], 2. a VT b = c if and only if [a] U [b] = [cil, and 3. a AT b = c if and only if lain 114 =",
        "A feature symbol denotes a function from a subset of U to U.",
        "A feature path is a finite string of feature symbols and denotes the function obtained by the composition of the functions that the feature symbols denote.",
        "A term is defined from a signature.",
        "First, a term domain is defined as a skeleton built from feature symbols.",
        "Definition 2 A term domain A on T is a set of finite strings of feature symbols in (including the empty string e) such that 1.",
        "A is prefix-closed: Vp, q E I', if p q E A, then p E A; and 2.",
        "A is finitely branching: if p E A, then If E E A} is finite",
        "where is the string concatenation operator.",
        "An element of a term domain is called a feature address or a feature path.",
        "By definition, the empty string c must belong to all term domains and is called the root address.",
        "A term domain is represented by a rooted directed graph within which each arc has a feature symbol as its label.",
        "A subdomain of a term domain, corresponding to a subgraph, is defined as follows.",
        "Definition 3 Given a term domain A and a feature address p E A, the subdomain of A at p is defined to be the term domain A/p IP' I P P' E A).",
        "The set of all subdomains of A is denoted by Subdom(A).",
        "Next, flesh is put on the term structure's skeleton as defined as a term domain by assigning several kinds of objects to each feature address.",
        "Alt-Karl's term structure, the basis of the 0-type, is defined by assigning a type symbol and a tag symbol to each feature address as follows.",
        "Definition 4 A term is a triple (A, r, v) where A is a term domain on .F, r is a type symbol function from 7 to 'T such that r(.T* A) = IT), and v is a tag symbol function from A to V. Given a tag symbol function v, Addl.., denotes the function from a tag symbol to the set of addresses:",
        "In order to treat negations of feature existences and feature-address value disagreement, the term structure defined above is augmented by assigning additional objects, a set of inhibited features and a set of disagreement tag symbols, to each feature address.",
        "Definition 5 An augmented term is a quintuple (A, r, v, 0, x) where A is a term domain on r is a type symbol function from T* to 'T such that r(T* A) _-= {T), v is a tag symbol function from A to V, 0 is an inhibited feature function from ,T* to 2Y such that 0(p) is finite for any p E A and 0(TI* A) = {0), and x is a disagreement tag symbol function from .F* to 2v such that x(p) is finite for any p E A and x(T* A) = 01.2 The inhibited feature function 0 specifies which features cannot exist at a given address.",
        "There is thus inconsistency if there is an address p in A such that",
        "The disagreement tag symbol function x specifies, for a given address, substructures with which its argument disagrees.",
        "There is thus inconsistency if there is an address p in A such that v(P) E X(P).",
        "(7) The disagreement address function Disagr5 from A to 2F., based on v and x, takes an address as its argument, and gives the set of addresses with which the argument address must disagree, called the disagreement address set and defined as:",
        "Augmented terms are hereafter referred to simply as terms unless stated otherwise.",
        "Definition 6 Given a term t. r (A, 7, V, ri), X) and a feature address p in A, the subterm of t at the address p is the term tip = (A/ p, rip,v/p, (Pip, x/p) where r/p : T* v/p : A/p V, /p : 2, and",
        "For a term t = (A, r, v, 0, X), a type symbol a (similarly, a tag symbol or a term V) is said to occur in t if there is a feature address p in A such that r(p) = a (similarly, v(p) = X or X C x(p), or t/p = I').",
        "A term I = (A, r, v, x) is said to be regular if the set of all subterins of t, Subterm(t) := (t/pIpE A), is finite.",
        "Hereafter, we will consider only regular terms.",
        "In a regular term, only finite numbers of type symbols and tag symbols occur.",
        "if node2.ifeaturesn arc feature arc E node/ .arcs u riode2.arcs) 0 then",
        "so that a covers an additional type symbol.",
        "The extended lattice T' is the set of subsets of A with set inclusion ordering.",
        "An element failiE/ E T' denotes U,,Ea,1 The join and meet operations on T' are the set-union and set-intersection operations, respectively.",
        "The complement of an element fadiEr iiiT' is the set-complement of it with respect to A, that is, {a EA la fL IttibEt}"
      ]
    },
    {
      "heading": "4 Implementation of Augmented TFS Unification",
      "text": [
        "The unification operation for augmented tk-terms or augmented TFSs has been implemented using graph unification techniques.",
        "A term structure is represented as a directed graph by assigning a graph node to each 8-class as in Figure 2.",
        "The unification operation for such DGs corresponds to a graph merging operation.",
        "This takes two DGs and merges 8-classes of the same feature-address into a 8-class.",
        "In a destructive graph unification method, which is very simple, such a graph is represented by the data structures in Figure 4.",
        "A node structure consists of five fields: Isymbol for a type symbol, arcs for a set of feature-value pairs, ifealures for a set of inhibited features, dnodes for a set of disagreement nodes-i.e., disagreement 8-classes, and forward.",
        "The field forward is used for the Union-Find algorithm[91 to calculate unions of a-classes in the same manner as Duct's algorithm[10].",
        "By traversing two DGs' nodes with the same feature-address simultaneously, calculating the union of their 8-classes, and copying arcs, their unification can be calculated as in Figure 5.",
        "The function Unify takes two input nodes and puts them in a 8-class by letting one input be the forward field values.",
        "The function then examines three kinds of inconsistency; namely, type inconsistency, feature inconsistency, and tag inconsistency.",
        "The function finally treats arcs in order to make the result graph right-congruent.",
        "For treating arcs, the function Unify assumes two functions, Shared_Arc_Pairs and Complement_Arcs.",
        "The function Shared _Arc _Pairs takes two nodes as its inputs and gives a set of arc pairs each consisting of both inputs' arcs with a shared feature.",
        "The fn net ion Complemenl_A re S also takes two nodes and gives a set of arcs whose features exist in the first node but not in the second.",
        "An inhibited feature function is implemented using the ifealures field of nodes.",
        "When unification of two nodes results in a node with an arc with a feature in ifeatures, it yields I because of feature inconsistency.",
        "A disagreement tag symbol function is implemented using dnodes.",
        "Unification of two nodes which have each other in their dnodes yields because of tag inconsistency.",
        "These computations require negligible additional computation.",
        "To simplify the explanation, the destructive version of graph unification is used above.",
        "Other versions based on more efficient graph unification methods such as Wroblewski's and Kogure's inethod[2:3, 161 have also been developed.",
        "Furthermore, it is easy to modify other graph unification inethods[21, 61 to allow augmented 1TSs."
      ]
    },
    {
      "heading": "5 Conclusion",
      "text": [
        "This paper has proposed an augmentation of feature structures (FSs) which introduces negative information into I'Ss in unification-based formalisms.",
        "U nification- based linguistic formalisms use l'Ss to describe linguistic objects and phenomena.",
        "Because linguistic information can be described compactly using disjunctive and negative descriptions, l'Ss and feature descriptions are required to treat such descriptions.",
        "In this paper, FSs have been augmented, using a promising method of for Alt-Kaci's type, to allow three kinds of negative descriptions of them to be treated.",
        "In a formalization of typed feature structures, negative descriptions can be decomposed Ulm three kinds of negations: negations of type symbols, negations of feature existences, and negations of feature-address value agreements.",
        "It is shown that the second and third kinds can be treated by augmenting term structures to include structures representing such kinds of descriptions.",
        "Subsumption relations on augmented terms are defined.",
        "It is also shown that the first kind can be treated by extending type symbol lattices to include complement type symbols.",
        "The proposed formalization can provide efficient",
        "This paper proposes an extension to Ait-haci's V'-type that incorporates three kinds of the primitive negative descriptions described below into the 0-type.",
        "Ait-Kaci's 0-type formalization uses tenn structures.",
        "In this paper, both these type structures and the tylw symbol lattice on which term structures are defined are extended to treat negative descriptions.",
        "Negations of type symbols are treated by extending type symbol lattices, and negations of feature existwices and feature-address disagreements are treated by extending term structures.",
        "This extension can be seen as intuitionistic.",
        "The extension is classified into class (1) above.",
        "Based on this paper's formalization, unification algorithms have been developed using graph unification techniques[23, 16].",
        "Programs based on these algorithms have been implemented in Common Lisp."
      ]
    },
    {
      "heading": "2 Requirements of Negative",
      "text": []
    },
    {
      "heading": "Descriptions of TFSs",
      "text": [
        "In describing linguistic information using (typed) feature structures, negative descriptions make the description compact, intuitive, and hence easy to understand.",
        "For example, we want to describe the grammatical agreement for an English verb, say \"eat\", naturally as follows.",
        "nYn[aaree\"\"\"t (igr{ person 3rd number ng -\\ This description specifies compactly and directly that it is not the case that the person attribute is third and that the number attribute is singular.",
        "If we could not use such complex negative descriptions, we would write it using disjunctive descriptions with simple complement types as follows.",
        "isyn( agreement :10 person --,3rd] 1 syn( agreement up{ numberI ]",
        "synr agreeent nut person 2nd] ] syn( agreement awl number pl]] In this case, (1) is easier to understand than (2) or (3).",
        "In the above case, we can describe the information because the complex negative descriptions can be transformed into the disjunction of simple negative descriptions (with an almost, same intended meaning) and because both person and number features take their values from {1st, 2nd, 3rd) and Isg,p1).",
        "However, it is not always the case that such transformations are possible and that feature takes its value from a finite set.",
        "Let us consider more complicated cases using difference lists expressed using feature structures.",
        "The empty list of categories is represented as follows.",
        "In the above example, the tag symbol, X1 shows that features in and out must take the same value.",
        "'In IIPSG and JPSG (Japanese Phrase Structure Grammar), a difference fist is very convenient for expressing subcat and stash feature values.",
        "How can only non-emptiness be expressed'?",
        "'Iii is is impossible using complement, type symbols or disjunctions because we Call consider tile set of all finite length lists whose elements can be taken from infinite sets.",
        "Direct or indirect extension of feature structures is required.",
        "So far, we have discussed the requirenient of negative descriptions of type symbols and of feature-value agreements front the viewpoint cif capability of describing linguistic information.",
        "There are other advantages of allowing negative descriptions.",
        "Consider, for example, debugging processes of grammatical descriptions by parsing sample sentences.",
        "We may obtain unexpected results such as a TES with iui unexpected type symbol, a 'IFS with an unexpected feature value agreement and so on.",
        "In such situations, negative descriptions can be useful tools for detecting their reasons.",
        "'lb make linguistic descriptions compact and thus easy to understand, to treat natural language efficiently, and to detect error reasons rapidly, it is it to develop formalizations and methods of treat nip negative descriptions."
      ]
    },
    {
      "heading": "3 Formal Treatment of Negative Descriptions of TFSs",
      "text": [
        "As stated earlier, a typed feature structure (TI'S) consists of a type symbol and a set of feature-value pairs.",
        "l'hus, descriptions of TFSs are classified into descriptions of TFSs having:",
        "(I) a certain type symbol (or having a subtype symbol of it certain type symbol), (2) a feature, and (3) two feature address values that agree.",
        "A TI'S can be described by using conjunctions and disjunctions of such kinds of descriptions.",
        "A conjunctive and disjunctive TFS can be formalized as Altaci's 0-type and e-type, respectively.",
        "'that is, it 0-type, which has a complex term structure called a K' - term as its syntax, represents a conjunction of such kinds of descriptions or a conjunctive typed feature structure, and all t-type is a maximal set of 0-types representing the disjunction of them.",
        "Negative counterparts of these descriptions are classified nito descriptions of TFSs: (1') not having a certain type symbol (or having a type symbol which is not subsumed by a certain type symbol), (2') not having a certain feature, and (3') having two feat tivalues that do not agree.",
        "Ihy incorporating structures representing such negative descriptions into on 0-term, a '['F'S whit the neg.. ative descriptions can be fornialized.",
        "Such a terni is called art augmented 0-term and a type with an augmented 0-term as its syntax is called an augmented 0-type.",
        "From augmented 0-terms, an augmented (- term can be constructed in the satne manner that an e term is constructed from 0-terms.",
        "Next, augmented 0,-terms and 0-types are defined.",
        "'Fenn structures are first augmented with structures representing inhibited features and disagreement of feature address values.",
        "Then, type symbol lattices are extended to include complement type symbols as suggested in [1].",
        "gorithms for generalization and unification operations as well as treat primitive negations.",
        "The formalization can be integrated with logic-based frameworks such as [20] which can treat wider ranges of descriptions but which do not have such efficient algorithms for these operations.",
        "Logic-based frameworks can be used to obtain the data structures for this paper's formalization.",
        "Unification algorithms for augmented terms or augmented TFSs have been developed using graph unification techniques.",
        "Unification programs based on these algorithms have been developed in Common Lisp.",
        "The augmentation of TESs makes linguistic descriptions compact and easy to understand, In an HPSG-based grammar, for example, non-emptiness of a subcat or slash feature value can be easily described by using feature-address value disagreement.",
        "Moreover, negative descriptions make debugging processes of grammatical descriptions easier."
      ]
    },
    {
      "heading": "Acknowledgments",
      "text": [
        "This research was performed in the VCAT project of the Takeuchi Research Group in NTT Basic Research Laboratories.",
        "The author would like to thank Ikuo Takeuchi, Akira Shimazu, Shozo Naito, Masahito Kawamori, Mikio Nakano, and other colleagues of the group for their encouragement and thought-provoking discussions."
      ]
    }
  ]
}
