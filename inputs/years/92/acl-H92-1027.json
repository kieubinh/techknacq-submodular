{
  "info": {
    "authors": [
      "Yves Schabes"
    ],
    "book": "Workshop on Speech and Natural Language",
    "id": "acl-H92-1027",
    "title": "Stochastic Tree-Adjoining Grammars",
    "url": "https://aclweb.org/anthology/H92-1027",
    "year": 1992
  },
  "references": [
    "acl-C88-2121",
    "acl-H92-1024",
    "acl-P85-1011"
  ],
  "sections": [
    {
      "heading": "ABSTRACT",
      "text": [
        "The notion of stochastic lexicalized tree-adjoining grammar (SLTAG) is defined and basic algorithms for SLTAG are designed.",
        "The parameters of a SLTAG correspond to the probability of combining two structures each one associated with a word.",
        "The characteristics of SLTAG are unique and novel since it is lexically sensitive (as N-gram models or Hidden Markov Models) and yet hierarchical (as stochastic context-free grammars).",
        "An algorithm for computing the probability of a sentence generated by a SLTAG is presented.",
        "Then, an iterative algorithm for estimating the parameters of a SLTAG given a training corpus is introduced."
      ]
    },
    {
      "heading": "1. MOTIVATIONS",
      "text": [
        "Although stochastic techniques applied to syntax modeling have recently regained popularity, current language models suffer from obvious inherent inadequacies.",
        "Early proposals such as Markov Models, N-gram models [1, 2, 3] and Hidden Markov Models were very quickly shown to be linguistically not appropriate for natural language (e.g. [4]) since they are unable to capture long distance dependencies or to describe hierarchically the syntax of natural languages.",
        "Stochastic context-free grammar [5] is a hierarchical model more appropriate for natural languages, however none of such proposals [6, 7] perform as well as the simpler Markov Models because of the difficulty of capturing lexical information.",
        "The parameters of a stochastic context-free grammar do not correspond directly to a distribution over words since distributional phenomena over words that are embodied by the application of more than one context-free rule cannot be captured under the context-freeness assumption.",
        "This leads to the difficulty of maintaining a standard hierarchical model while capturing lexical dependencies.",
        "This fact prompted researchers in natural language processing to give up hierarchical language models in the favor of non-hierarchical statistical models over words (such as word N-grams models).",
        "Probably for lack of a better language model, it has also been argued that the phenomena that such devices cannot capture occur relatively infrequently.",
        "Lexicalized tree-adjoining grammars (LTAG)1 combine hierarchical structures while being lexically sensitive and are therefore more appropriate for statistical analysis of language.",
        "In fact, LTAGs are the simplest hierarchical formalism which can serve as the basis for lexicalizing context-free grammar [10, 11].",
        "LTAG is a tree-rewriting system that combines trees of large domain with adjoining and substitution.",
        "The trees found in a TAG take advantage of the available extended domain of locality by localizing syntactic dependencies (such as filler-gap, subject-verb, verb-object) and most semantic dependencies (such as predicate-argument relationship).",
        "For example, the following trees can be found in a LTAG lexicon:"
      ]
    },
    {
      "heading": "eats John peanuts hungrily",
      "text": [
        "Since the elementary trees of a LTAG are minimal syntactic and semantic units, distributional analysis of the combination of these elementary trees based on a training corpus will inform us about relevant statistical aspects of the language such as the classes of words appearing as arguments of a predicative element, the distribution of the adverbs licensed by a specific verb, or the adjectives licensed by a specific noun.",
        "This kind of statistical analysis as independently suggested in [12] can be made with LTAGs because of their extended domain of locality but also because of their lexicalized property.",
        "In this paper, this intuition is made formally precise by defining the notion of a stochastic lexicalized tree-adjoining grammar (SLTAG).",
        "We present an algorithm for computing the probability of a sentence generated by a SLTAG, and finally we introduce an iterative algorithm for estimating the parameters of a SLTAG given a training corpus of text.",
        "This algorithm can either be used for refining the parame",
        "ters of a SLTAG or for inferring a tree-adjoining grammar from a training corpus.",
        "Due to the lack of space, in this paper the algorithms are described succinctly without proofs of correctness and more attention is given to the concepts and techniques used for SLTAG."
      ]
    },
    {
      "heading": "2. SLTAG",
      "text": [
        "Informally speaking, SLTAGs are defined by assigning a probability to the event that an elementary tree is combined (by adjunction or substitution) on a specific node of another elementary tree.",
        "These events of combination are the stochastic processes considered.",
        "For sake of mathematical precision and elegance, we use a stochastic linear rewriting system, stochastic linear indexed grammars (SLIG), as a notation for SLTAGs.",
        "A linear indexed grammar is constructed following the method given in [13].",
        "However, in addition, each rule is associated with a probability.",
        "Linear Indexed grammar (LIG) [14, 15] is a rewriting system in which the non-terminal symbols are augmented with a stack.",
        "In addition to rewriting non-terminals, the rules of the grammar can have the effect of pushing or popping symbols on top of the stacks that are associated with each non-terminal symbol.",
        "A specific rule is triggered by the non-terminal on the left hand side of the rule and the top element of its associated stack.",
        "LIGs [15] restrict The productions of a LIG are restricted to copy the stack corresponding to the non-terminal being rewritten to at most one stack associated with a non-terminal symbol on the right hand side of the production.2 In the following, [..p] refers to a possibly unbounded stack whose top element is p and whose remaining part is schematically written as `••'.",
        "[$] represents a stack whose only element is the bottom of the stack.",
        "While it is possible to define SLIGs in general, we define them for the particular case where the rules are binary branching and where the left hand sides are always incomparable.",
        "A stochastic linear indexed grammar, G, is denoted by (VN, VT, S, Prod), where VN is a finite set of non-terminal symbols; VT is a finite set of terminal symbols; V1 is a finite set of stack symbols; S E VN is the start symbol; Prod is a finite set of productions of the form:",
        "where X k E VN, a E VT and po E Pi, P2 E Vr; 2 LIGs have been shown to be weakly equivalent to Tree-Adjoining Grammars [16].",
        "P, a probability distribution which assigns a probability, 0 < P(X[••x] – ■ A) < 1, to a rule, X[••x] --+ A E Prod such that the sum of the probabilities of all the rules that can be applied to any non-terminal annotated with a stack is equal to one.",
        "More precisely if, VX E ,V P E",
        "A derivation starts from S associated with the empty stack (S{$]) and each level of the derivation must be validated by a production rule.",
        "The language of a SLIG is defined as follows: L = {w E VT I S[$] w}.",
        "The probability of a derivation is defined as the product of the probabilities of all individual rules involved (counting repetition) in the derivation, the derivation being validated by a correct configuration of the stack at each level.",
        "The probability of a sentence is then computed as the sum of the probabilities of all derivations of the sentence.",
        "Following the construction described in [13], given a LTAG, Gtag, we construct an equivalent3 LIG, G slig .",
        "In addition, a probability is assigned to each production of the LIG.",
        "For simplicity of explanation and without loss of generality we assume that each node in an elementary tree found in a tree-adjoining grammar is either a leaf node (i.e. either a foot node or a non-empty terminal node) or binary branching.",
        "The construction of the equivalent SLIG follows.",
        "The non-terminal symbols of Gtug are the two symbols `top' (t) and 'bottom' (b), the set of terminal symbols is the same as the one of Gtag, the set of stack symbols is the set of nodes (not node labels) found in the elementary trees of Gtag augmented with the bottom of the stack ($), and the start symbol is 'top' (t).",
        "For all root nodes rio of an initial tree whose root is labeled by S, the following starting rules are added:",
        "These rules state that a derivation must start from the top of the root node of some initial tree.",
        "P is the probability that a derivation starts from the initial tree associated with a lexical item and rooted by no.",
        "Then, for all node n in an elementary tree, the following rules are generated.",
        "• If Th.% are the 2 children of a node , such that 772 is on",
        "the spine (i.e. subsumes the foot node), include: b[..9] tk1it[•-712] (2) Since (2) encodes an immediate domination link defined by the tree-adjoining grammar, its associated probability is one.",
        "• Similarly, if 7117)2 are the 2 children of a node 77 such that ni is on the spine (i.e. subsumes the foot node), include: b[..,7]P=>1 t[••77114$7721 (3) Since (3) encodes an immediate domination link defined by the tree-adjoining grammar, its associated probability is one.",
        "• If 77072 are the 2 children of a node 77 such that none of them is on the spine, include: b[h] t[hi]t[S772] (4) Since (4) also encodes an immediate domination link defined by the tree-adjoining grammar, its associated probability is one.",
        "• If 77 is a node labeled by a non-terminal symbol and if it does not have an obligatory adjoining constraint, then we need to consider the case that adjunction might not take place.",
        "In this case, include:",
        "4-77] 4 b[..ri] (5) The probability of rule (5) corresponds to the probability that no adjunction takes place at node 77.",
        "• If 71 is an node on which the auxiliary tree [3 can be adjoined, the adjunction of # can be predicted, therefore (assuming that 77, is the root node of )3) include:",
        "The probability of rule (6) corresponds to the probability of adjoining the auxiliary tree whose root node is nr, say f3, on the node n belonging to some elementary tree, say",
        "5 • If 77/ is the foot node of an auxiliary tree # that has been adjoined, then the derivation of the node below rl f must resume.",
        "In this case, include:",
        "The above stochastic production is included with probability one since the decision of adjunction has already been made in rules of the form (6).",
        "• Finally, if 771 is the root node of an initial tree that can be substituted on a node marked for substitution 77, include:",
        "t[h] L J[$7lI.]",
        "(8) Here, p is the probability that the initial tree rooted by 771 is substituted at node /7.",
        "It corresponds to the probability of substituting the lexicalized initial tree whose root node 5 Since the grammar is lexicalized, both trees a and Q are associated with lexical items, and the site node for adjunction n corresponds to some syntactic modification.",
        "Such rule encapsulates S modifiers (e.g. sentential adverbs as in \"apparently John left\"), VP modifiers (e.g. verb phrase adverbs as in \"John left abruptly)\", NP modifiers (e.g. relative clauses as in \"The man who left was happy\"), N modifiers (e.g. adjectives as in \"pretty woman\"), or even sentential complements (e.g. John thinks that Harry is sick).",
        "is 771, say 6, at the node 77 of a lexicalized elementary tree, say a.",
        "The SLIG constructed as above is well defined if the following equalities hold for all nodes 77:",
        "Beside the distributional phenomena that we mentioned earlier, SLTAG also captures the effect of adjoining constraints (selective, obligatory or null adjoining) which are required for tree-adjoining grammar.8"
      ]
    },
    {
      "heading": "3. PROBABILITY OF A SENTENCE",
      "text": [
        "We now define an bottom-up algorithm for SLTAG which computes the probability of an input string.",
        "The algorithm is an extension of the CKY-type parser for tree-adjoining grammar [18].",
        "The extended algorithm parses all spans of the input string and also computes their probability in a bottom-up fashion.",
        "Since the string on the frontier of an auxiliary is broken up into two substrings by the foot node, for the purpose of computing the probability of the sentence, we will consider the probability that a node derives two substrings of the input string.",
        "This entity will be called the inside probability.",
        "Its exact definition is given below.",
        "We will refer to the subsequence of the input string w = al • aN from position i to j, .4.",
        "It is defined as follows: tuidef ai+i • • • ai Given a string w = al • • • aN and a SLTAG rewritten as in (1-8) the inside probability, Itu (pos,n,i, j, k,1), is defined for all nodes 77 contained in an elementary tree a and for posE{t,b}, and for all indices 0 <i<j<k<l<Nas follows: 6 Among other cases, the probability of this rule corresponds to the probability of filling some argument position by a lexicalized tree.",
        "It will encapsulate the distribution for selectional restriction since the position of substitution is taken into account.",
        "7 We will not investigate the conditions under which (12) holds.",
        "We conjecture that some of the techniques used for checking the consistency of stochastic context-free grammars can be adapted to SLTAG.",
        "8 For example, for a given node n setting to zero the probability of all rules of the form (6) has the effect of blocking adjunction.",
        "(i) If the node 17 does not subsume the foot node of a (if there is one), then j and k are unbound and: /w(pos, – , – , 1) P (pos [$ 4. wii) (ii) If the node 77 subsumes the foot node 17/ of a, then: IW (pos, , j, k ,1)411 P( pos[$ti] wjib[Sri In (ii), only the top element of the stack matters since as a consequence of the construction of the SLIG, we have that if pos[$17] f]wik then for all string y E VI we also have pos[$771] wf b[$711 .9 Initially, all inside probabilities are set to zero.",
        "Then, the computation goes bottom-up starting from the productions introducing lexical items: if n is a node such that b[$17] a, then:",
        "Then, the inside probabilities of larger substrings are computed bottom-up relying on the recurrence equations stated in Appendix A.",
        "This computation takes in the worst case 0(IGI2N6)-time and O(IGIN4)-space for a sentence of length N. Once the inside probabilities computed, we obtain the probability of the sentence as follows:",
        "We now consider the problem of re-estimating a SLTAG."
      ]
    },
    {
      "heading": "4. RE-ESTIMATION OF SLTAG",
      "text": [
        "Given a set of positive example sentences, W {wi • • • WK}, assumed to have been generated by an unknown SLTAG, we would like to compute the probability of each rule of a given SLTAG in order to maximize the probability that the corpus were generated by this SLTAG.",
        "An algorithm solving this problem can be used in two different ways.",
        "The first use is as a re-estimation algorithm.",
        "In this approach, the input SLTAG derives structures that are reasonable according to some criteria (such as a linguistic theory and some a priori knowledge of the corpus) and the intended use of the algorithm is to refine the probability of each rule.",
        "The second use is as a learning algorithm.",
        "At the first iteration, a SLTAG which generates all possible structures over a given set of nodes and terminal symbols is used."
      ]
    },
    {
      "heading": "9 This can be seen by observing that for any node on the path from",
      "text": [
        "the root node to the foot node of an auxiliary tree, the stack remains unchanged.",
        "Initially the probability of each rule is randomly assigned and then the algorithm will re-estimate these probabilities.",
        "Informally speaking, given a first estimate of the parameters of a SLTAG, the algorithm re-estimates these parameters on the basis of the parses of each sentence in a training corpus obtained by a CKY-type parser.",
        "The algorithm derives a new estimate such that the probability that the corpus were generated by the grammar is increased.",
        "By analogy to the inside-outside algorithm for stochastic context-free grammars [19, 7], we believe that the following quantity decreases after each iteration:1°",
        "In order to derive a new estimate, the algorithm needs to compute for all sentences in W the inside probabilities and the outside probabilities.",
        "Given a string w = al • • • aN, the outside probability, Ow (pos, j, k, 1), is defined for all nodes 17 contained in an elementary tree a and for pos E {t,b}, and for all indices 0 < i < j < k < I < N as follows:",
        "(ii) If the node 17 does subsume the foot node 77 f of a then:",
        "Once the inside probabilities computed, the outside probabilities can be computed top-down by considering smaller spans of the input string starting with 0\" (t, $ , 0, N) = 1 (by definition).",
        "This is done by computing the recurrence equations stated in Appendix B.",
        "Due to the lack of space, we only illustrate the re-estimation of the rules corresponding to adjunction, rules of the form: t[••77] t[..ipp].",
        "The other re-estimation formulae can be derived in a similar manner.",
        "In the following, we assume that 17 subsumes the foot node lif within a same elementary tree, and also that 77/ subsumes the foot node rip (within a same elementary tree).",
        "'°He is an estimate of the entropy H of the unknown language being estimated and it converges to the entropy of the language as the size of the corpus grows.",
        "It can be shown that the rule 4•9] t[••rint] is optimally reestimated at each iteration as follows:",
        "The denominator of the above reestimation formula estimates the probability that a derivation will involve at least one expansion of t[••71].",
        "The numerator estimates the probability that a derivation will involve the rule t[••q] -+ The probability of no adjunction on the node 77, P(t[••71] b[•q] is reestimated using the equality ( 9).",
        "The algorithm reiterates until I I e(W) is unchanged (within some epsilon) between two iterations.",
        "Each iteration of the algorithm requires at most 0(IGI2N6)-time for each sentence of length N."
      ]
    },
    {
      "heading": "5. CONCLUSION",
      "text": [
        "A novel statistical language model and fundamental algorithms for this model have been presented.",
        "SLTAGs provide a stochastic model both hierarchical and sensitive to lexical information.",
        "They combine the advantages of purely lexical models such as N-gram distributions or Hidden Markov Models and the one of hierarchical modes as stochastic context-free grammars without their inherent limitations.",
        "The parameters of a SLTAG correspond to the probability of combining two structures each one associated with a word and therefore capture linguistically relevant distributions over words.",
        "An algorithm for computing the probability of a sentence generated by a SLTAG was presented as well as an iterative algorithm for estimating the parameters of a SLTAG given a training corpus of raw text.",
        "Similarly to its context-free counterpart, the reestimation algorithm can be extended to handle partially parsed corpora [20].",
        "The worst case complexity of the algorithm with respect to the length of the input string (0(N6)) makes it impractical with a large corpus on a single processor computer for grammars requiring the worst case complexity.",
        "However, this complexity reduces to 0(N3) or to 0(N2) for interesting subsets of SLTAGs.",
        "If time permits, experiments in this direction will be reported at the time of the meeting.",
        "Furthermore, the techniques explained in this paper apply to other grammatical formalisms such as combinatory cat-egorial grammars and modified head grammars since they have been proven to be equivalent to tree-adjoining grammars and linear indexed grammars [21].",
        "In collaboration with Aravind Joshi, Fernando Pereira and Stuart Shieber, we are currently investigating additional algorithms and applications for SLTAG, methods for lexical clustering and automatic construction of a SLTAG from a large training corpus."
      ]
    },
    {
      "heading": "REFERENCES",
      "text": []
    },
    {
      "heading": "A. INSIDE PROBABILITIES",
      "text": [
        "In the following, the inside and outside probabilities are relative to the input string to.",
        ".7\" stands for the the set of foot nodes, S for the set of nodes on which substitution can occur, R for the set of root nodes of initial trees, and A for the set of non-terminal nodes of auxiliary trees.",
        "The inside probability can be computed bottom-up with the following recurrence equations.",
        "For all node n found in an elementary tree, it can be shown that:"
      ]
    },
    {
      "heading": "B. OUTSIDE PROBABILITIES",
      "text": [
        "The outside probabilities can be computed top-down recursively over smaller spans of the input string once the inside probabilities have been computed.",
        "First, by definition we have: 0(t, $, 0, N) = 1.",
        "The following recurrence equations hold for all node n found in an elementary tree.",
        "If n E 0(2, 0, N) = P(1[$] t[$77])• And for all (i, j) (0, N), 0(1, 77, j) = 0(2, no,1, j) X P(0770] 1[$i]) 2.",
        "If ri is an interior node which subsumes the foot node of the elementary tree it belongs to, 0(t,97, j,k,1)="
      ]
    }
  ]
}
