{
  "info": {
    "authors": [
      "Alain Lecomte"
    ],
    "book": "Conference of the European Association for Computational Linguistics",
    "id": "acl-E93-1032",
    "title": "Towards Efficient Parsing With Proof-Nets",
    "url": "https://aclweb.org/anthology/E93-1032",
    "year": 1993
  },
  "references": [
    "acl-C92-1024",
    "acl-C92-1061"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "This paper presents a method for parsing associative Lambek grammars based on graph-theoretic properties.",
        "Connection graphs, which are a simplified version of proof-nets, are actually a mere conservative extension of the earlier method of syntactic connexion, discovered by Ajduckiewicz [1935].",
        "The method amounts to find alternating spanning trees in graphs.",
        "A sketch of an algorithm for finding such a tree is provided.",
        "Interesting properties of time-complexity for this method are expected.",
        "It has some similarities with chart-parsing aKtinig, 1991, 1992], [Hepple, 1992]) but is different at least in the fact that intervals are here edges and words are vertices (or trees) instead of the contrary in classical chart-parsing."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "In this paper, we present a method for parsing Lambek grammars based on graph-theoretic properties.",
        "We expect that it may be done efficiently by an algorithm (time-polynomial even in the worst case) which aims at finding an alternating spanning tree in a graph.",
        "We do not give the explicit formulation of such an algorithm in this paper: we will only give an idea and an illustration of it.",
        "This paper is thus mostly devoted to the properties on which the method is based.",
        "We call connection graphs the special kind of proof-nets we explore, just in order to make explicit some difference with the usual method of proof-nets, as it can be found in [Roorda, 1991; 1992] and [Moortgat 1992], but the two concepts are very similar.",
        "In many respects, connection graphs are a mere conservative extension of the earlier method of syntactic connection, discovered by Ajduckiewicz [1935].",
        "The method amounts to link the nodes of an ordered sequence of trees in such a way that properties of connexion, \"non overlapping\", acyclicity and \"strong connectivity\" are verified.",
        "Connection graphs are simpler than proof-nets in that they loose some information.",
        "As they are here formulated, they are only convenient for the associative version of the product-free Lambek calculus.",
        "One of their advantages lies in the geometrical viewpoint they provide on the proofs of a sequent.",
        "By means of this viewpoint, questions of provability may be reduced to graph-theoretical problems.",
        "For instance, every reading of a sentence is provided by an alternating spanning tree.",
        "In many aspects, the method resembles the well known method of chart-parsing.",
        "Kônig [1991, 19921 was the first to apply chart-parsing to Lambek calculus.",
        "Hepple [1992] has recently improved this application.",
        "An obvious difference with the method proposed here lies in the fact that, in ours, words are points and intervals between them are edges instead of the contrary in chart-parsing.",
        "In both cases, computational advantages are found by keeping correct partial analyses after they have been obtained.",
        "A chart is actually used in both methods."
      ]
    },
    {
      "heading": "2 Connection Graphs",
      "text": []
    },
    {
      "heading": "2.1 Links and Nodes",
      "text": [
        "• external links:",
        "+a a or a +a, between complementary vertices (same letter and opposite signs)",
        "• internal links:",
        "• type 2: right-oriented: left-oriented:"
      ]
    },
    {
      "heading": "2.2 Connection Graphs (inductive definition)",
      "text": [
        "We define by induction the class of connection graphs and the associated notions of unit and of linking a sequence of units.",
        "• every external link is a connection graph, which links the units +a and -a, • (I) if a is a connection graph which links a sequence of units x and a unit +A and if 0 is a connection graph which links y, B and z (where z",
        "they will be noted respectively: otOr 0 and aED1 p, and they link respectively: y, - (B/A), x, z and y, x, -(A\\B), z where -(B/A) and -(A\\B) are new units.",
        "• (II) if a is a connection graph which links -A, x and +B, then: (a) if A is the left end of the linking, we get a new connection graph which links x and +(AFB) by the scheme:",
        "which is a connection graph which links -(b/c), c and +b a +a is also a connection graph and we obtain by (Ia): which links - (a\\(b/c)), c and +(a\\b).",
        "Proposition 1:for any sign ±, we have for all A, B and C: ± (A\\B)/C = ± AVBIC)",
        "Proof: assume we have a connection graph 0 which links y, -(A\\B), z and a connection graph a which links x and +C, then, by (Ia) we obtain a connection graph which links y, -((A\\B)/C), x and z.",
        "But since 0 links units having already a type 2 link, it necessarily comes from a [y', -B, z] and a [x', +A] such that y' x' = y.",
        "From [y', -B, z] and [x, +C] we obtain a connection graph which links y', -(B/C), x and z and from this graph and the graph which links [x', +A], we get a graph which links y', x', -(PNB/C)), x and z, that means a graph which links y, -(A\\(B/C)), x and z, which is identical to the graph which links y, -((A\\B)/C), x and z.",
        "0"
      ]
    },
    {
      "heading": "2.3 Alternating trees",
      "text": [
        "Definition 2: Let Ll and L2 respectively the sets of type 1 links and type 2 links.",
        "An alternating tree on L1uL2 is a tree in which all the nodes at a same level have the same sign, all the edges are type 1 or type 2 links and the sign of a node is alternatively + and along any path from the root to any leaf.",
        "Proof by induction on building a connection graph.",
        "1) Let G consist in a single external link, if we remove the external link, we get two distinct vertices: +a and -a, which are alternating trees.",
        "2) Let us assume the property true for 13 which links y, -B, z and for a which links x and +A.",
        "-B, as a unit, is an alternating negative tree and +A is an alternating positive tree.",
        "By (Ia) and (lb), a type 2 link is added from the root of -B.",
        "We thus keep a tree the root of which is negative and the type of the added link is the same as that of the links at the same level.",
        "Moreover, no cycle is added because before this operation, the two graphs were not already connected.",
        "-(B/A) and -(A\\B) are thus alternating trees.",
        "3) Let us assume now the property true for a which links -A, x and +B, then it is also true for t1(a) and",
        "tr(a) because a type 1 link is added from the positive root of +B.",
        "Obviously, no cycle is added when we exclude the external links.",
        "0"
      ]
    },
    {
      "heading": "2.4 Numbering the nodes of a connection graph",
      "text": [
        "Let r be the ordered set of alternating trees in a connection graph G.",
        "• if X and I are alternating trees and X< Y (X before Y in the order defined on I') the set Ix of numbers associated to X and the set ly are such that: Ix < Iy (where I < ?means: Vi Vi'iEl and fel' i<i) • type 1 links:"
      ]
    },
    {
      "heading": "2.5 Completeness of Connection Graphs with respect to the Associative Product-free Lambek Calculus",
      "text": [
        "We show that every deduction d in the calculus A (for Associative Product-free Lambek calculus) may be translated into a connection graph x(d).",
        "axiom: a –> a is translated into: a -+a or +a a"
      ]
    },
    {
      "heading": "rules:",
      "text": [
        "[L/]: if x –+ A translates into 13 and y B z C translates into y, y B/A x z translates into 13 Or y [L\\]: y x A\\B z translates into 13 EDI y [R/]: translates into tr(a) where a is the translation ofAx-->B [R\\]: translates into t1(a).0 Remark: this translation is not a one-to-one mapping, because several deductions can be translated into the same connection graph.",
        "We assume here that connection graphs provide a semantics for derivations.",
        "It is possible to show that this semantics is isomorphic to the associative directed lambda calculus (see Wansing 1990)."
      ]
    },
    {
      "heading": "2.6 Soundness of Connection Graphs with respect to A",
      "text": [
        "This paragraph is very similar to Roorda 1991, chap III, § 4.",
        "Proof: we may assume that this link has been added at the last stage of the construction.0 Definition 4: a type 2 link is called separable if it could have been added in the last stage of the construction.",
        "Proof: by induction on the structure of G. G has necessarily a last link, in the order of the construction.",
        "As seen in the previous lemma, it is necessarily either a type 1 link or a type 2 link.",
        "In the first case, when removing it, we still have a connection graph.",
        "In the second case, when removing it, we get two connection graphs a and (3 which correspond, by induction hypothesis, respectively to x A and y B z–* C. 2 .",
        "7 Non-Overlapping property Definition 5: given a connection graph G, we call interval every set of integers [i, j] (ie: (x; i<–x<–j} such that i and j are indices associated with ending points of an external link (and i<j).",
        "Two intervals [i, j] and [i', j'] do not overlap if and only if:",
        "• [i, 1] n = 0",
        "or • [i,51 D ji and i # i and j j' or • [1,1] D [i, j] and i # i' and j Given a family I of intervals, we say that it satisfies the Non Overlapping Condition (NOC) if it does not contain any pair of intervals which overlap.",
        "Proof: easy, by induction.0"
      ]
    },
    {
      "heading": "2.8 Linking the positive root",
      "text": [
        "Theorem 2: in a connection graph G, the positive root is connected by an external link either to a negative vertex in the same tree (just below it) or to a negative root.",
        "Proof: a type 2 link connects two connection graphs for the first time they meet and a type 1 link does neither connect two graphs, nor modify the topology of type 2 links and external links.",
        "0"
      ]
    },
    {
      "heading": "2.10 One-to-one mapping between nodes",
      "text": [
        "Theorem 4:for every i in a connection graph G, let 0(i) be the node linked to i by an external link, 0 is a one-to-one mapping from S onto S.",
        "• true for any axiom, • Let us assume it is true for a and y.",
        "Then by (la) and ab): • by induction hypothesis, there is a path from the root of +C to the root of B which is alternating.",
        "Since it arrives at a negative vertex, its last link cannot be of type 2, then it is an external link.",
        "• There is also a path from the root of +A to any leaf of",
        "the spanning tree of a, which is alternating.",
        "Since it comes from a positive vertex, it cannot begin with a type 2 link, hence it begins with an extrernal link.",
        "Thus, by inserting a type 2 link between the external link arriving at B and the external link starting from +A, we get a path starting from the positive root of +C and arriving at any leaf of a, inserted into y, which is alternating.",
        "Therefore, there is an alternating path from the positive root of +C to any leaf of aey.",
        "Proof: this is shown when installing a new type 1 link.",
        "Such an installation does not modify the topology of G–L1.",
        "The previous graph (before applying tl or tr) was necessarily a connection graph.",
        "Thus by Theorem 5, it was scanned by an alternating spanning tree with as root the positive root of the graph.",
        "This tree is preserved by tl or tr, it contained an alternating path connecting the two vertices which are now linked by a type 1 link.",
        "0 As a matter of recapitulation, we enumerate now the following properties, satisfied by any connection graph.",
        "• one-to-one mapping by external links (CGO) • positive root property + uniqueness of the positive root (CG1) • non-overlapping condition (CG2) • strong connectivity (CG3) • connectivity and acyclicity on L2 u E (CG4) • alternating spanning tree (CG5) • G – E is a set of well numbered alternating trees (CG6)",
        "Proof: By CG4, G–L1 is a tree on S, it is therefore a spanning tree of G. Let us consider a path a from the positive root +b (which is the root of the positive tree +B, and which is unique according to CG1) to a leaf a.",
        "We must notice that a cannot be positive, because if it was, it would necessarily be an end of a type 2 link and this type 2 link would be the last edge on the path a, but by CGO, it would be linked by an external link to another node and thus it would not be a leaf.",
        "Thus, a is necessarily negative, and we can write a instead of a.",
        "If a is isolated (as a negative root of a negative tree), we can remove the last external link and the type 2 link before the last, we are led to the same problem: a path a' arriving at a negative leaf, but a' is shorter than a.",
        "If a is not isolated, it is necessarily the end of a type 1 link, but by CG3, there is an alternating path joining a and the positive node +c which is the other end.",
        "Removing this path and the type 2 link arriving at +c, we still get the same problem of a path a' arriving at a negative node, but again a' is shorter than a.",
        "We can proceed like that until we have a mere external link between the positive root +b and a vertex -b.",
        "In this case, the path is obviously alternate."
      ]
    },
    {
      "heading": "3 Well Linked Graphs (WLG)",
      "text": [
        "Proof: obvious according to the previous §.0 Theorem 7: every well linked graph is a connection graph.",
        "(ie: every well linked graph could be obtained by the inductive construction of a connection graph, with the sequence of alternating trees as G–E).",
        "Proof: given a WLG on [-Al, -A2, ,-An, +B], it has a unique positive root +b (the root of +8).",
        "Thus it satisfies the property of uniqueness of the positive root.",
        "Let us assume there is a type 1 link from +b, then let us remove:",
        "• if it is left-oriented: the leftmost one • if it is right-oriented: the rightmost one.",
        "Let us assume for instance that it is left-oriented: • The tree below this link may be moved towards the left end of the sequence of trees by the inverse of the construction rule (Ha).",
        "This move preserves the topological structure of EuL2, therefore, CG1, CG3 and CG4 are preserved.",
        "This move implies a renumbering but it does not destroy the non-overlapping property.",
        "Thus CG2 is preserved.",
        "CGO is trivially preserved.",
        "The argument is similar for a right-oriented link.",
        "Thus after this removal, we keep a WLG.",
        "Let us assume now there is no type 1 link from +b.",
        "Then there is an external link which links +b to a vertex b situated among the negative trees.",
        "If b is not related to another node, we get an elementary WLG: b ----+b, which is obviously a connection graph.",
        "If b is related to another node, then by CGS, either b is a leaf, or it is the starting point of a type 2 link.",
        "Let us assume b is a leaf (of a non atomic tree), then b is linked by a type 1 link to a vertex +a (and not to +b since we have assumed there is no longer type 1 link from +b).",
        "Because of CG3, b and +a are connected by an alternating path on EuL2, thus b is necessarily the starting point of a type 2 link, but in this case, b is not a leaf.",
        "Therefore b is not a leaf and it is the starting point of a type 2 link.",
        "Let +c the other end of this link.",
        "• Let us assume that this link is left-oriented: we remove the leftmost one if many.",
        "In this case, the scanning tree is broken into two parts and the connection graph is also separated into two pieces.",
        "One contains +b, the other contains +c.",
        "Let us consider the first one: • it keeps CG3 and CG4:",
        "for example CG3: - let us consider a type 1 link situated in this part.",
        "It does not come from +b since we have assumed there is no longer type 1 link from +b.",
        "- its ends are linked by an alternating path.",
        "Let us assume that the removed type 2 link belonged to this path.",
        "By removing it, we get either a single external link: b +b, but such a piece does not contain any type 1 link, or another kind of graph.",
        "If we want this graph has a type 1 link, it necessarily must contain another type 2 link starting from -b, and arriving, say, at +d.",
        "But an alternating path between two ends of a type 1 link can neither arrive by an external link at b since b is already connected by such a link to the positive root +b (and we have assumed there is no type 1 link attached to +b), nor pass through +d since, in this case, the path would have two consecutive type 2 links, which contradicts the definition of an alternating path.",
        "Therefore, the removed type 2 link cannot be on the alternating path linking the ends of a type 1 link in this part of the graph.",
        "Finally, no alternating path in the first component is destroyed by this removal, among all the alternating paths connecting ends of type 1 links.",
        "Let us consider the second one: - let us consider a type 1 link situated in this part and let us assume that its ends are linked by an alternating path passing through the removed type 2 link.",
        "The proof is the same as previously: the path can neither arrive at b by an external link nor by a type 2 link.",
        "Moreover, it has one and only one positive root +c, because it does not contain +b, and +c is necessarily linked by an external link to either a negative root or a negative vertex just below it (if not, there would be a type 1 link +x – -c, with c externally linked to +c, the alternating path from c to +x would thus necessarily pass through +c and -b, which is impossible according to the first part of the proof).",
        "When all the type 2 links attached to b are removed, there remains only the external link b +b which is a WLG, and we can perform this decomposition for each part resulting from a previous step.",
        "It would then be possible to reconstruct the graph accordint to the induction schemes (I) and (II), starting only from axioms.",
        "Corollary: well linked graphs are sound and complete with respect to the calculus A."
      ]
    },
    {
      "heading": "4 Method of construction of a well linked graph",
      "text": [
        "An alternating tree was defined by a set of signed vertices and a set of typed links which link them.",
        "We are now adding two new kinds of entity in order to facilitate tree-encoding."
      ]
    },
    {
      "heading": "4.1 Colours and anti-colours 4.1.1 Colours",
      "text": [
        "Let us assign to each vertex in a sequence of trees [-Al, -A2, , -An, +B] a colour (originally unknown and represented by a free variable X) in order that a) two nodes linked by a type 2 link have same colours b) two nodes which are not linked or which are linked by a type-1 link have not the same colours (X Y).",
        "Proposition 8:for every connection graph G with set of type 1 links Ll , the connectivity and acyclicity of G – Ll translates into: every external link links two nodes having differents colours.",
        "After linking by an external link, the two colours are equalized (X = Y)."
      ]
    },
    {
      "heading": "4.1.2 Anticolours",
      "text": [
        "Anticolours are assigned to nodes in an alternating tree in order that a) two nodes linked by a type 1 link have same anticolour,",
        "b) if a positive node receives an anticolour a, (by (a) or by an external link), the negated anticolour – ia is transmitted to all other positive nodes having same colour.",
        "Rule: 1) When joining two nodes by an external link, which are associated with different (positive) anticolours a and [3, a and 13 are said to be equalized, that means: put in a same multi-set.",
        "2) When joining a node having a negated anticolour to a node having a colour X by an external link, the anticolour – 43 is transmitted to the colour X as a label.",
        "3) When linking two ends of a type 1 link by external links, the two occurrences of the same (positive) anticolour a must meet only one colour, or two colours which have been already equalized and such that one of the two is not labelled by a negated anticolour – 13 if 13 is an anticolour already equalized to a.",
        "Proposition 9: in a connection graph G, the strong connectivity translates into: the anticolour proper to a",
        "type I link meets only one colour (or colours which have been equalized).",
        "Corollary: Every connection graph verifies: CGO, CG2 , CG3', CG4', CG5', CG6 where: CG3' is the condition on unifying anti-colours, CG4' the conditions on colours, CG5' the fact that any connection graph is monocoloured."
      ]
    },
    {
      "heading": "4 . 2 Method",
      "text": []
    },
    {
      "heading": "4.2.1 Categories",
      "text": [
        "Definition 9: We call a category any set of 6-tuples each consisting in:",
        "• a label taken from an alphabet A, • a sign (+ or -) • an index (integer), • a colour (free variable) • an anticolour (free variable of a second sort) • the indication of being a root if it is the case.",
        "Definition 10: We call an ordered category a category where 6-tuples are ordered according to their index.",
        "Proposition 10: each alternating tree has one and only one encoding into an ordered category.",
        "Definition 11: two 6-tuples are said to be mergeable if:",
        "• they have same literal label, • they have opposite signs, • they have different colours, • if one of them has an anticolour a, the other must not have a colour which has been labelled by a negated anticolour – 13 such that a and II have already been equalized, in a same multiset.",
        "• if one node is the positive root, the other is a negative root or a negative node just below it in the same tree (same anticolour)."
      ]
    },
    {
      "heading": "4-2-2 A sketch of an algorithm",
      "text": [
        "We scan the ordered list of nodes from left to right, creating links at each step, between the current node and all the possible mergeable nodes on its left or just shifting.",
        "When nodes are shifted, they are pushed onto a stack.",
        "Links are recorded on the chart in the following way.",
        "Each link is a node of the chart (in consequence, the chart has no more than n2 nodes, where n is the number of nodes on the reading tape R).",
        "A link 1 is joined by arcs in the chart to all links already recorded 11, ... in such that 1 makes a correct partial linking by insertion into the linkings represented by the paths arriving at 11, ...",
        "In.",
        "and 1 has a left extremity which coincides with either the rightmost right extremity of a link already recorded on such a path, or with a top of stack attached to such a previously recorded link.",
        "Thus, a link 1 may be an arriving point for several paths.",
        "In this case, we will consider 1 as a new starting point.",
        "That means that when joining a new link 1' to links above 1 in the chart, we only test the correctness of a partial linking down to the link 1.",
        "We consider here that if I is in the chart at this place, there is necessarily a correct path up to it, and all the partial paths from 1 to the current node are, by definition, correct.",
        "Thus, when adding a link above 1 (and before a possible new \"crossroads\"), even if there are many paths joining 1 to it, there is at least one correct path from the bottom of the chart to the current node.",
        "Each time a link is recorded and joined to other ones, we record for each arc arriving at it, the possible tops of stack, the possible rightmost right extremities, the list of nodes through which the path has passed since the previous embranchment, the list of equalized colours (possibly labelled with negated anticolours) and the list of equalized anticolours (for the piece of path coming from the previous embranchment).",
        "When joining a new link, we have to retrieve a new top of the stack, if added by consuming a previous one or a previous rightmost right extremity, and to test the correctness of the path.",
        "This necessitates a descent along paths down to the bottom of the chart.",
        "This descent is made deterministic because of the informations stored on arcs.",
        "If n is the number of nodes in the original sequent, a maximum of n2 links may be created, and there can be a maximum of n4 arcs in the chart.",
        "At step i, there can be a maximum of i4 arcs.",
        "We add new links on the basis of stack informations stored on arriving arcs at each previously recorded link.",
        "Each checking does not take more than i steps, and there are at most i2 nodes to check at step i.",
        "For a given link to add, when looking for new tops of the stack and checking the correctness of the new linking, we explore the current state of the chart by scanning no more than twice (one in one direction, one in the other) each arc it contains.",
        "Thus joining a new link to previous ones entails a maximum of 217 steps.",
        "At step i, i new links can be added.",
        "Thus step i entails a maximum of 2i8 steps.",
        "Thus, when reaching step n, we have done a maximum of 2Ei8 steps (i=1 to n), that is 0(n9).",
        "This is obviously a too big order.",
        "Nevertheless,",
        "the method is time-polynomial and more improvements can be expected in the future.",
        "Example: Suppose we have to demonstrate the sequent: (a/a) / (a/a) a/a a/a a a\\a – 3 a (cf fig 1) At beginning steps 1, 2, 3, 4, nodes are pushed onto the top of the stack.",
        "At step 5, the link (4 5) is created and recorded in the chart.",
        "The new top of stack 3 is attached to it.",
        "At step 6, (3 6) is added (with new top of stack 2), on the top of the previous link.",
        "At step 7, (6 7) is created and joined to (4 5) (with top of stack 3) and not to (3 6) (because they have the node 6 in common).",
        "(2 7) is joined to (3 6) (with top of stack 1).",
        "At step 8, (3 8) is created and joined to (6 7) (with top of stack 2), but not to (2 7) because of anticolours (7 receives – ,13 and 8 receives (3 and they have same colour).",
        "(1 8) is not created because they have same colour.",
        "At step 9, (2 9) is created and joined to (3 8), and (8 9) is created too, but joined to (6 7) and (2 7).",
        "At step 10, (1 10) is joined to (8 9), (3 10) is joined to (8 9) and (6 7), (9 10) to (3 8).",
        "(7 10) is also joined to (8 9) and (3 8) because 7 is a rightmost right extremity in paths leading to these nodes.",
        "In such a circumstance, the node previously linked to the released right extremity, here 2 or 6 is pushed onto the stack.",
        "After that, (2 11) may be added to (7 10) and (9 10) but not to (2 11) because of anticolours.",
        "And finally, (1 12) may be joined to (2 11) and (11 12) to (1 10).",
        "By looking at the list of nodes attached to links installed in the chart, we see that these last moves lead to complete linkings.",
        "By going down to the bottom of the chart, we find the three solutions: [1 [2 [3 [4 5] 6] 7] [8 9] 10][11 12], [1 [2 [3 [4 5] 6] [7 [8 9] 10] 11] 12] and [1 [2 [3 [4 5] [6 7] 8] [9 10] 11] 12] (cf fig 2).",
        "fig2: the final chart.",
        "correct linking of nodes in an ordered sequence of types represented as trees.",
        "Such a linking corresponds to an alternating spanning tree in a graph.",
        "We have shown that this method is sound and complete with respect to the associative product free Lambek calculus and we have given an idea of what an algorithm for finding such a spanning tree could be."
      ]
    }
  ]
}
