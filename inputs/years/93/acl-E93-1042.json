{
  "info": {
    "authors": [
      "Peter Staudacher"
    ],
    "book": "Conference of the European Association for Computational Linguistics",
    "id": "acl-E93-1042",
    "title": "New Frontiers Beyond Context-Freeness: Di-Grammars and Di-Automata",
    "url": "https://aclweb.org/anthology/E93-1042",
    "year": 1993
  },
  "references": [
    "acl-C86-1048",
    "acl-J81-4003",
    "acl-J87-1001",
    "acl-P87-1015",
    "acl-P88-1034"
  ],
  "sections": [
    {
      "heading": "NEW FRONTIERS BEYOND CONTEXT-FREENESS: DI-GRAMMARS AND DI-AUTOMATA.",
      "text": []
    },
    {
      "heading": "Abstract",
      "text": [
        "A new class of formal languages will be defined - the Distributed Index Languages (DI-languages).",
        "The grammar-formalism generating the new class - the DI-grammars - cover unbound dependencies in a rather natural way.",
        "The place of DI-languages in the Chomsky-hierarchy will be determined: Like Aho's indexed Languages, DI-languages represent a proper subclass of Type 1 (contextsensitive languages) and properly include Type 2 (context-free languages), but the DI-class is neither a subclass nor a super class of Aho's indexed class.",
        "It will be shown that, apart from DI-grammars, DI-languages can equivalently be characterized by a special type of automata - DI-automata.",
        "Finally, the time complexity of the recognition-problem for an interesting subclass of DI-Grammars will approximately be determined."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "It is common practice to parse nested Wh-dependencies, like the classical example of Rizzi (1982) in (1),",
        "(1) Tuo fratello, [a cui] 1 mi domando [che storie]2 abbiano raccontato t2 t1, era molto preoccupato (Your Brother, [to whom]1 I wonder [which storiesb they told t2 t1 was very troubled) using a stack mechanism.",
        "Under the binary branching hypothesis the relevant structure of (1) augmented by wh-stacks is as follows: (2) [a cui]i mi domando",
        "Up to now it is unclear, how far beyond context freeness the generative power of a Type 2 grammar formalism is being extended if such a stack mechanism is grafted on it (assuming, of course, that an upper bound for the size of the stack can not be motivated).",
        "Fernando Pereira's concept of Extraposition Grammar (XG), introduced in his influential paper (Pereira, 1981; 1983; cf. Stabler, 1987) in order to delimit the new territory, can be shown to be inadequate for this purpose, since it is provable that the class of languages generable by XGs coincides with Type 0 (i.e. XGs have the power of Turing machines), whereas the increase of power by the stack mechanism is not even enough to generate all Type 1 languages (see below).",
        "In (2) an additional point is illustrated: the stack R2,t1] belonging to V2 has to be divided into the substacks It21 and [til, which are then inherited by the daughters VI and PP.",
        "For the PP-index t is not discharged from the top of the V2-stack [t2,t1].",
        "Generalizing to stacks of unlimited size, the partition of a stack among the inheriting subconstituents K1 and K2 of a constituent Ko is as in (3)",
        "If the generalization in (3) is tenable, the extension of context-free grammars (Vijay-Shanker and Weir, 1991, call the resulting formalism \"linear indexed grammar\" (LIG)) discussed by Gazdar in (Gazdar, 1988), in which stacks are exclusively passed over to a single daughter (as in (3.1)), is too weak.",
        "By definition (see above), the intersection of the class of indexed languages and the class of DI-languages includes the context-free (cfr) languages.",
        "The inclusion is proper, since the (non-cfr) language L1 is generated by G1 = ({S,A,B}, {a,b,c), {f,g}, RI, S), where R1 = {S > aAfc, A > aAgc, A > B, Bg --> bB, Bf b}, and G1 obviously is both a DI-grammar and and an indexed grammar.-Like cfr.",
        "languages and unlike indexed languages, DI-languages have the constant growth property (i.e. for every DI-granunar G there exists a kEN, s.th.",
        "for every wEL(G), s.th.",
        "Twl>k, there exists a sequence w1",
        "=*=> zs 1... snA(fps 'z' =*=> zsi...snrnB(f,u)fr'ss 'z =*=> zs 1... snrntn... t iBfrit '...tn'rn'sn'... 51Z --*=> zssnrntn... tiwt '...tn'rn'sn'... 51Z The interdependently extendible parts of x s1...sn, tn...ti, ti'...tn', rnrn', and sn'... s1', can not all be sub words of the central component [xm] of x (or all be subwords of the peripheral components xixr), else, [xin] (or xixr) could be increased and decreased independently of the peripheral components x1 and xr (or of [xm], respectively) of x, contradicting the assumption that x E L3.",
        "Rather, the structure of x necessitates that .si...sn and sn'...si' be subwords of xixr and that the \"pumped\" index von be discharged deriving the central component [xm].",
        "Thus, we know that for every />0 there exists an index u E Ft a x E L3, and a subword [xin'l of the central part [xin] of x such that [xml>/ and Mu=*=>[xm] (M=B or the nonterminal of a descendant of A(fiu )nA).",
        "To simplify our exposition we write [xin'l instead of [xtn] and have (7) Mp.",
        "=*=> [xm] with the structure of x1 and xr being encoded and stored in the index IA.",
        "2.",
        "The balanced parentheses of [xin] can not be encoded in the index p. in (7) in such a manner that [xin] is a homomorphic image of t. For the set I={ g'; S=*=>xiMtexr =*=>x1[xmlxrEL3) of all indices which satisfy (7) is regular (or of Type 3), but because of the Dyck-structure of [xm], Livr--{[xin];xi[xm]xrEL3) is not regular but essentially context-free or of Type 2.",
        "3.",
        "In the derivation underlying (7) essential use of branching rules of the type A*B1B2...Bk (12) has to be made in the sense that the effect of the rules can not be simulated by linear rules.",
        "Else the central part [xin] could only have linear and not trans-linear Dyck-structure.",
        "Without branching rules the required trans-linear parenthetical structure could only be generated by the use of additional index-introducing rules in (7), in order to \"store\" and coordinate parentheses, which, however, would destroy the dependence of [xml from x1 and xr.",
        "4.For everyL3 contains words w of the form",
        "where k--=2\", WiE{a,b} for lsi211., m(w) is the mirror image of w1.",
        "i.e the central part [xm] of such a word contains 211+11 pairs of parentheses, as shown in (9) for n=3: (9) [Ww81 Ew711[[w6] [w5]]] [[[w4] [w3]] [[w2] [will]] According to our assumption, GI generates all words having the form (8).",
        "Referring to the derivation in (7), consider a path from MIA to any of the parenthesized parts wi of [xm] in (8).",
        "(Ignoring for expositional purposes the possibility of \"storing\" (a constant amount of) parentheses in nonterminal nodes,) because of 2. and 3. an injective mapping can be defined from the set of pairs of parentheses containing at least two other (and because of the structure of (8) disjunct) pairs of parentheses into the set of branching nodes with (at least) two nonterminal daughters.",
        "Call a node in the range of the mapping a P-Node.",
        "Assuming without loss of generality that each node has at most two nonterminal daughters, there are 2n-1 such P-nodes in the subtree rooted in Mp and yielding the parenthesized part [xm] of (8).",
        "Furthermore, every path from I^41.1 to the root Wi of the subtree yielding [wi] contains exactly n P-nodes ( where 2n=k in (8)).",
        "Call an index-symbol f inside the index-stack p. a wiindex if f is discharged into a terminal constituting a parenthesized wi in (8) (or equivalently, if f encodes a symbol of the peripheral x1..xr).",
        "Let ft be the first (or leftmost) wi-index from above in the index-stack m, and let wt be the subword of [xm] containing the terminal into which ft is discharged, i.e all other wi-indices in are only accessible after ft has been consumed.",
        "Thus, for 1.1.Kfta we get from (7) Mafto+=>uBt[rtftcriv=+=>utWarftcrIvt and wt[tftal'+'>wt The path Pt from Mp.",
        "to wt contains n B-nodes, for k=211 in (8).",
        "For every B-node B (0..<j<n) of Pt we obtain because of the index-multiplication effected by no terminal branching:",
        "Every path Pi branching off from Pt at Bi [yes] leads to a word wJ .",
        "derived exclusively by discharging wrin-dices situated in p. below (or on the right side of) ft. Consequently, ft has to be deleted on every such path P. before the appropriate indices become accessible, J' i.e. we get for every j with 05 j<n: Bi[tfer] = > uiRi [xi fta] yi =*= > yjCi[ftcr]zi, (Bi,Rj,Ci EN,T.i,crEF*,ft EF) Thus, for n>INI in (8) (INI the cardinality of the non terminal alphabet N of Gj, ignoring, as before the constant amount of parenthesis-storing in nonterminals) because of 1{Ci;05j<n}l=n the node-label Ci[fics] occurs twice on two different paths branching off from P, i.e. there exist p, q (Op<q<n) such that:",
        "(= the Dyck-language from (5.3)).",
        "I.e. GI generates words w\" =x1\"[xmixr\", the central part of which contain a duplication (of \"z\" in [xml=yizy2zy3) without correspondence in x1\" or xr\", thus contradicting the general form of words of L3.",
        "Hence L3 is not indexed.",
        "2.2 DI-Grammars and Linear Indexed Grammars' As already mentioned above, Gazdar in (Gazdar, 1988) introduced and discussed a grammar formalism, afterwards (e.g. in (Weir and Joshi, 1988)) called linear indexed grammars (LIG's), using index stacks in which only one nonterminal on the right-hand-side of a rule can inherit the stack from the left-hand-side, i.e. the rules of a LIG G=(N,T, F, P, S) with N,F,T,S as above, are of the Form i.",
        "A[..] -Ai[]...Ai[..].. An",
        "iv.",
        "An >a where AI,...,AnEN, fEF, and a ETV{6}.",
        "The \"derives\"- relation => is defined as follows aA[fl..iniP=.>01,41[1- A [11-inl-AnUR if A[..] 'Thanks to the anonymous referees for suggestions for this section and the next one.",
        "aAVI frJ13>all 1 [1n if A[..]-->Ain..Ai[f..]..AneP aAlffl...frOP=>\" 1 [1- A ill ifn] AR if A[f..] []0=>aaf3 if A[] =*=> is the reflexive and transitive closure of =>, and L(G)={w; WET* & S[]=*=>w}.",
        "Gazdar has shown that LIGs are a (proper) subclass of indexed grammars.",
        "Joshi, Vijay-Shanker, and Weir (Joshi, Vijay-Shanker, and Weir, 1989; Weir and Joshi, 1988) have shown that LIGs, Combinatory Categorial Grammars (CCG), Tree Adjoinig Grammars (TAGs), and Head Grammars (HGs) are weakly equivalent.",
        "Thus, if an inclusion relation can be shown to hold between DI-languages (DEL) and LILs, it simultaneously holds between the DEL-class and all members of the family.",
        "To simulate the restriction on stack transmission in a LIG GHNI,T, F1, P1, S1) the following construction of a DI-grammar Gd suggests itself: Let Gd =(N, T, F, P, S) where N-{S}={X'; XEN1}, F={f ; fEFI}u{#}, and P={S>S1'#}",
        "It follows by induction on the number of derivation steps that for X' EN, XENI, R'EF*, LEFT*, and w ET* (10) X'1.1.",
        "'i*G=>w if and only if X[p.]=*Gi=>w where X'=h(X) and g'=h(g) (h is the homomorphism from (N1k..)F0* into (NuF)* with h(Z)=Z).",
        "For the nontrivial part of the induction, note that A'filif can not be terminated in G. Together with S=>S1'1# (10) yields L(G1)=L(G).",
        "The inclusion of the LIG-class in the DI-class is proper, since L3 above is not a LIG-language, or to give a more simple example:",
        "to (Vijay-Shanker, Weir and Joshi, 1987) not in TAL, hence not in LIL.",
        "But (the indexed langauge) is generated by the DI-Grammar",
        "only in combination with a \"matching\" non-index-symbol.",
        "A nsa, on the other hand, embeds new stacks behind tape symbols which are preserved and can, thus, be used for further stack-embeddings.",
        "This provides for part of the stack multiplication effect.",
        "2.",
        "Moving through the stack in the stack reading mode, a dia is not allowed to pass or skip an index symbol.",
        "Moreover, no scanning of the input or change of state is permitted in this mode.",
        "A nsa, however, is allowed both to scan its input and change its state in the stack reading mode, which, together with the license to pass tape symbols repeatedly, provides for another part of the stack multiplication effect.",
        "3.",
        "Unlike a nsa, a dia needs two tape alphabets, since only \"index symbols\" can be replaced by new stacks, moreover it requires two sets of states in order to distinguish the pushdown mode from the stack reading mode.",
        "Formally, a di-automaton is a 10-tuple D qq,QT;T,r, where q is the control state for the pushdown mode, QT=(q; AEI) a finite set of stack reading states, T a finite set of input symbols, Fa finite set of storage symbols, I a finite set of index symbols where InF=2, ZoFis the initial storage symbol, $ is the top-of-stack marker on the storage tape, is the bottom-of embedded stack marker on the storage tape, # marks the bottom of the storage tape, where $,,#e1u7L)1,",
        "1) in the push down mode: from (q) x T' x $Finto finite subsets of (q) x D x $F((1-v1)*) 2) in the stack reading mode: for every A el-(a)from (qA) x T' x r into subsets of (qA) x (0) x (1) (for walking down the stack) (b)from (q) xT' x $(A) into subsets of (qA) x (0) x (1) (for initiating the stack reading mode) (c) from (q) x x (A) into subsets of (q) x (0) x (-1) (for climbing up the stack) 3) in the stack creation mode:",
        "from Qrx T' xl into 4finite subsets of (q) x (0) x $F((Ful) ), and from Qrx T' x $1 into finite subsets of (q) x (0) x $$F((ruI)*) (for replacing index symbols by new stacks, preserving the top-of-stack marker $) 4) in the stack destruction mode: from (q) x T' x (4) into subsets of (q) x (0).",
        "As in the case of Aho's nested stack automaton a configuration of a DI-automaton D is a quadruple where",
        "1. p E {q}uQF is the current state of D; 2. a1.. .an is the input string, # the input endmarker; 3. i (15_i_n+1) the position of the symbol on the input tape currently being scanned by the input head (=ai); 4.",
        "X1...^X1...Xm the content of the storage tape where for m>1 'Xi=$A, A6F, Xm4i, X2...Xm_i E (FL) IlJ{$,O})*; Xi is the stack symbol currrently being read by the storage tape head.",
        "If m=1, then Xm=$#.",
        "As usual, a relation 113 representing a move by the automaton is defined over the set of configurations: (i)(q,a ...anki,a$AAY0)",
        "if (q,0)E6(q,ai,$^).",
        "IV is the reflexive and transitive closure of h).. N(D) or the language accepted by empty stack by D is defined as follows",
        "(i.e.: if input symbol x = \"predicted\" terminal symbol x, then shift input-tape one step (\"P) and delete successful prediction\" (replace $x by $)) 8(q,x,SZ) contains {(qz, 0,$)), (i.e.: change into stack reading mode in order to find indices belonging to the nonterminal Z) 8(qz,x,SY) = 8(qz,x,19 contain ((qz, 0,1)) (for every x e T, Y El) (i.e.seek first index-symbol belonging to Z inside the stack)",
        "(i.e. simulate the index-rules Zf-->Za, Zf-->a by creation of embedded stacks)",
        "(i.e. move to top of (sub-)stack).",
        "The following theorem expresses the equivalence of DI- grammars and DI-automata",
        "Proof by induction on n (i.e. the number of derivation steps): If n=1, then (i) is of the form A.-->a where aET and since only a rule of the formcan be applied because of the normal form of G and since in DI-grammars (unlike in indexed grammars) unconsumed indices can not be swallowed up by terminals.",
        "Because of the construction of 8, (ii) is of the form",
        "Suppose Lemma 1.1 is true for all n<ne with n'>1.",
        "A leftmost derivation Afi...fk =n => a1.. .am can have the following three forms according as A is expanded in the first step: =>Bfi...fp1+1...fk =n2=>a ... aiai+F.. am with ni<n' and n2<n' fk=n1=->a I ...am with n i<re.",
        "3)Af...fk=11=>ai... am with ni<n' and (M1->B)EP.",
        "From the inductive hypothesis and from 1.-8. above, it follows",
        "For all01.-Pke(Nu{0}):, ocE(Nk-4$,))*4 AEN, I.LE(NuFk.",
        "){0}) , and ai...ameT 11.1 and 11.2 is true: 11.1: (qa1...am#,1,4^AP1f1... Pkfk11#) 1-pn (q,ai...amkm+1,a$131...130111) then in G the derivation is valid Afl...fk=*=>al am.",
        "11.2: If is a leftmost derivation in G, then the following transition of D is valid (q,a ...am#,1,4^A(31f1... kfkli#) J* (q,ai ...am#,m+1,oc$^131...",
        "The proofs by induction of 1.1 and 11.2 (unlike the proofs of the corresponding lemmata for nsa's and indexed grammars (s.Aho, (1969)) are as elementary as the one given above for 1.1 and are omitted.",
        "The DI-automaton concept can be used to show the inclusion of the class of DI-languages in the class of context-sensitive languages.",
        "The proof is strucurally very similar to the one given by Aho (Aho, 1968) for the inclusion of the indexed class in the context-sensitive class: For every DI-automaton A, an equivalent DI- automaton A' can be constructed which accepts its input w if and only if A accepts w and which in addition uses a stack the length of which is bounded by a linear function of the length of the input w. For A' a linear bounded automaton M (i.e the type of automaton characteristic of the context-sensitive class) can be constructed which simulates A'.",
        "For reasons of space the extensive proof can not be given here."
      ]
    },
    {
      "heading": "4 Some Remarks on the Complexity of DI-Recognition",
      "text": [
        "The time complexity of the recognition problem for DI- grammars will only be considered for a subclass of DI- grammars.",
        "As the restriction on the form of the rules is reminiscent of the Chomsky normal form for context free grammars (CFG), the grammars in the subclass will be called DI-Chomsky normal form (DI-CNF) grammars A DI-grammar G=(N,T,F,P,S) is a DI-CNF grammar if and only if each rule in P is of one of the following forms where A,B,CEN-{S}, fEF, aET, S-E, if L(G), (a) A>BC, (b)A-BfC, (c) A>BCf, (d) Af.BC, (e)Af>a, (f) A>a The question whether the class of languages generated by DI-CNF grammars is a proper or improper subclass of the DI-languages will be left open.",
        "In considering the recognition of DI-CNF grammars an extension of the CKY algorithm for CFGs (Kasami, 1965; Younger, 1967) will be used which is essentially",
        "inspired by an idea of Vijay-Shanker and Weir in (Vijay-Shanker and Weir, 1991).",
        "Let the n(n+1)12 cells of a CKY-table for an input of length n be indexed by i and j (1i_<j_n) in such a manner that cell Zj j builds the top of a pyramid the base of which consists of the input As in the case of CFGs a label E of a node of a derivation tree (or a code of E) should be placed into cell only if in G the derivation E=*=>ai...ai is valid.",
        "Z1,3 Since nonterminal nodes of DI-derivation trees are labeled by pairs (A,u) consisting of a nonterminal A and an index stack It and since the number of such pairs with (A,g) =*=> w can grow exponentially with the length of w, intractability can only be avoided if index stacks can be encoded in such a way that substacks shared by several nodes are represented only once.",
        "Vijay-Shanker and Weir solved the problem for linear indexed grammars (LIGs) by storing for each node K not its complete label Af1f2...1n, but the nonterminal part A together with only the top fi of its index stack and an indication of the cell where the label of a descendant of K can be found with its top index f2 continuing the stack of its ancestor K. In the following this idea will be adopted for DI-grammars, which, however, require a supplementation.",
        "Thus, if the cell Z11 of the CKY-table contains an entry beginning with .\"<A,fi, (B,f2,q,p),..>\", then we know that Ap=*=>ai...ai with it=f1 EF* is valid, and further that the top index symbol f2 on gi(i.e. the continuation of f1) is in an entry of cell Zpq beginning with the notenninal B.",
        "If, descending in such a manner and guided by pointer quadruples like an entry of the form <C,fn,-,..> is met, then, in the case of a LIG-table, the bottom of stack has been reached.",
        "So, entries of the form are sufficient for LIGs.",
        "indicates that the next symbol f3 below f2 on the index stack belonging to B1 can be found in cell Zwi in the entry for the nonterminal D; the second quadruple (C,ft,r,^) points to the descendant C of B 'carrying the last index ft of Bland containing a place where a continuation pointer to a neighbouring path can be added or has already been added.",
        "To illustrate the extended CKY-algorithm, one of the more complicated cases of specifying an entry for the cell Zi,j is added below which dominates most of the other cases in time complexity: FOR i:=n TO 1 DO FOR j:=i TO n DO FOR k:=i TO j-1 DO For each rule A-4 A1fA2: if <A1,f,(Bi,fi,p1,q1),(Ci,f3,si ti)>EZi,k for some Bi, C1EN,f1,f3EF?, Pi , qi (i4115_qic), si,ti (ip15s15..t1Sk) and <A2,fc,-,-> EZki_ii for some fcEF",
        "The pointer (A2,,fc,k+1,j) in the new entry of Z11 points to the cell of the node where the end of stack of the newly created node with noterminal A can be found.",
        "The same pointer (A2,fc,,k+/,j) appears in cell Zsim as \"supplement\" in order to indicate where the stack of A is continued behind the end-of-stack of Al.",
        "Note that supplemented quadruples of a cell Z1, are uniquely identifiable by their form <N,f1,(C,f2,r,^),->, i.e. the empty fourth component, and by the relation j5_rss.",
        "Supplemented quadruples cannot be used as entries for daughters of \"active\" nodes, i.e. nodes the entries of which are currently being constructed.",
        "Let a1.. .a be the input.",
        "The number of entries of the form <B,f1,(D,f2,p,q),(C,f3,r,^)> (f1,f2,f3eF, B,C, DE N, li,p,q,r,s,$n) in each cell Zi,iwill then be bounded by a polynomial of degree 4, i.e. 0(n4).",
        "For a fixed value of ij,k, steps like the one above may require 0(n8) time (in some cases 0(112)).",
        "The three initial loops increase the complexity by degree 3."
      ]
    }
  ]
}
