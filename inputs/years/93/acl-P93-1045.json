{
  "info": {
    "authors": [
      "Beryl Hoffman"
    ],
    "book": "Annual Meeting of the Association for Computational Linguistics",
    "id": "acl-P93-1045",
    "title": "The Formal Consequences of Using Variables in CCG Categories",
    "url": "https://aclweb.org/anthology/P93-1045",
    "year": 1993
  },
  "references": [
    "acl-P88-1034",
    "acl-P92-1044"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "Combinatory Categorial Grammars, CCGs, (Steedman 1985) have been shown by Weir and Joshi (1988) to generate the same class of languages as Tree-Adjoining Grammars (TAG), Head Grammars (HG), and Linear Indexed Grammars (LIG).",
        "In this paper, I will discuss the effect of using variables in lexical category assignments in CCGs.",
        "It will be shown that using variables in lexical categories can increase the weak generative capacity of CCGs beyond the class of grammars listed above."
      ]
    },
    {
      "heading": "A Formal Definition for CCGs",
      "text": [
        "In categorial grammars, grammatical entities are of two types: basic categories and functions.",
        "A basic category such as NP serves as a shorthand for a set of syntactic and semantic features.",
        "A category such as S\\N P is a function representing an intransitive verb; the function looks for an argument of type NP on its left and results in the category S. A small set of combinatory rules serve to combine these categories while preserving a transparent relation between syntax and semantics.",
        "Application rules allow functions to combine with their arguments, while composition rules allow two functions to combine together.",
        "Based on the formal definition of CCGs in (Weir-Joshi 1988), a CCG, G, is denoted by (VT, VN , S, f, R), where",
        "• VT is a finite set of terminals, • VN is a finite set of nonterminals, • S is a distinguished member of VN, • f is a function that maps elements of VT U fej to finite subsets of C( VN), the set of categories, where, - VN C C(VN) and - if ci and c2 E C(VN), then (ci \\ c2) and (ci/c2) E",
        "• R is a finite set of combinatory rules where X ,Y, Z1, .",
        ", Zn are variables over the set of categories C(VN), and the slash variable L can bind to \\ or /.",
        "Certain restrictions may be placed on the possible instantiations of the variables in the rules.",
        " – Forward Application (>): X/Y Y – Backward Application (<): Y X\\Y – + X – Generalized Forward Composition (>B(n) or >Bx(n)): For some n > 1, X/Y .AZ16 ... – Generalized Backward Composition",
        "The derives relation in a CCG is defined as ac# ac1c2# if R contains the rule CI c2 c. The language generated by this grammar is defined as",
        "Under these assumptions, Weir and Joshi (1988) prove that CCGs are weakly equivalent to TAGs, HGs, and LIGs.",
        "Their conversion of a CCG to a LIG' relies on the fact that the combinatory rules in the CCG are linear.",
        "To preserve linearity in CCGs, only the category X in the combinatory rules can be unbounded in size; the variables Y and Z must be bounded in their possible instantiations.",
        "In other words, only a finite number of categories can fill the secondary constituent of each combinatory rule.",
        "The secondary constituent is the second of the pair of categories being combined in the forward rules and the first of the pair in the backward rules (e.g. .",
        "• • I Zn Weir and Joshi do not restrict the size of the secondary constituents in the formal definition of the CCG rules, but they prove that the following lemma holds of the grammar.",
        "'Linear Indexed Grammars are a restricted version of Indexed Grammars in which no rule can copy a stack of unbounded size to more than one daughter (Gazdar 1985).",
        "There are an infinite number of derivable categories in CCGs, however Weir and Joshi show that the number of components that derivable categories have is bounded.",
        "The components of a category c = (COI1C112- • In Cn ) are its immediate components co, ..., c, and the components of these immediate components.",
        "A finite set Dc(G) can be defined that contains all derivable components of every useful category where a category c is useful if c w for some w in",
        "where c' E f (a) for some a E VT U {e} .",
        "Given that every useful category matching the secondary constituents Y and Y in the combinatory rules has components which are in D (G), the lemma given above holds.",
        "However, this lemma does not hold if there are variables in the lexical categories in VT. Variables can bind a category of any size, and thus useful categories containing variables do not necessarily have all of their derivable components in the finite set D (G)."
      ]
    },
    {
      "heading": "The Use of Variables Linguistic Use",
      "text": [
        "In CCGs, a type-raising rule can be used in the lexicon to convert basic elements into functions; for example, an NP category can be type-raised to the category SAS\\NP) representing a function looking for an intransitive verb on its right.",
        "Steedman uses type-raising of NPs to capture syntactic coordination and extraction facts.",
        "In Steedman's Dutch grammar (1985), variables are used in the lexical category for type-raised NPs, i.e. the variable v in the category v I (v\\N P) generalizes across all possible verbal categories.",
        "The use of variables allows the type-raised NPs in the following coordinated sentence to easily combine together, using the forward composition rule, even though they are arguments of different verbs."
      ]
    },
    {
      "heading": "Formal Power",
      "text": [
        "I will show that the use of variables in assigned lexical categories increases the weak generative capacity of CCGs.",
        "VAR-CCGs, CCGs using variables, can generate languages that are known not to be Tree-Adjoining Languages; therefore VAR-CCGs are more powerful than the weakly equivalent TAG and CCG formalisms.",
        "The following language is known not to be a TAL: L fanbnednen In > The following VAR-CCG, G', generates a language L' which is very similar to L:",
        "The rules allowed in this grammar are forward and backward application and forward crossing composition with n <2.",
        "The variable v can bind an arbitrarily large category in the infinite set of categories C(VN) defined for the grammar.",
        "In the language generated by this grammar, two characters of the same type can combine together using the forward crossing composition rule >Bx(2).",
        "The composition of the types for the character e is shown below.",
        "A string of e's can be constructed by allowing the result of this composition to combine with another e category.",
        "The types for the characters b, c, and d can combine using the same composition rule; these types contain variables (e.g. v and v' below) which can bind to a category of unbounded size.",
        "By applying the forward crossing composition rule to a string of n b's, we can form the complex category v \\ Ai .",
        ".",
        "/(v \\ Bi .",
        ".",
        "BO representing this string.",
        "Thus, during the derivation of an bncncinen for n > 0, the following complex categories are created:",
        "Once the complex categories for a string of b's, a string of c's, a string of d's, and a string of e's are constructed, we can link one string of a particular character to another using the forward application rule.",
        "This rule can only apply to these categories if = j, j = k,k = 1, and I = m where in is the number of A's generated and i, j, k , 1 are as in the complex categories listed above.",
        "For example,",
        "With each succesful forward application, we ensure that there are equal numbers of two characters: the E's are linked to the D's, the D's are linked to the C's, etc., so that we have the exact same number of all five characters.",
        "In fact, the grammar can be easily extended to generate a language such asfatila'2/aIn > 0} for any k. The language L' generated by G' intersected with the regular language a* b* c* d* e* gives the language L above.",
        "If we assume that L' is a Tree-Adjoining Language (TAL), then L would be a TAL as well since TALs are closed under intersection with Regular languages.",
        "However, since we know that L is not a TAL, L' cannot be a TAL either.",
        "Thus, G' generates a language that TAGs and CCGs cannot."
      ]
    },
    {
      "heading": "Conclusions",
      "text": [
        "We have seen that using variables in the lexical categories of a CCG can increase its weak generative capacity.",
        "However, there is some linguistic motivation for looking at the more powerful formalism of VAR-CCGs.",
        "As argued by Gazdar (1985), this extra power may be necessary in order to capture coordination in natural languages.",
        "We have seen that type-raised categories with variables in CCGs can be used to capture syntactic coordination and extraction facts in Dutch (Steedman 1985).",
        "Further research is needed to decide whether this linguistic motivation warrants the move to a more powerful formalism.",
        "Although VAR-CCGs have a greater weak generative capacity than the class including TAGs, HGs, CCGs, and LIGs, we conjecture that it is still a mildly context-sensitive grammar as defined by Joshi (1985).",
        "The language discussed above is a mildly context-sensitive language since it observes the constant growth and semilinearity properties.",
        "It is an open question whether VAR-CCGs can generate languages which are beyond mildly context-sensitive.",
        "Note that MC-TAGs, which are a more powerful extension of TAGs, can also generate languages like L, and they are known to be mildly context-sensitive formalisms (Weir 1988).",
        "In future research, we will investigate exactly what the resulting generative capacity of VAR-CCGs is."
      ]
    },
    {
      "heading": "Future Research on Word Order",
      "text": [
        "My current research also involves extending the CCG formalism to handle free word order languages.",
        "By representing NPs as type-raised categories, we can derive a scrambled sentence in which the NPs do not occur in the order that the verb specifies:",
        "In many free word order languages, an NP can be scrambled an unbounded distance away from its verb, i.e. long distance scrambling.",
        "If we allow unrestricted composition rules for any n arguments as well as the use of variables in type-raised categories in a CCG, a string of any number of scrambled NPs followed by a string of verbs can be derived.",
        "We first combine any number of verbs together, using backward composition, to get a complex verb category looking for all of the NPs; next, we combine each NPs with this complex verb category.",
        "Any type-raised N pi can combine with the complex verb regardless of the order specified by the complex verb.",
        "The variable in the type-raised category can bind a verbal category of unbounded size, e.g. (v = S\\N pi\\...\\N pi_ 1).",
        "Although we can capture scrambling by using variables in type-raised categories, this analysis is not consistent with incremental processing and cannot account for coordination in scrambled sentences; for instance, in the first example given above, N P2 and NP1 cannot combine together before combining with the verb.",
        "In future research, I will investigate whether VAR-CCGs is an adequate linguistic formalism in capturing all aspects of free word order languages or whether a formalism such as {}-CCGs (Hoffman 1992), which allows sets of arguments in function categories, is better suited."
      ]
    }
  ]
}
