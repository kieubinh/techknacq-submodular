{
  "info": {
    "authors": [
      "Kemal Oflazer",
      "Cemaleddin Guzey"
    ],
    "book": "Applied Natural Language Processing Conference",
    "id": "acl-A94-1037",
    "title": "Spelling Correction in Agglutinative Languages",
    "url": "https://aclweb.org/anthology/A94-1037",
    "year": 1994
  },
  "references": [
    "acl-E93-1066"
  ],
  "sections": [
    {
      "heading": "1 Introduction",
      "text": [
        "Spelling correction is an important component of any system for processing text.",
        "Agglutinative languages such as Turkish or Finnish, differ from languages like English in the way lexical forms are generated.",
        "Typical nominal or a verbal root may generate thousands (or even millions) of valid forms which never appear in the dictionary.",
        "For instance, we can give the following (rather exaggerated) example from Turkish: uygardwtaramayabileceiclerimizdenmivinizcesinel whose morpheme breakdown is:",
        "Methods developed for spelling correction for languages like English (see the review by Kukich (Ku-kich, 1992)) are not readily applicable to agglutinative languages.",
        "This poster presents an approach to spelling correction in agglutinative languages that is based on two-level morphology and a dynamic-programming based search algorithm.",
        "After an overview of our approach, we present results from experiments with spelling correction in Turkish."
      ]
    },
    {
      "heading": "2 Spelling correction algorithm",
      "text": [
        "Our approach comprises two-steps: (1) determining all the roots from the dictionary that can be the root of the misspelled word, and (2) generating (systematically) all the possible words that \"resemble\" the given character string, from these roots.",
        "The first step of the problem is relatively easy because of the static structure of the root dictionary.",
        "Techniques developed for spelling correction, say, in English can usually be applied here.",
        "The second step involves producing all the possible words from the selected roots and requires a generate and test search procedure.",
        "1 This is an adverb meaning roughly \"(behaving) as if you were one of those whom we might not be able We denote the set of the surface forms of the roots in the language by R. We denote by X and Y strings formed using the alphabet of the language.",
        "X will denote the surface form of the incorrect or misspelled string, and Y will typically denote the surface string that is a (possibly partial) candidate word.",
        "Yiex will denote the lexical form of this candidate string.2 We assume the existence of a function, surface() to generate surface strings from lexical strings, i.e., surf ace(Yier) = Y.",
        "The edit distance metric ed(X ,Y ) (Du and Chang, 1992) measures how many unit operations (insertion, deletion, replacement of single character and transposition of two adjacent characters) are necessary to convert one string X into another Y.",
        "We would like to abstract the behavior of a morphological generator and analyzer for the given language by two finite state automata.",
        "A finite state generator Mg = (P, b, V, S, F) where P is a set of states, S is the state transition function, V is the output alphabet, S is the starting state, and F is a set of final states, generates, all correctly formed words of the language.",
        "The transitions of Mg are of the form (pi) = pi (pi and pi E P), with an output vk E V which denotes the lexical form of a morpheme in the language and also labels the transition.",
        "It should be noted that it is possible to go from one state pi to another pi by more than one transition, outputting a different morpheme.",
        "We say a string Yie, is generated by Mg, if Y1ex is formed by concatenating, in order, the outputs of the machine as we traverse starting from S to one of the states in F. We denote by L(Mg) as the set of all lexical strings generated by Mg. We also assume a finite state recognizer Mr which recognizes whether a given surface string is in the language or not.",
        "The spelling correction problem can now be formulated as follows: Given an incorrect word X (rejected by Mr), and an edit distance threshold t, find the solution set of possible correct words S(X ,t) = {Y jed(X ,Y) < t and Y = surf ace(Yi„) and Yle, E L(Mg)} in viable time and space.",
        "'Lexical and surface are used in the two-level morphology sense.",
        "The set of all the possible roots for the incorrect word X is defined as PRIX, t) = {r ed(X[i],r) < t and 1< i < m and r E R}.3 We assume that PR(X, t) can be computed by a standard q – gram technique.",
        "Using a small number (3 - 5) of 2-grams, gives satisfactory solutions in our case.",
        "Assuming that we have a set of root words found as described above, we now have to generate words in the language having these roots, that do not deviate from the given misspelled string by more than the threshold.",
        "The solution requires a generate and test probing of the finite-state automaton Mg, starting with the start state S. We now have to find all the paths from this state to one of the final states using the roots in PR(X, 1), so that when the morphemes along this path are concatenated and surface string is generated, it is within an edit distance t of X.",
        "When the search starts morphemes are concatenated to root and the length of the candidate lexical string Yiex increases.",
        "After one step of the search, the partial surface string Y is compared with a suitable prefix of X.",
        "In most of the cases the candidate Y will deviate from these prefixes of X by more than the threshold without reaching a final state, so that we can no longer get to a viable solution.",
        "In such cases we do not consider any further transitions from that state.",
        "Special attention has to paid when a suffixation changes the surface realization of morpheme immediately to the left."
      ]
    },
    {
      "heading": "3 Results from experiments with",
      "text": []
    },
    {
      "heading": "spelling correction in Turkish",
      "text": [
        "We first present a spelling correction example from our implementation where we used bigrams (q = 2), and we chose the number of bigrams to use for determining the root, k, as 3 (see Figure 1).",
        "We tested EXAMPLE"
      ]
    },
    {
      "heading": "Candidate Roots:4gag Saki gal gall gam gan gap gar gat gati gag gak gakis gal galls gap gat gatis gav gav gay Solutions:5 Lexical Surface",
      "text": [
        "Edit distance 1 cati-Hsi-mA+1ArH-l-y1A catismalanyla gap+Hs-i-mA1-1ArH-1-y1A gapismalarlyla",
        "our algorithm on a set of 141 randomly selected incorrect words from Turkish text with edit distances 1 (86%) and 2 (14%) to their correct form.",
        "The morphological analyzer and generator that we used was our two-level specification for Turkish (Oflazer, 1993), developed using the PC-KIMMO system.",
        "It is, however, rather slow and can analyze only about 2 forms per second and can generate about 50 forms a second on Sun Sparcstations.",
        "So, instead of using timings, we counted the number of times certain expensive operations we called.",
        "The statistics shown in Table 1 show the average number of morphological recognitions and generations, and the edit distance operations required, and the number of correct solutions offered per misspelled input word.",
        "The last column indicates the percentage of cases the intended correct form was found.",
        "We also have developed a algorithm for ranking the solutions which offers the intended correct form as the first in 74% of the cases when t = 1."
      ]
    },
    {
      "heading": "4 Conclusions",
      "text": [
        "This poster has presented a spelling correction algorithm for agglutinative languages that is based on a two-level morphological generator and analyzer, and a intelligent generate and test search procedure."
      ]
    },
    {
      "heading": "5 Acknowledgement",
      "text": [
        "The research was supported in part by a NATO Science for Stability Grant, TU-LANGUAGE."
      ]
    }
  ]
}
