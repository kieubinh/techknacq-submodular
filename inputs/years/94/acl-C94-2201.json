{
  "info": {
    "authors": [
      "Mark Hepple"
    ],
    "book": "International Conference on Computational Linguistics",
    "id": "acl-C94-2201",
    "title": "Discontinuity and the Lambek Calculus",
    "url": "https://aclweb.org/anthology/C94-2201",
    "year": 1994
  },
  "references": [
    "acl-E91-1035"
  ],
  "sections": [
    {
      "text": [
        "Moortgat (1988), for example, uses an ordered sequcnt calculus framework, which allows only two of the possible eight rules to be stated: a rule of proof for existential and a rule of use for universal 1.",
        "Moortgat (1991) uses a proof method in which types are not ordered in proof representations, where linear order constraints and consequences are instead handled using a system of string labelling, i.e. types are associated with string terms, which are explicitly manipulated by inference rules.",
        "This approach allows two further rules to be stated, but the four expressible rules are distributed one per connective, i.e. a complete logic is not given for even any one connective.",
        "As Versmissen (1991) notes, Moortgat's string label system does not allow the recording of a specific position for inserting one string into another, as would seem to be required.",
        "Morrill Solias (1993) avoid this latter problem by augmenting the string labelling algebra with a non associative pairing operator (., .",
        "), allowing labels such as (sr, s2), indicating an insertion point in between s1 and 82.",
        "This system allows versions of f and operators to be specified, but ones whose interpretive definitions differ from Moortgat's.",
        "The non-associativity of pairing gives rise to limited flexibility for the system in terms of the type combinations that can be derived, and even the types that can be constructed, e.g. no functor (XIY)/Z, where a argument is not the first sought, is allowed.",
        "Labelled deduction Sz Lambek calculus I next develop a formulation of L which can be extended to allow for the (existential) discontinuity connectives.",
        "Our starting point is a lambda term semantics for implicational L due to Buszkowski (1987), based on the well known Curry-Howard interpretation of proofs (Howard, 1969).2 This uses a bidirectional variant of the lambda calculus whose basic terms are directionally typed variables.",
        "If 1 is a term of type Y\\ X (resp.",
        "X/Y), and n one of type Y, then (n1)1 (resp.",
        "(tn)r) is a term of type X.",
        "If v is a variable of type Y, and t a term of type X, then Alv.t (resp.",
        "Arv.1) is a term of type 'Y \\X (resp.",
        "X/Y).",
        "A semantics for irnplicational L is given by the class of terms which"
      ]
    },
    {
      "heading": "2 Under the CurryHoward interpretation (Howard, 1969), logical formulas are regarded as types of expressions in typed lambda calculus, with atomic formulas corresponding to basic types, and a formula A.--B to the type of functions from A to B. It, is demonstrable that the set of formulas for which there exists soine correspondingly typed lambda term is precisely the theorems of the implicational fragment of intuitionistic logic. Thus, typed lambda calculus provides a .semantics for implicational intuitionistic logic, i.e. an independent characterisation of 'valid deduction', just as the algebraic semantics of L provides an independent characterisation of validity for that system. Semantics for various other logics can be given in terms of classes of typed lambda terms, i.e. subsets of the typed lambda terms which satisfy certain stated criteria. van Benthem (1983) provides a lambda semantics for the system LP, a commutative variant of L. Wansing (1990) provides lambda semantics for a range of sublogics of intuitionistic logic. The CurryHoward interpretation so permeates categorial work that the terms \"formula\" and \"type\" have become almost interchangeable. Note that I have slightly modified Buszkowski's notation. satisfy the conditions: (131) each subterm contains a free variable, (132) no sub term contains > 1 free occurrence of any variable, (133) each Al (resp. )^r) binds the leftmost (resp. rightmost) free variable in its scope.",
      "text": [
        "This semantics can be used in formulating (implicational) L as is labelled deductive system (LDS: Gabbay, 1991).2 Labels are terms of the directional lambda system, and propagation of labels is via application and abstraction in the standard manner.",
        "Natural deduction rules labelled in this way are as follows:",
        "We can ensure that only deductions appropriate to (implicational) L are made by requiring that the label that results with any inference is a term satisfying Buszkowski's three conditions.",
        "To facilitate testing this requirement, I use a function E, which maps from label terms to the string of their free variables occurring in the left-right order that follows from type directionality (giving what I call a marker term).",
        "A notion of 'string equivalence' ( ) for marker terms is defined by the axioms:",
        "where 1..'\\/(A''v.a)0, E(a)fl.v The following proofs illustrate this LDS (using tFL;rn 'In labelled deduction, each formula is associated with a label, which records information of the use of resources (i.e. assumptions) in proving that formula.",
        "Inference rules indicate how labels are propagated, and may have side conditions which refer to labels, using the information recorded to ensure correct inferencing.",
        "Evidently, the Moortgat (1991) and Morrill & Solias (1993) formalisms are LESs.",
        "Labels encode both the functional structure and linear order information of proofs, and hence are used in identifying both the NL semantic and word order consequences of combinations.",
        "Label terms, however, encode distinctions not needed for NL semantics, but can easily be simplified to terms involving only a single abstractor ()) and with application notated by simple left-right juxtaposition, e.g. Arz x .(x(yz)r)1z.((yz)x).",
        "To determine the linear order consequences of a proof with label a, we might seek a marker en consisting only of concatenated variables, where E(a) =1- m. These variables would be the labels of the proof's undischarged assumptions, and their order in en would provide an order for the types combined under the proof.",
        "Alternatively, for linguistic derivations, we might substitute lexical string atoms in place of variables, and seeker a marker consisting only of concatenated string atoms, i.e. a word string.",
        "This method is adequate for basic L, but problems potentially arise in relation to the discontinuity connectives.",
        "Consider the transformation X/YXIY.",
        "The connective of the result type does not record all the linear order import of the input type's connective, and neither consequently will the application label operator for a subsequent [jE].",
        "However, /3-normalisation yields a simpler label term whose operators record the linear order information originally encoded in the connectives of the types combined.",
        "For example, the following proof includes a subderivation of X/Y XTY.",
        "The overall proof term does not simply order the proof's assumptions under E (giving marker L(s)p.lt(x)); but its 13-normal form (xy)r does (giving xy).",
        "Of course, normalisation can only bring out ordering information that is implicit in the types combined.",
        "For example, the combination )(TY : x,Y : p X : (xy)e is a theorem, but the label (xy)' does not simply order x and y.",
        "However, if we require that lexical sub categorisation is stated only using the standard Lam belt connectives, then adequate ordering information will always be encoded in labels to allow simple ordering for linguistic derivations.",
        "Alternatively, we could allow discontinuity connectives to be used in stating lexical subcategorisation, and further allow that lexical types be associated with complex siring terms, constructed using label operators, which encode the requisite ordering information.",
        "For example, a word w with lexical type XTY might have a string term Acv.",
        "(wv)r , which does encode the relative ordering of w and its argument.",
        "A more radical idea is that deduction be made over lexical types together with their (possibly complex) lexical string terms, and that the testing of side conditions on inferences be done on the 0-normal form of the end label, so that the implicit ordering information of the lexical string term is 'brought out', extending proof possibilities.",
        "Then, the lexical units of the approach are in effect partial proofs or derivations.6 Such a change would greatly extend the power of the approach.",
        "(We shall meet a linguistic usage for this extension shortly.)",
        "Linguistic applications We shall next briefly consider some linguistic uses of the discontinuity connectives in the new approach.",
        "The most obvious role for 1 is in handling extraction (hence its name).",
        "Adapting a standard approach, a relative pronoun might have type rel/(sinp), i.e. giving a relative clause (eel) if combined with sinp (a 'sentence missing a NP somewhere').",
        "Note that standard L allows only types rel/(s/np) and rel/(np \\s), which are appropriate for extraction from, respectively, right and left peripheral positions only.",
        "For example, whom Mary considers _ foolish can be derived under the following proof.",
        "The atom string (6a) results via substitution of lexical string terms in the proof label, and >.",
        "Substitution of lexical semantics and deletion of directional distinctions gives (6b).",
        "(6)a. whom.",
        "marl].",
        "considers.",
        "foolish b. whom' (Au.considers' u foolish' mary') Moortgat (1991) suggests that a (for example) sententially scoped NP quantifier could be typed st(sinp), if infixation and extraction could be linked so that infixation was to the position of the 'missing up' of stoP7 Such linkage does not follow from the definitions of the connectives but can be implemented in the",
        "This paper is concerned with the treatment of discontinuous constituency within Categorial Grammar.",
        "In particular, I address the problem of providing an adequate formalisation of categorial connectives proposed by Moortgat (1988), which are useful for handling certain forms of discontinuous constituency.",
        "Despite some interesting proposals, a satisfactory logic for these connectives has so far remained elusive.",
        "I will provide such a logic, using an approach that falls within the general framework of labelled deductive systems (Gabbay, 1991), employing novel methods for reasoning about linear order in resource usage.",
        "The approach is illustrated by linguistic applications for extraction, pied-piping and quantification.",
        "The Lambek calculus Our general framework is the associative Larnbek calculns (L: Lainbek, 1958), a systein wldch falls within the class of formalisms known as Categorial Grammars.",
        "The set of types is freely generated from a set of primitive (atomic) types (e.g. {s, IlPi }), using binary infix operators \\, /, .",
        "The 'meaning' of these connectives in L is fixed by a semantics for the logic, based on a (semigroup) algebra of strings (E,), i.e. where is an associative, non-commutative binary operator, with two-sided identity c, and E is the set of non-empty (=A a) strings over some vocabulary.",
        "An interpretation function assigns sot ne subset of f to each type, satisfying the conditions below for complex types and type sequences.",
        "A type combination Xi holds in a model ((f.,.",
        "), i[1] ), if 1{X1,,Xidi c ftX0j , and is valid if it is true in all models.",
        "There are several formulations of L that all realise this same meaning for the connectives.1 E[XY]l = (x.y p Li I xp i[Xil Ay RX/Y1,1fa: c r I Vy a ((-Y11a RX11 gyviir I Vy a (hi .yx C ftxfl } C I xi E [[Xili AAE [kJ) 'The atformulations include e.g. sequent (1,ambek 1958), proof net (Itoorda 1991), and natural deduction systems (Morrill el al.",
        "1990, Barry et al.",
        "1991).",
        "Alternative formulations carry different advantages, e.g. natural deduction is well suited for linguistic presentation, WI Wrens proof nets have benefits for automated theorem proving.",
        "Discontinuous type constructors The Lambek calculus is a purely concatenative system: where any two types are combined, the string of the result is arrived at by concatenating the strings of the types combined.",
        "This point is illustrated graphically in (1a,b), for the Lambek fimctors, where (following Moortgat, 1991) each triangle represents a result string, and unshaded and shaded areas represent functor and argument strings, respectively.",
        "Various linguistic phenomena, however, suggest the existence of discorainous constituency, i.e. situations the result string from combining two constituents is not produced by concatenating the component strings.",
        "(See e.g. Bach, 1981.)",
        "Moortgat (1988) suggests augmenting L with two disconlinuons type constructors.",
        "An extraction functor XIY is one whose argument corresponds to a non-peripheral (or more precisely, 110i- necessarily peripheral) substring of the result or combination, as in (lc).",
        "An infixation functor XtY itself corresponds to a non-peripheral substring of the result, of combination, as in (1d).",
        "Given these intuitive characterisations, two options arise for the meaning of each connective as to whether the point of insertion of one string into the other is free (universal) for fixed (existential).",
        "In this pa-per, I will focus on the existential variants of the connectives, which appear to be the most linguistically useful, and whose interpretive coxiitclitlitcur {,,,i sare as follows: iyi 19:1, x2.px2A Vr/ EY.x lY2 E [IX II} ix IVY E [fYY2- Y 5152 Ay1x.y2 C Previous proposals Each connective should have two inference rules: a rule of proof (showing how to derive a type containing the connective), and a rule of use (showing how to employ such a type).",
        "This indicates a possible eight inference rules that we might hope to state (i.e. proof/use x universal/existential x infixation/extraction).",
        "cuts attempts have been made to provide a logic for the discontinuous type constructors, but all have proved unsuccessful or unsatisfactory in some way or another.",
        "present approach by assigning a complex lexical string term, as in the lexical entry (<TvrE,snuNc,srm>): <st(sinp), An.a Vsomeone, someone'> Such a string term would result under a 'type raising' transformation such as: up st(sinp).",
        "The example John gave someone money can be derived as follows, with string and semantic results in (7).",
        "cc: (q e v.(s((yv)' z)\")i)rIll (7)a. johm g ave someone money P. someone' (Av.gave/ v money' john') There is a sense in which this view of quantifiers seems very natural.",
        "Quantifiers behave distribution ally like simple NPs, but semantically are of a higher type.",
        "Raising the string component under the transformation up st(sinp) resolves this incompatibility without imposing additional word order constraints.",
        "This account as stated does not allow for multiple quantification,' but would if lexical string terms were treated as partial proofs used in assembling larger derivations, as suggested in the previous section.",
        "In interesting test case, combining both movement and scope issues, arises with pied piping constructions, where a tvh-item moving to clause initial position is accompanied by (or 'pied pipes') some larger phrase that contains it, as in e.g. the relative clause to whom John spoke, where the PP to whom is fronted.",
        "Following Morrill k Solias (1993), and ultimately Morrill (1992), a treatment of pied piping can be given using I and t. Again, linkage of infixation and extraction is achieved via complex lexical string assignment.",
        "A PI' pied-piping relative Pronoun might be (rel/(sipp)),I(ppinp) allowing it to infix to a NP position within a PP, giving a funcLor rel/(sIpp), i.e. which prefixes to a 'sentence missing PP' to give a relative clituse, Hence, for CXalnple, to whom would have type relAsipp), and so to whom J01171 spoke is a relative clause.",
        "The lexical seinantics of whom will ensure that the resulting nieaning is equivalent to the non-pied piping variant whom John spoke lo."
      ]
    }
  ]
}
