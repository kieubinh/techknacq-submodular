{
  "info": {
    "authors": [
      "Hinrich Schütze",
      "Yoram Singer"
    ],
    "book": "Annual Meeting of the Association for Computational Linguistics",
    "id": "acl-P94-1025",
    "title": "Part-Of-Speech Tagging Using a Variable Memory Markov Model",
    "url": "https://aclweb.org/anthology/P94-1025",
    "year": 1994
  },
  "references": [
    "acl-J93-2006",
    "acl-P93-1035"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "We present a new approach to disambiguating syntactically ambiguous words in context, based on Variable Memory Markov (VMM) models.",
        "In contrast to fixed-length Markov models, which predict based on fixed-length histories, variable memory Markov models dynamically adapt their history length based on the training data, and hence may use fewer parameters.",
        "In a test of a VMM based tagger on the Brown corpus, 95.81% of tokens are correctly classified."
      ]
    },
    {
      "heading": "INTRODUCTION",
      "text": [
        "Many words in English have several parts of speech (P05).",
        "For example \"book\" is used as a noun in \"She read a book.\" and as a verb in \"She didn't book a trip.\" Part-of-speech tagging is the problem of determining the syntactic part of speech of an occurrence of a word in context.",
        "In any given English text, most tokens are syntactically ambiguous since most of the high-frequency English words have several parts of speech.",
        "Therefore, a correct syntactic classification of words in context is important for most syntactic and other higher-level processing of natural language text.",
        "Two stochastic methods have been widely used for POS tagging: fixed order Markov models and Hidden Markov models.",
        "Fixed order Markov models are used in (Church, 1989) and (Charniak et al., 1993).",
        "Since the order of the model is assumed to be fixed, a short memory (small order) is typically used, since the number of possible combinations grows exponentially.",
        "For example, assuming there are 184 different tags, as in the Brown corpus, there are 1843 6, 229, 504 different order 3 combinations of tags (of course not all of these will actually occur, see (Weischedel et al., 1993)).",
        "Because of the large number of parameters higher-order fixed length models are hard to estimate.",
        "(See (Brill, 1993) for a rule-based approach to incorporating higher-order information.)",
        "In a Hidden Markov Model (HMM) (Jelinek, 1985; Kupiec, 1992), a different state is defined for each POS tag and the transition probabilities and the output probabilities are estimated using the EM (Dempster et al., 1977) algorithm, which guarantees convergence to a local minimum (Wu, 1983).",
        "The advantage of an HMM is that it can be trained using untagged text.",
        "On the other hand, the training procedure is time consuming, and a fixed model (topology) is assumed.",
        "Another disadvantage is due to the local convergence properties of the EM algorithm.",
        "The solution obtained depends on the initial setting of the model's parameters, and different solutions are obtained for different parameter initialization schemes.",
        "This phenomenon discourages linguistic analysis based on the output of the model.",
        "We present a new method based on variable memory Markov models (VMM) (Ron et al., 1993; Ron et al., 1994).",
        "The VMM is an approximation of an unlimited order Markov source.",
        "It can incorporate both the static (order 0) and dynamic (higher-order) information systematically, while keeping the ability to change the model due to future observations.",
        "This approach is easy to implement, the learning algorithm and classification of new tags are computationally efficient, and the results achieved, using simplified assumptions for the static tag probabilities, are encouraging."
      ]
    },
    {
      "heading": "VARIABLE MEMORY MARKOV MODELS",
      "text": [
        "Markov models are a natural candidate for language modeling and temporal pattern recognition, mostly due to their mathematical simplicity.",
        "However, it is obvious that finite memory Markov models cannot capture the recursive nature of language, nor can they be trained effectively with long memories.",
        "The notion of variable context length also appears naturally in the context of universal coding (Rissanen, 1978; Rissanen and Lang-don, 1981).",
        "This information theoretic notion is now known to be closely related to efficient modeling (Rissanen, 1988).",
        "The natural measure that",
        "appears in information theory is the description length, as measured by the statistical predictability via the Kullback-Leibler (KL) divergence.",
        "The VMM learning algorithm is based on minimizing the statistical prediction error of a Markov model, measured by the instantaneous KL divergence of the following symbols, the current statistical surprise of the model.",
        "The memory is extended precisely when such a surprise is significant, until the overall statistical prediction of the stochastic model is sufficiently good.",
        "For the sake of simplicity, a POS tag is termed a symbol and a sequence of tags is called a string.",
        "We now briefly describe the algorithm for learning a variable memory Markov model.",
        "See (Ron et al., 1993; Ron et al., 1994) for a more detailed description of the algorithm.",
        "We first introduce notational conventions and define some basic concepts.",
        "Let E be a finite alphabet.",
        "Denote by E* the set of all strings over E. A string s, over E* of length n, is denoted by s = sis2 ...sn.",
        "We denote by e the empty string.",
        "The length of a string s is denoted by is' and the size of an alphabet E is denoted by jEi• Let Pre f ix(s) = s1s2 .",
        "sn_ I denote the longest prefix of a string s, and let Pre fix*(s) denote the set of all prefixes of s, including the empty string.",
        "Similarly, Su f fix(s) = s2s3 sn and Suffix* (s) is the set of all suffixes of s. A set of strings is called a suffix (prefix) free set if, Vs E S : SnSuffix*(s) = 0 (SnPrefie(s) = 0).",
        "We call a probability measure P, over the strings in E* proper if P(e) = 1, and for every string s, EuEs P(so) = P(s).",
        "Hence, for every prefix free set S, EdEs P(s) < 1, and specifically for every integer n > 0, E,EE,, P(s) = 1.",
        "A prediction suffix tree T over E, is a tree of degree iEi.",
        "The edges of the tree are labeled by symbols from E, such that from every internal node there is at most one outgoing edge labeled by each symbol.",
        "The nodes of the tree are labeled by pairs (s, ) where s is the string associated with the walk starting from that node and ending in the root of the tree, and -y, : E [0, 1] is the output probability function of s satisfying EaeE -y(i) = 1.",
        "A prediction suffix tree induces probabilities on arbitrarily long strings in the following manner.",
        "The probability that T generates a string w = to].",
        "w2 wn in E', denoted by Pr(w), is fI173.-1(wi), where s° e, and for 1 < i < n – 1, si is the string labeling the deepest node reached by taking the walk corresponding to w1 wi starting at the root of T. By definition, a prediction suffix tree induces a proper measure over E*, and hence for every prefix free set of strings {wl, , wm}, (wi) < 1, and specifically for n > 1, then E.,EE„ PT(s) = 1.",
        "A Probabilistic Finite Automaton (PFA) A is a 5-tuple (Q, E, 7, 7,7r), where Q is a finite set of n states, E is an alphabet of size k,T:QxE Q is the transition function, 7 Q x E [0, 1] is the output probability function, and Ir : Q [0, 1] is the probability distribution over the start states.",
        "The functions ^y and 7r must satisfy the following requirements: for every q E Q, a) = 1, and EgEQ 7r(q) = 1.",
        "The probability that A generates a string s = sis2 ...sn E En is PA(s) = E9o€C1 (q° Fr_ y (qi , si), where qi+1 = r(qi , si).",
        "T can be extended to be defined on Q x E* as follows: r(q, s1s2 .",
        "• • SI) = r(r(q, si se) = r(r(q, Pre fix(s)), se).",
        "The distribution over the states, 7r, can be replaced by a single start state, denoted by c such that r(c, s) = 7r(q), where s is the label of the state q.",
        "Therefore, 7r(c) = 1 and 7r(q) = 0 if q c. For POS tagging, we are interested in learning a subclass of finite state machines which have the following property.",
        "Each state in a machine M belonging to this subclass is labeled by a string of length at most L over E, for some L > 0.",
        "The set of strings labeling the states is suffix free.",
        "We require that for every two states q1, q2 E Q and for every symbol a E E, if r(q1 , a) = q2 and q1 is labeled by a string s1, then q2 is labeled by a string S2 which is a suffix of s1 • a.",
        "Since the set of strings labeling the states is suffix free, if there exists a string having this property then it is unique.",
        "Thus, in order that r be well defined on a given set of string S, not only must the set be suffix free, but it must also have the property, that for every string s in the set and every symbol a, there exists a string which is a suffix of so.",
        "For our convenience, from this point on, if q is a state in Q then q will also denote the string labeling that state.",
        "A special case of these automata is the case in which Q includes all IEIL strings of length L. These automata are known as Markov processes of order L. We are interested in learning automata for which the number of states, n, is much smaller than IV', which means that few states have long memory and most states have a short one.",
        "We refer to these automata as variable memory Markov (VMM) processes.",
        "In the case of Markov processes of order L, the identity of the states (i.e. the identity of the strings labeling the states) is known and learning such a process reduces to approximating the output probability function.",
        "Given a sample consisting of m POS tag sequences of lengths /1,12, ,l,, we would like to find a prediction suffix tree that will have the same statistical properties as the sample and thus can be used to predict the next outcome for se-c.„uences generated by the same source.",
        "At each",
        "stage we can transform the tree into a variable memory Markov process.",
        "The key idea is to iteratively build a prediction tree whose probability measure equals the empirical probability measure calculated from the sample.",
        "We start with a tree consisting of a single node and add nodes which we have reason to believe should be in the tree.",
        "A node a-s, must be added to the tree if it statistically differs from its parent node s. A natural measure to check the statistical difference is the relative entropy (also known as the Kullback-Leibler (KL) divergence) (Kullback, 1959), between the conditional probabilities P(.Js) and P(1a.․).",
        "Let X be an observation space and Pi, P2 be probability measures over X then the KL divergence between P1 and",
        "our case, the KL divergence measures how much additional information is gained by using the suffix as for prediction instead of the shorter suffix s. There are cases where the statistical difference is large yet the probability of observing the suffix as itself is so small that we can neglect those cases.",
        "Hence we weigh the statistical error by the prior probability of observing crs.",
        "The statistical error measure in our case is,",
        "• P(0\" s)Dx (13(las)I1P(.ls)) • P(6 s) EcriEE P(Gr/ las) log Pp(r0.1,117)) • Ea'EE P(0-so- log p(aP,S:)Pas) .",
        "Therefore, a node as is added to the tree if the statistical difference (defined by Err(o-s, s)) between the node and its parrent s is larger than a predetermined accuracy c. The tree is grown level by level, adding a son of a given leaf in the tree whenever the statistical error is large.",
        "The problem is that the requirement that a node statistically differs from its parent node is a necessary condition for belonging to the tree, but is not sufficient.",
        "The leaves of a prediction suffix tree must differ from their parents (or they are redundant) but internal nodes might not have this property.",
        "Therefore, we must continue testing further potential descendants of the leaves in the tree up to depth L. In order to avoid exponential grow in the number of strings tested, we do not test strings which belong to branches which are reached with small probability.",
        "The set of strings, tested at each step, is denoted by S, and can be viewed as a kind of frontier of the growing tree T."
      ]
    },
    {
      "heading": "USING A VMM FOR POS TAGGING",
      "text": [
        "We used a tagged corpus to train a VMM.",
        "The syntactic information, i.e. the probability of a specific word belonging to a tag class, was estimated using maximum likelihood estimation from the individual word counts.",
        "The states and the transition probabilities of the Markov model were determined by the learning algorithm and tag output probabilities were estimated from word counts (the static information present in the training corpus).",
        "The whole structure, for two states, is depicted in Fig. 1.",
        "Si and S1+1 are strings of tags corresponding to states of the automaton.",
        "P(tilSi) is the probability that tag ti will be output by state Si and P(ti+i iSi+i) is the probability that the next tag ti+1 is the output of state Si+i",
        "When tagging a sequence of words win, we want to find the tag sequence ti,„ that is most likely for wi,„.",
        "We can maximize the joint probability of wi,, and t1,,, to find this sequence:i • arg maxt1P(ti,n1wi,n) poi • arg maxi, • arg Wl,n)",
        "win) can be expressed as a product of conditional probabilities as follows:",
        "With the simplifying assumption that the probability of a tag only depends on previous tags and that the probability of a word only depends on its tags, we get:",
        "Given a variable memory Markov model M, P(tilti,i_i) is estimated by P(tiiSi_i, M) where 'Part of the following derivation is adapted from (Charniak et al., 1993).",
        "= r(e, t1,1), since the dynamics of the sequence are represented by the transition probabilities of the corresponding automaton.",
        "The tags 11,„ for a sequence of words wi,,, are therefore chosen according to the following equation using the Viterbi algorithm:",
        "We estimate P(wilti) indirectly from P(ti Iwi) using Bayes' Theorem:",
        "The terms P(w1) are constant for a given sequence wi and can therefore be omitted from the maximization.",
        "We perform a maximum likelihood estimation for P(ti) by calculating the relative frequency of Li in the training corpus.",
        "The estimation of the static parameters P(ti(wi) is described in the next section.",
        "We trained the variable memory Markov model on the Brown corpus (Francis and KuCera, 1982), with every tenth sentence removed (a total of 1,022,462 tags).",
        "The four stylistic tag modifiers \"FW\" (foreign word), \"TL\" (title), \"NC\" (cited word), and \"HL\" (headline) were ignored reducing the complete set of 471 tags to 184 different tags.",
        "The resulting automaton has 49 states: the null state (0, 43 first order states (one symbol long) and 5 second order states (two symbols long).",
        "This means that 184-43=141 states were not (statistically) different enough to be included as separate states in the automaton.",
        "An analysis reveals two possible reasons.",
        "Frequent symbols such as \"ABN\" (\"half\", \"all\", \"many\" used as pre-quantifiers, e.g. in \"many a younger man\") and \"DTI\" (determiners that can be singular or plural, \"any\" and \"some\") were not included because they occur in a variety of diverse contexts or often precede unambiguous words.",
        "For example, when tagged as \"ABN\" \"half\", \"all\", and \"many\" tend to occur before the unambiguous determiners \"a\", \"an\" and \"the\".",
        "Some rare tags were not included because they did not improve the optimization criterion, minimum description length (measured by the KL-divergence).",
        "For example, \"HVZ*\" (\"hasn't\") is not a state although a following \"- ed\" form is always disambiguated as belonging to class \"VBN\" (past participle).",
        "But since this is a rare event, describing all \"HVZ* VBN\" sequences separately is cheaper than the added complexity of an automaton with state \"HVZ*\".",
        "We in fact lost some accuracy in tagging because of the optimization criterion: Several \"-ed\" forms after forms of \"have\" were mistagged as \"VBD\" (past tense).",
        "tion is significantly different when using a longer suffix for prediction.",
        "Those states are identified automatically by the VMM learning algorithm.",
        "A better prediction and classification of POS-tags is achieved by adding those states with only a small increase in the computation time.",
        "The two-symbol states were \"AT JJ\", \"AT NN\", \"AT VBN\", \"JJ CC\", and \"MD RB\" (article adjective, article noun, article past participle, adjective conjunction, modal adverb).",
        "Table 1 lists two of the largest differences in transition probabilities for each state.",
        "The varying transition probabilities are based on differences between the syntactic constructions in which the two competing states occur.",
        "For example, adjectives after articles (\"AT JJ\") are almost always used attributively which makes a following preposition impossible and a following noun highly probable, whereas a predicative use favors modifying prepositional phrases.",
        "Similarly, an adverb preceded by a modal (\"MD RB\") is followed by an infinitive (\"VB\") half the time, whereas other adverbs occur less often in pre-infinitival position.",
        "On the other hand, a past participle is virtually impossible after \"MD RB\" whereas adverbs that are not preceded by modals modify past participles quite often.",
        "While it is known that Markov models of order 2 give a slight improvement over order-1 models (Charniak et al., 1993), the number of parameters in our model is much smaller than in a full order-2 Markov model (49*184 = 9016 vs. 184*184*184 = 6,229,504)."
      ]
    },
    {
      "heading": "ESTIMATION OF THE STATIC PARAMETERS",
      "text": [
        "We have to estimate the conditional probabilities P(tilw3), the probability that a given word w3 will appear with tag t',.",
        "in order to compute the static parameters P(wilti) used in the tagging equations described above.",
        "A first approximation would be",
        "C(wi) where C(ti, wj) is the number of times ti is tagged as ug in the training text and C(ug ) is the number of times iv./ occurs in the training text.",
        "However, some form of smoothing is necessary, since any new text will contain new words, for which C(ug ) is zero.",
        "Also, words that are rare will only occur with some of their possible parts of speech in the training text.",
        "One solution to this problem is Good-Turing estimation:",
        "• • C(ti, wj) + 1",
        "where I is the number of tags, 184 in our case.",
        "It turns out that Good-Turing is not appropriate for our problem.",
        "The reason is the distinction between closed-class and open-class words.",
        "Some syntactic classes like verbs and nouns are productive, others like articles are not.",
        "As a consequence, the probability that a new word is an article is zero, whereas it is high for verbs and nouns.",
        "We need a smoothing scheme that takes this fact into account.",
        "Extending an idea in (Charniak et al., 1993), we estimate the probability of tag conversion to find an adequate smoothing scheme.",
        "Open and closed classes differ in that words often add a tag from an open class, but rarely from a closed class.",
        "For example, a word that is first used as a noun will often be used as a verb subsequently, but closed classes such as possessive pronouns (\"my\", \"her\", \"his\") are rarely used with new syntactic categories after the first few thousand words of the Brown corpus.",
        "We only have to take stock of these \"tag conversions\" to make informed predictions on new tags when confronted with unseen text.",
        "Formally, let WIk be the set of words that have been seen with ti , but not with ik in the training text up to word wi.",
        "Then we can estimate the probability that a word with tag t' will later be seen with tag ik as the proportion of words allowing tag ti but not tk that later add ik :",
        "This formula also applies to words we haven't seen so far, if we regard such words as having occurred with a special tag \"U\" for \"unseen\".",
        "(In this case, Wirj'-'k is the set of words that haven't occurred up to 1.)",
        "An-4(U --+ k) then estimates the probability that an unseen word has tag ik .",
        "Table 2 shows the estimates of tag conversion we derived from our training text for 1 = 1022462 – 100000, m = 1022462, where 1022462 is the number of words in the training text.",
        "To avoid sparse data problems we assumed zero probability for types of tag conversion with less than 100 instances in the training set.",
        "Our smoothing scheme is then the following heuristic modification of Good-Turing:",
        "where Ti is the set of tags that wj has in the training set and T is the set of all tags.",
        "This scheme has the following desirable properties:",
        "• As with Good-Turing, smoothing has a small effect on estimates that are based on large counts.",
        "• The difference between closed-class and open-class words is respected: The probability for conversion to a closed class is zero and is not affected by smoothing.",
        "• Prior knowledge about the probabilities of conversion to different tag classes is incorporated.",
        "For example, an unseen word ug is five times as likely to be a noun than an adverb.",
        "Our estimate for P(tt1w3) is correspondingly five times higher for \"NN\" than for \"RB\"."
      ]
    },
    {
      "heading": "ANALYSIS OF RESULTS",
      "text": [
        "Our result on the test set of 114392 words (the tenth of the Brown corpus not used for training) was 95.81%.",
        "Table 3 shows the 20 most frequent errors.",
        "Three typical examples for the most common error (tagging nouns as adjectives) are \"Communist\", \"public\" and \"homerun\" in the following sentences.",
        "to use the maximum likelihood estimator: P(tijug) C(ti, wj)",
        "• the Cuban fiasco and the Communist military victories in Laos • to increase public awareness of the movement • the best homerun hitter",
        "The words \"public\" and \"communist\" can be used as adjectives or nouns.",
        "Since in the above sentences an adjective is syntactically more likely, this was the tagging chosen by the VMM.",
        "The noun \"homerun\" didn't occur in the training set, therefore the priors for unknown words biased the tagging towards adjectives, again because the position is more typical of an adjective than of a noun.",
        "Two examples of the second most common error (tagging past tense forms (\"VBD\") as past participles (\"VBN\")) are \"called\" and \"elected\" in the following sentences:",
        "• the party called for government operation of all utilities • When I come back here after the November election you'll think, you're my man – elected.",
        "Most of the VBD/VBN errors were caused by words that have a higher prior for \"VBN\" so that in a situation in which both forms are possible according to local syntactic context, \"VBN\" is chosen.",
        "More global syntactic context is necessary to find the right tag \"VBD\" in the first sentence.",
        "The second sentence is an example for one of the tagging mistakes in the Brown corpus, \"elected\" is clearly used as a past participle, not as a past tense form."
      ]
    },
    {
      "heading": "Comparison with other Results",
      "text": [
        "Charniak et al.'s result of 95.97% (Charniak et al., 1993) is slightly better than ours.",
        "This difference is probably due to the omission of rare tags that permit reliable prediction of the following tag (the case of \"HVZ*\" for \"hasn't\").",
        "Kupiec achieves up to 96.36% correctness (Kupiec, 1992), without using a tagged corpus for training as we do.",
        "But the results are not easily comparable with ours since a lexicon is used that lists only possible tags.",
        "This can result in increasing the error rate when tags are listed in the lexicon that do not occur in the corpus.",
        "But it can also decrease the error rate when errors due to bad tags for rare words are avoided by looking them up in the lexicon.",
        "Our error rate on words that do not occur in the training text is 57%, since only the general priors are used for these words in decoding.",
        "This error rate could probably be reduced substantially by incorporating outside lexical information."
      ]
    },
    {
      "heading": "DISCUSSION",
      "text": [
        "While the learning algorithm of a VMM is efficient and the resulting tagging algorithm is very simple, the accuracy achieved is rather moderate.",
        "This is due to several reasons.",
        "As mentioned in the introductory sections, any finite memory Markov model cannot capture the recursive nature of natural language.",
        "The VMM can accommodate longer statistical dependencies than a traditional full-order Markov model, but due to its Markovian nature long-distance statistical correlations are neglected.",
        "Therefore, a VMM based tagger can be used for pruning many of the tagging alternatives using its prediction probability, but not as a complete tagging system.",
        "Furthermore, the VMM power can be better utilized in low level language processing tasks such as cleaning up corrupted text as demonstrated in (Ron et al., 1993).",
        "We currently investigate other stochastic models that can accommodate long distance statistical correlation (see (Singer and Tishby, 1994) for preliminary results).",
        "However, there are theoretical clues that those models are much harder to learn (Kearns et al., 1993), including HMM based models (Abe and Warmuth, 1992).",
        "Another drawback of the current tagging scheme is the independence assumption of the underlying tags and the observed words, and the ad-hoc estimation of the static probabilities.",
        "We are pursuing a systematic scheme to estimate those probabilities based on Bayesian statistics, by assigning a discrete probability distribution, such as the Dirichlet distribution (Berger, 1985), to each tag class.",
        "The a-posteriori probability estimation of the individual words can be estimated from the word counts and the tag class priors.",
        "Those priors can be modeled as a mixture of Dirichlet distributions (Antoniak, 1974), where each mixture component would correspond to a different tag class.",
        "Currently we estimate the state transition probabilities from the conditional counts assuming a uniform prior.",
        "The same technique can be used to estimate those parameters as well."
      ]
    },
    {
      "heading": "ACKNOWLEDGMENT",
      "text": [
        "Part of this work was done while the second author was visiting the Department of Computer and Information Sciences, University of California, Santa-Cruz, supported by NSF grant IRI-9123692.",
        "We would like to thank Jan Pedersen and Naf-tali Tishby for helpful suggestions and discussions of this material.",
        "Yoram Singer would like to thank the Charles Clore foundation for supporting this research.",
        "We express our appreciation to faculty and students for the stimulating atmosphere at the 1993 Connectionist Models Summer School at which the idea for this paper took shape."
      ]
    }
  ]
}
