{
  "info": {
    "authors": [
      "Mark-Jan Nederhof"
    ],
    "book": "Annual Meeting of the Association for Computational Linguistics",
    "id": "acl-P94-1029",
    "title": "An Extended Theory of Head-Driven Parsing",
    "url": "https://aclweb.org/anthology/P94-1029",
    "year": 1994
  },
  "references": [
    "acl-E93-1010",
    "acl-P89-1017",
    "acl-P94-1017"
  ],
  "sections": [
    {
      "text": [
        "Toernooiveld, 6525 ED Nijmegen The Netherlands markj aacs kun .n1"
      ]
    },
    {
      "heading": "Abstract",
      "text": [
        "We show that more head-driven parsing algorithms can be formulated than those occurring in the existing literature.",
        "These algorithms are inspired by a family of left-to-right parsing algorithms from a recent publication.",
        "We further introduce a more advanced notion of \"head-driven parsing\" which allows more detailed specification of the processing order of non-head elements in the right-hand side.",
        "We develop a parsing algorithm for this strategy, based on LR parsing techniques."
      ]
    },
    {
      "heading": "Introduction",
      "text": [
        "According to the head-driven paradigm, parsing of a formal language is started from the elements within the input string that are most contentful either from a syntactic or, more generally, from an information theoretic point of view.",
        "This results in the weakening of the left-to-right feature of most traditional parsing methods.",
        "Following a pervasive trend in modern theories of Grammar (consider for instance [5, 3, 11]) the computational linguistics community has paid large attention to the head-driven paradigm by investigating its applications to context-free language parsing.",
        "Several methods have been proposed so far exploiting some nondeterministic head-driven strategy for context-free language parsing (see among others [6, 13, 2, 14]).",
        "All these proposals can be seen as generalizations to the head-driven case of parsing prescriptions originally conceived for the left-to-right case.",
        "The methods above suffer from deficiencies that are also noticeable in the left-to-right case.",
        "In fact, when more rules in the grammar share the same head element, or share some infix of their right-hand side including the head, the recognizer nondeterministically guesses a rule just after having seen the head.",
        "In this way analyses that could have been shared are duplicated in the parsing process.",
        "Interesting techniques have been proposed in the left-to-right deterministic parsing literature to overcome redundancy problems of the above kind, thus reducing",
        "Universita di Padova Dipartimento di Elettronica e Informatica via Gradenigo 6/A, 35131 Padova Italy sattadei.unipd.it the degree of nondeterminism of the resulting methods.",
        "These solutions range from predictive LR parsing to LR parsing [15, 1].",
        "On the basis of work in [8] for nondeterministic left-to-right parsing, we trace here a theory of head-driven parsing going from crude top-down and head-corner to more sophisticated solutions, in the attempt to successively make more deterministic the behaviour of head-driven methods.",
        "Finally, we propose an original generalization of head-driven parsing, allowing a more detailed specification of the order in which elements of a right-hand side are to be processed.",
        "We study in detail a solution to such a head-driven strategy based on LR parsing.",
        "Other methods presented in this paper could be extended as well."
      ]
    },
    {
      "heading": "Preliminaries",
      "text": [
        "The notation used in the sequel is for the most part standard and is summarised below.",
        "Let D be an alphabet (a finite set of symbols); D+ denotes the set of all (finite) non-empty strings over D and D* denotes D+ U {e}, where e denotes the empty string.",
        "Let R be a binary relation; R+ denotes the transitive closure of R and R* denotes the reflexive and transitive closure of R. A context-free grammar G = (N, T, P, S) consists of two finite disjoint sets N and T of nonterminal and terminal symbols, respectively, a start symbol S E N, and a finite set of rules P. Every rule has the form A a, where the left-hand side (lhs) A is an element from N and the right-hand side (rhs) a is an element from V+, where V denotes (N U T).",
        "(Note that we do not allow rules with empty right-hand sides.",
        "This is for the sake of presentational simplicity.)",
        "We use symbols A, B,C, .",
        ".. to range over N, symbols X, Y, Z to range over V, symbols a, fl, 7, .",
        ".",
        ".",
        "to range over V*, and v, w, x, ... to range over T*.",
        "In the context-free grammars that we will consider, called head grammars, exactly one member from each rhs is distinguished as the head.",
        "We indicate the head by underlining it, e.g., we write A – ■ a2C3.",
        "An expression A ay [3 denotes a rule in which the head is some member wain -y.",
        "We define a binary relation 0 such",
        "that B 0 A if and only if A 0 a 13fi for some a and 0.",
        "Relation 0* is called the head-corner relation.",
        "For technical reasons we sometimes need the augmented set of rules Pt, consisting of all rules in P plus the extra rule S' 1S, where S' is a fresh nonterminal, and 1 is a fresh terminal acting as an imaginary zeroth input symbol.",
        "The relation Pt is extended to a",
        "For a fixed grammar, a head-driven recognition algorithm can be specified by means of a stack automaton A = (T, Alph, Fin(n)), parameterised with the length n of the input.",
        "In A, symbols T and Alph are the input and stack alphabets respectively, Init(n), Fin(n) E Alph are two distinguished stack symbols and is the transition relation, defined on Alph+ x Alph+ and implicitly parameterised with the input.",
        "Such an automaton manipulates stacks r E Alph+, (constructed from left to right) while consulting the symbols in the given input string.",
        "The initial stack is Init(n).",
        "Whenever F F' holds, one step of the automaton may, under some conditions on the input, transform a stack of the form r'r into the stack rri.",
        "In words, r r' denotes that if the topmost few symbols on the stack are F then these may be replaced by the symbols r. Finally, the input is accepted whenever the automaton reaches stack Fin(n).",
        "Stack automata presented in what follows act as recognizers.",
        "Parsing algorithms can directly be obtained by pairing these automata with an output effect."
      ]
    },
    {
      "heading": "A family of head-driven algorithms",
      "text": [
        "This section investigates the adaptation of a family of left-to-right parsing algorithms from [8], viz, top-down, left-corner, PLR, ELR, and LR parsing, to head grammars."
      ]
    },
    {
      "heading": "Top-down parsing",
      "text": [
        "The following is a straightforward adaptation of top-down (TD) parsing [1] to head grammars.",
        "There are two kinds of stack symbol (items), one of the form [i, A, j], which indicates that some subderivation from A is needed deriving a substring of ai+i the other of the form [i, k, A – 0 a • 7 • (3,m, j], which also indicates that some subderivation from A is needed deriving a substring of ai+i a,, but specifically using the rule A p a7fl, where 7 ak+1 ...arn has already been established.",
        "Formally, we have",
        "where there are A -- aal3 E Pt and k such that i < k <j and ak = a",
        "We call a grammar head-recursive if A 0+ A for some A. Head-driven TD parsing may loop exactly for the grammars which are head-recursive.",
        "Head recursion is a generalization of left recursion for traditional TD parsing.",
        "In the case of grammars with some parameter mechanism, top-down parsing has the advantage over other kinds of parsing that top-down propagation of parameter values is possible in collaboration with context-free parsing (cf. the standard evaluation of definite clause grammars), which may lead to more efficient processing.",
        "This holds for left-to-right parsing as well as for head-driven parsing [10]."
      ]
    },
    {
      "heading": "Head-corner parsing",
      "text": [
        "The predictive steps from Algorithm 1, represented by Clause 0 and supported by Clauses Oa and Ob, can be compiled into the head-corner relation 0*.",
        "This gives the head-corner (HC) algorithm below.",
        "The items from ip are no longer needed now.",
        "We define //lc =",
        "by the following clauses.",
        "(Clauses lb, 2b, 3b, 4b are omitted, since these are symmetric to la, 2a, 3a, 4a, respectively.)",
        "where there are C na0 E Pt and p such that m < p < j and ap =a and C 0* B",
        "Head-corner parsing as well as all algorithms in the remainder of this paper may loop exactly for the grammars which are cyclic (where A -,+ A for some A).",
        "The head-corner algorithm above is the only one in this paper which has already appeared in the literature, in different guises [6, 13, 2, 14]."
      ]
    },
    {
      "heading": "Predictive HI parsing",
      "text": [
        "We say two rules A al and B a2 have a common infix a if al = /Awn and a2 = )32a72, for some /32, -yi and 72.",
        "The notion of common infix is an adaptation of the notion of common prefix [8] to head grammars.",
        "If a grammar contains many common infixes, then HC parsing may be very nondeterministic; in particular, Clauses 1 or 3 may be applied with different rules C ?la E Pt or C n138 E PI for fixed a or B.",
        "In [15] an idea is described that allows reduction of nondeterminism in case of common prefixes and left-corner parsing.",
        "The resulting algorithm is called predictive LR (PLR) parsing.",
        "The following is an adaptation of this idea to HC parsing.",
        "The resulting algorithm is called predictive HI (PHI) parsing.",
        "(HI parsing, to be discussed later, is a generalization of LR parsing to head grammars.)",
        "First, we need a different kind of item, viz. of the form [i, k , A -> 7,m, where there is some rule A 4 a7)3.",
        "With such an item, we simulate computation of different items [i,k, A -- a • 7 • f3 , m, j] Epic for different a and )3, which would be treated individually by an HC parser.",
        "Formally, we have",
        "where there are C na0, A -> a7 .13 E Pt and p such that M <p <j and ap = a an-a C 0* B",
        "provided m = k' and B --+ 6 E Pt, where there is A -■ a7B,3 E Pt"
      ]
    },
    {
      "heading": "Extended HI parsing",
      "text": [
        "The PHI algorithm can process simultaneously a common infix a in two different rules A -> /31a71 and A --, 132a1y2, which reduces nondeterminism.",
        "We may however also specify an algorithm which succeeds in simultaneously processing all common infixes, irrespective of whether the left-hand sides of the corresponding rules are the same.",
        "This algorithm is inspired by extended LR ( EL R) parsing [12, 7] for extended context-free grammars (where right-hand sides consist of regular expressions over V).",
        "By analogy, it will be called extended HI (EHI) parsing.",
        "This algorithm uses yet another kind of item, viz. of the form [i, k, {Ai, A2, .,A,} -> 7,m, j], where there exists at least one rule A a7/3 for each A E {Ai, A2, .,A}.",
        "With such an item, we simulate computation of different items [i, k, A -■ a • 7 • )3,m, E Plc which would be treated individually by an HC parser.",
        "Formally, we have",
        "where there is p such that in < p < j and ap = a and A' = {C I 3C na0, A -,- a-yB E Pt (A E A A C 0* B)} is not empty",
        "provided m = k' and B 6 E Pt for some B E A' such that A\" = {A EA IA a7 B E Pt} is not empty",
        "This algorithm can be simplified by omitting the sets from the items.",
        "This results in common infix (CI) parsing, which is a generalization of common prefix parsing [8].",
        "Cl parsing does not satisfy the correct subsequence property, to be discussed later.",
        "For space reasons, we omit further discussion of CI parsing."
      ]
    },
    {
      "heading": "HI parsing",
      "text": [
        "If we translate the difference between ELR and LR parsing [8] to head-driven parsing, we are led to HI parsing, starting from EHI parsing, as described below.",
        "The algorithm is called HI because it computes head-inward derivations in reverse, in the same way as LR parsing computes rightmost derivations in reverse [1].",
        "Head-inward derivations will be discussed later in this paper.",
        "HI parsing uses items of the form [i, k, Q, in, jj, where Q is a non-empty set of \"double-dotted\" rules A – 0 a • y • 3.",
        "The fundamental difference with the items in /EH/ is that the infix y in the right-hand sides does not have to be fixed.",
        "Formally, we have",
        "We explain the difference in behaviour of HI parsing with regard to EHI parsing by investigating Clauses la and 2a of Algorithm 4.",
        "(Clauses 3a and 4a would give rise to a similar discussion.)",
        "Clauses la and 2a both address some terminal ap, with in <p < j.",
        "In Clause la, the case is treated that ap is the head (which is not necessarily the leftmost member) of a rhs which the algorithm sets out to recognize; in Clause 2a, the case is treated that ap is the next member of a rhs of which some members have already been recognized, in which case we must of course have p = m + 1.",
        "By using the items from PH we may do both kinds of action simultaneously, provided p = m + 1 and ap is the leftmost member of some rhs of some rule, where it occurs as head.' The Ihs of such a rule should satisfy a requirement which is more specific than the usual requirement with regard to the head-corner relation,2 We define the left head-corner relation (and the right head-corner relation, by symmetry) as a subrelation of the head-corner relation as follows.",
        "We define: B L A if and only if A 4 Ba for some a.",
        "The relation L* now is called the left head-corner relation.",
        "We define",
        "and assume symmetric definitions for gotolef ti and gotoleft2.",
        "The above discussion gives rise to the new Clauses la and 2a of the algorithm below.",
        "The other clauses are derived analogously from the corresponding clauses of Algorithm 4.",
        "Note that in Clauses 2a and 4a the new item does not replace the existing item, but is pushed on top of it; this requires extra items to be popped off the stack in Clauses 3a and 4a.3",
        "where there is p such that m + 1 <p < j and ap = a and Q' = gotorighti(Q, a) is not empty",
        "We feel that this algorithm has only limited advantages over the EHI algorithm for other than degenerate head grammars, in which the heads occur either mostly leftmost or mostly rightmost in right-hand sides.",
        "In particular, if there are few sequences of rules of the form A – 4 Alai, A1 A2 a2, Amam, or of the form A aiAi , Ai a2A2, • • • , Am – arnArn, then the left and right head-corner relations are very sparse and HI parsing virtually simplifies to EHI parsing.",
        "In the following we discuss a variant of head grammars which may provide more opportunities to use the advantages of the LR technique."
      ]
    },
    {
      "heading": "A generalization of head grammars",
      "text": [
        "The essence of head-driven parsing is that there is a distinguished member in each rhs which is recognized first.",
        "Subsequently, the other members to the right and to the left of the head may be recognized.",
        "An artifact of most head-driven parsing algorithms is that the members to the left of the head are recognized",
        "strictly from right to left, and vice versa for the members to the right of the head (although recognition of the members in the left part and in the right part may be interleaved).",
        "This restriction does not seem to be justified, except by some practical considerations, and it prevents truly non-directional parsing.",
        "We propose a generalization of head grammars in such a way that each of the two parts of a rhs on both sides of the head again have a head.",
        "The same holds recursively for the smaller parts of the rhs.",
        "The consequence is that a rhs can be seen as a binary tree, in which each node is labelled by a grammar symbol.",
        "The root of the tree represents the main head.",
        "The left son of the root represents the head of the part of the rhs to the left of the main head, etc.",
        "We denote binary trees using a linear notation.",
        "For example, if a and /3 are binary trees, then (a)X (f3) denotes the binary tree consisting of a root labelled X, a left subtree a and a right subtree f3.",
        "The notation of empty (sub)trees (e) may be omitted.",
        "The relation – ■* ignores the head information as usual.",
        "Regarding the procedural aspects of grammars, generalized head grammars have no more power than traditional head grammars.",
        "This fact is demonstrated by a transformation 'ilead from the former to the latter class of grammars.",
        "A transformed grammar rhead(G) contains special nonterminals of the form [a], where a is a proper subtree of some rhs in the original grammar G = (T, N, P, S).",
        "The rules of the transformed grammar are given by: A – .",
        "[a] X [0] for each A – > (a)X ( f3) E P [(a)X (i3)] [a] .7j [g] for each proper subtree (a)X(fi) of a rhs in G where we assume that each member of the form [c] in the transformed grammar is omitted.",
        "It is interesting to note that Thead is a generalization of a transformation nwo which can be used to transform a context-free grammar into two normal form (each rhs contains one or two symbols).",
        "A transformed grammar Ttwo(G) contains special nonterminals of the form [a], where a is a proper suffix of a rhs in G. The rules of r0(G) are given by",
        "where we assume that each member of the form [c] in the transformed grammar is omitted."
      ]
    },
    {
      "heading": "HI parsing revisited",
      "text": [
        "Our next step is to show that generalized head grammars can be effectively handled with a generalization of HI parsing (generalized HI (GHI) parsing).",
        "This new algorithm exhibits a superficial similarity to the 2-dimensional LR parsing algorithm from [16].",
        "For a set Q of trees and rules,' closure(Q) is defined to be",
        "The trees or rules of which the main head is some specified symbol X can be selected from a set Q by",
        "In a similar way, we can select trees and rules according to a left or right subtree.",
        "We assume a symmetric definition for gotoright.",
        "When we set out to recognize the left subtrees from a set of trees and rules, we use the following function.",
        "We assume a symmetric definition for right.",
        "The set /Gm contains different kinds of item:",
        "• Items of the form [i., k,Q,m, j], with i < k < In < j,",
        "indicate that trees (a)X (0) and rules A (a)X (j3) in Q are needed deriving a substring of ai+i aj, where X – .",
        "* ak+i ... am has already been established.",
        "• Items of the form [k,Q, m, j], with k < m < j, indicate that trees (a)X(/3) and rules A (a)X (0) in Q",
        "where are needed deriving a substring of ak+i ai , Items of the form [i, k, Q, in] have a symmetric meaning.",
        "• Items of the form [k, t, Tub with k < m, indicate that --4* ak+i ... am has been established for tree t or rule t = A – .",
        "where there is p such that in < p < j and Q' = goto(right(Q), ap) is not empty",
        "where there is p such that in < p < j and Q'",
        "where there is p such that i < p < k and Q,=",
        "The algorithm above is based on the transformation Thead.",
        "It is therefore not surprising that this algorithm is reminiscent of LR parsing [I] for a transformed grammar rtwo(G).",
        "For most clauses, a rough correspondence with actions of LR parsing can be found: Clauses 2 and 3 correspond with shifts.",
        "Clause 5 corresponds with reductions with rules of the form [Xa] X [a] in rt„(G).",
        "Clauses 6 and 7 correspond with reductions with rules of the form A --+ X [a] in rt.,(G).",
        "For Clauses 1 and 4, corresponding actions are hard to find, since these clauses seem to be specific to generalized head-driven parsing.",
        "The reason that we based Algorithm 6 on Thad is twofold.",
        "Firstly, the algorithm above is more appropriate for presentational purposes than an alternative Apart from HI parsing, also TD, HC, PHI, and EHI parsing can be adapted to generalized head-driven parsing."
      ]
    },
    {
      "heading": "Correctness",
      "text": [
        "The head-driven stack automata studied so far differ from one another in their degree of nondeterminism.",
        "In this section we take a different perspective.",
        "For all these devices, we show that quite similar relations exist between stack contents and the way input strings are visited.",
        "Correctness results easily follow from such characterisations.",
        "(Proofs of statements in this section are omitted for reasons of space.)",
        "Let G = (N ,T , P, S) be a head grammar.",
        "To be used below, we introduce a special kind of derivation.",
        "'It is interesting to compare LR parsing for a context-free grammar G with LR parsing for the transformed grammar rtwo(G).",
        "The transformation has the effect that a reduction with a rule is replaced by a cascade of reductions with smaller rules; apart from this, the transformation does not affect the global runtime behaviour of LR parsing.",
        "More serious are the consequences for the size of the parser: the required number of LR states for the transformed grammar is smaller [9]."
      ]
    },
    {
      "heading": "Generalized HI parsing",
      "text": [
        "algorithm we have in mind which is not based on Thead, and secondly, the resulting parsers need less sets Q.",
        "This is similar in the case of LR parsing.'",
        "where p1,p2,...,p, are productions in pt, s > 1, pi rewrites the unique nonterminal occurrence introduced as the head element of pi_i for 2 < i < s, p, = (B etni3) and p E rewrites n into x E T. The indicated occurrence of string 77 in (1) is called the handle of the a-derivation.",
        "When defined, the rightmost (leftmost) nonterminal occurrence in a (#, respectively) is said to be adjacent to the handle.",
        "The notions of handle and adjacent nonterminal occurrence extend in an obvious way to derivations of the form OAO-P-+ 070x709, where A -P-■ -yox-yi is a a-derivation.",
        "By composing a-derivations, we can now define the class of sentential forms we are interested in.",
        "(Figure 2 shows a case example.)",
        "where q> 1, each pi is a a-derivation and, for 2 < i < q, only one string 71j is rewritten by applying pi at a nonterminal occurrence adjacent to the handle of pi-i.",
        "Sequence pi , p2,...,pg is said to derive the sentential form in (2).",
        "The definition of head-outward sentential form suggests a corresponding notion of head-outward derivation.",
        "Informally, a head-outward derivation proceeds by recursively expanding to a terminal string first the head of a rule, and then the remaining members of the rhs, in an outward order.",
        "Conversely, we have head-inward (HI) derivations, where first the remaining members in the rhs are expanded, in an inward order (toward the head), after which the head itself is recursively expanded.",
        "Note that HI parsing recognizes a string by computing an HI derivation in reverse (cf. LR parsing).",
        "Let w = a1a2 • • n > 1, be a string over T and let ao = 1.",
        "For – 1 < i <j < n, we write (i, jb, to denote substring ai+i • • ai .",
        "= [it, let, At at • Tit • /3t, rnt, it] Or It = [it, k, At int,.it] or = [it, kt, At 'it, int, it]",
        "where iris a permutation of {1,...,q}, pt has handle rit which derives (k,r(t),m,(t)b,,, 1 < t < q, and lc,,.",
        "(t), 2 < t < q.",
        "As an example, an accepting stack configuration [ – I, – 1, S' • IS •, n, n] corresponds to a cr-derivation (S' _LS)p, p E P, with handle IS which derives the head-outward sentential form 70(.1, n1„7i = 1w, from which the correctness of the head-corner algorithm follows directly.",
        "If we assume that G does not contain any useless symbols, then Theorem 1 has the following consequence.",
        "If the automaton at some point has consulted the symbols a11, , aim from the input string, , increasing indexes, then there is a string in the language generated by G of the form vo ai, vi • • vm- iai„,vm.",
        "Such a statement may be called correct subsequence property (a generalization of correct prefix property [8]).",
        "Note that the order in which the input symbols are consulted is only implicit in Theorem 1 (the permutation ir) but is severely restricted by the definition of head-outward sentential form.",
        "A more careful characterisation can be obtained, but will take us outside of the scope of this paper.",
        "The correct subsequence property is enforced by the (top-down) predictive feature of the automata, and holds also for A TD and Am.",
        "Characterisations similar to Theorem 1 can be provided for these devices.",
        "We investigate below the Gill automaton.",
        "For an item I E IGHI of the form [i,k,Q,m,j], [k,Q,in,j], [i,k,Q, in] or [k, 1, in], we say that k (in respectively) is its left (right) component.",
        "Let N' be",
        "the set of nonterminals of the head grammar Thead(GA. We need a function yld from reachable items in /G into (N' U Tr , specified as follows.",
        "If we assume",
        "It is not difficult to show that the definition of yld is consistent (i.e. the particular choice of a tree or rule from Q is irrelevant)."
      ]
    },
    {
      "heading": "Discussion",
      "text": [
        "We have presented a family of head-driven algorithms: TD, HC, PHI, EHI, and HI parsing.",
        "The existence of this family demonstrates that head-driven parsing covers a range of parsing algorithms wider than commonly thought.",
        "The algorithms in this family are increasingly deterministic, which means that the search trees have a decreasing size, and therefore simple realizations, such as backtracking, are increasingly efficient.",
        "However, similar to the left-to-right case, this does not necessarily hold for tabular realizations of these algorithms.",
        "The reason is that the more refined an algorithm is, the more items represent computation of a single subderivation, and therefore some subderiva-tions may be computed more than once.",
        "This is called redundancy.",
        "Redundancy has been investigated for the left-to-right case in [8], which solves this problem for ELR parsing.",
        "Head-driven algorithms have an additional source of redundancy, which has been solved for tabular HC parsing in [14].",
        "The idea from [14] can also be applied to the other head-driven algorithms from this paper.",
        "We have further proposed a generalization of head-driven parsing, and we have shown an example of such an algorithm based on LR parsing.",
        "Prospects to even further generalize the ideas from this paper seem promising."
      ]
    }
  ]
}
