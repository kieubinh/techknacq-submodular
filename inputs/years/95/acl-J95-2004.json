{
  "info": {
    "authors": [
      "Emmanuel Roche",
      "Yves Schabes"
    ],
    "book": "Computational Linguistics",
    "id": "acl-J95-2004",
    "title": "Deterministic Part-Of-Speech Tagging With Finite-State Transducers",
    "url": "https://aclweb.org/anthology/J95-2004",
    "year": 1995
  },
  "references": [
    "acl-A88-1019",
    "acl-A92-1018",
    "acl-A92-1021",
    "acl-C92-1025",
    "acl-E93-1046",
    "acl-H94-1050",
    "acl-J88-1003",
    "acl-J93-2006",
    "acl-J94-3001"
  ],
  "sections": [
    {
      "heading": "MERL MERL",
      "text": [
        "Stochastic approaches to natural language processing have often been preferred to rule-based approaches because of their robustness and their automatic training capabilities.",
        "This was the case for part-of-speech tagging until Brill showed how state-of-the-art part-of-speech tagging can be achieved with a rule-based tagger by inferring rules from a training corpus.",
        "However, current implementations of the rule-based tagger run more slowly than previous approaches.",
        "In this paper, we present a finite-state tagger, inspired by the rule-based tagger, that operates in optimal time in the sense that the time to assign tags to a sentence corresponds to the time required to follow a single path in a deterministic finite-state machine.",
        "This result is achieved by encoding the application of the rules found in the tagger as a nondeterministic finite-state transducer and then turning it into a deterministic transducer.",
        "The resulting deterministic transducer yields a part-of-speech tagger whose speed is dominated by the access time of mass storage devices.",
        "We then generalize the techniques to the class of transformation-based systems."
      ]
    },
    {
      "heading": "1. Introduction",
      "text": [
        "Finite-state devices have important applications to many areas of computer science, including pattern matching, databases, and compiler technology.",
        "Although their linguistic adequacy to natural language processing has been questioned in the past (Chomsky, 1964), there has recently been a dramatic renewal of interest in the application of finite state devices to several aspects of natural language processing.",
        "This renewal of interest is due to the speed and compactness of finite-state representations.",
        "This efficiency is explained by two properties: finite-state devices can be made deterministic, and they can be turned into a minimal form.",
        "Such representations have been successfully applied to different aspects of natural language processing, such as morphological analysis and generation (Karttunen, Kaplan, and Zaenen 1992; Clemenceau 1993), parsing (Roche 1993; Tapanainen and Voutilainen 1993), phonology (Laporte 1993; Kaplan and Kay 1994) and speech recognition (Pereira, Riley, and Sproat 1994).",
        "Although finite-state machines have been used for part-of-speech tagging (Tapanainen and Voutilainen 1993; Silberztein 1993), none of these approaches has the same flexibility as stochastic techniques.",
        "Unlike stochastic approaches to part-of-speech tagging (Church 1988; Kupiec 1992; Cutting et al.",
        "1992; Merialdo 1990; DeRose 1988; Weischedel et al.",
        "1993), up to now the knowledge found in finite-state taggers has been handcrafted and was not automatically acquired.",
        "Recently, Brill (1992) described a rule-based tagger that performs as well as taggers based upon probabilistic models and overcomes the limitations common in rule-based approaches to language processing: it is robust and the rules are automatically ac* Mitsubishi Electric Research Laboratories, 201 Broadway, Cambridge, MA 02139.",
        "E-mail: roche/schabes@merl.com."
      ]
    },
    {
      "heading": "1995 Association for Computational Linguistics",
      "text": [
        "Computational LinguisticsVolume 21, Number 2 quired.",
        "In addition, the tagger requires drastically less space than stochastic taggers.",
        "However, current implementations of Brill's tagger are considerably slower than the ones based on probabilistic models since it may require RKn elementary steps to tag an input of n words with R rules requiring at most K tokens of context.",
        "Although the speed of current part-of-speech taggers is acceptable for interactive systems where a sentence at a time is being processed, it is not adequate for applications where large bodies of text need to be tagged, such as in information retrieval, indexing applications, and grammar-checking systems.",
        "Furthermore, the space required for part-of-speech taggers is also an issue in commercial personal computer applications such as grammar-checking systems.",
        "In addition, part-of-speech taggers are often being coupled with a syntactic analysis module.",
        "Usually these two modules are written in different frameworks, making it very difficult to integrate interactions between the two modules.",
        "In this paper, we design a tagger that requires n steps to tag a sentence of length n, independently of the number of rules and the length of the context they require.",
        "The tagger is represented by a finite-state transducer, a framework that can also be the basis for syntactic analysis.",
        "This finite-state tagger will also be found useful when combined with other language components, since it can be naturally extended by composing it with finite-state transducers that could encode other aspects of natural language syntax.",
        "Relying on algorithms and formal characterizations described in later sections, we explain how each rule in Brill's tagger can be viewed as a nondeterministic finite-state transducer.",
        "We also show how the application of all rules in Brill's tagger is achieved by composing each of these nondeterministic transducers and why nondeterminism arises in this transducer.",
        "We then prove the correctness of the general algorithm for determinizing (whenever possible) finite-state transducers, and we successfully apply this algorithm to the previously obtained nondeterministic transducer.",
        "The resulting deterministic transducer yields a part-of-speech tagger that operates in optimal time in the sense that the time to assign tags to a sentence corresponds to the time required to follow a single path in this deterministic finite-state machine.",
        "We also show how the lexicon used by the tagger can be optimally encoded using a finite-state machine.",
        "The techniques used for the construction of the finite-state tagger are then formalized and mathematically proven correct.",
        "We introduce a proof of soundness and completeness with a worst-case complexity analysis for the algorithm for determinizing finite-state transducers.",
        "We conclude by proving that the method can be applied to the class of transformation based error-driven systems."
      ]
    },
    {
      "heading": "2. Overview of Brill's Tagger",
      "text": [
        "Brill's tagger is comprised of three parts, each of which is inferred from a training corpus: a lexical tagger, an unknown word tagger, and a contextual tagger.",
        "For purposes of exposition, we will postpone the discussion of the unknown word tagger and focus mainly on the contextual rule tagger, which is the core of the tagger.",
        "The lexical tagger initially tags each word with its most likely tag, estimated by examining a large tagged corpus, without regard to context.",
        "For example, assuming that vbn is the most likely tag for the word \"killed\" and vbd for \"shot,\" the lexical tagger might assign the following part-of-speech tags:'",
        "Emmanuel Roche and Yves SchabesDeterministic Part-of-Speech Tagging 1. vbn vbd PREVTAG np 2. vbd vbn NEXTTAG by",
        "It is relevant to our following discussion to note that the application of the NEXT TAG rule must look ahead one token in the sentence before it can be applied, and that the application of two rules may perform a series of operations resulting in no net change.",
        "As we will see in the next section, these two aspects are the source of local nondeterminism in Brill's tagger.",
        "The sequence of contextual rules is automatically inferred from a training corpus.",
        "A list of tagging errors (with their counts) is compiled by comparing the output of the lexical tagger to the correct part-of-speech assignment.",
        "Then, for each error, it is determined which instantiation of a set of rule templates results in the greatest error reduction.",
        "Then the set of new errors caused by applying the rule is computed and the process is repeated until the error reduction drops below a given threshold.",
        "KuCera 1982): pps stands for singular nominative pronoun in third person, vbd for verb in past tense, np for proper noun, vbn for verb in past participle form, by for the word \"by,\" at for determiner, nn for singular noun, and bedz for the word \"was.\"",
        "Contextual rule templates.",
        "Partial matches of A B PREVBIGRAM C C on the input CDCC A.",
        "Using the set of contextual rule templates shown in Figure 2, after training on the Brown Corpus, 280 contextual rules are obtained.",
        "The resulting rule-based tagger performs as well as state-of-the-art taggers based upon probabilistic models.",
        "It also overcomes the limitations common in rule-based approaches to language processing: it is robust, and the rules are automatically acquired.",
        "In addition, the tagger requires drastically less space than stochastic taggers.",
        "However, as we will see in the next section, Brill's tagger is inherently slow."
      ]
    },
    {
      "heading": "3. Complexity of Brill's Tagger",
      "text": [
        "Once the lexical assignment is performed, in Brill's algorithm, each contextual rule acquired during the training phase is applied to each sentence to be tagged.",
        "For each individual rule, the algorithm scans the input from left to right while attempting to match the rule.",
        "This simple algorithm is computationally inefficient for two reasons.",
        "The first reason for inefficiency is the fact that an individual rule is compared at each token of the input, regardless of the fact that some of the current tokens may have been previously examined when matching the same rule at a previous position.",
        "The algorithm treats each rule as a template of tags and slides it along the input, one word at a time.",
        "Consider, for example, the rule A B PREVBIGRAM C C that changes tag A to tag B if the previous two tags are C. When applied to the input CDCCA, the pattern CCA is compared three times to the input, as shown in Figure 3.",
        "At each step no record of previous partial matches or mismatches is remembered.",
        "In this example, C is compared with the second input token D during the first and second steps, and therefore, the second step could have been skipped by remembering the comparisons from the first step.",
        "This method is similar to a naive pattern-matching algorithm.",
        "The second reason for inefficiency is the potential interaction between rules.",
        "For example, when the rules in Figure 1 are applied to sentence (3), the first rule results",
        "Emmanuel Roche and Yves SchabesDeterministic Part-of-Speech Tagging in a change (6) that is undone by the second rule as shown in (9).",
        "The algorithm may therefore perform unnecessary computation.",
        "In summary, Brill's algorithm for implementing the contextual tagger may require RKn elementary steps to tag an input of n words with R contextual rules requiring at most K tokens of context.",
        "4.",
        "Construction of the Finite-State Tagger We show how the function represented by each contextual rule can be represented as a nondeterministic finite-state transducer and how the sequential application of each contextual rule also corresponds to a nondeterministic finite-state transducer being the result of the composition of each individual transducer.",
        "We will then turn the nondeterministic transducer into a deterministic transducer.",
        "The resulting partof-speech tagger operates in linear time independent of the number of rules and the length of the context.",
        "The new tagger operates in optimal time in the sense that the time to assign tags to a sentence corresponds to the time required to follow a single path in the resulting deterministic finite-state machine.",
        "Our work relies on two central notions: the notion of a finite-state transducer and the notion of a subsequential transducer.",
        "Informally speaking, a finite-state transducer is a finite-state automaton whose transitions are labeled by pairs of symbols.",
        "The first symbol is the input and the second is the output.",
        "Applying a finite-state transducer to an input consists of following a path according to the input symbols while storing the output symbols, the result being the sequence of output symbols stored.",
        "Section 8.1 formally defines the notion of transducer.",
        "Finite-state transducers can be composed, intersected, merged with the union operation and sometimes determinized.",
        "Basically, one can manipulate finite-state transducers as easily as finite-state automata.",
        "However, whereas every finite-state automaton is equivalent to some deterministic finite-state automaton, there are finite-state transducers that are not equivalent to any deterministic finite-state transducer.",
        "Transductions that can be computed by some deterministic finite-state transducer are called subsequential functions.",
        "We will see that the final step of the compilation of our tagger consists of transforming a finite-state transducer into an equivalent subsequential transducer.",
        "We will use the following notation when pictorially describing a finite-state transducer: final states are depicted with two concentric circles; c represents the empty string; on a transition from state i to state j, a/b indicates a transition on input symbol a and output symbol(s) b;2 a question mark (?)",
        "on an input transition (for example labeled ?/b) originating at state i stands for any input symbol that does not appear as input symbol on any other outgoing arc from i.",
        "In this document, each depicted finite state transducer will be assumed to have a single initial state, namely the leftmost state (usually labeled 0).",
        "We are now ready to construct the tagger.",
        "Given a set of rules, the tagger is constructed in four steps.",
        "The first step consists of turning each contextual rule found in Brill's tagger into a finite-state transducer.",
        "Following the example discussed in Section 2, the functionality of the rule vbn vbd PREVTAG np is represented by the transducer shown on the left of Figure 4.",
        "2 When multiple output symbols are emitted, a comma symbolizes the concatenation of the output symbols.",
        "Left: Transducer T1 representing the contextual rule vbn vbd PREVTAG np.",
        "Right: Local extension LocExt(T1) of T1.",
        "Figure 5 Left: Transducer T2 representing vbd vbn NEXTTAG by.",
        "Right: Local extension LocExt(T2) of T2 Each contextual rule is defined locally; that is, the transformation it describes must be applied at each position of the input sequence.",
        "For instance, the rule A B PREV10R2TAG C, which changes A into B if the previous tag or the one before is C, must be applied twice on CA A (resulting in the output C B B).",
        "As we have seen in the previous section, this method is not efficient.",
        "The second step consists of turning the transducers produced by the preceding step into transducers that operate globally on the input in one pass.",
        "This transformation is performed for each transducer associated with each rule.",
        "Given a function fi that transforms, say, a into b (i.e. fi (a) =- b), we want to extend it to a function f2 such that f2 (w) = w' where w' is the word built from the word w where each occurrence of a has been replaced by b.",
        "We say that 12 is the local extension' of Ii, and we write f2 LocExt(fi).",
        "Section 8.2 formally defines this notion and gives an algorithm for computing the local extension.",
        "Referring to the example of Section 2, the local extension of the transducer for the rule vbn vbd PREVTAG np is shown to the right of Figure 4.",
        "Similarly, the transducer for the contextual rule vbd vbn NEXTTAG by and its local extension are shown in Figure 5.",
        "The transducers obtained in the previous step still need to be applied one after the other.",
        "Example of a transducer not equivalent to any subsequential transducer.",
        "The third step combines all transducers into one single transducer.",
        "This corresponds to the formal operation of composition defined on transducers.",
        "The formalization of this notion and an algorithm for computing the composed transducer are well known and are described originally by Elgot and Mezei (1965).",
        "Returning to our running example of Section 2, the transducer obtained by composing the local extension of T2 (right in Figure 5) with the local extension of T1 (right in Figure 4) is shown in Figure 6.",
        "The fourth and final step consists of transforming the finite-state transducer obtained in the previous step into an equivalent subsequential (deterministic) transducer.",
        "The transducer obtained in the previous step may contain some nondeterminism.",
        "The fourth step tries to turn it into a deterministic machine.",
        "This determinization is not always possible for any given finite-state transducer.",
        "For example, the transducer shown in Figure 7 is not equivalent to any subsequential transducer.",
        "Intuitively speaking, this transducer has to look ahead an unbounded distance in order to correctly generate the output.",
        "This intuition will be formalized in Section 9.2.",
        "However, as proven in Section 10, the rules inferred in BrilYs tagger can always be turned into a deterministic machine.",
        "Section 9.1 describes an algorithm for determinizing finite-state transducers.",
        "This algorithm will not terminate when applied to transducers representing nonsubsequential functions.",
        "In our running example, the transducer in Figure 6 has some nondeterministic paths.",
        "For example, from state 0 on input symbol vbd, two possible emissions are possible: vbn (from 0 to 2) and vbd (from 0 to 3).",
        "This nondeterminism is due to the rule vbd vbn NEXTTAG by, since this rule has to read the second symbol before it can know which symbol must be emitted.",
        "The deterministic version of the transducer T3 is shown in Figure 8.",
        "Whenever nondeterminism arises in T3, the deterministic machine",
        "Subsequential form for T3.",
        "emits the empty symbol e, and postpones the emission of the output symbol.",
        "For example, from the start state 0, the empty string is emitted on input vbd, while the current state is set to 2.",
        "If the following word is by, the two token string vbn by is emitted (from 2 to 0), otherwise vbd is emitted (depending on the input from 2 to 2 or from 2 to 0).",
        "Using an appropriate implementation for finite-state transducers (see Section 11), the resulting part-of-speech tagger operates in linear time, independently of the number of rules and the length of the context.",
        "The new tagger therefore operates in optimal time.",
        "We have shown how the contextual rules can be implemented very efficiently.",
        "We now turn our attention to lexical assignment, the step that precedes the application of the contextual transducer.",
        "This step can also be made very efficient."
      ]
    },
    {
      "heading": "5. Lexical Tagger",
      "text": [
        "The first step of the tagging process consists of looking up each word in a dictionary.",
        "Since the dictionary is the largest part of the tagger in terms of space, a compact representation is crucial.",
        "Moreover, the lookup process has to be very fast toootherwise the improvement in speed of the contextual manipulations would be of little practical interest.",
        "To achieve high speed for this procedure, the dictionary is represented by a deterministic finite-state automaton with both fast access and small storage space.",
        "Suppose one wants to encode the sample dictionary of Figure 9.",
        "The algorithm, as described by Revuz (1991), consists of first building a tree whose branches are labeled by letters and whose leaves are labeled by a list of tags (such as nn vb) , and then minimizing it into a directed acyclic graph (DAG).",
        "The result of applying this procedure to the sample dictionary of Figure 9 is the DAG of Figure 10.",
        "When a dictionary is represented as a DAG, looking up a word in it consists simply of following one path in the DAG.",
        "The complexity of the lookup procedure depends only on the length of the word; in particular, it is independent of the size of the dictionary.",
        "The lexicon used in our system encodes 54,000 words.",
        "The corresponding DAG takes 360Kb of space and provides an access time of 12,000 words per second.'"
      ]
    },
    {
      "heading": "4 The size of the dictionary in plain text (ASCII form) is 742KB.",
      "text": [
        "DAG representation of the dictionary of Figure 9.",
        "6.",
        "Tagging Unknown Words",
        "The rule-based system described by Brill (1992) contains a module that operates after all known wordsthat is, words listed in the dictionaryhave been tagged with their most frequent tag, and before contextual rules are applied.",
        "This module guesses a tag for a word according to its suffix (e.g. a word with an \"ing\" suffix is likely to be a verb), its prefix (e.g. a word starting with an uppercase character is likely to be a proper noun), and other relevant properties.",
        "This module basically follows the same techniques as the ones used to implement the lexicon.",
        "Because of the similarity of the methods used, we do not provide further details about this module."
      ]
    },
    {
      "heading": "7. Empirical Evaluation",
      "text": [
        "The tagger we constructed has an accuracy identical' to Brill's tagger and comparable to statistical-based methods.",
        "However, it runs at a much higher speed.",
        "The tagger runs nearly ten times faster than the fastest of the other systems.",
        "Moreover, the finite state tagger inherits from the rule-based system its compactness compared with a stochastic tagger.",
        "In fact, whereas stochastic taggers have to store word-tag, bigram, and trigram probabilities, the rule-based tagger and therefore the finite-state one only have to encode a small number of rules (between 200 and 300).",
        "We empirically compared our tagger with Eric Brill's implementation of his tagger, and with our implementation of a trigram tagger adapted from the work of Church (1988) that we previously implemented for another purpose.",
        "We ran the three programs on large files and piped their output into a file.",
        "In the times reported, we included the time spent reading the input and writing the output.",
        "Figure 11 summarizes the results.",
        "All taggers were trained on a portion of the Brown corpus.",
        "The experiments were run on an HP720 with 32MB of memory.",
        "In order to conduct a fair comparison, the dictionary lookup part of the stochastic tagger has also been implemented using the techniques described in Section 5.",
        "All three taggers have approximately the same",
        "Speeds of the different parts of the program.",
        "precision (95% of the tags are correct).6 By design, the finite-state tagger produces the same output as the rule-based tagger.",
        "The rule-based taggerand the finite-state taggerdo not always produce the exact same tagging as the stochastic tagger (they do not make the same errors); however, no significant difference in performance between the systems was detected.'",
        "Independently, Cutting et al.",
        "(1992) quote a performance of 800 words per second for their part-of-speech tagger based on hidden Markov models.",
        "The space required by the finite-state tagger (815KB) is distributed as follows: 363KB for the dictionary, 440KB for the subsequential transducer and 12KB for the module for unknown words.",
        "The speeds of the different parts of our system are shown in Figure 12.8 Our system reaches a performance level in speed for which other, very low-level factors (such as storage access) may dominate the computation.",
        "At such speeds, the time spent reading the input file, breaking the file into sentences, breaking the sentences into words, and writing the result into a file is no longer negligible."
      ]
    },
    {
      "heading": "8. Finite-State Transducers",
      "text": [
        "The methods used in the construction of the finite-state tagger described in the previous sections were described informally.",
        "In the following section, the notion of finite state transducer and the notion of local extension are defined.",
        "We also provide an algorithm for computing the local extension of a finite-state transducer.",
        "Issues related to the determinization of finite-state transducers are discussed in the section following this one."
      ]
    },
    {
      "heading": "8.1 Definition of Finite-State Transducers",
      "text": [
        "A finite-state transducer T is a five-tuple (E, Q, i,F,E) where: E is a finite alphabet; Q is a finite set of states or vertices; i E Q is the initial state; F C Q is the set of final states; ECQx (E U {}) x E* x Q is the set of edges or transitions.",
        "T4: Example of a finite-state transducer.",
        "For instance, Figure 13 is the graphical representation of the transducer: T4 = ({a, b, c, h, e}, {0, 1, 2, 3}, 0, {3}, { (0, a, b,1), (0, a, c,2), (1, h, h, 3), (2, e, ei3)1) A finite-state transducer T also defines a function on words in the following way: the extended set of edges E, the transitive closure of E, is defined by the following recursive relation: if e E E then e E if (q, a, b, q'), (q' , a' , q\") E t then (q, aa' bb' q\") E Then the function f from E* to E* defined by f (w) = w' iff q E F such that (i, w, w', q) E E is the function defined by T. One says that T represents f and writes f = 11.",
        "The functions on words that are represented by finite-state transducers are called rational functions.",
        "If, for some input w, more than one output is allowed (e.g. f (w) = {w1, w2, .})",
        "then f is called a rational transduction.",
        "In the example of Figure 13, 1E11 is defined by ILI' (ah) -= bh and I T41(ae) = ce.",
        "Given a finite-state transducer T = (E, Q, F, E), the following additional notions are useful: its state transition function d that maps Q x (E u {}) into 2Q defined by d(q, a) = {q' E Q ]w' E E* and (q, a, w' , q') E E}; and its emission function 5 that maps Q x (E U {c}) x Q into 2E* defined by (q , a, q') {w' E E I (q, a, w,' q') E E}.",
        "A finite-state transducer could be seen as a finite-state automaton, where each transition label is a pair.",
        "In this respect, T4 would be deterministic; however, since transducers are generally used to compute a function, a more relevant definition of determinism consists of saying that both the transition function d and the emission function (5 lead to sets containing at most one element, that is, Id(q, a)1 < 1 and 18 (q , a, (3')I < 1 (and that these sets are empty for a = e).",
        "With this notion, if a finite-state transducer is deterministic, one can apply the function to a given word by deterministically following a single path in the transducer.",
        "Deterministic transducers are called subsequential transducers (Schfitzenberger 1977).9 Given a deterministic transducer, we can define the partial functions q 0a = q' iff d(q, a) -= {q'} and q * a = w' iff E Q such that q 0 a = q' and 6 (q , a, q') = {w'} .",
        "This leads to the definition of subsequential transducers: a subsequential transducer T' is a seven-tuple (E, Q, i, F, 0, *, p) where: E, Q, i, F are defined as above; 0 is the deterministic state transition function that maps Q x E on Q, one writes q Oa = q'; * is the deterministic emission function that maps Q x E on E*, one writes q * a = w'; and the final emission function p maps F on E*, one writes p(q) w. For instance, T4 is not deterministic because d(0, a) =- {1, 2}, but it is equivalent to Ty represented Figure 14 in the sense that they represent the same function, i.e.",
        "9 A sequential transducer is a deterministic transducer for which all states are final.",
        "Sequential transducers are also called generalized sequential machines (Eilenberg 1974)."
      ]
    },
    {
      "heading": "8.2 Local Extension",
      "text": [
        "In this section, we will see how a function that needs to be applied at all input positions can be transformed into a global function that needs to be applied once on the input.",
        "For instance, consider T6 of Figure 15.",
        "It represents the function f6 T61 such that f6 (ab) -= bc and f6 (bca) = dca.",
        "We want to build the function that, given a word w, each time w contains ab (i.e. ab is a factor of the word) (resp.",
        "bca), this factor is transformed into its image bc (resp.",
        "dca).",
        "Suppose, for instance, that the input word is w = aabcab, as shown in Figure 16, and that the factors that are in dom(f6)1 can be found according to two different factorizations: i.e. w1 = a w2 C ' w211, where w2 = ab, and wi = aa w3 b, where w3 = bca.",
        "The local extension of f6 will be the transduction that takes each possible factorization and transforms each factor according to f6, i.e. f6 (w2)= bc and f6(w3) = dca, and leaves the other parts unchanged; here this leads to two outputs: abccbc according to the first factorization, and aadcab according to the second factorization.",
        "The notion of local extension is formalized through the following definition.",
        "It could also be seen that if YT is the identity function on E* (E* dom(T) E*), then LocExt(T) =- (T y )* .12 Figure 17 gives an algorithm that computes the local extension directly.",
        "The idea is that an input word is processed nondeterministically from left to right.",
        "Suppose, for instance, that we have the initial transducer T7 of Figure 18 and that we want to build its local extension, T8 of Figure 19.",
        "When the input is read, if a current input letter cannot be transformed at the initial state of T7 (the letter c for instance), it is left unchanged: this is expressed by the looping transition on the initial state 0 of T8 labeled ?/?.\" On the other hand,",
        "if the input symbol, say a, can be processed at the initial state of T7, one doesn't know yet whether a will be the beginning of a word that can be transformed (e.g. ab) or whether it will be followed by a sequence that makes it impossible to apply the transformation (e.g. ac).",
        "Hence one has to entertain two possibilities, namely (1) we are processing the input according to T7 and the transitions should be a/b; or (2) we are within the identity and the transition should be a/a.",
        "This leads to two kind of states: the transduction states (marked transduction in the algorithm) and the identity states (marked identity in the algorithm).",
        "It can be seen in Figure 19 that this leads to a transducer that has a copy of the initial transducer and an additional part that processes the identity while making sure it could not have been transformed.",
        "In other words, the algorithm consists of building a copy of the original transducer and at the same time the identity function that operates on E* E* dom(T) E*.",
        "Let us now see how the algorithm of Figure 17 applies step by step to the transducer T7 of Figure 18, producing the transducer T8 of Figure 19.",
        "In Figure 17, C' [0] = ({i},identity) of line 1 states that state 0 of the transducer to be built is of type identity and refers to the initial state i = 0 of T7.",
        "q represents the current state and n the current number of states.",
        "In the loop do{. }",
        "while (q < n), one builds the transitions of each state one after the other: if the transition points to a state not already built, a new state is added, thus incrementing n. The program stops when all states have been inspected and when no additional state is created.",
        "The number of iterations is bounded by 211 n*2, where 11T = IQ' is the number of states of the original transducer.\" Line 3 says that the current state within the loop is q and that this state for all the diagonal pairs a la s.t.",
        "a is not an input symbol on any outgoing arc from this state.",
        "14 In fact, Q' C 2Q x ftransduction,identityl.",
        "Thus, q < 221Q1.",
        "to the set of states S and is marked by the type type.",
        "In our example, at the first occurrence of this line, S is instantiated to {0} and type = identity.",
        "Line 5 adds the current identity state to the set of final states and a transition to the initial state for all letters that do not appear on any outgoing arc from this state.",
        "Lines 6-11 build the transitions from and to the identity states, keeping track of where this leads in the original transducer.",
        "For instance, a is a label that verifies the conditions of line 6.",
        "Thus a transition a/a is to be added to the identity state 2, which refers to 1 (because of the transition a/b of T7) and to i 0 (because it is possible to start the transduction T7 from any identity state).",
        "Line 7 checks that this state doesn't already exist and adds it if necessary.",
        "e -= n++ means that the arrival state for this transition, i.e. d(q, w), will be the last added state and that the number of states being built has to be incremented.",
        "Line 11 actually builds the transition between 0 and e = 2 labeled a/a.",
        "Lines 12-17 describe the fact that it is possible to start a transduction from any identity state.",
        "Here a transition is added to a new state, i.e. a/b to 3.",
        "The next state to be considered is 2 and it is built like state 0, except that the symbol b should block the current output.",
        "In fact, state 1 means that we already read a with a as output; thus, if one reads b, ab is at the current point, and since ab should be transformed into bc, the current identity transformation (that is a > a) should be blocked: this is expressed by the transition b/b that leads to state 1 (this state is a \"trash\" state; that is, it has no outgoing transition and it is not final).",
        "The following state is 3, which is marked as being of type transduction, which means that lines 19-27 should be applied.",
        "This consists simply of copying the transitions of the original transducer.",
        "If the original state was final, as for 4 -= ({2}, transduction), an /e transition to the initial state is added (to get the behavior of T+).",
        "The transducer T9 LOCEXt(T6) of Figure 20 gives a more complete (and slightly more complex) example of this algorithm."
      ]
    },
    {
      "heading": "9. Determinization",
      "text": [
        "The basic idea behind the determinization algorithm comes from Mehryar Mohri.'",
        "In this section, after giving a formalization of the algorithm, we introduce a proof of soundness and completeness, and we study its worst-case complexity."
      ]
    },
    {
      "heading": "9.1 Determinization Algorithm",
      "text": [
        "In the following, for w1, w2 E E*, w1 A w2 denotes the longest common prefix of wi and w2.",
        "The finite-state transducers we use in our system have the property that they can be made deterministic; that is, there exists a subsequential transducer that represents the same function.'",
        "If T = (E, Q,i,F,E) is such a finite-state transducer, the subsequential transducer T' = (E, Q', , F', 0, *, p) defined as follows will be later proved equivalent to T: Q' C 212)<E* In fact, the determinization of the transducer is related to the determinization of FSAs in the sense that it also involves a power set construction.",
        "The difference is that one has to keep track of the set of states of the original transducer one might be in and also of the words whose emission have been postponed.",
        "For instance, a state {(qi, w1), (q2, w2)} means that this state corresponds to a path that leads to qi and q2 in the original transducer and that the emission of zai (resp.",
        "w2) was delayed for qi (resp.",
        "q2).",
        "= f (i, E) }.",
        "There is no postponed emission at the initial state.",
        "the emission function is defined by:",
        "This means that, for a given symbol, the set of possible emissions is obtained by concatenating the postponed emissions with the emission at the current state.",
        "Since one wants the transition to be deterministic, the actual emission is the longest common prefix of this set.",
        "the state transition function is defined by: S a = UU { (qi, (S *arl u S(q,a, q1))}",
        "Emmanuel Roche and Yves SchabesDeterministic Part-of-Speech Tagging The determinization algorithm of Figure 21 computes the above subsequential transducer.",
        "Let us now apply the determinization algorithm of Figure 21 on the finite-state transducer T4 of Figure 13 and show how it builds the subsequential transducer Tio of Figure 22.",
        "Line 1 of the algorithm builds the first state and instantiates it with the pair { (0, E) }.",
        "q and n respectively denote the current state and the number of states having been built so far.",
        "At line 5, one takes all the possible input symbols w; here only a is possible.",
        "w' of line 6 is the output symbol,",
        "Henceforth, the computation of line 8 leads to s'= U U {(4' , (bh)-1 b h)} = {(2, Of.",
        "qE{1} q'E{2} State 2 labeled {(2, e)} is thus added, and a transition labeled hlbh that points to state 2 is also added.",
        "The transition for the input symbol e is computed the same way.",
        "The subsequential transducer generated by this algorithm could in turn be minimized by an-algorithm described in Mohri (1994a).",
        "However, in our case, the transducer is nearly minimal."
      ]
    },
    {
      "heading": "9.2 Proof of Correctness",
      "text": [
        "Although it is decidable whether a function is subsequential or not (Choffrut 1977), the determinization algorithm described in the previous section does not terminate when run on a nonsubsequential function.",
        "Two issues are addressed in this section.",
        "First, the proof of soundness: the fact that if the algorithm terminates, then the output transducer is deterministic and represents the same function.",
        "Second, the proof of completeness: the algorithm terminates in the case of subsequential functions.",
        "Soundness and completeness are a consequence of the main proposition, which states that if a transducer T represents a subsequential function f, then the algorithm DeterminizeTransducer described in the previous section applied on T computes a sub sequential transducer representing the same function.",
        "In order to simplify the proofs, we will only consider transducers that do not have E input transitions, that is ECQxEx E* x Q, and also without loss of generality,",
        "Subsequential transducer T10 such that ITto = T4I-transducers that are reduced and that are deterministic in the sense of finite-state automata.'",
        "In order to prove this proposition, we need to establish some preliminary notations and lemmas.",
        "First we extend the definition of the transition function d, the emission function 6, the deterministic transition function 0, and the deterministic emission function * on words in the classical way.",
        "We then have the following properties:",
        "Emmanuel Roche and Yves SchabesDeterministic Part-of-Speech Tagging q * ab = (q * a) (q a) * b For the following, it is useful to note that if 171 is a function, then 6' is a function too.",
        "The following lemma states an invariant that holds for each state S built within the algorithm.",
        "The lemma will later be used for the proof of soundness.",
        "Lemma 1 Let I = C'[0] be the initial state.",
        "At each iteration of the \"do\" loop in DeterminizeTransducer, , for each S C' [q] and for each w E E* such that I w S, the following holds:",
        "(i) and (ii) are obviously true for S = I (since d(i, c) = i and 8(i, c,i) = e), and we will show that given some w E E* if it is true for S w, then it is also true for Si =S0a=Iowa for all a E E. Assuming that (i) and (ii) hold for S and w, then for each a E E: A(i, w, q) 5(q, a, q') - (1* w) .",
        "A((I * w)-1 6 (i, w, q)) 6 (q , a, q')",
        "This proves (i).",
        "We now turn to (ii).",
        "Assuming that (i) and (ii) hold for S and w, then for each a E E, let Si -=- S 0 a; the algorithm (line 8) is such that",
        "We show that Si c S2.",
        "Let (q' ,u') E Si, then ](q,u) c S s.t.",
        "q' E d(q, a) and u' = (S * a)l u (q , a, q').",
        "Since u = (I * w)l O(i,w, q), then u' = (S * a)l (I * w)-1 (i, w, q) 8(q, a, q'); that is, u' (I * wa)l 6(i, wa, q').",
        "Thus (qC u') E S2.",
        "Hence Si C 52.",
        "We now show that S2 C Si.",
        "Let (q' , u') E 52, and let q E d(i,w) be s.t.",
        "q' E d(q, a) and u = (I * wri (i, w, q) then (q , u) E S and since u' = (I * wa) 6 (i, wa, q') = (S *a)u 6 (q , a, q' ), (q' , u') E This concludes the proof of (ii).",
        "Let S be one state set built in line 8 of the algorithm.",
        "Suppose (q,u),(q',u') E S and q, q' E F. According to (ii) of lemma 1, u = (I*w)-1 6(i, w, q) and u' = (I *w)-1 6(i, w, q').",
        "Since I TI is a function and (5(i,w,q),(5(i,w,q/)} E I TI (w) then S(i,w,q) = 6(i,w,q/), therefore u = u'.",
        "0 The following lemma will be used for completeness.",
        "Lemma 4 Given a transducer T representing a subsequential function, there exists a bound M s.t.",
        "for each S built at line 8, for each (q, u) E S, lul < M. We rely on the following theorem proven by Choffrut (1978): Theorem 1 A function f on E* is subsequential iff it has bounded variations and for any rational language L C E*, f' (L) is also rational.",
        "with the following two definitions:",
        "minimal among such strings.",
        "Note that Ic(q)I < HTH where TII is the number of states",
        "Emmanuel Roche and Yves SchabesDeterministic Part-of-Speech Tagging in T. For each q E Q let s(q) e Q be a state s.t.",
        "s(q) E d(q,c(q)) nF.",
        "Let us further define",
        "Lemma 4 shows that the algorithm always terminates if 1T1 is subsequential.",
        "Let us show that dom(17-1) C dOM(iTI).",
        "Let w E E* s.t.",
        "w is not in dom(IT1), then d(i, w) n F = O.",
        "Thus, according to (ii) of Lemma 1, for all (q, u) e I w, q is not in F, thus I w is not terminal and therefore w is not in dom(r).",
        "Conversely, let w E dOM(ITI).",
        "There exists a qf EF s.t.",
        "ITI(w) = S(i,w,qf) and s.t.",
        "qf E d(i, w).",
        "Therefore ITI (w) (I * w) ((I * w)-1 6(i, w, q f)) and according to (ii) of Lemma 1 (qf, (I * w)-1 6(i,w/q1)) c I 0 w and since qf e F, Lemma 3 shows that p(I w) =- (I * w)-1 6(i, w, q f), thus IT1(w) = (I * w) p(I w) 17-1(w).",
        "0"
      ]
    },
    {
      "heading": "9.3 Worst-Case Complexity",
      "text": [
        "In this section we give a worst-case upper bound of the size of the subsequential transducer in terms of the size of the input transducer.",
        "Let L = 1w E E* s.t.",
        "1w1 < Ml, where M is the bound defined in the proof of Lemma 4.",
        "Since, according to Lemma 2, for each state set Q', for each q E Q, Q' contains at most one pair (q, w), the maximal number N of states built in the algorithm is smaller than the sum of the number of functions from states to strings in L for each state set, that is N < E (2'E2(2 we thus have N <21Q1 x 1410 = 210 x 21Q1xlog2 ILI and therefore N < 21(210+10g11,1) Moreover, ILI = 1 + 1E1 + +1E1A4_ if 1E1 > 1 = 1 and IL 1 M + 1 if 1E1 -= 1.",
        "In this last formula, M = K + 2Mi, as described in Lemma 4.",
        "Note that if P = MAX,EEIS (q , a, q')I is the maximal length of the simple transitions emissions, MI <IQI x P, thus M < K + 2 x QI x P. Therefore, if 1E1 > 1, the number of states N is bounded: N < 21(21x (1-00g 1E 1(K+2x 1(21 xr+i 1E1-1) and if 1E1 = 1, N < 2IQIx (1+log (K2x IQ' xP+1)).",
        "10.",
        "Subsequentiality of Transformation-Based Systems The proof of correctness of the determinization algorithm and the fact that the algorithm terminates on the transducer encoding Brill's tagger show that the final function is subsequential and equivalent to Brill's original tagger.",
        "In this section, we prove in general that any transformation-based system, such as those used by Brill, is a subsequential function.",
        "In other words, any transformation based system can be turned into a deterministic finite-state transducer.",
        "We define transformation-based systems as follows.",
        "Definition A transformation-based system is a finite sequence (fi,fn) of subsequential functions whose domains are bounded.",
        "Applying a transformation-based system consists of applying each function f, one after the other.",
        "Applying one function consists of looking for the first position in the input at which the function can be triggered.",
        "When the function is triggered, the longest possible string starting at that position is transformed according to this function.",
        "After the string is transformed, the process is iterated starting at the end of the previously transformed string.",
        "Then, the next function is applied.",
        "The program ends when all functions have been applied.",
        "It is not true that, in general, the local extension of a subsequential function is subsequential.'",
        "For instance, consider the function fa of Figure 23.",
        "18 However, the local extensions of the functions we had to compute were subsequential.",
        "Function fa.",
        "The local extension of the function f, is not a function.",
        "In fact, consider the input string daaaad; it can be decomposed either into d aaa ad or into da aaa d. The first decomposition leads to the output dbbbad, and the second one to the output dabbbd.",
        "The intended use of the rules in the tagger defined by Brill is to apply each function from left to right.",
        "In addition, if several decompositions are possible, the one that occurs first is the one chosen.",
        "In our previous example, it means that only the output dbbbad is generated.",
        "This notion is now defined precisely.",
        "Let a be the rational function defined by a(a) = a for a E E, a(I) = a(I) = c on the additional symbols T and '1', with a such that a(u v) = a(u) a(v).",
        "Let dec be defined by dec(w) = u [ v .1 dec((uv)-1 w), where u, v E E* are s.t.",
        "v E Y, ]v' E E* with w uvvi and lu I is minimal among such strings and dec(w) = w if no such u, v exists.",
        "The function mdy is total because the function dec always returns an output that is a 'Y-decomposition of w. We shall now prove that the function is rational and then that it has bounded variations; this will prove according to Theorem 1 that the function is subsequential.",
        "In the following X = E* - E* Y E*.",
        "The transduction Ty that generates the set of Y-decompositions is defined by Ty -= Idx (E/[ Idy c/1 Idx)* where Idx (resp.",
        "Idy) stands for the identity function on X (resp.",
        "Y).",
        "Furthermore,",
        "and E = E x {c}.19 Therefore, the right-minimal Y-decomposition function mdy is defined by mdy = Ty (Tf, o Ty), which proves that mdy is rational.",
        "Let k > 0.",
        "Let K = 6 x k+6x M, where M = max,Ey Ixl.",
        "Let u, v E E* be s.t.",
        "iiu,vii < k. Let us consider two cases: (i) lu A 7.",
        ")I <M and (ii) lu A vi > M. (i): IU A vi M, thus 1u1,1v1 < lu A VI +1114/VII M k. Moreover, for each w E E*, for each Y-decomposition w' of w, Iw'I < 3 x iwi.",
        "In fact, Y doesn't contain f, thus the number of [ (resp.",
        "1) in w' is smaller than Iwl.",
        "Therefore, Imdy(u)I, Imdy(v)I < 3 x (M+k) thus iimdy(u),mdy(v)11 <K. (ii): uAv = Aco with PI = M. Let p, v be s.t.",
        "uAwp, and v = Awv.",
        "Let A', co', it', A\", co\" and v\" be s.t.",
        "mdy(u) = A'w'p', mdy(v) = A\"w\"v\", a(A') = a(A\") -= A, a(co') = a(w\") = w, a(p') = p, and a(v\") = v. Suppose that A' 0 A\", for instance A' < A\".",
        "Let i be the first indice s.t.",
        "(A'), < (A\")1.2 We have two possible situations: (ii.1) (A'), = [ and A\" E E or (A\"), = 1.",
        "In that case, since the length of the elements in Y is smaller than M = lwl , one has A'w' = [A21A3 with lAi I = 1, A2 E Y and A3 E E*.",
        "We also have A\"w\" = A1A;A'3 with a(Al2) = a(A2) and the first letter of A/2 is different from 1.",
        "Let A4 be a Y-decomposition of a(Av\"), then Ai [A21A4 is a Y-decomposition of v strictly smaller than A1AAv\" = mdy(v), which contradicts the minimality of mdy(v).",
        "The second situation is (ii.2): (A'), E E and (A\")/ = 1, then we have A'w' = A1[A2A3]A4 s.t.",
        "lA1[A21 i and A\"w\" = A1[A2]AA'4 s.t.",
        "a(A13) = a(A3) and a(A0 = a(A4).",
        "Let A5 be a Y-decomposition of Au\", then A1[A2A3]A5 is a Y-decomposition of v strictly smaller than A\"w\" v\" , which leads to the same contradiction.",
        "Therefore, A' = A\" and since li-t/1-01\"1 3 x(Ip1+10) = 3 x Ilu,v11 < 3 xk, Ilnidy(u),mdi(v)H lwii+ice\"1+10+Iv\"I 5_ 2 x M + 3 xk< K. This proves that mdy has bounded variations and therefore that it is subsequential.0 We can now define precisely what is the effect of a function when one applies it from left to right, as was done in the original tagger.",
        "19 This construction is similar to the transduction built within the proof of Eilenberg's cross section theorem (Eilenberg 1974).",
        "We have proven in this section that our techniques apply to the class of transformation based systems.",
        "We now turn our attention to the implementation of finite-state transducers.",
        "11.",
        "Implementation of Finite-State Transducers Once the final finite-state transducer is computed, applying it to an input is straightforward: it consists of following the unique sequence of transitions whose left labels correspond to the input.",
        "However, in order to have a complexity fully independent of the size of the grammar and in particular independent of the number of transitions at each state, one should carefully choose an appropriate representation for the transducer.",
        "In our implementation, transitions can be accessed randomly.",
        "The transducer is first represented by a two-dimensional table whose rows are indexed by states and whose columns are indexed by the alphabet of all possible input letters.",
        "The content of the table at line q and at column a is the word w such that the transition from q with the input label a outputs w. Since only a few transitions are allowed from many states, this table is very sparse and can be compressed.",
        "This compression is achieved while maintaining random access using a procedure for sparse data tables following the method given by Tarjan and Yao (1979)."
      ]
    },
    {
      "heading": "12. Conclusion",
      "text": [
        "The techniques described in this paper are more general than the problem of part-ofspeech tagging and are applicable to the class of problems dealing with local transformation rules.",
        "We showed that any transformation-based program can be transformed into a deterministic finite-state transducer.",
        "This yields to optimal time implementations of transformation based programs.",
        "As a case study, we applied these techniques to the problem of part-of-speech tagging and presented a finite-state tagger that requires n steps to tag a sentence of length n, independently of the number of rules and the length of the context they require.",
        "We achieved this result by representing the rules acquired for Brill's tagger as nondeterministic finite-state transducers.",
        "We composed each of these nondeterministic transducers and turned the resulting transducer into a deterministic transducer.",
        "The resulting deterministic transducer yields a part-of-speech tagger that operates in optimal time in the sense that the time to assign tags to a sentence corresponds to the time required to follow a single path in this deterministic finite-state machine.",
        "The",
        "Computational LinguisticsVolume 21, Number 2 tagger outperforms in speed both Brill's tagger and stochastic taggers.",
        "Moreover, the finite-state tagger inherits from the rule-based system its compactness compared with stochastic taggers.",
        "We also proved the correctness and the generality of the methods.",
        "We believe that this finite-state tagger will also be found useful when combined with other language components, since it can be naturally extended by composing it with finite-state transducers that could encode other aspects of natural language syntax."
      ]
    },
    {
      "heading": "Acknowledgments",
      "text": [
        "We thank Eric Brill for providing us with the code of his tagger and for many useful discussions.",
        "We also thank Aravind K. Joshi, Mark Liberman, and Mehryar Mohri for valuable discussions.",
        "We thank the anonymous reviewers for many helpful comments that led to improvements in both the content and the presentation of this paper."
      ]
    }
  ]
}
