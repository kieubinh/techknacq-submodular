{
  "info": {
    "authors": [
      "John Griffith"
    ],
    "book": "International Conference on Computational Linguistics",
    "id": "acl-C96-1076",
    "title": "Modularizing Contexted Constraints",
    "url": "https://aclweb.org/anthology/C96-1076",
    "year": 1996
  },
  "references": [
    "acl-C92-4185",
    "acl-C94-2154"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "This paper describes a method for compiling a constraint-based grammar into a potentially more efficient form for processing.",
        "This method takes dependent disjunctions within a constraint formula and factors them into non-interacting groups whenever possible by determining their independence.",
        "When a group of dependent disjunctions is split into smaller groups, an exponential amount of redundant information is reduced.",
        "At runtime, this means that an exponential amount of processing can be saved as well.",
        "Since the performance of an algorithm for processing constraints with dependent disjunctions is highly determined by its input, the transformation presented in this paper should prove beneficial for all such algorithms."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "There are two facts that conspire to make the treatment of disjunction an important consideration when building a natural language processing (NLP) system.",
        "The first fact is that natural languages are full of ambiguities, and in a grammar many of these ambiguities are described by disjunctions.",
        "The second fact is that the introduction of disjunction into a grammar causes processing time to increase exponentially in the number of disjuncts.",
        "This means that a nearly linear-time operation, such as unification of purely conjunctive feature structures, becomes an exponential-time problem as soon as disjunctions are included.'",
        "Since disjunction is unlikely to dis* This work was sponsored by Teilprojekt B4 \"From Constraints to Rules: Compilation of IIPSG\" of the Sonderforschungsbereich 340 of the Deutsche Forschungsgemeinschaft.",
        "I would also like to thank Dale Gerdemann and Guido Minuet' for helpful comments on the ideas presented here.",
        "All remaining errors are of course my own.",
        "'Assuming 1' NP.",
        "appear from natural language grammars, controlling its form can save exponential amounts of time.",
        "This paper introduces an efficient normal form for processing dependent disjunctive constraints and an operation for compilation into this normal form.",
        "This operation, modularization, can reduce exponential amounts of redundant information in a grain/nu and can consequently save corresponding amounts of processing time.",
        "While this operation is general enough be applied to a wide variety of constraint systems, it was originally designed to optimize processing of dependent disjunctions in feature structure-based grammars.",
        "In particular, modular feature structures are more efficient for unification than non-modular ones.",
        "Since in many current NLP systems, a significant amount of time is spent performing unification, optimizing feature structures for unification should increase the performance of these systems.",
        "Many algorithms for efficient unification of feature structures with dependent disjunctions have been proposed (Maxwell and Kaplan, 1989; Eisele and Dorre, 1990; Gerdemann, 1991; StrOmbiick, 1992; Griffith, 1996).",
        "However, all of these algorithms suffer from a common problem: their performance is highly determined by their inputs.",
        "All of these algorithms will perform at their best when their dependent disjunctions interact as little as possible, but if all of the disjunctions interact, then these algorithms may perform redundant computations.",
        "The need for efficient inputs has been noted in the literature' but there have been few attempts to automatically optimize grammars for disjunctive unification algorithms.",
        "The modularization algorithm presented in this paper takes existing dependent disjunctions and splits them into independent groups by determining winch disjunctions really interact.",
        "Independent groups of disjunctions can be processed separately during unification rather than having to try every combination of one group with every combination of every other group.",
        "Tins paper is organized as follows: Section 2 gives an informal introduction to dependent dis-2Cf.",
        "(Maxwell and Kaplan, 1991) for instance.",
        "junctions and shows how redundant interactions between groups of disjunctions can be reduced.",
        "Section 3 shows how normal disjunctions can be replaced by contexted constraints.",
        "Section 4 then shows how these contexted constraints can encode dependent disjunctions.",
        "Section 5 presents the modularization algorithm for contexted st mints.",
        "However, even thought this algorithm is a compile-time operation, it itself has exponential complexity, so making it more efficient should also be a conc.nrn.",
        "A theorem will then be presented in section 6 that permits an exponential part of the modularization algorithin to be replaced by combinatorial analysis."
      ]
    },
    {
      "heading": "2 I)ependent disjunctions",
      "text": [
        "Dependent disjunctions are like normal disjunc-Lions except that every disjunction has a name, and the disjuncts of disjunctions with the same name must be chosen in sync.",
        "For example, (d 0, 0', 0\") A (d 0,01 , is a conjunction of two dependent disjunctions with the same name, (1.",
        "What this means is that if the second disjunct in the first, disjunction, 0', is chosen, then the second disjunct of the other disjunction, , must be chosen as well.",
        "(Note that what kind of constraints the Os and OS are is not important here.)",
        "The computational reason for using dependent disjunctions over normal disjunctions is that dependent disjunctions allow for more compact and efficient structures.",
        "This is particularly true when dependent disjunctions are embedded inside of feature structures.",
        "Tins is because in that case disjunctions can be kept local in a directed graph structure thus saving redundant feature paths.",
        "We say that disjunctions with the same name are in the same group.",
        "One distinguishing feature of a group of disjunctions is that each disjunction must have the Sallie number of disjuncts.",
        "This is essentially where redundant interactions originate.",
        "For instance, in (d (1), (1), (11 , (1)') A (,1 , each disjunction has four disjuncts, but really only two values.",
        "13ut more importantly, no matter what value of the first disjunction is chosen (0 or 0') the same values are possible for the second OP or 0').",
        "In other words, these disjunctions are actually independent front one another, and can be put into different groups: (d, (/, (/)' ) A (i,, 0,,,y).",
        "This is the process of modularization which will be formalized in section 5.",
        "One might be tempted to think that modularization is unnecessary since grammar writers are unlikely to write dependent disjunctions which contain independent parts.",
        "However, grammar writers may not be the only source of dependent, disjunctions.",
        "Many grammar processing systems use high-level descriptions which are then transformed into more explicit lower-level grammars.",
        "This transformation process may very well introduce large numbers of dependent disjunctions with exactly this property.",
        "One example of where this call happen is in the compilation of lexical rules in (Meurers and Minnen, -1995).",
        "In this paper, Meurers and Minnen describe a compiler which translates a set of ElPSG lexical rules and their interaction into definite relations USN' to constrain lexical entries.",
        "In (Meurers hind Minium, -199(i), they show how an off-line conipilation technique called constraint propagation can lie used to improve the definite clause encoding produced by their compiler to allow for more efficient processing.",
        "The use of dependent disjunctions provides an attractive alternative to the constraint propagation approach by specifying hill the information associated with a lexical entry directly as a single dependent feature structure rather than hidden in a set, of definite clauses.3 Consider the AVM below:",
        "This complex lexical entry represents the base lexical entry for the German verb lichen, \"to love\", and the three lexical entries that can he derived front it given the lexical rules presented in (Mout.-ers and Minimum, 1996).",
        "The differences between these lexical entries are encoded by the dependent disjunctions all of which are in the sante group, (1.",
        "The first, disjunct in each disjunction corresponds to the base fort, the second corresponds to the application of the Complement 1.■',xtraction Lexical Rule, the third corresponds to the application of the Finitivization Lexical Rule, and the last corresponds to the application of both rules!'",
        "Modularization can be used to make this feature structure even more efficient by splitting the group (1 into two new groups dt and d2 as shown below.",
        "Another example of where modularization might prove useful is in the treatment of typed feature structures presented in (Gerdemann and King, 1994).",
        "Their approach produces a set of feature structures from a satisfiability algorithm such that all of the feature structures have the same shape but the nodes may be labeled by different types.",
        "They then collapse this set down to a single feature structure where nodes are labeled with dependent disjunctions of types.",
        "Many of the groups of disjunctions in their feature structures can be made more efficient via modularization.",
        "A final example is in the compaction algorithm for feature structures, presented in (Griffith, 1995).",
        "Compaction is another operation designed to optimize feature structures for unification.",
        "It takes a disjunction of feature structures, transforms them into a single feature structure with dependent disjunctions, and then pushes the disjunctions down in the structure as far as possible.",
        "The result is a large number of dependent disjunctions in the same group.",
        "Many of these can probably be split into new independent groups."
      ]
    },
    {
      "heading": "3 Contexted constraints",
      "text": [
        "Maxwell and Kaplan (1989) showed how a disjunction of constraints could be replaced by an equi-satisfiable conjunction of contexted constraints as in lemma 1 below.'"
      ]
    },
    {
      "heading": "Lemma 1 (Contexted Constraints)",
      "text": [
        "01 V 02 is satisfiable if (p 4 04) A (p -+ 02) is satisfiable, where p is a new propositional variable.",
        "Disjunctions are replaced by conjunctions of implications from contexts (propositional formulae) to the base constraints (ie.",
        "01 and 02).",
        "The nature of the base constraints is irrelevant as long as there is a satisfaction algorithm for them.",
        "The key insight is that solving disjunctions of the base constraints is no longer necessary since they are purely conjunctive.",
        "'For a proof see (Maxwell and Kaplan, 1989).",
        "Maxwell and Kaplan's goal in doing this was to have an efficient method for solving disjunctive constraints.",
        "The goal in this paper is compiling disjunctive constraints into more efficient ones for future solution.",
        "To this end a somewhat different notion of contexted constraint will be used as show in lemma 2."
      ]
    },
    {
      "heading": "Lemma 2 (Alternative-Case Form)",
      "text": [
        "01 V 02 is satisfiable if (ai 01) A (a2 02) A (a1 V a2) is satisfiable, where al and a2 are new propositional variables.",
        "We can see that this formulation is nearly equivalent to Maxwell and Kaplan's by substituting p for a1 and p for a2.",
        "To make the formulation completely equivalent, we would need to enforce the uniqueness of a solution by conjoining di Va2.",
        "However, this is unnecessary since we want; to permit both solutions to be simultaneously true.",
        "The reason for using the modified version of contexted constraints in lemma 2 is that we can separate the representation of disjunctions into a conjunction of the values that the disjuncts can have, called the alternatives, and the way in which the we can choose the values, called the cases.",
        "The alternatives are the conjunction (ai 4 01) A (a2 02) and the cases are the disjunction (ai V a2).",
        "While we could use repeated applications of lemma 2 to turn a disjunction of n disjuncts into an alternative-case form, it will simplify the exposition to have a more general way of doing this, as shown in lemma 3. rrma 3 (N-ary Aiterntive-Case q)i (ai 0i) A ai is satisfiable iff iEN iEN is iE N satisfiable, where each ai is a new propositional variab/A(ai V ai Here iEN are the alternatives and iEN are the cases.",
        "So for example, 01 V 02 V 03 V 04 is satisfiable just in case (a1 4 04) A (a2 02) A (a3 (V3) A (a4 – + 04) A (al V a2 V a3 V a4) is satisfiable."
      ]
    },
    {
      "heading": "4 Dependent disjunctions as contexted constraints",
      "text": [
        "The usefulness of the alternative-case form only becomes apparent when considering dependent disjunctions.",
        "Dependent disjunctions can be represented by alternative-case forms as shown in definition 1 below."
      ]
    },
    {
      "heading": "Definition 1 (Dependency Group)",
      "text": [
        "A dependency group is a conjunction of dependent disjunctions with the same name, d, where each",
        "V of A of 6iEN and iEN are disjunctions and conjunctions of formulae respectively, where each i is a member of the set of indices, N.",
        "disjunction is an alternative-case form such that there is one alternative for every disjunct of every disjunction in the group, and there is one case for each disjunct in the group which is a conjunction of the alternative variables for that disjunct",
        "where each a is a new propositional variable and N= So the dependent disjunction (d 0, 0, 01) A (il i/)', 71)1) is the alternative-case form with alternatives (al 4 0) A (4 – > cb) A (4, 4 01) A A A WI) A A ry) and cases ((a) A (4) V (4 A a)) V (4- A aD).",
        "The cases enforce that the corresponding disjuncts of every disjunct in the group must be simultaneously satisfiable.",
        "We can now start to see where redundancy in dependent disjunctions originates.",
        "Because every disjunction in a group of dependent disjunctions must have the same number of disjuncts, some of those disjuncts may appear more than once.",
        "In the above example for instance, cb occurs twice in the first disjunction and 1/,' occurs twice in the second disjunction.",
        "To resolve this problem we impose the following condition, called alternative compactness: if a base constraint 0ij equals another base constraint from the same disjunction, 0i, then the alternatives variables associated with those base constraints, a and aik , are also equal!",
        "Doing this allows us to express the alternatives from the example above as (at 0) A (a) 0') A (a) 4 lb) A (a) 4 0, and the cases as ((at A a)) V (at A 4) V (4 A 4)).8 One advantage of this is that the number of base constraints that must be checked during satisfaction can potentially be exponentially reduced.",
        "The next section will show how an alternative-case form for a group of dependent disjunctions can be split into a conjunction of two (or more) equivalent forms, thereby (potentially) exponentially reducing the number of alternative variable interactions that must be checked during satisfaction."
      ]
    },
    {
      "heading": "5 Modularization",
      "text": [
        "Consider again the example from section 2: (d , , 0' ) A (d r/', lb' ,W,W').",
        "Represented as a compact alternative-case form, the alternatives becomes: (a) 0)A (as 01)A (a4 7,b) A(4 'V), with cases: ((at A (4) V (at A a)) V (a3 A a)) V (a!,- A 4)).",
        "The key to determining that the two disjunctions can be split into different 'Note that this requires being able to determine equality of the base constraints.",
        "81n this example, equivalent alternative variables have been replaced by representatives of their 'equivalence class.",
        "So a) has been replaced by al and al has been replaced by a).",
        "groups then involves determining that cases can be split into a conjunction of two smaller cases (al V a)) A (df V a)).",
        "If the cases can be split in this manner, we say the cases (and by extension the group of dependent disjunctions) are independent."
      ]
    },
    {
      "heading": "Definition 2 (Independence)",
      "text": [
        "A case form is independent if it is equivalent to tl coAu&tiony 2 y forms:",
        "where M' and M\" partition M. So in the above example, M {1,2} where 1 represents the first disjunction and 2 represents the second.",
        "That makes M' = {1} and AI\" = {2}.",
        "While M' and M\" are derived from M, the elements of the Ns are arbitrary.",
        "But a consequence of definition 2 is that IN'l x IN\"1 This will be proved in section 6.",
        "The size of the Ns, however, represent the number of cases.",
        "So for instance in the above example, N might equal { 1,2,3,4} since there are four disjuncts in the original case form, while N' might equal {1,2} and N\", 0,21, since the smaller case forms each contain two disjuncts.",
        "The process of splitting a group of dependent disjunctions into smaller groups is called modularization.",
        "Modularizing a group of dependent disjunctions amounts to finding a conjunction of case forms that is equivalent to the original case form.",
        "The modularization algorithm consists of two main steps.",
        "The first is to take the original case form and to construct a pair of possibly independent case forms from it.",
        "The second step is to check if these case forms are actually independent from each other with respect to the original one.",
        "The modularization algorithm performs both of these steps repeatedly until either a pair of independent case forms is found or until all possible pairs have been checked.",
        "If the later, then we know that the original dependent disjunction is already modular.",
        "If on the other hand we can split the case forms into a pair of smaller, independent case forms, then we can again try to modularize each of those, until all groups are modular.",
        "To construct a pair of potentially independent case forms, we first need to partition the set of alternative variables from the original cafe form into two sets.",
        "The first subset contains all of and only the variables corresponding to some subset of the original disjunctions and the second subset of variables is the complement of the first, corresponding to all of and only the other disjunctions.",
        "From these subsets of variables, we construct two new case forms from the original using the operation of confinement, defined below.",
        "where M' C M .",
        "Constructing the confinement of a case form is essentially just throwing out all of the alternative variables that are not in M'.",
        "However, only doing this might leave us with duplicate disjuncts, so converting the result to DNF removes any such duplicates.",
        "To make the definition of confinement clearer, consider the following conjunction of dependent disjunctions: (d 0, 0, 0, 0, 0', 0') A (d W , W' , , W' ,11), 0') A (d X, X, Xi, XI, X', • This is equivalent to the compact alternative form:9 (at 0) A (a) 0') A (a?",
        " – + (4 0') A (a4 x) A (a) x'), and the following case form: ease =",
        "(a) A (4 A aD V (air; A 4.",
        "A 4) V (a; A a2 A al)).",
        "Now we can compute the confinements.",
        "For instance, conf (ease, {1,2}) dnf ((al A 4) V (al A aDV (al A a)) V (al A aD V (a; A an V (a; A 4)).",
        "After removing duplicates we get:",
        "((a) A a)) V (at A 4) V (a) A a)) V (a; A 4)).",
        "Likewise, for the complement of M' with respect to M, we get: conf (ease, {3}) = ((a?)",
        "V (a))).",
        "Now we just need to test whether two confined case forms are independent with respect to the original.",
        "This is done with the free combination operation, shown in definition 4."
      ]
    },
    {
      "heading": "Definition 4 (Free Combination 0)",
      "text": [
        "The free combination of two ease forms is the disjunctive normal form of their conjunction: case' 0 case\" E drif (ease' A ease\") The two case forms, ease' and ease\", are DNF formulae.",
        "To compute the free combination, we conjoin them and convert the result back into DNF.",
        "They are independence if their free combination is equal to the original case form, case.",
        "For example, the free combination of the two confinements from above,",
        "91n this example, equivalent alternative variables have again been replaced by representatives of their equivalence class.",
        "So for instance, (4, a) and a) are all represented by al.",
        "which is not equal to the original case form: ((a) A A an V (al A 4 A (4) V (a) A (1', A a2)V (al_ A 4 A 4) V (a; A (4 A 4) V (4 A a22 A al)), so the first two disjunctions are not independent from the third.",
        "However, the second disjunction is independent from the first and the third since conf (case, {2}), = ((.",
        "(4) V (a22)), and conf (ease, {1,3}) = ((a A l4)V(at A4)V(4A4)), and their free combination is equal to the original case form.",
        "Therefore, the original formula is equival 1 t en.",
        "; 0, 0') A (d, (I, 0, 01) A (e,"
      ]
    },
    {
      "heading": "6 Free combination elimination",
      "text": [
        "The last section showed an effective algorithm for modularizing groups of dependent disjunctions.",
        "However, even though this is a compile time algorithm we should be concerned about its efficiency since it has exponential complexity.",
        "The main source of complexity is that we might have to check every pair of subsets of disjunctions from the group.",
        "In the worst case this is unavoidable (although we do not expect natural language grammars to exhibit such behavior).",
        "Other sources of complexity are computing the free combination and testing the result against the original case form.",
        "Luckily it is possible to avoid both of these operations.",
        "This can be done by noting that both the original case form and each of the confined case forms are in DNF.",
        "Therefore it is a necessary condition that if the free combination of the confinements is the same as the original case form then the product of the number of disjuncts in each confinement, lease'l x lease', must equal the number of disjuncts in the original case form, Icasel.",
        "Moreover, since both confinements are derived from the original case form, it is also a sufficient condition.",
        "Tins is shown more formally in theorem 1."
      ]
    },
    {
      "heading": "Theorem 1 (Free combination elimination)",
      "text": [
        "ease = ease' 0 ease\" t lease = lease'l x Ica,se\"I Proof We assume that ease'Nease\" = ease.",
        "Since both ease' 0 case\" and ease are in DNF and DNF is unique, we know that lease' 0 ease\"!",
        "leasel.",
        "We also know that case' and case\" have no disjuncts in common because they have no alternative variables in common, so IcasciNcasc\"I = ease'l x leasc\"I.",
        "Therefore, (easel = ease' X lease\"I.",
        "❑ Proof Again since ease' and case\" have no disjuncts in common, we know that; lease' 0 easel = lease'l x lease\"!",
        "arid therefore, that Icasel lease'Ocase\"1.",
        "Every disjunct in case can be represented as A' A A\" where A' is a disjunct in ease' and A\" is a disjunct in case\".",
        "So the disjuncts in case' 0 case\" must be every conjunction of possible A's and A\"s. So ease' 0 ease\" must",
        "contain all of the disjuncts in case and it could contain even more, lout then lease' M case\" > easel.",
        "However, since lease ==.",
        "(case' N case% case' 4 case\" must contain exactly the disjuncts in case and therefore case -= case' N case\".",
        "❑ We can see that this would have helped us in the previous example to know that conf (cast, {1,2}) could not be independent front conf(ca.sc, 01) with respect to case because cold' (case, 21)1 4 and (rose, {3})1 2 but == 6, not 8.",
        "Conversely, since Iron,/ (case, , 31)1 3 and lcunf (case, (21)1 s: 2, we know immediately that these case forms are independent.",
        "This theorem also allows us to perform other combinatorial short cuts, such as noting that if the number of disjuncts in the original case form is prime then it is already modular."
      ]
    },
    {
      "heading": "7 Conclusion",
      "text": [
        "Phis paper has presented an efficient forni !Or representing dependent disjunctions and au algorithm for detecting and eliminating redundant interactions within a group of dependent disjunc-Bons.",
        "Tins method should be useful for any system winch employs dependent disjunctions since it can eliminate exponential amounts of processing during constraint satisfaction."
      ]
    }
  ]
}
