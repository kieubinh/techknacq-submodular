{
  "info": {
    "authors": [
      "Masayuki Kameda"
    ],
    "book": "International Conference on Computational Linguistics",
    "id": "acl-C96-2104",
    "title": "A Portable and Quick Japanese Parser: QJP",
    "url": "https://aclweb.org/anthology/C96-2104",
    "year": 1996
  },
  "references": [],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "QJP is a portable and quick software module for Japanese processing.",
        "QJP analyzes a Japanese sentence into segmented morphemes/words with tags and a syntactic bunsetsu kakari-ulee structure based on the two strategies, a) Morphological analysis based on character-types and functional-words and b) Syntactic analysis by simple treatment of structural ambiguities and ignoring semantic information.",
        "QJP is small, fast and robust, because 1) dictionary size (less than 100KB) and required memory size(260KB) are very small, 2) analysis speed is fast (more than 100 words/sec on 80486-PC), and 3) even a 100-word long sentence containing unknown words is easily processed.",
        "Using QJP and its analysis results as a base and adding other functions for processing Japanese documents, a variety of applications can be developed on UNIX workstations or even on PCs."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "Natural language parser/analyser is essential for allowing advanced functions in document processing systems, such as keyword extraction to characterize a text, key-sentence extraction to abstract a document, grammatical style checker, information or knowledge retrieval, natural language understanding, natural language interface and so on: But a general purpose parser requires 1) a large dictionary database with more than several tens of thousands words, 2) advanced techniques for disambiguation and processing semantics, and 3) substantial machine resources, such as a lot of memory and high speed CPU.",
        "In addition, users must maintain additional terms in dictionaries for specialized fields.",
        "As a result, most parsers cannot be easily used in applications and it is difficult to develop a practical parser which can be easily integrated into many applications.",
        "We changed our viewpoint in order to design and develop an applicable and usable Japanese parser.",
        "First, we focused on the unique sets of character-types in written Japanese and constructed a very small dictionary using mainly functional words in hiragana-character.",
        "Similar approaches[1][2] were used for segmentation or preliminary morphological analysis about 20 years ago, using the transition-point between types of character sets to cue word segmentation.",
        "Second, we noticed that dealing with syntactic ambiguities creates a large processing burden and even using semantic information does little to assist syntactic analysis at the current level.",
        "So we either simplified dealing of structural ambiguities or ignored semantics to lighten the syntactic processing.",
        "We first created a prototype of our parser[3] using AWK language, and then rewrote it [4] in C so it could be included in applications.",
        "The resulting parser, named QJP, is portable, fast and robust.",
        "It is an effective parser for many general purpose applications, despite of a dictionary size of only 5 thousand words.",
        "It can analyze a 100-word sentence on a PC in less than one second, while using less than half of a megabyte of memory.",
        "In addition, it requires no further dictionary maintenance for new terms .",
        "In this paper we describe the QJP's analysis methods and report on its current performances."
      ]
    },
    {
      "heading": "2 Analysis Method",
      "text": [
        "QJP performs two types of analysis : 1) morphological analysis to segment a sentence into part-of-speech tagged morphemes and words, 2) syntactic analysis to place words into bunsetsul-dependency structure.",
        "Analysis strategies are the followings : • The morphological analysis is achieved by expanding an earlier methods[1][2] for bunsetsu or word segmentation using character-types thus allowing the use of a very small dictionary.",
        "• The syntactic analysis uses no semantic information, only part-of-speech and other syntactic information.",
        "In addition, rather than creating all possible, or sonic preferable, parses, we construct the best syntactic structure preserving local ambiguities.",
        "1Bunsetsu()Zfi) is a kind of phrasal unit in Japanese, consisting of one content word(FIV4arr1/itiMni) [such as noun(ICI verb-noun(l'AVR1), verb(0104), adjective(1M14), verb-adjective()MaR) and adiierlo(610.1)] and successive adjunctive words(14Affi) [such as auxiliary verbs(111A) and post-positional particles(11M)], and earring one concept."
      ]
    },
    {
      "heading": "2.1 Morphological Analysis",
      "text": [
        "Characteristics of written Japanese A Japanese sentence has no spaces between words[Figure 1].",
        "So it is difficult to segment a sentence into words.",
        "However, the fact that at least four distinct sets of characters [for example, kanjir Fl\",\"*\",\":,fi\",etc), hi-ragana(\" 0\",\" ,\",\" \",etc), katakana(\" )\",\" \",\",y\",etc) and other characters (alphabets, numbers, symbols etc.)]",
        "are used to write Japanese can be used for segmenting words.",
        "Most words written in kanji or katakana are content words, such as nouns, verb-noun and stems(# ) of verbs or adjectives.",
        "Most words in hiragana are functional words(WitriN), such as postpositional particles, auxiliary verbs and inflective suffix(MildffM) of verbs and others [Table 1].",
        "And the vocabulary of content words is much larger than that of functional words.",
        "Sharing of Morphemes by Dictionary and Rules Our strategy is that all functional words, which are few in number, are stored in the dictionary and most content words or their stems in kanji or katakana are to be extracted and given their part-of-speech candidates based on character-types.",
        "Standard morphological analyser uses a dictionary to obtain morpheme or word candidates.",
        "But in our approach, morpheme candidates2 are extracted either from the morpheme dictionary or using allocation rules based on character-type.",
        "For example, if the dictionary lookup fails, the allocation rules extract each sequence of character in which all of the characters belong to the same character set.",
        "Then, using the allocation rules, part-of-speech candidates are assigned based on the sequence's character set and length.",
        "The candidates are disambiguated by checking connection with the the following morphemes based on the connection table between morpheme parts-of-speech.",
        "The following morphemes, in most cases, are functional words or inflective suffixes.",
        "The dictionary contains functional words [such as postpositional particles, auxiliary verbs, formal nouns(fl i-4), adverbial nouns(filq .W1 IN), con-junctions(CN), adverbs and so on], inflective suffixes and exceptional content words which cannot be or are not covered by the allocation rules.",
        "Here are sonic examples of the allocation rules for 1) 1-kanji character sequence, 2) 2-kanji character sequence and 3) katakana character sequence.",
        "1) noun / stem of 5-dun verb( RcIfiRN) / stem of shimo-l-dam verb(f – ahrilA) 2) noun / (stem of 5-dan verb) / (stem of shimo-1-dan) verb-noun(sahen-meishi;4PM4]) / verb-adjective(iF:MN) 3) noun / verb-noun / verb-adjective",
        "The 1-kanji character nouns and verb-stems are largely of old-Japanese-origin words, wago(fnriff), and 2-kanji character nouns, verb-nouns and verb-adjectives are mainly Chinese-origin words, kango(A M).",
        "In addition, there are several 1-kanji character stems of kami-l-dan verbs( – ROJA), sahen verbs( l)- '4)1ilM) and adjectives(l6VI1) which are stored in the dictionary because they are so few in number.",
        "The word number of words which can be treated using rules like those given above is so great that the dictionary-size is substantially reduced."
      ]
    },
    {
      "heading": "Treating of Wago compound words",
      "text": [
        "Another characteristic of old-Japanese-origin verbs (wago verb) is that they often continue with other words or morphemes to become verbs or nouns.",
        "For examples, two verbs \":4 < \"(' to write') and \"is itl'\"(' to become crowded') combine into the compound verb \"Vi431_■_t\"('to write into'), the verb \"M }'\"('to read') become the verb \"ail- (' cause to read') with the causative suffix \"t\", and the verb \"7-t \"('to step') becomes the the noun \"-X41-\" ('a step') with the derivative suffix \"40.",
        "There are a great many compound words such as these.",
        "A word-compounding part determines a word from morphemes using word-constituent rules based not only on inflections but also on compounds or derivations such as those shown above.",
        "Such rules also greatly reduce the dictionary size."
      ]
    },
    {
      "heading": "Morphological Output from QJP",
      "text": [
        "An example of segmented morphemes with morpheme-tags are shown in Figure 2, where 8 nouns (\" 111*Z\",\"*Fifi\",etc.)",
        "and 2 stems of word (\"-0\",\" X\"), marked by '[zJ]', in kanji character are recognized using allocation rules and connection table.",
        "The words with part-of-speech tags and morpheme-divisions('-',Y) are shown in Figure 3, where a compound noun \"01, If1\" (the 7th word) is a compound of the morphemes 8-10 [\" VI\" (stem of shimo-1-dan verb \"-Ws\"), \"11\"(renyou-kei inflective suffix of shimo-1-dan verb; T. – &WI ICTi iff M.,) and \" R \"(noun)] using a word-constituent rule.",
        "In Figure 3, the root forms of inflected words have been derived and are shown in the <>-parentheses, such as \"W <\" which is the root form (shuushi-kei; tl-t,e-lE)5) of \"*8\".",
        "These morphemes and words are not in the dictionary."
      ]
    },
    {
      "heading": "2.2 Syntactic Analysis Kakari-uke Analysis",
      "text": [
        "Many .Japanese syntactic analyses are based on orthodox bunsetsu-dependency analysis, called kakari-uke3 analysis((-,'(c 0 .11....Gt AM) between bunsetsu phrases, where a bunsetsu-dependency structure corresponds to a set of kakari-uke bunsetsu pairs.",
        "We also take this approach because it is intuitive, understandable and easily implemented.",
        "Simple Treatment of Structural Ambiguities Structural ambiguities are usually dealt with either by generating all possible structures or by selecting the more preferable ones based on some scoring scheme.",
        "Such method usually leads to combinatorial explosions which causes a lot of memory and processing time.",
        "For this problem we have already proposed a substitutional light method[5] in kakari-uke analysis.",
        "This method extracts all possible kakari-uke pairs, and then rather than generate not all or some possible sets of pairs, only one best set of pairs is generated while still retaining all other possible pairs.",
        "Thus, instead of generating multiple number of sets, a most-likely set is selected and the application/user is presented with alternative kakari-uke pairs at the same time that the selected pairs are presented.",
        "If the application/user corrects any alternative kakari-uke pairs, the most likely set is recalculated using retaining possible kakari-uke pairs.",
        "This means of dealing with structural ambiguities avoids combinatorial explosions and requires far less machine resources."
      ]
    },
    {
      "heading": "Not Using of Semantic Informations",
      "text": [
        "Most methods for analyzing Japanese use case patterns with semantic features for preference selections.",
        "However, such analysis techniques using semantic informations are not yet adequate and sometimes actually lead to adverse results[6].",
        "In addition, semantic information must be stored",
        "in the dictionary.",
        "This reduces the merit of the very small dictionary achieved in morphological analysis section.",
        "We limit the information to morphological/word and syntactic levels [such as the presence of counna(RA), adverbial noun, surface or syntactic similarity[7]] without using semantic information for structural analysis."
      ]
    },
    {
      "heading": "Flow of QJP's Syntactic Analysis",
      "text": [
        "Under these approaches, QJP's syntactic analyser processes words sequence in three steps[Figure 4] each following its own set of rules.",
        "First it determines bunsetsu features[A] for each bunsetsu according to its word constituents.",
        "Second it extracts all possible kakari-uke bunsetsu pairs [marked by ' O' in B] based on specific combinations of bunsetsu features for each bunsetsu pair.",
        "[marked by ' •' iu C] from possible ones for each bunsetsu which is a kakari-bunsetsu (modifier), except the last one, because every bunsetsu modifies one of the following bunsetsus, so the last one has no uke-bunsetsu.",
        "The default uke selection is the nearest possible uke bunsetsu and, if necessary, QJP substitutes the selection based on rules comparing the two pairs - the current selected uke-bunsetsu and a more distant possible uke-bunsetsu for the subject kakari-bunsetsu.",
        "In Figure 7, some pairs are not the nearest ones.",
        "The application/user's kakari-uke pairs corrections restarts the selection ; QJP first selects the corrected kakari-uke pair(s) [marked by ' in Figure 7] and then reselects remaining kakari-uke pairs.",
        "Figure 4-C and Figure 7 are kakari-uke matrices showing the possible pairs and selected pairs.",
        "Figure 5 is the Output of kakari-uke pairs tagged with parts-of-speech and bunsetsu features.",
        "-between words -<obj> di v. space rnot to place rof agglutinative lang.",
        "rsentence rtn processing topic> morph.",
        "analysis he first is a barrier."
      ]
    },
    {
      "heading": "3 QJP",
      "text": []
    },
    {
      "heading": "3.1 Implemented Software",
      "text": [
        "QJP currently is implemented in the C language as both a QJP library and an interactive/batch console application, QJP workbench.",
        "They have been implemented on DOS/PC and UNIX/Sun workstation.",
        "QJP's dictionary consists of 4 files whose total size is less than 50KB and which contain about 5 thousands morphemes.",
        "QJP requires another control table file for the compressed 533x 533 morpheme-POS connection table, the table for the allocation rules, the dictionary file indices and others, which is at most 35KB.",
        "6 sets of morphological rules and 4 sets of syntactical rules [Table 2] are embedded in the form of if-them rule in C functions.",
        "The size of the workbench execution file on DOS is about 185KB.",
        "The total size (executables and dictionaries) is much less than 300KB[DOS] which is quite small and portable as a natural language analyser."
      ]
    },
    {
      "heading": "3.2 Analysis Experiment",
      "text": [
        "QJP performances were measured for the QJP workbench using two sentence test-sets : 1 [241 sentences, average length 24.1 words/sentence] and 2 [210 sentences, average length 29.5 words/sentence]."
      ]
    },
    {
      "heading": "Execution Performance",
      "text": [
        "About 260KB of memory are required on DOS and 500KB on UNIX.",
        "With this amount of memory QJP can process a very long sentence, such as 100- word sentence [Figure 6].",
        "The analysis speed is 80 to 150 words/sec on an 80486/25MHz PC and 700 to 800 words/sec on a Sun-SS20.",
        "A 100-word sentence can be analyzed in less than 1 second on PC.",
        "Figure 8 shows the relationship of processing time to sentence length.",
        "Syntactic processing time is on the order of the square of the sentence length.",
        "But its coefficient is so small that the total processing time increases linearly in the range of actual long sentences."
      ]
    },
    {
      "heading": "Analysis Performance",
      "text": [
        "We used test-sets 1 and 2 for tuning and blind-test, respectively.",
        "For test-sets 1 and 2, the accuracy of analyzed morphemes/words is 99.3/99.3% and 95.7/96.1%, the accuracy of analyzed uke bunsetsus for each bunsetsu except the last one is 95.1% and 90.5%, and the accuracy of set of kakari-uke pairs in a sentence is 71.0% and 43.8%, respectively.",
        "For sentences which have lengths of 3 to 15- bunsetsus and are morphologically analyzed correctly, the accuracy of analyzed uke bunsetsys for each bunsetsu is 97.3% and 93.6%, and the accuracy for sets of kakari-uke pairs in a sentence is 82.9% and 70.5%, respectively."
      ]
    },
    {
      "heading": "Comparison",
      "text": [
        "There are no public data for the performance of other Japanese analysers, so comparison is difficult.",
        "But not only the size of files but also the performance figures for memory and speed of QJP are thought to be more than ten times better than those of existing Japanese analysers[4].",
        "As for analysis accuracy, the morphological accuracy is a little lower than that of the existing Japanese morphological analysers using large scale dictionaries, but the syntactic analysis accuracy is thought to be no worse than that of the existing Japanese syntactic analysers."
      ]
    },
    {
      "heading": "4 Conclusions",
      "text": [
        "We have designed and implemented QJP for the purpose of readily and easily applicable morphological and syntactic analyser for Japanese.",
        "The design strategies are based on 1) the morphological analysis based on character-types and functional words to reduce the size of dictionary, and 2) the syntactic analysis by simple treatment of structural ambiguities and ignoring semantic information to lighten processing.",
        "QJP, as implemented, is portable, quick and robust.",
        "All files needed for execution including dictionary total less than 300KB on DOS.",
        "Even on a slow PC a 100-word sentence can be analyzed in less than 1 second using a small amount of memory.",
        "This performances is thought.",
        "to be quite excellent.",
        "The analysis accuracy is comparable to that of other existing analysers.",
        "No dictionary maintenance is necessary for new terms.",
        "The functions of QJP are implemented ;ELS a QJP library and a QJP workbench.",
        "We have already utilized QJP for keyword extraction, natural language query and text reading support functions[9] and are planning further applications, such as information retrieval system.",
        "Others use QJP functions for other purposes, such as linguistic data extraction.",
        "QJP currently doesn't segment; compound kanji words of Chinese-origin and leaves this segmentation to the application.",
        "In the future, we plan to realize such a segmenting function using on statistical data[10] and affixes[2]."
      ]
    }
  ]
}
