{
  "info": {
    "authors": [
      "Kiyoshi Kogure",
      "Akira Shimazu",
      "Mikio Nakano"
    ],
    "book": "International Conference on Computational Linguistics",
    "id": "acl-C96-2196",
    "title": "Parsing Plans Situation-Dependently in Dialogues",
    "url": "https://aclweb.org/anthology/C96-2196",
    "year": 1996
  },
  "references": [],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "This paper describes a plan parsing method that can handle the effects and preconditions of actions and that parses plans in a manner dependent on dialogue state changes, especially on the mental state changes of dialogue participants caused by utterances.",
        "This method is based on active chart parsing and uses augmented edge structures to keep state information locally and time map management to deal with state changes.",
        "It has been implemented in Prolog and is used for plan recognition in dialogues."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "Dialogue understanding requires plan recognition.",
        "Many plan inference models have thus been proposed.",
        "As an approach to the computation of plan recognition from observed actions, plan parsing has been proposed by Sidner (1985) and formalized by Vilain (1990).",
        "A typical plan recipe for an action includes a sequence of subactions as its decomposition, so interpreting an action sequence in terms of plans can be seen as parsing in which observed actions correspond to lexical tokens and plan recipes correspond to grammatical rules.",
        "Previous plan parsing methods, however, are insufficient for dialogue understanding since they do not handle the effects and preconditions of actions.",
        "These effects and preconditions are of crucial importance in reasoning about what the agent intends to do and what she presupposes.",
        "More concretely, without treating them, it is impossible (a) to describe actions in terms of their effects, (b) to capture the relationship between an action and another action that satisfies the former's preconditions to enable it, and (c) to interpret actions in a manner dependent on the dialogue state.",
        "To solve these problems, we have developed a plan parsing method that can handle the effects and preconditions of actions and that parses plans in a manner dependent on dialogue state changes, especially on the mental state changes of dialogue participants caused by dialogue utterances.",
        "This method, in particular, makes (a) – (c) possible.",
        "The method is based on active chart parsing and uses augmented edge structures to keep state information locally and time map management (Dean and McDermott, 1987) to deal with state changes.",
        "The method is implemented in Sic-stus Prolog and is applied to a dialogue understanding system (Shimazu et al., 1994)."
      ]
    },
    {
      "heading": "2 Requirements for Treating Effects and Preconditions",
      "text": [
        "Let us examine typical situations where the effects and preconditions of actions must be treated."
      ]
    },
    {
      "heading": "2.1 Effect-Based Action Descriptions",
      "text": [
        "In describing plan recipes, it is convenient to specify an action in terms of its effects as follows:"
      ]
    },
    {
      "heading": "Recipe 1",
      "text": [
        "Action: informref(S, H, Term, Prop) Decomposition: achieve(bel(H, P)) Effects: belref(H, Term, Prop) Constraints: parameter(Terrn, Prop) A description of the form `achieve(P)' specifies the action for achieving the state where the proposition P holds.",
        "This recipe thus says that an informref action call be performed by an action that has `bel(H, P)' as its effect.",
        "There may be many such actions.",
        "Furthermore, the action specified by `achieve(P)' depends on the situation where P is about to be achieved.",
        "In the extreme case, if P already holds, the agent need not do anything.",
        "For example, a speaker may not perform any action to make a hearer believe a proposition if the speaker believes the hearer already believes it.",
        "If we are not permitted to use this form, we must enumerate all the actions that achieve P together with the conditions under which they do.",
        "Treating this form requires calculating the effects of actions."
      ]
    },
    {
      "heading": "2.2 Action-Enabling",
      "text": [
        "Given a goal, a planning procedure searches for an action to achieve the goal (a main action).",
        "If the procedure identifies such an action with preconditions, it calls itself recursively to search for actions",
        "that satisfy them (enabling actions of the main action), and then provides the action sequence consisting of the main action preceded by its enabling actions.",
        "Given an action sequence of this form, a plan recognition procedure must thus regard it as performing a main action to achieve its effect(s).",
        "There are many kinds of dialogue phenomena that can be captured by such action-enabling relationships.",
        "Understanding such dialogue phenomena requires handling effects and preconditions."
      ]
    },
    {
      "heading": "2.3 State-Dependent Interpretation",
      "text": [
        "There are cases where state-dependent interpretation is impossible unless the effects and preconditions of actions are treated.",
        "Consider, for example, the following dialogue fragment: A: Please tell me how to go to the Laboratories.",
        "B: Take the bus to Tokyo.",
        "Whereas an imperative sentence (with surface speech act type surface_request) is generally interpreted as a request, the second utterance actually describes a step in the plan to go to the Laboratories because the first utterance convinces B that A wants to have that plan.",
        "This latter interpretation can be captured by using the heuristic rule for selecting an interpretation with fewer unsatisfied preconditions and the following recipe:"
      ]
    },
    {
      "heading": "Recipe 2",
      "text": [
        "Action: describe_step(S, H, Action, Plan) Preconditions: bel(S, want(H, Plan)) Decomposition: surface_request(S, H, Action) Constraints: step(Action, Plan) This interpretation would be possible instead by using a recipe whose decomposition also contains the action of making B believe A's want.",
        "However, such a recipe can handle only cases where the belief has been established by the action just before surface_request."
      ]
    },
    {
      "heading": "3 Effects and Preconditions",
      "text": []
    },
    {
      "heading": "3.1 Effects of Actions",
      "text": [
        "The effects of a linguistic action in a dialogue mainly produce unobservable mental state changes of the dialogue participants.",
        "For a computer to participate in a dialogue like people do, it must simulate such mental state changes.",
        "The effects of an action are the propositions that hold after the action's successful execution.",
        "The effects are taken to be calculated recursively",
        "from the action's recipe and component actions if any: the effects are essentially those specified by the action's recipe, plus those of component actions.",
        "Since an action is modeled to have a certain temporal extent, an action's effect is modeled to hold at the point in time where the action has just finished and to continue to persist infinitely or until the first instance that a contradictory fact holds.",
        "An effect of an action's component action also holds in the same way.",
        "Therefore, an action a with (71, , as its component actions has component action yi's effect yi as its own effect if there is no component action -yj after with an effect cod contradictory to written as contradicts(c,oi,(pi)- and does not if such 7.; exists as in Figure 1."
      ]
    },
    {
      "heading": "3.2 Preconditions of Actions",
      "text": [
        "The preconditions of an action are the propositions that must hold before the action's successful execution.",
        "Recognizing an action thus requires that its preconditions can be assured or at least hypothesized to be believed by the agent.",
        "The preconditions of an action are essentially taken to consists of those specified by the action's recipe and those of its component actions if any.",
        "A component action's precondition, however, can be satisfied by another component action's effect.",
        "Consider action a with its component actions (71, ... ,7„), as shown in Figure 2.",
        "Let us focus on precondition Ok of action yk.",
        "When there is an action before -yk such that its effect (pi is identical to IN as in Case (a) in the figure, ok is satisfied by (pi, so need not hold at a's starting time.",
        "That is, a does not have ?Pk as its precondition.",
        "On the contrary, when there is an action y2 before -yk such that its effect (pi contradicts 114, 'Ok's holding at a's starting time cannot contribute to the satisfaction of -A's precondition Ok.",
        "If there exists an action between yi and -yk with its effect cps identical to IN, IN can be satisfied [Case (b)].",
        "Otherwise, 114 cannot be satisfied [Case (c)], so a cannot be successfully executed and should not be recognized.",
        "This kind of",
        "interference is hereafter called 'effect-precondition (E-P) conflict.' There is another kind of interference called 'precondition-precondition (P-P) con-flict:' if a precondition specified by a's recipe, or a precondition Oi of any other component action -yi contradicts 7/4., they cannot hold simultaneously at a's starting time [Case (d)].",
        "In such a case, a should not be recognized."
      ]
    },
    {
      "heading": "4 Active Chart Plan Parsing",
      "text": []
    },
    {
      "heading": "4.1 Decomposition Grammar",
      "text": [
        "The relationship between an action and its decomposition specified by a recipe can be viewed as a phrase structure rule.",
        "The decomposition relationship specified by Recipe 2, for example, can be view as describe.step(S, H, Action, Plan) surface_request(S, H, Action).",
        "This interpretation of the decomposition relationships specified by recipes in a plan library gives us a decomposition grammar and allows us to apply syntactic parsing techniques to plan recognition.",
        "Based on this idea, we constructed a plan parsing method that handles the effects and preconditions of actions.",
        "Hereafter, we focus on bottom-up active chart parsing, although the core of the discussion below can be applied to other parsing methods."
      ]
    },
    {
      "heading": "4.2 Calculating Effects and Preconditions Time Map Management",
      "text": [
        "Time map management is used to capture the temporal state changes caused by the effects of actions.",
        "A time map consists of a set of (potential) fact tokens.' A fact token is a triple (ti, t2, co), where t1 and t2 are time points and co is a timeless fact description (a term), that represents the proposition that co holds at t1 and continues to persist through t2 or until a contradictory fact holds.",
        "As a time point, we use a vertex in a chart, which is an integer.",
        "As a special case, time point T is used to represent unbounded persistence.",
        "An effect y of action finishing at t is represented by a fact token (t, T, so).",
        "A time map with a set 1\" of fact tokens supports queries about whether it guarantees that a fact co holds over an interval [t,, t2] (written as tm_holds((ti, t2, cp), I)).",
        "A fact yo is guaranteed to hold over an interval [t,, t2] exactly if there is an interval [4, t2] such that (ti < tl < t2 < e2) A (el , cp) E .F and if there is no (t3, t4, co') E such that contradicts(v, co') A (4 < t3 < t2).",
        "A precondition of an action can be represented by a triple similar to a fact token.",
        "Since it must be satisfied at the action's starting time t, it is represented by (t,t,0).",
        "'This paper uses Shoham's terminology (1994)."
      ]
    },
    {
      "heading": "Data Structures",
      "text": [
        "In our chart parsing, an action is represented by an edge.",
        "Since information on the effects and preconditions of the action represented by an edge must be kept locally, we use the edge structure shown in Figure 3.",
        "An edge's start and end values are vertices that are the respective integers representing the starting and ending time points of (the part of) the action represented by the edge.",
        "The action and rsubactions (remaining subactions) values are respectively an action description and a sequence of descriptions of actions to find in order to recognize the action.",
        "An edge is called active if its rsubactions value is a non-empty sequence and is inactive otherwise.",
        "The constraints value is a set of constraints on variable instantiation.",
        "The effects and preconditions values respectively are sets of triples representing the action's effects and preconditions.",
        "The aend (action end) value is a variable used as the placeholder of the action's ending time point.",
        "The ending time of the action represented by an active edge is not determined yet, and neither is the starting point of the effects specified by the action's recipe.",
        "To keep information on those effects in the edge, fact tokens with the aend value as their starting time points are used.",
        "An unbound time point variable is taken to be greater than any integer and to be less than T. An edge's aend value is bound to its end value if it is inactive.",
        "Given an edge e and its field field, field(e) denotes the value of field in e."
      ]
    },
    {
      "heading": "Chart Procedures",
      "text": [
        "Given an observed action, chart parsing applies the following procedure: Procedure 1 Let a3 be the description of the j-th observed action.",
        "For each recipe with action cer, and for each most general unifier 0 of a3 and a, satisfying the constraints Cr specified by the recipe, create an inactive edge from j – 1 to j such that its action, constraints, effects, and preconditions values respectively are a3 0 , CrO, {(j,T ,cor0)bp, E Er }, and {(j – 1,j-1,07.0)10, E Pr}, where Er and Pr are the effects and preconditions specified by the recipe.",
        "Chart parsing proceeds using the following two procedures.",
        "Procedure 2 Let ei be an inactive edge.",
        "'For each recipe with its action ar, decomposition (71, , 7n), effects Er, and preconditions arid for each most general unifier O, satisfying corbstraints(ei) and recipe's constrains Cr, of action(ei) and -y1 such that",
        "without li-P or PP conflict, where v is a new variable, create an edge from start(ei) to end(ei) such that its action, rsubactions, constraints, effects, preconditions, and aend values respectively are ar0, (72, , -y00, (C7.",
        "U constraints(eMO, E, P, and v. Procedure 3 Let Ca and ei be adjacent active and inactive edges such that rsubactions(ea) is ,'y,,,).",
        "For each most general unifier O, satisfying C = constraints(ca)U constraints(ei), of 71 and action(ei) such that",
        "• = (effccts(ea) U effects(ei))0 and",
        "P { (t, top) E (preconditions(ea) upreconditions(ei ))91 --,tm_holds((t, t, 'vi), E)} , without E-P or PP conflict, create an edge from start(ea) to end(ei) such that its action, rsubactions, constraints, effects, preconditions, and aend values respectively are (action(ea))0, (Y2 • • • , 771)6, CO, E, P, arid aend(ea).",
        "Now that we have the basic means to calculate the effects and preconditions of the action represented by an edge, we can augment plan parsing to handle the situations described in Section 2.",
        "Effect-based action descriptions The fact that the description of the form achieve(P) can specify an action with P as its effect is captured by augmenting Procedures 2 and 3.",
        "The set of effects of the action represented by an inactive edge ei that hold at the action's ending time is Ei = {co I tm_holds((cp, end(ei), end(ei)), eifects(ei))}.",
        "The fact is thus captured in these procedures by checking that Ei contains P, instead of unifying with action(ei), if ryr is of that form.",
        "The fact that achieve(P) can specify the null action if P already holds is captured by a new procedure that, given an active edge ea with as its rsubactions value (achieve(P), 72, ,-y„), creates a new edge whose rsubactions value is (-y2, , 'yn) and whose preconditions value is preconditions(ea) if ea has P as its effect and preconditions(ea) plus (end(ea), end(ea), P) otherwise.",
        "Action-enabling An action-enabling relationship can be captured by a new procedure that, given two adjacent inactive edges eland e2 such that en's effects satisfy some of C2's preconditions, creates a new inactive edge with action(e2) as its action value.2 State-dependent interpretation A dialogue state is determined by the initial state and the effects of the preceding actions.",
        "The initial state is treated by using a special 'initialize' inactive edge from 0 to 0 with the effects value representing it.",
        "The influence of the 'initialize' edge is propagated by the procedure for treating action-enabling relationships and preference rules referring to preconditions.'"
      ]
    },
    {
      "heading": "5 Conclusion",
      "text": [
        "A plan parsing method has been proposed that handles the effects and preconditions of actions and that parses plans in a manner dependent on dialogue state changes caused by utterances.",
        "The method has been implemented in Prolog.",
        "The implemented program uses an agenda mechanism that uses priority scores on edges to obtain preferred plans first.",
        "The method has been applied to understanding route-explanation dialogues by using the dialogue plan model that takes each action of uttering a word as a primitive and that treats intra and inter-utterance plans uniformly to treat fragmentary utterances (Kogure et al., 1994)."
      ]
    }
  ]
}
