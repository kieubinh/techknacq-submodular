{
  "info": {
    "authors": [
      "Pierre Boullier"
    ],
    "book": "Annual Meeting of the Association for Computational Linguistics",
    "id": "acl-P96-1012",
    "title": "Another Facet of LIG Parsing",
    "url": "https://aclweb.org/anthology/P96-1012",
    "year": 1996
  },
  "references": [
    "acl-E93-1045",
    "acl-J93-4002",
    "acl-J94-1004",
    "acl-P95-1021"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "In this paperl we present a new parsing algorithm for linear indexed grammars (LIGs) in the same spirit as the one described in (Vijay-Shanker and Weir, 1993) for tree adjoining grammars.",
        "For a LIG L and an input string x of length n, we build a non ambiguous context-free grammar whose sentences are all (and exclusively) valid derivation sequences in L which lead to x.",
        "We show that this grammar can be built in 0(n6) time and that individual parses can be extracted in linear time with the size of the extracted parse tree.",
        "Though this 0(n6) upper bound does not improve over previous results, the average case behaves much better.",
        "Moreover, practical parsing times can be decreased by some statically performed computations."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "The class of mildly context-sensitive languages can be described by several equivalent grammar types.",
        "Among these types we can notably cite tree adjoining grammars (TAGs) and linear indexed grammars (LIGs).",
        "In (Vijay-Shanker and Weir, 1994) TAGs are transformed into equivalent LIGs.",
        "Though context-sensitive linguistic phenomena seem to be more naturally expressed in TAG formalism, from a computational point of view, many authors think that LIGs play a central role and therefore the understanding of LIGs and LIG parsing is of importance.",
        "For example, quoted from (Schabes and Shieber, 1994) \"The LIG version of TAG can be used for recognition and parsing.",
        "Because the LIG formalism is based on augmented rewriting, the parsing algorithms can be much simpler to understand",
        "and easier to modify, and no loss of generality is in-curred\".",
        "In (Vijay-Shanker and Weir, 1993) LIGs are used to express the derivations of a sentence in TAGs.",
        "In (Vijay-Shanker, Weir and Rambow, 1995) the approach used for parsing a new formalism, the D-Tree Grammars (DTG), is to translate a DTG into a Linear Prioritized Multiset Grammar which is similar to a LIG but uses multisets in place of stacks.",
        "LIGs can be seen as usual context-free grammars (CFGs) upon which constraints are imposed.",
        "These constraints are expressed by stacks of symbols associated with non-terminals We study parsing of LIGs, our goal being to define a structure that verifies the LIG constraints and codes all (and exclusively) parse trees deriving sentences.",
        "Since derivations in LIGs are constrained CF derivations, we can think of a scheme where the CF derivations for a given input are expressed by a shared forest from which individual parse trees which do not satisfied the LIG constraints are erased.",
        "Unhappily this view is too simplistic, since the erasing of individual trees whose parts can be shared with other valid trees can only be performed after some unfolding (unsharing) that can produced a forest whose size is exponential or even unbounded.",
        "In (Vijay-Shanker and Weir, 1993), the context-freeness of adjunction in TAGs is captured by giving a CFG to represent the set of all possible derivation sequences.",
        "In this paper we study a new parsing scheme for LIGs based upon similar principles and which, on the other side, emphasizes as (Lang, 1991) and (Lang, 1994), the use of grammars (shared forest) to represent parse trees and is an extension of our previous work (Boullier, 1995).",
        "This previous paper describes a recognition algorithm for LIGs, but not a parser.",
        "For a LIG and an input string, all valid parse trees are actually coded into the CF shared parse forest used by this recognizer, but, on some parse trees of this forest, the",
        "checking of the LIG constraints can possibly failed.",
        "This shows that the rightmost derivation language At first sight, there are two conceivable ways to ex of a CFG is also CF. We will show in section 4 that tend this recognizer into a parser: a similar result holds for LIGs.",
        "1. only \"good\" trees are kept; Following (Lang, 1994), CF parsing is the inter2.",
        "the LIG constraints are [re-}checked while the section of a CFG and a finite-state automaton (FSA) extraction of valid trees is performed.",
        "which models the input string x2.",
        "The result of this As explained above, the first solution can produce intersection is a CFG G' = (V/fr,V, P5, [S) called an unbounded number of trees.",
        "The second solution a shared parse forest which is a specialization of the is also uncomfortable since it necessitates the reeval- initial .CFG G = (VN ,VT, P, S) to x.",
        "Each produc-uation on each tree of the LIG conditions and, doing tion ri?",
        "E P5, is the production ri E P up to some so, we move away from the usual idea that individ- non-terminal renaming.",
        "The non-terminal symbols ual parse trees can be extracted by a simple walk in 1/1,,, are triples denoted [A], where A E VN, and through a structure.",
        "p and q are states.",
        "When such a non-terminal is In this paper, we advocate a third way which will productive, [A]„q w, we have q E 6(p, w).",
        "use (see section 4), the same basic material as the G' one used in (Boullier, 1995).",
        "For a given LIG L and If we build the rightmost derivation grammar as-an input string x, we exhibit a non ambiguous CFG sociated with a shared parse forest, and we remove whose sentences are all possible valid derivation se- all its useless symbols, we get a reduced CFG say D'.",
        "quences in L which lead to x.",
        "We show that this The CF recognition problem for (C, x) is equivalent CFG can be constructed in 0(n6) time and that in to the existence of an [S]-production in D5.",
        "More-dividual parses can be extracted in time linear with over, each rightmost Six-derivation in G is (the re-the size of the extracted tree.",
        "verse of) a sentence in .C(D').",
        "However, this result 2 Derivation Grammar and CF is not very interesting since individual parse trees Parse Forest can be as easily extracted directly from the parse In a CFG G = (VN , VT, P, S), the derives relation forest.",
        "This is due to the fact that in the CF case, a is the set {(o-Bai, crOcri) I B )3EPAV= tree that is derived (a parse tree) contains all the VN U VT A a, a' E V*}.",
        "A derivation is a sequence information about its derivation (the sequence of of strings in V* s.t.",
        "the relation derives holds be rewritings used) and therefore there is no need to tween any two consecutive strings.",
        "In a rightmost distinguish between these two notions.",
        "Though this derivation, at each step, the rightmost non-terminal is not always the case with non CF formalisms, we say B is replaced by the right-hand side (RHS) of will see in the next sections that a similar approach, a B-production.",
        "Equivalently if cro an is when applied to LIGs, leads to a shared parse fora rightmost derivation where the relation symbol is est which is a LIG while it is possible to define a overlined by the production used at each step, we derivation grammar which is CF. say that r1 rn is a rightmost a-o/an-derivation.",
        "3 Linear Indexed Grammars For a CFG G, the set of its rightmost Six An indexed grammar is a CFG in which stack of derivations, where x E L(G), can itself be defined symbols are associated with non-terminals.",
        "LIGs are by a grammar a restricted form of indexed grammars in which the Definition 1 Let G = (VN,VT,P,S) be a CFG, dependence between stacks is such that at most one its rightmost derivation grammar is the CFG D = stack in the RHS of a production is related with the (VN , P, PD , S) where PD {,40 441 Aqr I r = stack in its LHS.",
        "Other non-terminals are associated Ao woAiwi E P A wi E Vgt A Aj E with independant stacks of bounded size.",
        "VN} Following (Vijay-Shanker and Weir, 1994) LFrom the natural bijection between P and Pp, Definition 2 L (VN,VT)VI)PL,S) denotes a we can easily prove that LIG where VN, VT, VI and Pi, are respectively fi-r(D) = P.n.",
        "• •ri I nite sets of non-terminals, terminals, stack symbols ri rn is a rightmost Six-derivation in G} and productions, and S is the start symbol.",
        "In the sequel we will only consider a restricted 88 2if x = al ... an, the states can be the integers 0 ...n, 0 is the initial state, n the unique final state, and the transition function 6 is s.t.",
        "i E (5(i – 1, ai) and i E 5(i, e).",
        "form of LIGs with productions of the form FL = {A() w} U {A(..a) riB(..00r2} where A, B E VN, WE V4t A 0 < lw I <2, aas E VI* A 0 < < 1 and F1r2 E VTU{E}U{CO I C E ITN}.",
        "An element like A(.",
        ".a) is a primary constituent while CO is a secondary constituent.",
        "The stack schema (..a) of a primary constituent matches all the stacks whose prefix (bottom) part is left unspecified and whose suffix (top) part is a; the stack of a secondary constituent is always empty.",
        "Such a form has been chosen both for complexity reasons and to decrease the number of cases we have to deal with.",
        "However, it is easy to see that this form of LIG constitutes a normal form.",
        "We use r() to denote a production in 13L, where the parentheses remind us that we are in a LIG!",
        "The CF-backbone of a LIG is the underlying CFG in which each production is a LIG production where the stack part of each constituent has been deleted, leaving only the non-terminal part.",
        "We will only consider LIGs such there is a bijection between its production set and the production set of its CF-backbone3.",
        "We call object the pair denoted A(a) where A is a non-terminal and (a) a stack of symbols.",
        "Let Vo {A(a) I A E VN A a E V;} be the set of objects.",
        "We define on (V0 U VT)* the binary relation derives denoted (the relation symbol is sometimes overlined by a production): child and a secondary object.",
        "Our particular derivation strategy is such that this distinguished child will always be derived after the secondary object (and its descendants), whether this secondary object lays to its left or to its right.",
        "This derives relation is denoted and is called lineal& t,L A spine is the sequence of objects Al (ai ) ... A1 (a1) Ai±i(ai+i) Ap(ap) if, there is a derivation in which each object Ai+1 (ai±i ) is the distinguished child of Ai (a1) (and therefore the distinguished descendant of Ai (ai),1 < j < i)."
      ]
    },
    {
      "heading": "4 Linear Derivation Grammar",
      "text": [
        "For a given LIG L, consider a linear SO/x-derivation",
        "The sequence of productions r1() ri() (considered in reverse order) is a string in P. The purpose of this section is to define the set of such strings as the language defined by some CFG.",
        "Associated with a LIG L = (VN , VT , S), we first define a bunch of binary relations which are borrowed from (Boullier, 1995) {(A,B) I A(..) -+ r1B(..)r2 E PL} f(A,B) I A(..) 4 r1B(..7)F2 E {(A, B) I A(..7) -÷ r1B(..)r2 E 131,1 rI.A(a\" a)r2 A(..a)--V1(..cr')r2 riir1B(a\"ai)r2v2 {(AI,Ap) I Ai() +: r1ApOr2 and Ap0 ri,A0V2 A0 – >tv viwri2 is a distinguished descendant of A10} In the first above element we say that the object B(a\"a') is the distinguished child of A(a\"a), and if Fir, = co, co is the secondary object.",
        "A derivation 1'1, is a sequence of strings where the relation derives holds between any two consecutive strings The language defined by a LIG L is the set: r(L)={x1,50+:xAxelq} As in the CF case we can talk of rightmost derivations when the rightmost object is derived at each step.",
        "Of course, many other derivation strategies may be thought of.",
        "For our parsing algorithm, we need such a particular derives relation.",
        "Assume that at one step an object derives both a distinguished 3rp and rp() with the same index p designate associated productions.",
        "The 1-level relations simply indicate, for each production, which operation can be apply to the stack associated with the LHS non-terminal to get the stack associated with its distinguished child; in"
      ]
    },
    {
      "heading": "7 'Y",
      "text": [
        "dicates equality, the pushing of 7, and >- the popping of 7.",
        "If we look at the evolution of a stack along a spine Ai (al ) .",
        "Ai (ai)Ai±i (ai+ ) Ap (ap), between any two objects one of the following holds: ai = ai+i, ai-Y = az+i, or ai = ai+17.",
        "The 4 relation select pairs of non-terminals (A1, Ap) s.t.",
        "al = ap = E along non trivial spines.",
        "'linear reminds us that we are in a LIG and relies upon a linear (total) order over object occurrences in a derivation.",
        "See (Boullier, 1996) for a more formal definition.",
        "In (Boullier, 1995) we can found an algorithm5 which computes the -0-, >- and relations as the",
        "• 171,DI = {[A] I A E VN} {[AP-B] I A, B E VN A p E R-}, and R is the set of relations + + • V71-,) = Pi, • SD = [S] • Below, [r1r2] denotes either the non-terminal",
        "symbol [X] when r1r2 X() or the empty string E when rir, E PD is defined as",
        "The productions in PD define all the ways linear derivations can be composed from linear sub-derivations.",
        "This compositions rely on one side upon property 1 (recall that the productions in PL„ must be produced in reverse order) and, on the other side, upon the order in which secondary spines (the r, F2-spines) are processed to get the linear derivation order.",
        "In (Boullier, 1996), we prove that LDGs are not ambiguous (in fact they are SLR(1)) and define",
        "If, by some classical algorithm, we remove from D all its useless symbols, we get a reduced CFG say D' = (V IA?'",
        ",VTD' , PD' , SD' ).",
        "In this grammar, all its terminal symbols, which are productions in L, are useful.",
        "By the way, the construction of D' solve the emptiness problem for LIGs: L specify the empty set if the set VP is empty7."
      ]
    },
    {
      "heading": "5 LIG parsing",
      "text": [
        "Given a LIG L = (VN ,VT S) we want to find all the syntactic structures associated with an input string x E V. In section 2 we used a CFG (the shared parse forest) for representing all parses in a CFG.",
        "In this section we will see how to build a CFG which represents all parses in a LIG.",
        "In (Boullier, 1995) we give a recognizer for LIGs with the following scheme: in a first phase a general CF parsing algorithm, working on the CF-backbone builds a shared parse forest for a given input string x.",
        "In a second phase, the LIG conditions are checked on this forest.",
        "This checking can result in some subtree (production) deletions, namely the ones for which there is no valid symbol stack evaluation.",
        "If the resulting grammar is not empty, then x is a sentence.",
        "However, in the general case, this resulting grammar is not a shared parse forest for the initial LIG in the sense that the computation of stack of symbols along spines are not guaranteed to be consistent.",
        "Such invalid spines are not deleted during the check of the LIG conditions because they could be",
        "composed of sub-spines which are themselves parts The recognition problem for (L, x) (i.e. is x an of other valid spines.",
        "One way to solve this problem element of f(L)) is equivalent to the non-emptiness is to unfold the shared parse forest and to extract of the production set of DL-.",
        "individual parse trees.",
        "A parse tree is then kept if Moreover, each linear SO/x-derivation in L is (the the LIG conditions are valid on that tree.",
        "But such reverse of) a string in f(DL.",
        ")6.",
        "So the extraction of a method is not practical since the number of parse individual parses in a LIG is merely reduced to the trees can be unbounded when the CF-backbone is derivation of strings in a CFG.",
        "cyclic.",
        "Even for non cyclic grammars, the number An important issue is about the complexity, in of parse trees can be exponential in the size of the time and space, of DL.. Let n be the length of input.",
        "Moreover, it is problematic that a worst case the input string x.",
        "Since G is in binary form we polynomial size structure could be reached by some know that the shared parse forest Gx can be build sharing compatible both with the syntactic and the in 0(n3) time and the number of its productions \"semantic\" features.",
        "is also in 0(n3).",
        "Moreover, the cardinality of Vifi However, we know that derivations in TAGs are is 0(n2) and, for any given non-terminal, say [A]l), context-free (see (Vijay-Shanker, 1987)) and (Vijay- there are at most 0(n) [A]-productions.",
        "Of course, Shanker and Weir, 1993) exhibits a CFG which rep these complexities extend to the LIGed forest L'.",
        "resents all possible derivation sequences in a TAG.",
        "We now look at the LDG complexity when the We will show that the analogous holds for LIGs and input LIG is a LIGed forest.",
        "In fact, we mainly have leads to an 0(n6) time parsing algorithm.",
        "to check two forms of productions (see definition 3).",
        "Definition 4 Let L (VN, VT PL, S) be a LIG, The first form is production (6) ([A 0 C] [B G ▪ (VN,VT, PG, S) its CF-backbone, x a string CIA BD, where three different non-terminals in in E(G), and Gx = (V§,V1,P6,Sx) its shared VN are implied (i.e. A, B and C), so the number of parse forest for x.",
        "We define the LIGed forest productions of that form is cubic in the number of for x as being the LIG Lx = Pt, Sz) non-terminals and therefore is 0(n6).",
        "s.t.",
        "Gz is its CF-backbone and its productions are In the second form (productions (5), (7) and (9)), the productions of P6 in which the corresponding exemplified by [A C] 4 [B C][1\"11'2]r(), there stack-schemas of L have been added.",
        "For exam are four non-terminals in VN (i.e. A, B, C, and X ple r() [A](..a) [B]1.",
        "(..a')[C[11() E Pr, if if rir2 x()) and a production r() (the number 71, ▪ [A] 4 [B],ji [C]i3F E P A rp =- A BC E of relation symbols ›- is a constant), therefore, the GA rp() = A(..ce) -+ B(...ce)C0 E L. number of such productions seems to be of fourth Between a LIG L and its LIGed forest Lx for x, degree in the number of non-terminals and linear in we have: the number of productions.",
        "However, these variables x E f(L) x E r(Lz) are not independant.",
        "For a given A, the number of If we follow(Lang, 1994), the previous definition triples (B,X,r()) is the number of A-productions which produces a LIGed forest from any L and x hence 0(n).",
        "So, at the end, the number of produc-is a (LIG) parser': given a LIG L and a string x, tions of that form is 0(n5).",
        "we have constructed a new LIG Lx for the intersec- We can easily check that the other form of protion f(L) n {x}, which is the shared forest for all ductions have a lesser degree.",
        "parses of the sentences in the intersection.",
        "However, Therefore, the number of productions is domi-we wish to go one step further since the parsing (or nated by the first form and the size (and in fact even recognition) problem for LIGs cannot be triv- the construction time) of this grammar is 0(n6).",
        "ially extracted from the LIGed forests.",
        "This (once again) shows that the recognition and Our vision for the parsing of a string x with a LIG parsing problem for a LIG can be solved in 0(n6) L can be summarized in few lines.",
        "Let G be the CF- time.",
        "backbone of L, we first build Gz the CFG shared For a LDG D (q,VP,PD,SD), we note that parse forest by any classical general CF parsing al for any given non-terminal A E VIN?",
        "and string a E gorithm and then Lx its LIGed forest.",
        "Afterwards, L(A) with Icrl > 2, a single production A .X1X2 we build the reduced LDG DL.",
        "associated with Lx or A 4 Xi X2X3 in PD is needed to \"cut\" a into two as shown in section 4. or three non-empty pieces cri, 0-2, and 03, such that 91n fact, the terminal symbols in DL.",
        "are productions in I,' (say MO), which trivially can be mapped to productions in L (here rp()).",
        "'Of course, instead of x, we can consider any FSA.",
        "91 production set PG is:",
        "defines the language L(G) = {wcw' I w,w1 E {a, b, cr }.",
        "We remark that the stacks of symbols in L constrain the string w' to be equal to w and therefore the language .C(L) is {wcw I w E } We note that in L the key part is played by the middle c, introduced by production r8(), and that this grammar is non ambiguous, while in G the symbol c, introduced by the last production T 4 c, is only a separator between w and w' and that this grammar is ambiguous (any occurrence of c may be this separator).",
        "The computation of the relations gives:",
        "cri, except when the production form number (4) is used.",
        "In such a case, this cutting needs two productions (namely (4) and (7)).",
        "This shows that the cutting out of any string of length /, into elementary pieces of length 1, is performed in using 0(1) productions.",
        "Therefore, the extraction of a linear S()/x-derivation in L is performed in time linear with the length of that derivation.",
        "If we assume that the CF-backbone G is non cyclic, the extraction of a parse is linear in n. Moreover, during an extraction, since DL is not ambiguous, at some place, the choice of another A-production will result in a different linear derivation.",
        "Of course, practical generations of LDGs must improve over a blind application of definition 3.",
        "One way is to consider a top-down strategy: the X - productions in a LDG are generated if X is the start symbol or occurs in the RHS of an already generated production.",
        "The examples in section 6 are produced this way.",
        "If the number of ambiguities in the initial LIG is bounded, the size of DL., for a given input string x of length n, is linear in n. The size and the time needed to compute DL are closely related to the actual sizes of the 0 , >- and + + relations.",
        "As pointed out in (Boullier, 1995), their 0(n4) maximum sizes seem to be seldom reached in practice.",
        "This means that the average parsing time is much better than this 0(n6) worst case.",
        "Moreover, our parsing schema allow to avoid some useless computations.",
        "Assume that the symbol [A 0 B] is useless in the LDG DL associated with the initial LIG L, we know that any non-terminal s.t.",
        "[[A] 0 [B]] is also useless in DL..",
        "Therefore, the static computation of a reduced LDG for the initial LIG L (and the corresponding -0-, and + + relations) can be used to direct the parsing process and decrease the parsing time (see section 6)."
      ]
    },
    {
      "heading": "6 Two Examples",
      "text": []
    },
    {
      "heading": "6.1 First Example",
      "text": [
        "In this section, we illustrate our algorithm with a LIG L ({S,T},{a,b,c},{'ya719, 7c} , S) where PL contains the following productions:",
        "It is easy to see that its CF-backbone G, whose",
        "We can observe that this shared parse forest denotes in fact three different parse trees.",
        "Each one corresponding to a different cutting out of x = wcw' (i.e. w = E and w' = cc, or w = c and w' = c, or w = cc and w' e).",
        "The corresponding LIGed forest whose start symbol is Sx = [5]3, and production set Pf, is:",
        "For this LIGed forest the relations are:",
        "• (Pig, [7]), aSlO, [T]), ((S], [T])}",
        "The start symbol of the LDG associated with the LIGed forest L' is [[s]g}.",
        "If we assume that an A-production is generated if it is an [[4]-production or A occurs in an already generated production, we get:",
        "This CFG is reduced.",
        "Since its production set is non empty, we have ccc E C(L).",
        "Its language is { 7-1°04071 Ori ()} which shows that the only linear",
        "In computing the relations for the initial LIG L, we remark that though T >- T,T >.T, and T'g T,",
        "need to be computed in the, >- , and >- relations ++ since they will never produce a useful non-terminal.",
        "In this example, the subset >- of >- is useless.",
        "1 + The next example shows the handling of a cyclic grammar"
      ]
    },
    {
      "heading": "6.2 Second Example",
      "text": [
        "The following LIG L, where A is the start symbol: 7'10 = A(..) 4 A(..7 r2() = A(..) --> B(..) r3() B(..-ya) B(..) r4() = B() -> a is cyclic (we have A 4 A and B B in its CF-backbone), and the stack schemas in production r1() indicate that an unbounded number of push -ya actions can take place, while production r3 () indicates an unbounded number of pops.",
        "Its CF-backbone is unbounded ambiguous though its language contains the single string a.",
        "The computation of the relations gives:",
        "The start symbol of the LDG associated with L is [A] and its productions set PD is:",
        "We can easily checked that this grammar is reduced.",
        "We want to parse the input string x = a (i.e. find all the linear S 0 / a-derivations).",
        "e■J",
        "though much better results occur in practical situations.",
        "Moreover, static computations on the initial LIG may decrease this practical complexity in avoiding useless computations.",
        "Each sentence in this CFG is a derivation of the given input string by the LIG, and is extracted in linear time.",
        "For this LIGed forest LX, the relations are: The start symbol of the LDG associated with L' is RAW.",
        "If we assume that an A-production is generated if it is an UAW-production or A occurs in an already generated production, its production set is:",
        "This CFG is reduced.",
        "Since its production set is non empty, we have a E E(L).",
        "Its language is {rl 0 17-30}kr3(){7.10}k I 0 < k} which shows that the only valid linear derivations w.r.t.",
        "L must contain an identical number k of productions which push -ya (i.e. the production r1 0) and productions which pop yo (i.e. the production r30).",
        "As in the previous example, we can see that the element [B]l) ;- [B] is useless.",
        "+"
      ]
    },
    {
      "heading": "7 Conclusion",
      "text": [
        "We have shown that the parses of a LIG can be represented by a non ambiguous CFG.",
        "This representation captures the fact that the values of a stack of symbols is well parenthesized.",
        "When a symbol ,), is pushed on a stack at a given index at some place, this very symbol must be popped some place else, and we know that such (recursive) pairing is the essence of context-freeness.",
        "In this approach, the number of productions and the construction time of this CFG is at worst 0(n6),"
      ]
    }
  ]
}
