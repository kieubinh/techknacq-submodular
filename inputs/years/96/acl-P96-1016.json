{
  "info": {
    "authors": [
      "Owen Rambow",
      "Giorgio Satta"
    ],
    "book": "Annual Meeting of the Association for Computational Linguistics",
    "id": "acl-P96-1016",
    "title": "Synchronous Models Off Language",
    "url": "https://aclweb.org/anthology/P96-1016",
    "year": 1996
  },
  "references": [
    "acl-C90-3001",
    "acl-C90-3045",
    "acl-J94-3001",
    "acl-P91-1032",
    "acl-P94-1036",
    "acl-P95-1021",
    "acl-P95-1033"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "In synchronous rewriting, the productions of two rewriting systems are paired and applied synchronously in the derivation of a pair of strings.",
        "We present a new synchronous rewriting system and argue that it can handle certain phenomena that are not covered by existing synchronous systems.",
        "We also prove some interesting formal/computational properties of our system."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "Much of theoretical linguistics can be formulated in a very natural manner as stating correspondences (translations) between layers of representation; for example, related interface layers LF and PF in GB and Minimalism (Chomsky, 1993), semantic and syntactic information in HPSG (Pollard and Sag, 1994), or the different structures such as c-structure and f-structure in LFG (Bresnan and Kaplan, 1982).",
        "Similarly, many problems in natural language processing, in particular parsing and generation, can be expressed as transductions, which are calculations of such correspondences.",
        "There is therefore a great need for formal models of corresponding levels of representation, and for corresponding algorithms for transduction.",
        "Several different transduction systems have been used in the past by the computational and theoretical linguistics communities.",
        "These systems have been borrowed from translation theory, a subfield of formal language theory, or have been originally (and sometimes redundantly) developed.",
        "Finite state transducers (for an overview, see, e.g., (Aho and Ullman, 1972)) provide translations between regular languages.",
        "These devices have been popular in computational morphology and computational phonology since the early eighties (Koskenniemi, 1983; Kaplan and Kay, 1994), and more recently in parsing as well (see, e.g., (Gross, 1989; Pereira, 1991; Roche, 1993)).",
        "Pushdown transducers and syntax directed translation schemata (SDTS) (Aho and Ullman, 1969) translate between context-free languages and are therefore more powerful than finite state transducers.",
        "Pushdown transducers are a standard model for parsing, and have also been used (usually implicitly) in speech understanding.",
        "Recently, variants of SDTS have been proposed as models for simultaneously bracketing parallel corpora (Wu, 1995).",
        "Synchronization of tree adjoining grammars (TAGs) (Shieber and Schabes, 1990; Shieber, 1994) are even more powerful than the previous formalisms, and have been applied in machine translation (Abellle, Schabes, and Joshi, 1990; Egedi and Palmer, 1994; Harbusch and Poller, 1994; Pri-gent, 1994), natural language generation (Shieber and Schabes, 1991), and theoretical syntax (Abeille, 1994).",
        "The common underlying idea in all of these formalisms is to combine two generative devices through a pairing of their productions (or, in the case of the corresponding automata, of their transitions) in such a way that right-hand side nonterminal symbols in the paired productions are linked.",
        "The processes of derivation proceed synchronously in the two devices by applying the paired grammar rules only to linked nonterminals introduced previously in the derivation.",
        "The fact that the above systems all reflect the same translation technique has not always been recognized in the computational linguistics literature.",
        "Following (Shieber and Schabes, 1990) we will refer to the general approach as synchronous rewriting.",
        "While synchronous systems are becoming more and more popular, surprisingly little is known about the formal characteristics of these systems (with the exception of the finite-state devices).",
        "In this paper, we argue that existing synchronous systems cannot handle, in a computationally attrac",
        "tive way, a standard problem in syntax/semantics translation, namely quantifier scoping.",
        "We propose a new system that provides a synchronization between two unordered vector grammars with dominance links (UVG-DL) (Rambow, 1994).",
        "The type of synchronization is closely based on a previously proposed model, which we will call \"local\" synchronization.",
        "We argue that this synchronous system can deal with quantifier scoping in the desired way.",
        "The proposed system has the weak language preservation property, that is, the defined synchronization mechanism does not alter the weak generative capacity of the formalism being synchronized.",
        "Furthermore, the tree-to-forest translation problem for our system can be solved in polynomial time; that is, given a derivation tree obtained according to one of the synchronized grammars, we can construct the forest of all the translated derivation trees in the other grammar, using a polynomial amount of time.",
        "The structure of this paper is as follows.",
        "In Section 2, we introduce quantifier raising and review two types of synchronization and mention some new formal results.",
        "We introduce our new synchronous system in Section 3, and present our formal results and outline the proof techniques in Section 4."
      ]
    },
    {
      "heading": "2 Types of Synchronization",
      "text": []
    },
    {
      "heading": "2.1 Quantifier Raising",
      "text": [
        "We start by presenting an example which is based on transfer between a syntactic representation and a \"semantic\" representation of the scoping of quantified NPs.",
        "It is generally assumed that in English (and many other languages), quantified arguments of a verb can (in appropriate contexts) take scope in any possible order, and that this generalization extends to cases of embedded clauses (May, 1985).1 For example, sentence (1) can have four possible interpretations (of the six possible orderings of the quantifiers, two pairs are logically equivalent), two of which are shown in (2).",
        "(1) Every man thinks some official said some Norwegian arrived (2) a. Vx, x a man, 3y, y an official, 3z, z a Norwegian, x thinks y said z arrived b.",
        "3z, z a Norwegian, 3y, y an official, Vx, x a man, x thinks y said z arrived",
        "'We explicitly exclude from our analysis cases of quantified NPs embedded in NPs, and do not, of course, propose to develop a serious linguistic theory of quantifier scoping.",
        "We give a simplified syntactic representation for (1) in Figure 1, and a simplified semantic representation for (2b) in Figure 2."
      ]
    },
    {
      "heading": "2.2 Non-Local Synchronization",
      "text": [
        "We will first discuss a type of synchronization proposed by (Shieber and Schabes, 1990), based on TAG.",
        "We will refer to this system as non-local synchronous TAG (n1SynchTAG).",
        "The synchronization is non-local in the sense that once links are introduced during a derivation by a synchronized pair of grammar rules, they need not continue to impinge on the nodes that introduced them: the links may be reassigned to a newly introduced nonterminal when an original node is rewritten.",
        "We will refer to this mechanism as link inheritance.",
        "To illustrate, we will give as an example an analysis of the quantifier-raising example introduced above, extending in a natural manner an example given by Shieber and Schabes.",
        "The elementary structures are shown in Figure 3 (we only give one NP â€“ the others are similar).",
        "The nominal arguments in the syntax are associated with",
        "pairs of trees in the semantics, and are linked to two nodes, the quantifier and the variable.",
        "The derivation proceeds as illustrated in Figure 4, finally yielding the two structures in Figure 1 and Figure 2.",
        "Note that some of the links originating with the NP nodes are inherited during the derivation.",
        "By changing the order in which we add the nominal arguments at the end of the derivation, we can obtain all quantifier scopes in the semantics.",
        "The problem with non-local synchronization is that the weak language preservation property does not hold.",
        "(Shieber, 1994) shows that not all n1SynchTAG left-projection languages can be generated by TAGs.",
        "As a new result, in (Rambow and Satta, 1996) we show that the recognition of some fixed left-projection languages of a n1SynchTAG is NP-complete.",
        "Our reduction crucially relies on link inheritance.",
        "This makes n1SynchTAG unattractive for applications in theoretical or computational linguistics."
      ]
    },
    {
      "heading": "2.3 Local Synchronous Systems",
      "text": [
        "In contrast with non-local synchronization, in local synchronization there is no inheritance of synchronization links.",
        "This is enforced by requiring that the links establish a bijection between nonterminals in the two synchronously derived sentential forms, that is, each nonterminal must be involved in exactly one link.",
        "In this way, once a nonterminal is rewritten through the application of a pair of rules to two",
        "linked nonterminals, no additional link remains to be transferred to the newly introduced nonterminals.",
        "As a consequence of this, the derivation structures in the left and right grammars are always isomorphic (up to ordering and labeling of nodes).",
        "The canonical example of local synchronization is SDTS (Aho and Ullman, 1969), in which two context-free grammars are synchronized.",
        "We give an example of an SDTS and a derivation in Figure 5.",
        "The links are indicated as boxed numbers to the right of the nonterminal to which they apply.",
        "(Shieber, 1994) defines the tree-rewriting version of SDTS, which we will call synchronous TAG (SynchTAG), and argues that SynchTAG does not have the formal problems of n1SynchTAG (though",
        "(Shieber, 1994) studies the translation problem making the unappealing assumption that each tree in the input grammar is associated with only one output grammar tree).",
        "However, SynchTAG cannot derive all possible scope orderings, because of the locality restriction.",
        "This can be shown by adapting the proof technique in (Becker, Rambow, and Niv, 1992).",
        "In the following section, we will present a synchronous system which has local synchronization's formal advantages, but handles the scoping data."
      ]
    },
    {
      "heading": "3 Extended Local Synchronization",
      "text": [
        "In this section, we propose a new synchronous system, which is based on local synchronization of unordered vector grammars with dominance links (UVG-DL) (Rambow, 1994).",
        "The presentations will be informal for reasons of space; we refer to (Rambow and Satta, 1996) for details.",
        "In UVG-DL, several context-free string rewriting rules are grouped into sets, called vectors.",
        "In a derivation, all or no rules from a given instance of a vector must be used.",
        "Put differently, all productions from a given vector must be used the same number of times.",
        "They can be applied in any order and need not be applied simultaneously or one right after the other.",
        "In addition, UVG-DL has dominance links.",
        "An occurrence of a nonterminal A in the right-hand side of a rule p can be linked to the left-hand nonterminal of another rule p' in the same vector.",
        "This dominance link will act as a constraint on derivations: if p is used in a derivation, then p' must be used subsequently in the subderivation that starts with the occurrence of A introduced by p. A UVG-DL is lexicalized if at least one production in every vector contains a terminal symbol.",
        "Henceforth, all UVG-DLs mentioned in this paper will implicitly be assumed to be lexicalized.",
        "The derivation structure of a UVG-DL is just the derivation structure of the same derivation in the underlying context-free grammar (the CFG obtained by forming the union of all vectors).",
        "We give an example of a UVG-DL in Figure 6, in which the dotted lines represent the dominance links.",
        "A sample derivation is in Figure 7.",
        "Our proposal for the synchronization of two UVG-DL uses the notion of locality in synchronization, but with respect to entire vectors, not individual productions in these vectors.",
        "This approach, as we will see, gives us both the desired empirical coverage and acceptable computational and formal results.",
        "We suppose that in each vector v of a UVG-DL there is exactly one privileged element, which we call the synchronous production of v. All other elements of v are referred to as asynchronous productions.",
        "In Figures 6 and 7, the synchronous productions are designated by a bold-italic left-hand side symbol.",
        "Furthermore, in the right-hand side of each asynchronous production of v we identify a single nonterminal nonterminal, called the heir.",
        "In a synchronous UVG-DL (SynchUVG-DL), vectors from one UVG-DL are synchronized with vectors from another UVG-DL.",
        "Two vectors are synchronized by specifying a bijective synchronization mapping (as in local synchronization) between the non-heir right-hand side occurrences of nonterminals in the productions of the two vectors.",
        "A nonterminal on which a synchronization link impinges is referred to as a synchronous nonterminal.",
        "A sample SynchUVG-DL grammar is shown in Figure 9.",
        "Informally speaking, during a SynchUVG-DL derivation, the two synchronous productions in a pair of synchronized vectors must be applied at the same time and must rewrite linked occurrences of nonterminals previously introduced.",
        "The asynchronous productions of the two synchronized gram",
        "mars are not subject to the synchronization requirement, and they can be applied at any time and independently of the other grammar (but of course subject to the grammar-specific dominance links).",
        "Any synchronous links that impinge on a nonterminal rewritten by an asynchronous production are transferred to the heir of the asynchronous production.",
        "A production may introduce a synchronous nonterminal whose counterpart in the other grammar has not yet been introduced.",
        "In this case, the link remains \"pending\".",
        "Thus, while in SynchUVG-DL there is link inheritance as in non-local synchronization, link inheritance is only possible with those productions that themselves are not subject to the synchronization requirement.",
        "The locality of the synchronization becomes clear when we consider a new tree structure which we introduce here, called the vector derivation tree.",
        "Consider two synchronized UVG-DLderivations in a SynchUVG-DL.",
        "The vector derivation tree for either component derivation is obtained as follows.",
        "Each instance of a vector used in the derivation is represented as a single node (which we label with that vector's lexeme).",
        "A node representing a vector vi is immediately dominated by the node representing the vector v2 which introduced the synchronization link that the synchronous production of v1 rewrites.",
        "Unlike the standard derivation tree for UVG-DL, the vector derivation tree clearly shows how the vectors (rather than the component rules of the vectors) were combined during the derivation.",
        "The vector derivation tree for the derivation in Figure 7 is shown in Figure 8. exists z,",
        "It should be clear that the vector derivation trees for two synchronized derivations are isomorphic, reflecting the fact that our definition of SynchUVG",
        "DL is local with respect to vectors (though not with respect to productions, since the derivation trees of two synchronized UVG-DL derivations need not be isomorphic).",
        "The vector derivation tree can be seen as representing an \"outline\" for the derivation.",
        "Such a view is attractive from a linguistic perspective: if each vector represents a lexeme and its projection (where the synchronous production is the basis of the lexical projection that the vector represents), then the vector derivation tree is in fact the dependency tree of the sentence (representing direct relations between lexemes such as grammatical function).",
        "In this respect, the vector derivation tree of UVG-DL is like the derivation tree of tree adjoining grammar and of D-tree grammars (DTG) (Rambow, Vijay-Shanker, and Weir, 1995), which is not surprising, since all three formalisms share the same extended domain of locality.",
        "Furthermore, the vector derivation tree of SynchUVG-DL shares with the the derivation tree of DTG the property that it reflects linguistic dependency uniformly; however, while the definition of DTG was motivated precisely from considerations of dependency, the vector derivation tree is merely a by-product of our definition of SynchUVG-DL, which was motivated from the desire to have a computationally tractable model of synchronization more powerful than SynchTAG.2 We briefly discuss a sample derivation.",
        "We start with the two start symbols, which are linked.",
        "We then apply an asynchronous production from the semantic grammar.",
        "In Figure 10 (top) we see how the link is inherited by the heir nonterminal of the applied production.",
        "This step is repeated with two more asynchronous productions, yielding Figure 10 (bottom).",
        "We now apply productions for the bodies of the clauses, but stop short before the two synchronous productions for the arrive clause, yielding Figure 11.",
        "We see the asynchronous production of the syntactic arrive vector has not only inherited the link to its heir nonterminal, but has introduced a link",
        "of its own.",
        "Since the semantic end of the link has not been introduced yet, the links remains \"pending\" until that time.",
        "We then finish the derivation to obtain the two trees in Figure 1 and Figure 2, with no synchronization or dominance links left."
      ]
    },
    {
      "heading": "4 Formal results",
      "text": [
        "Theorem 1 SynchUVG-DL has the language preservation property.",
        "Proof (outline).",
        "Let G, be a SynchUVG-DL, G' and G\" its left and right UVG-DL components, respectively.",
        "We construct a UVG-DL G generating the left-projection language of G,.",
        "G uses all the",
        "nonterminal symbols of G' and G\", and some compound nonterminals of the form [A, B], A and B nonterminals of G' and G\", respectively.",
        "G simulates G, derivations by intermixing symbols of G' and symbols of G\", and without generating any of the terminal symbols of G\".",
        "Most important, each pair of linked nonterminals generated by G, is represented by G using a compound symbol.",
        "This enforces the requirement of simultaneous application of synchronous productions to linked nonterminals.",
        "Each vector v of G is constructed from a pair of synchronous vectors (v', v\") of G. as follows.",
        "First, all instances of nonterminals in v\" are replaced by e. Furthermore, for any instance B of a right-hand side nonterminal of v\" linked to a right-hand side nonterminal A of VI, B is replaced by e and A by [A, .13].",
        "Then the two synchronous productions in v` and v\" are composed into a single production in v, by composing the two left-hand sides in a compound symbol and by concatenating the two right-hand sides.",
        "Finally, to simulate link inheritance in derivations of G,, each asynchronous production in v' and v\" is transferred to v, either without any change, or by composing with some nonterminal C both its left-hand side and the heir nonterminal in its right-hand side.",
        "Note that there are finitely many choices for the last step, and each choice gives a different vector in G, simulating the application of v' and v\" to a set of (occurrences of) nonterminals in a particular link configuration in a sentential form of G,.",
        "We now introduce a representation for sets of derivation trees in a UVG-DL G. A parse tree in G is an ordered tree representing a derivation in G and encoding at each node the production p used to start the corresponding subderivation and the mul-tiset of productions f used in that subderivation.",
        "A",
        "parse forest in G is a directed acyclic graph which is ordered and bipartite.",
        "(We use ideas originally developed in (Lang, 1991) for the context-free case.)",
        "Nodes of the graph are of two different types, called and-nodes and or-nodes, respectively, and each directed arc connects nodes of different types.",
        "A parse forest in G represents a set T of parse trees in G if the following holds.",
        "When starting at a root node and walking through the graph, if we follow exactly one of the outgoing arcs at each or-node, and all of the outgoing arcs at each and-node, we obtain a tree in T modulo the removal of the or-nodes.",
        "Furthermore, every tree in T can be obtained in this way.",
        "Let G, be a SynchUVG-DL, G' and G\" its left and right UVG-DL components, respectively.",
        "For a parse tree T in G', we denote as T(T) the set of all parse trees in G\" that are synchronous with T according to G..",
        "The parse-to-forest translation problem for G, takes as input a parse tree T in G' and gives as output a parse forest representation for T(r).",
        "If G, is lexicalized, such a parse forest has size bounded by a polynomial function of IT I, despite the fact that the size of T(r) can be exponentially larger than the size of T. In fact, we have a stronger result.",
        "Theorem 3 The parse-to-forest translation problem for a lexicalized SynchUVG-DL can be computed in polynomial time.",
        "Proof (outline).",
        "Let G, be a SynchUVG-DL with G' and G\" its left and right UVG-DL components, respectively.",
        "Let T be a parse tree in G' and 7r be the parse forest representing T(r).",
        "The construction of ir consists of two stages.",
        "In the first stage, we construct the vector derivation tree 7 associated with T. Let q be the number of nodes of 7.",
        "We also construct a parse forest 7rq representing the set of all parse trees in G\" with no more than q vectors.",
        "This stage takes polynomial time in the size of T, since y can be constructed from r in linear time and irq can be constructed as in Lemma 2.",
        "In the second stage, we remove from 7rq all the parse trees not in 7r.",
        "This completes the construction, since the set of parse trees represented by iris included in the set of parse trees represented by Irq.",
        "Let n and r be the root node and the set of all nodes of 7, respectively.",
        "For n E out(n) denotes the set of all children of n. We call family the set {nr} and any nonempty subset of out(n), n E r. The main idea is to associate a set of families Yr, to each node n of 7rq, such that the following condition is satisfied.",
        "A family F belongs to _Fri if and only if at least one subderivation in G\" represented at n induces a forest of vector derivation trees whose root nodes are all and only the nodes in F. Each .FT, can easily be computed visiting 7rq in a bottom-up fashion.",
        "Crucially, we \"block\" a node of 7rq if we fail in the construction of 7;2.",
        "We claim that each set ..rn has size bounded by the number of nodes in 7.",
        "This can be shown using the fact that all derivation trees represented at a node of Irq employ the same multiset of productions of G\".",
        "From the above claim, it follows that irq can be processed in time polynomial in the size of T. Finally, we obtain 7r simply by removing from irq all nodes that have been blocked.",
        "â€¢"
      ]
    },
    {
      "heading": "5 Conclusion",
      "text": [
        "We have presented SynchUVG-DL, a synchronous system which has restricted formal power, is computationally tractable, and which handles the quantifier-raising data.",
        "In addition, SynchUVG-DL can be used for modeling the syntax of languages with syntactic constructions which have been argued to be beyond the formal power of TAG, such as scrambling in German and many other languages (Rainbow, 1994) or wh-movement in Kashmiri (Rambow, Vijay-Shanker, and Weir, 1995).",
        "SynchUVG-DL can be used to synchronize a syntactic grammar for these languages either with a semantic grammar, or with the syntactic grammar of another language for machine translation applications.",
        "However, SynchUVG-DL cannot handle the list of cases listed in (Shieber, 1994).",
        "These pose a problem for SynchUVG-DL for the same reason that they pose a problem for other local synchronous systems: the (syntactic) dependency structures represented by the two derivations are different.",
        "These cases remain an open research issue."
      ]
    },
    {
      "heading": "Acknowledgments",
      "text": [
        "Parts of the present research were done while Rambow was supported by the North Atlantic Treaty Organization under a Grant awarded in 1993, while at TALANA, Universite Paris 7, and while Satta was visiting the Center for Language and Speech Processing, Johns Hopkins University, Baltimore, MD."
      ]
    }
  ]
}
