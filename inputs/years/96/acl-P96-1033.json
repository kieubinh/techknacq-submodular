{
  "info": {
    "authors": [
      "Guido Minnen"
    ],
    "book": "Annual Meeting of the Association for Computational Linguistics",
    "id": "acl-P96-1033",
    "title": "Magic for Filter Optimization in Dynamic Bottom-Up Processing",
    "url": "https://aclweb.org/anthology/P96-1033",
    "year": 1996
  },
  "references": [
    "acl-C88-2128",
    "acl-J90-1004",
    "acl-P85-1018"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "Off-line compilation of logic grammars using Magic allows an incorporation of filtering into the logic underlying the grammar.",
        "The explicit definite clause characterization of filtering resulting from Magic compilation allows processor independent and logically clean optimizations of dynamic bottom-up processing with respect to goal-directedness.",
        "Two filter optimizations based on the program transformation technique of Unfolding are discussed which are of practical and theoretical interest."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "In natural language processing filtering is used to weed out those search paths that are redundant, i.e., are not going to be used in the proof tree corresponding to the natural language expression to be generated or parsed.",
        "Filter optimization often comprises an extension of a specific processing strategy such that it exploits specific knowledge about grammars and/or the computational task(s) that one is using them for.",
        "At the same time it often remains unclear how these optimizations relate to each other and what they actually mean.",
        "In this paper I show how starting from a definite clause characterization of filtering derived automatically from a logic grammar using Magic compilation, filter optimizations can be performed in a processor independent and logically clean fashion.",
        "Magic (templates) is a general compilation technique for efficient bottom-up evaluation of logic programs developed in the deductive database community (Ramakrishnan et al., 1992).",
        "Given a logic program, Magic produces a new program in which the filtering as normally resulting from top-down evaluation is explicitly characterized through, so-called,",
        "magic predicates, which produce variable bindings for filtering when evaluated bottom-up.",
        "The original rules of the program are extended such that these bindings can be made effective.",
        "As a result of the definite clause characterization of filtering, Magic brings filtering into the logic underlying the grammar.",
        "I discuss two filter optimizations.",
        "These optimizations are direction independent in the sense that they are useful for both generation and parsing.",
        "For expository reasons, though, they are presented merely on the basis of examples of generation.",
        "Magic compilation does not limit the information that can be used for filtering.",
        "This can lead to nontermination as the tree fragments enumerated in bottom-up evaluation of magic compiled grammars are connected (Johnson, forthcoming).",
        "More specifically, 'magic generation' falls prey to non-termination in the face of head recursion, i.e., the generation analog of left recursion in parsing.",
        "This necessitates a dynamic processing strategy, i.e., memoization, extended with an abstraction function like, e.g., restriction (Shieber, 1985), to weaken filtering and a subsumption check to discard redundant results.",
        "It is shown that for a large class of grammars the subsumption check which often influences processing efficiency rather dramatically can be eliminated through fine-tuning of the magic predicates derived for a particular grammar after applying an abstraction function in an off-line fashion.",
        "Unfolding can be used to eliminate superfluous filtering steps.",
        "Given an off-line optimization of the order in which the right-hand side categories in the rules of a logic grammar are processed (Minnen et al., 1996) the resulting processing behavior can be considered a generalization of the head corner generation approach (Shieber et al., 1990): Without the need to rely on notions such as semantic head and chain rule, a head corner behavior can be mimicked in a strict bottom-up fashion."
      ]
    },
    {
      "heading": "2 Definite Clause Characterization",
      "text": []
    },
    {
      "heading": "of Filtering",
      "text": [
        "Many approaches focus on exploiting specific knowledge about grammars and/or the computational task(s) that one is using them for by making filtering explicit and extending the processing strategy such that this information can be made effective.",
        "In generation, examples of such extended processing strategies are head corner generation with its semantic linking (Shieber et al., 1990) or bottom-up (Earley) generation with a semantic filter (Shieber, 1988).",
        "Even though these approaches often accomplish considerable improvements with respect to efficiency or termination behavior, it remains unclear how these optimizations relate to each other and what comprises the logic behind these specialized forms of filtering.",
        "By bringing filtering into the logic underlying the grammar it is possible to show in a perspicuous and logically clean way how and why filtering can be optimized in a particular fashion and how various approaches relate to each other."
      ]
    },
    {
      "heading": "2.1 Magic Compilation",
      "text": [
        "Magic makes filtering explicit through characterizing it as definite clauses.",
        "Intuitively understood, filtering is reversed as binding information that normally becomes available as a result of top-down evaluation is derived by bottom-up evaluation of the definite clause characterization of filtering.",
        "The following is the basic Magic algorithm taken from Ramakrishnan et al.",
        "(1992).",
        "Let P be a program and g(Z) a query on the program.",
        "We construct a new program Pmgâ€¢ Initially Pmg is empty.",
        "1.",
        "Create a new predicate magic_p for each predicate p in P. The arity is that of p. 2.",
        "For each rule in P, add the modified version of the rule to Pmg.",
        "If rule r has head, say, p(i), the modified version is obtained by adding the literal magic_p(i) to the body.",
        "3.",
        "For each rule r in P with head, say, p(i), and for each literal gi(ii) in its body, add a magic rule to Pmg.",
        "The head is magie_gi().",
        "The body contains the literal magic_p(1), and all the literals that precede gi in the rule.",
        "4.",
        "Create a seed fact magic_g(6) from the query.",
        "To illustrate the algorithm I zoom in on the application of the above algorithm to one particular grammar rule.",
        "Suppose the original grammar rule looks as follows: s(PO,P,VForm,SSem):vp(P1,P,VFormJCSem],SSem), np(PO,P1,CSem).",
        "Step 2 of the algorithm results in the following modified version of the original grammar rule: s(PO,P,VForm,SSem):magic_s(PO,P,VForm,SSem), vp(P1,P,VFormJCSem],SSem), np(PO,P1,CSem).",
        "A magic literal is added to the right-hand side of the rule which 'guards' the application of the rule.",
        "This does not change the semantics of the original grammar as it merely serves as a way to incorporate the relevant bindings derived with the magic predicates to avoid redundant applications of a rule.",
        "Corresponding to the first right-hand side literal in the original rule step 3 derives the following magic rule: magic_vp(P1,P,VFormJCSem],SSem):magic_s(PO,P,VForm,SSem).",
        "It is used to derive from the guard for the original rule a guard for the rules defining the first right-hand side literal.",
        "The second right-hand side literal in the original rule leads to the following magic rule: magic_np(PO,P1,CSem):magic_s(PO,P,VForm,SSem), vp(P1,P,VFormJCSem],SSem).",
        "Finally, step 4 of the algorithm ensures that a seed is created.",
        "Assuming that the original rule is defining the start category, the query corresponding to the generation of the s \"John buys Mary a book\" leads to the following seed: magic_s(PO,P,finite,buys(john,a(book),mary)).",
        "The seed constitutes a representation of the initial bindings provided by the query that is used by the magic predicates to derive guards.",
        "Note that the creation of the seed can be delayed until run-time, i.e., the grammar does not need to be recompiled for every possible query."
      ]
    },
    {
      "heading": "2.2 Example",
      "text": [
        "Magic compilation is illustrated on the basis of the simple logic grammar extract in figure 1.",
        "This grammar has been optimized automatically for generation (Minnen et al., 1996): The right-hand sides of the rules are reordered such that a simple left-to-right evaluation order constitutes the optimal evaluation order.",
        "With this grammar a simple top-down generation strategy does not terminate as a result of the head recursion in rule 3.",
        "It is necessary to use",
        "memoization extended with an abstraction function and a subsumption check.",
        "Strict bottom-up generation is not attractive either as it is extremely inefficient: One is forced to generate all possible natural language expressions licensed by the grammar and subsequently check them against the start category.",
        "It is possible to make the process more efficient through excluding specific lexical entries with a semantic filter.",
        "The use of such a semantic filter in bottom-up evaluation requires the grammar to obey the semantic monotonicity constraint in order to ensure completeness(Shieber, 1988) (see below).",
        "The 'magic-compiled grammar' in figure 2 is the result of applying the algorithm in the previous section to the head-recursive example grammar and subsequently performing two optimizations (Beeni and Ramakrishnan, 1991): All (calls to) magic predicates corresponding to lexical entries are removed.",
        "Furthermore, data-flow analysis is used to fine-tune the magic predicates for the specific processing task at hand, i.e., generation.'",
        "Given a user-specified abstract query, i.e., a specification of the intended input (Been i and Ramakrishnan, 1991) those arguments which are not bound and which therefore serve no filtering purpose are removed.",
        "The modified versions of the original rules in the grammar are adapted accordingly.",
        "The effect of taking data-flow into account can be observed by comparing the rules for magic_vp and magi c_np in the previous section with rule 12 and 14 in figure 2, respectively.",
        "Figure 3 shows the results from generation of the sentence \"John buys Mary a book\".",
        "In the case of this example the seed looks as follows: magic_sentence (decl (buys ( j ohn , a (book) ,mary) ) ) â€¢ The facts, i.e., passive edges/items, in figure 3 resulted from semi-naive bottom-up evaluation (Ra-iFor expository reasons some data-flow information that does restrict processing is not taken into account.",
        "E.g., the fact that the vp literal in rule 2 is always called with a one-element list is ignored here, but see section 3.1. makrishnan et al., 1992) which constitutes a dynamic bottom-up evaluation, where repeated derivation of facts from the same earlier derived facts (as in naive evaluation; Bancilhon, 1985) is blocked.",
        "(Active edges are not memoized.)",
        "The figure2 consist of two tree structures (connected through dotted lines) of which the left one corresponds to the filtering part of the derivation.",
        "The filtering tree is reversed and derives magic facts starting from the seed in a bottom-up fashion.",
        "The tree on the right is the proof tree for the example sentence which is built up as a result of unifying in the derived magic facts when applying a particular rule.",
        "E.g., in order to derive fact 13, magic fact 2 is unified with the magic literal in the modified version of rule 2 (in addition to the facts 12 and 10).",
        "This, however, is not represented in order to keep the figure clear.",
        "Dotted lines are used to represent when 'normal' facts are combined with magic facts to derive new magic facts.",
        "As can be reconstructed from the numbering of the facts in figure 3 the resulting processing behavior is identical to the behavior that would result from Earley generation as in Gerdemann (1991) except that the different filtering steps are performed in a bottom-up fashion.",
        "In order to obtain a generator similar to the bottom-up generator as described in Shieber (1988) the compilation process can be modified such that only lexical entries are extended with magic literals.",
        "Just like in case of Shieber's bottom-up generator, bottom-up evaluation of magic-compiled grammars produced with this Magic variant is only guaranteed to be complete in case the original grammar obeys the semantic monotonicity constraint.",
        "(1) sentence(PO,P,decl(SSem)):magic_sentence(decl(SSem)), s(PO,P,finite,SSem).",
        "(2) s(PO,P,VForm,SSem):magic_s(VForm,SSem), vp(P1,P,VFormJCSemi,SSem), np(P0,P1,CSem).",
        "(3) vp(PO,P,VForm,Args,SSem):magic_vp(VForm,SSem), vp(P0,P1,VForm,[aculArgs],SSem), np(P1,P,CSem).",
        "(4) vp(PO,P,VForm,Args,SSem):",
        "magic_vp(VForm,SSem), v(PO,P,VForm,Args,SSem).",
        "(5) np (PO ,P ,NPSem) :- magic_np(NPSem) , pn(PO,P,NPSem).",
        "(6) np(PO,P,NPSem):magic_np(NPSem), det(P0,P1,NSem,NPSem), n(P1,P,NSem).",
        "(7) det(NPLP,NSem,a(NSem)).",
        "(8) v(CbuysIP),P,finite,[I,D,S],buys(S,D,I)).",
        "(9) pn( [marYIP] ,P,marY) (10) n([bookIPLP,book).",
        "(11) magic_s(finite,SSem):magic_sentence(decl(SSem) (12) magic_vp(VForm,SSem):magic_s(VForm,SSem).",
        "(13) magic_vp(VForm,SSem):magic_vp(VForm,SSem).",
        "(14) magic_np(CSem):magic_s(VForm,SSem), vp(P1,P,VForm,(CSeml,SSem).",
        "(15) magic_np(CSem):magic_vp(VForm,SSem), vp(P0,P1,VForm,[CSemlArgs],SSem).",
        "As a result of characterizing filtering by a definite grammar.",
        "There is however no reason to keep this clause representation Magic brings filtering inside of rule in the magic-compiled grammar.",
        "It influences the logic underlying the grammar.",
        "This allows it to neither the efficiency of processing with the gram-be optimized in a processor independent and logi- mar nor the completeness of the evaluation process.",
        "cally clean fashion.",
        "I discuss two possible filter opti- 3.1.1 Off-line Abstraction mizations based on a program transformation tech- Finding these types of cycles in the magic part of nique called unfolding (Tamaki and Sato, 1984) also the compiled grammar is in general undecidable.",
        "It referred to as partial execution, e.g., in Pereira and is possible though to 'trim' the magic predicates by Shieber (1987) .",
        "applying an abstraction function.",
        "As a result of the 3.1 Subsumption Checking explicit representation of filtering we do not need to Just like top-down evaluation of the original gram postpone abstraction until run-time, but can trim mar bottom-up evaluation of its magic compiled ver- the magic predicates off-line.",
        "One can consider this sion falls prey to non-termination in the face of head as bringing abstraction into the logic as the definite recursion.",
        "It is however possible to eliminate the clause representation of filtering is weakened such subsumption check through fine-tuning the magic that only a mild form of connectedness results which predicates derived for a particular grammar in an does not affect completeness (Shieber, 1985).",
        "Con-off-line fashion.",
        "In order to illustrate how the magic sider the following magic rule: predicates can be adapted such that the subsump- magic_vp(VForm,[0enOrgsJ,SSem):tion check can be eliminated it is necessary to take a magic_vp(VForm,Args,SSem).",
        "closer look at the relation between the magic pred- This is the rule that is derived from the head-icates and the facts they derive.",
        "In figure 4 the re recursive vp rule when the partially specified sub-lation between the magic predicates for the example categorization list is considered as filtering informa-grammar is represented by an unfolding tree (Pet- tion (cf., fn.",
        "1).",
        "The rule builds up infinitely large torossi and Proietti, 1994).",
        "This, however, is not an subcategorization lists of which eventually only one ordinary unfolding tree as it is constructed on the is to be matched against the subcategorization list basis of an abstract seed, i.e., a seed adorned with of, e.g., the lexical entry for \"buys\".",
        "Though this",
        "ing technique described in Gerdemann (1991).3 The indexing technique is illustrated on the basis of the running example: Rule 14 in figure 1 is coupled to the modified version of the original s rule that instigated it, i.e., rule 2.",
        "Both rules receive an index:",
        "The modified versions of the rules defining nps are adapted such that they percolate up the index of the guarding magic fact that licensed its application.",
        "This is illustrated on the basis of the adapted version of rule 14: np (PO , P , NPSem, INDEX) : - magic_np (NPSem, INDEX) , pn (PO ,P ,NPSem) .",
        "As is illustrated in section 3.3 this allows the avoidance of spurious ambiguities in the absence of subsumption check in case of the example grammar."
      ]
    },
    {
      "heading": "3.2 Redundant Filtering Steps",
      "text": [
        "Unfolding can also be used to collapse filtering steps.",
        "As becomes apparent upon closer investigation of the abstract unfolding tree in figure 4 the magic predicates magic_sentence, magi c_s and magic_vp provide virtually identical variable bindings to guard bottom-up application of the modified versions of the original grammar rules.",
        "Unfolding can be used to reduce the number of magic facts that are produced during processing.",
        "E.g., in figure 2 the magic_s rule: magic_s (f inite ,SSem) : - magic_sentence (decl (SSem) ) .",
        "can be eliminated by unfolding the magic_s literal in the modified s rule:"
      ]
    },
    {
      "heading": "s (PO , P ,VFOR14, SSem) : - magic_s (VFORM,SSem) ,",
      "text": [
        "vp (P1 ,P , VFORM â€ž [CSem] ,SSem) , np (PO ,P1,CSem) .",
        "This results in the following new rule which uses the seed for filtering directly without the need for an intermediate filtering step:"
      ]
    },
    {
      "heading": "s (PO,P,finite,SSem) :-",
      "text": [
        "magic_sentence (decl (SSem) ) , vp (P1 ,P , finite , [CSem] , SSem) , np (PO ,P1,CSem) .",
        "Note that the unfolding of the magic_s literal leads to the instantiation of the argument VFORM to finite.",
        "As a result of the fact that there are no other magic_s literals in the remainder of the magic-compiled grammar the magic_s rule can be discarded.",
        "This filter optimization is reminiscent of computing the deterministic closure over the magic part of a compiled grammar (DOrre, 1993) at compile time.",
        "Performing this optimization throughout the magic part of the grammar in figure 2 not only leads to a more succinct grammar, but brings about a different processing behavior.",
        "Generation with the resulting grammar can be compared best with head corner generation (Shieber et al., 1990) (see next section)."
      ]
    },
    {
      "heading": "3.3 Example",
      "text": [
        "After cycle removal, incorporating relevant indexing and the collapsing of redundant magic predicates the magic-compiled grammar from figure 2 looks as displayed in figure 5.",
        "Figure 6 shows the chart resulting from generation of the sentence \"John buys Mary a book\" .4 The seed is identical to the one used for the example in the previous section.",
        "The facts in the chart resulted from not-so-naive bottom-up evaluation: semi-naive evaluation without subsumption checking (Ramakrishnan et al., 1992).",
        "The resulting processing behavior is similar to the behavior that would result from head corner generation except that the different filtering steps are performed in a bottom-up fashion.",
        "The head corner approach jumps top-down from pivot to pivot in order to satisfy its assumptions concerning the flow of semantic information, i.e., semantic chaining, and subsequently generates starting from the semantic head in a bottom-up fashion.",
        "In the example, the seed is used without any delay to apply the base case of the vp-procedure, thereby jumping over all intermediate chain and non-chain rules.",
        "In this respect the initial reordering of rule 2 which led to rule 2 in the final grammar in figure 5 is crucial (see section 4)."
      ]
    },
    {
      "heading": "4 Dependency Constraint on Grammar",
      "text": [
        "To which extent it is useful to collapse magic predicates using unfolding depends on whether the grammar has been optimized through reordering the 41n addition to the conventions already described regarding figure 3, indices are abbreviated.",
        "sentence(PO,P,decl(SSem)):magic_sentence(decl(SSem)), s(PO,P,finite,SSem).",
        "s(PO,P,finite,SSem):magic_sentence(decl(SSem)), vp(P1,P,finiteJCSem],SSem), np(P0,P1,CSem,index_1).",
        "vp(PO,P,finite,Args,SSem):magic_sentence(decl(SSem)), vp(P0,P1,finite,(CSemlArgs],SSem), np(P1,P,CSem,index_2).",
        "vp(PO,P,finite,Args,SSem):magic_sentence(decl(SSem)), v(PO,P,finite,Args,SSem).",
        "np(PO,P,NPSem,INDEX):magic_np(NPSem,INDEX), pn(PO,P,NPSem).",
        "right-hand sides of the rules in the grammar as discussed in section 3.3.",
        "If the s rule in the running example is not optimized, the resulting processing behavior would not have fallen out so nicely: In this case it leads either to an intermediate filtering step for the non-chaining sentence rule or to the addition of the literal corresponding to the subject np to all chain and non-chain rules along the path to the semantic head.",
        "Even when cycles are removed from the magic part of a compiled grammar and indexing is used to avoid spurious ambiguities as discussed in the previous section, subsumption checking can not always be eliminated.",
        "The grammar must be finitely ambiguous, i.e., fulfill the off-line parsability constraint (Shieber, 1989).",
        "Furthermore, the grammar is required to obey what I refer to as the dependency constraint: When a particular right-hand side literal can not be evaluated deterministically, the results of its evaluation must uniquely determine the remainder of the right-hand side of the rule in which it appears.",
        "Figure 7 gives a schematic example of a grammar that does not obey the dependency constraint.",
        "Given cat_1(...):-magic_cat_1(Filter), cat_2(Filter,Dependency,...), cat_3(Dependency).",
        "magic_cat_3(Filter):magic_cat_1(Filter), cat_2(Filter,Dependency,...).",
        "cat_2(property_1,property_2,...).",
        "cat_2(property_1,property_2,...).",
        "a derived fact or seed magic_cat_1 (property-1) bottom-up evaluation of the abstract grammar in figure 7 leads to spurious ambiguity.",
        "There are two possible solutions for cat_2 as a result of the fact that the filtering resulting from the magic literal in rule 1 is too unspecific.",
        "This is not problematic as long as this nondeterminism will eventually disappear, e.g., by combining these solutions with the solutions to cat_3.",
        "The problem arises as a result of the fact that these solutions lead to identical filters for the evaluation of the cat_3 literal, i.e., the solutions to cat_2 do not uniquely determine cat_3.",
        "Also with respect to the dependency constraint an optimization of the rules in the grammar is important.",
        "Through reordering the right-hand sides of the rules in the grammar the amount of nondeterminism can be drastically reduced as shown in Minnen et al.",
        "(1996).",
        "This way of following the intended semantic dependencies the dependency constraint is satisfied automatically for a large class of grammars."
      ]
    },
    {
      "heading": "5 Concluding Remarks",
      "text": [
        "Magic evaluation constitutes an interesting combination of the advantages of top-down and bottom-up evaluation.",
        "It allows bottom-up filtering that achieves a goal-directedness which corresponds to dynamic top-down evaluation with abstraction and subsumption checking.",
        "For a large class of grammars in effect identical operations can be performed off-line thereby allowing for more efficient processing.",
        "Furthermore, it enables a reduction of the number of edges that need to be stored through unfolding magic predicates."
      ]
    },
    {
      "heading": "6 Acknowledgments",
      "text": [
        "The presented research was sponsored by Teilprojekt B4 \"From Constraints to Rules: Efficient Compilation of HPSG Grammars\" of the Sonderforschungsbereich 340 of the Deutsche Forschungsgemeinschaft.",
        "The author wishes to thank Dale Gerdemann, Mark Johnson, Thilo Giitz and the anonymous reviewers for valuable comments and discussion.",
        "Of course, the author is responsible for all remaining errors."
      ]
    }
  ]
}
