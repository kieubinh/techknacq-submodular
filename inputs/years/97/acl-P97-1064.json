{
  "info": {
    "authors": [
      "Ciprian Chelba"
    ],
    "book": "Annual Meeting of the Association for Computational Linguistics",
    "id": "acl-P97-1064",
    "title": "A Structured Language Model",
    "url": "https://aclweb.org/anthology/P97-1064",
    "year": 1997
  },
  "references": [
    "acl-H94-1052",
    "acl-J93-2004",
    "acl-P96-1025"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "The paper presents a language model that develops syntactic structure and uses it to extract meaningful information from the word history, thus enabling the use of long distance dependencies.",
        "The model assigns probability to every joint sequence of words-binary-parse-structure with headword annotation.",
        "The model, its probabilistic parametrization, and a set of experiments meant to evaluate its predictive power are presented."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "The main goal of the proposed project is to develop a language model(LM) that uses syntactic structure.",
        "The principles that guided this propogal were:",
        "• the model will develop syntactic knowledge as a built-in feature; it will assign a probability to every joint sequence of words-binary-parse-structure; • the model should operate in a left-to-right manner so that it would be possible to decode word lat",
        "tices provided by an automatic speech recognizer.",
        "The model consists of two modules: a next word predictor which makes use of syntactic structure as developed by a parser.",
        "The operations of these two modules are intertwined."
      ]
    },
    {
      "heading": "2 The Basic Idea and Terminology",
      "text": [
        "Consider predicting the word barked in the sentence: the dog I heard yesterday barked again.",
        "A 3-gram approach would predict barked from (heard, yesterday) whereas it is clear that the predictor should use the word dog which is outside the reach of even 4-grams.",
        "Our assumption is that what enables us to make a good prediction of barked is the syntactic structure in the past.",
        "The correct partial parse of the word history when predicting barked is shown in Figure 1.",
        "The word dog is called the headword of the constituent ( the (dog (...) )) and dog is an exposed headword when predicting barked – topmost headword in the largest constituent that contains it.",
        "The syntactic structure in the past filters out irrelevant words and points to the important ones, thus enabling the use of long distance information when predicting the next word.",
        "Our model will assign a probability P(W,T) to every sentence W with every possible binary branching parse T and every possible headword annotation for every constituent of T. Let W be a sentence of length 1 words to which we have prepended <s> and appended </s> so that wo =<s> and w1+1 =</s>.",
        "Let Wk be the word k-prefix wo wk of the sentence and Wk Tk the word-parse k-prefix.",
        "To stress this point, a word-parse k-prefix contains only those binary trees whose span is completely included in the word k-prefix, excluding wo =<s>.",
        "Single words can be regarded as root-only trees.",
        "Figure 2 shows a word-parse k-prefix; h_O h_{-m} are the exposed headwords.",
        "A complete parse – Figure 3 – is any binary parse of the wi <Is> sequence with the restriction that </s> is the only allowed headword.",
        "Note that (wi wi) needn't be a constituent, but for the parses where it is, there is no restriction on which of its words is the headword.",
        "The model will operate by means of two modules:",
        "• PREDICTOR predicts the next word wk+1 given the word-parse k-prefix and then passes control to the PARSER; • PARSER grows the already existing binary branching structure by repeatedly generating the transitions adjoin-left or adjoin-right until it passes control to the PREDICTOR by taking a null transition.",
        "The operations performed by the PARSER ensure that all possible binary branching parses with all possible headword assignments for the wi • • • wk word sequence can be generated.",
        "They are illustrated by Figures 4-6.",
        "The following algorithm describes how the model generates a word sequence with a complete parse (see Figures 3-6 for notation):",
        "It is easy to see that any given word sequence with a possible parse and headword annotation is generated by a unique sequence of model actions."
      ]
    },
    {
      "heading": "3 Probabilistic Model",
      "text": [
        "The probability P(W,T) can be broken into:",
        "• Wk_iTk – i is the word-parse (k - 1)-prefix • wk is the word predicted by PREDICTOR • Nk – 1 is the number of adjoin operations the PARSER executes before passing control to the PREDICTOR (the Nk-th operation at position k is the null transition); Nk is a function of T",
        "• t!` denotes the i-th PARSER operation carried out at position k in the word string;",
        "As can be seen (WkyWk-121-1,t11...tt_1) is one of the Nk word-parse k-prefixes of WkTk, i = 1, Nk at position k in the sentence.",
        "To ensure a proper probabilistic model we have to make sure that (1) and (2) are well defined conditional probabilities and that the model halts with probability one.",
        "A few provisions need to be taken:",
        "• P(nu11/WkTk) = 1, if T_{-1} <s> ensures that <s> is adjoined in the last step of the parsing process; • P(adjoin-right/WkTk) = 1, if h_O == </s> ensures that the headword of a complete parse is </s›; •3e > Os.t.",
        "P(wk=</s>/W T 1 > VW T",
        "- k-1 – k-1, f, – k – l – k-1 ensures that the model halts with probability one."
      ]
    },
    {
      "heading": "3.1 The first model",
      "text": [
        "The first term (1) can be reduced to an n-gram LM, P(wk/Wk-iTk-i) = P(wk/wk--1 • • • wk-n+1).",
        "A simple alternative to this degenerate approach would be to build a model which predicts the next word based on the preceding p-1 exposed headwords and n-1 words in the history, thus making the following equivalence classification:",
        "The approach is similar to the trigger LM(Lau93), the difference being that in the present work triggers are identified using the syntactic structure."
      ]
    },
    {
      "heading": "3.2 The second model",
      "text": [
        "Model (2) assigns probability to different binary parses of the word k-prefix by chaining the elementary operations described above.",
        "The workings of the PARSER are very similar to those of Spatter (Jelinek94).",
        "It can be brought to the full power of Spatter by changing the action of the adjoin operation so that it takes into account the terminal/nonterminal labels of the constituent proposed by adjoin and it also predicts the nonterminal label of the newly created constituent; PREDICTOR will now predict the next word along with its POS tag.",
        "The best equivalence classification of the WkTk word-parse k-prefix is yet to be determined.",
        "The Collins parser (Collins96) shows that dependency-grammar-like bigram constraints may be the most adequate, so the equivalence classification [WkTk] should contain at least {11_0, h_{-1}}."
      ]
    },
    {
      "heading": "4 Preliminary Experiments",
      "text": [
        "Assuming that the correct partial parse is a function of the word prefix, it makes sense to compare the word level perplexity(PP) of a standard n-gram LM with that of the P(wk/Wk_171-1) model.",
        "We developed and evaluated four LMs: • 2 bigrarn LMs P(wk/Wk-111-1) P(wk/wk-i) referred to as W and w, respectively; wk-i is the previous (word, POStag) pair; • 2 P(wk/Wk_ITk_i) = P(wk/h0) models, referred to as H and h, respectively; ho is the previous exposed (headword, POS/non-term tag) pair; the passes used in this model were those assigned manually in the Penn Treebank (Marcus95) after undergoing headword percolation and binasization.",
        "All four LMs predict a word wk and they were implemented using the Maximum Entropy Modeling Toolkitl (Ristad97).",
        "The constraint templates in the {W,H} models were:"
      ]
    },
    {
      "heading": "4 <= <*>_<*> <?>; 2 <= <?>_<*> <7>;",
      "text": [
        "2 <= <?>_<?> <?>; 8 <= <*>_<7> <?>; and in the {w,h} models they were:"
      ]
    },
    {
      "heading": "4 <= <*>_<*> <7>; 2 <= <?>_<*> <7>;",
      "text": [
        "<*> denotes a don't care position, <?>_<?> a (word, tag) pair; for example, 4 <= <?>_<*> <?> will trigger on all ((word, any tag), predicted-word) pairs that occur more than 3 times in the training data.",
        "The sentence boundary is not included in the PP calculation.",
        "Table 1 shows the PP results along with iftp://ftp.cs.princeton.edu/pub/packages/memt the number of parameters for each of the 4 models described ."
      ]
    },
    {
      "heading": "5 Acknowledgements",
      "text": [
        "The author thanks to Frederick Jelinek, Sanjeev Khudanpur, Eric Ristad and all the other members of the Dependency Modeling Group (Stolcke97), WS96 DoD Workshop at the Johns Hopkins University."
      ]
    }
  ]
}
