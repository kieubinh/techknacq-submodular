{
  "info": {
    "authors": [
      "Marc Dymetman"
    ],
    "book": "COLING-ACL",
    "id": "acl-P98-1057",
    "title": "Group Theory and Linguistic Processing",
    "url": "https://aclweb.org/anthology/P98-1057",
    "year": 1998
  },
  "references": [
    "acl-P98-1057"
  ],
  "sections": [
    {
      "heading": "1 Introduction",
      "text": [
        "There is currently much interest in bringing together the tradition of categorial grammar, and especially the Lambek calculus (Lambek, 1958), with the more recent paradigm of linear logic (Girard, 1987) to which it has strong ties.",
        "One active research area concerns the design of non-commutative versions of linear logic (Abrusci, 1991; Mord, 1993) which can be sensitive to word order while retaining the hypothetical reasoning capabilities of standard (commutative) linear logic that make it so well-adapted to handling such phenomena as quantifier scoping (Dalrymple et al., 1995).",
        "Some connections between the Lambek calculus and group structure have long been known (van Benthem, 1986), and linear logic itself has some aspects strongly reminiscent of groups (the producer/consumer duality of a formula A with its linear negation Al), but no serious attempt has been made so far to base a theory of linguistic description solely on group structure.",
        "This paper presents such a model, G-granunars (for \"group grammars\"), and argues that:",
        "• The standard group-theoretic notion of conjugacy, which is central in 0-grammars, is well-suited to a uniform description of commutative and non-commutative aspects of language; • The use of conjugacy provides an elegant approach to long-distance dependency and scoping phenomena, both in parsing and in generation; • 0-grammars give a symmetrical account of the semantics-phonology relation, from which it is easy to extract, via simple group calculations, rewriting systems computing this relation for the parsing and generation modes."
      ]
    },
    {
      "heading": "2 Group Computation",
      "text": [
        "A MONOID Al is a set M together with a product Al x Al – > Al, written (a, b) ab, such that:",
        "• This product is associative; • There is an element 1 E AI (the neutral element) with la = al = a for all a EM.",
        "• This paper is an abridged version of Group Theory and Gram",
        "matical Description, TR-MLTT-033, XRCE, April 1998; available on the CMP-LG archive at the address: http://xxxlanl.gov/abs/cmp10805002.",
        "A GROUP is a monoid in which every element a has an inverse a-1 such that a 1 a = aa-1 = 1.",
        "A PREORDER on a set is a reflexive and transitive relation on this set.",
        "When the relation is also symmetrical, that is, R(x, y) R(y, x), then the preorder is called an EQUIVALENCE RELATION.",
        "When it is antisymmetrical, that is that is, R(x, y) A R(y, x) x = y, it is called a PARTIAL ORDER.",
        "A preorder R on a group G will be said to be COMPATIBLE with the group product iff, whenever R(x , y) and R(s' , yl), then R(xx' ,yy').",
        "Normal submonoids of a group.",
        "We consider a compatible preorder notated x y on a group G. The following properties, for any x, y E G, are immediate:",
        "Two elements x, x' in a group G are said to be CONJUGATE if there exists y E G such that x' = yxy.",
        "The fourth property above says that the set Al of elements x E G such that x 1 is a set which contains along with an element all its conjugates, that is, a NORMAL subset of G. As Al is clearly a submonoid of G, it will be called a NORMAL SUBMONOID Of G. Conversely, it is easy to show that with any normal submonoid M of G one can associate a preorder compatible with G. Indeed let's define x y as xy-1 E Al.The relation is clearly reflexive and transitive, hence is a preorder.",
        "It is also compatible with G, for if x1 4 yi and x2 – > y9, then",
        "plying that xi x2 -+ y1 y2.",
        "that is, that the preorder is compatible.' If S is a subset of G, the intersection of all normal submonoids of G containing S (resp.",
        "of all subgroups of G containing S) is a normal submonoid of G (resp.",
        "a i In general M is not a subgroup of G. It is if x y implies y x, that is, if the compatible preorder 4 is an equivalence re",
        "normal subgroup of G) and is called the NORMAL SuB-MONOID CLOSURE NM(S) of S in G (resp.",
        "the NORMAL SUBGROUP CLOSURE NG(S) of S in G).",
        "The free group over V. We now consider an arbitrary set V. called the VOCABULARY, and we form the so-called SET OF ATOMS ON V, which is notated V U V-1 and is obtained by taking both elements v in V and the formal inverses v-1 of these elements.",
        "We now consider the set F(V) consisting of the empty string, notated 1, and of strings of the form x x2...xn, where xi is an atom on V. It is assumed that such a string is REDUCED, that is, never contains two consecutive atoms which are inverse of each other: no substring vv or v-1 v is allowed to appear in a reduced string.",
        "When a and /3 are two reduced strings, their concatenation a/3 can be reduced by eliminating all substrings of the form v v-1 or v-1v.",
        "It can be proven that the reduced string 7 obtained in this way is independent of the order of such eliminations.",
        "In this way, a product on F(V) is defined, and it is easily shown that F (V) becomes a (non-commutative) group, called the FREE GROUP over V (Hungerford, 1974).",
        "Group computation.",
        "We will say that an ordered pair GCS = (V, R) is a GROUP COMPUTATION STRUCTURE if:",
        "The submonoid closure NM(R) of R in F (V) is called the RESULT MONOID of the group computation structure GCS.",
        "The elements of NM(R) will be called COMPUTATION RESULTS, or simply RESULTS.",
        "If r is a relator, and if a is an arbitrary element of F( V), then arc 1 will be called a QUASI-RELATOR of the group computation structure.",
        "It is easily seen that the set RN of quasi-relators is equal to the normal subset closure of R in F( V), and that NM(RN) is equal to NM(R).",
        "A COMPUTATION relative to GC S is a finite sequence c = (r1, , r„) of quasi-relators.",
        "The product r1 • • • r„ in F( V) is evidently a result, and is called the RESULT OF THE COMPUTATION c. It can be shown that the result monoid is entirely covered in this way: each result is the result of some computation.",
        "A computation can thus be seen as a \"witness\", or as a \"proof-, of the fact that a given element of F (V) is a result of the computation structure.3 For specific computation tasks, one focusses on results of a certain sort, for instance results which express a relationship of input-output, where input and output are 2 For readers familiar with group theory, this terminology will evoke the classical notion of group PRESENTATION through generators and relators.",
        "The main difference with our definition is that, in the classical case, the set of relators is taken to be symmetrical, that is, to contain r1 if it contains r. When this additional assumption is made, our preorder becomes an equivalence relation.",
        "3 The analogy with the view in constructive logics is clear.",
        "There what we call a result is called a forniala or a type, and what we call a computation is called a proof.",
        "assumed to belong to certain object types.",
        "For example, in computational linguistics, one is often interested in results which express a relationship between a fixed semantic input and a possible textual output (generation mode) or conversely in results which express a relationship between a fixed textual input and a possible semantic output (parsing mode).",
        "If GCS = (V, R) is a group computation structure, and if A is a given subset of F (V), then we will call the pair GCSA = (GCS, A) a GROUP COMPUTATION STRUCTURE WITH ACCEPTORS.",
        "We will say that A is the set of acceptors, or the Punic INTERFACE, of GC SA.",
        "A result of GCS which belongs to the public interface will be called a PUBLIC RESULT of GCSA."
      ]
    },
    {
      "heading": "3 G-Grammars",
      "text": [
        "We will now show how the formal concepts introduced above can be applied to the problems of grammatical description and computation.",
        "We start by introducing a grammar, which we will call a 0-GRAMMAR (for \"Group Grammar\"), for a fragment of English (see Fig. 1).",
        "A 0-grammar is a group computation structure with acceptors over a vocabulary V = Viog U Phon consisting of a set of logical forms I/tog and a disjoint set of phonological elements (in the example, words) liphon .",
        "Examples of phonological elements are johtz, saw, every, examples of logical forms j, s ( j , 1), ev (m, x , sm(w , y , s (x , y) ) ); these logical forms can be glossed respectively as \"john\", \"john saw louise\" and \"for every man x, for some woman y,x saw y\".",
        "The grammar lexicon, or set of relators, R is given as a list of \"lexical schemes\".",
        "An example is given in Fig.",
        "I.",
        "Each line is a lexical scheme and represents a set of relators in F( V).",
        "The first line is a ground scheme, which corresponds to the single relator j john-1, and so are the next four lines.",
        "The fifth line is a non-ground scheme, which corresponds to an infinite set of relators, obtained by instanciating the term metavariable A (notated in uppercase) to a logical form.",
        "So are the remaining lines.",
        "We use Greek letters for expression meta-variables such as a, which can be replaced by an arbitrary expression of F(V); thus, whereas the term meta-variables A, B, range over logical forms, the expression meta-variables a, 0, ..., range over products of logical forms and phono",
        "logical elements (or their inverses) in F(V).4 The notation P [x] is employed to express the fact that a logical form containing an argument identifier x is equal to the application of the abstraction P to x.",
        "The metavariable X in P [X] ranges over such identifiers (x, y, z, ...), which are notated in lower-case italics (and are always ground).",
        "The metavariable P ranges over logical form abstractions missing one argument (for instance .\\z.",
        "s ( j , z)).",
        "When matching meta-variables in logical forms, we will allow limited use of higher-order unification.",
        "For instance, one can match P [X] to s ( j , x) by taking P = Az.s(j, z) and X = .r.",
        "The vocabulary and the set of relators that we have just specified define a group computation structure GCS = (V, R).",
        "We will now describe a set of acceptors A for this computation structure.",
        "We take A to be the set of elements of F( V) which are products of the following form: where S is a logical form (S stands for \"semantics\"), and where each Wi is a phonological element (W stands for \"word\").",
        "The expression above is a way of encoding the ordered pair consisting of the logical form S and the phonological string 11-1 W.) 11,, (that is, the inverse of the product I V„ 1 11;, • • • TV A public result SWn -1117„ _1-1 ... 1 in the group computation structure with acceptors ((V, R), A) – the G-grammar – will be interpreted as meaning that the logical form S can be expressed as the phonological string 1171 I V2 .• • • Wrz • Let us give an example of a public result relative to the grammar of Fig. 1.",
        "We consider the relators (instanciations of relator schemes):",
        "and the quasi-relators:",
        "which means that s ( j , 1) louise-1 saw-ljohn-1 is the result of a computation ( r ' , r2 ' , r3' ) .",
        "This result is obviously a public one, which means that the logical form s (j 1) can be verbalized as the phonological string john saw louise."
      ]
    },
    {
      "heading": "4 Generation",
      "text": [
        "Applying directly, as we have just done, the definition of a group computation structure in order to obtain public results can be somewhat unintuitive.",
        "It is often easier to use the preorder .",
        "If, for a, b, c E F (V), abc is a relator, then abc -+ 1, and therefore b a-lc-1.",
        "Taking this remark into account, it is possible to write the relators of our G-grammar as the \"rewriting rules\" of Fig. 2; we use the notation – • instead of 4 to distinguish these rules from the parsing rules which will be introduced in the next section.",
        "The rules of Fig. 2 have a systematic structure.",
        "The left-hand side of each rule consists of a single logical form, taken from the corresponding relator in the G-grammar; the right-hand side is obtained by \"moving\" all the remaining elements in the relator to the right of the arrow.",
        "Because the rules of Fig. 2 privilege the rewriting of a logical form into an expression of F (V), they are called generation-oriented rules associated with the 0 grammar.",
        "Using these rules, and the fact that the preorder is compatible with the product of F(V), the fact that s ( j , 1 ) louise-1 saw Volin-1 is a public result can be obtained in a simpler way than previously.",
        "We have:",
        "by the seventh, first and second rules (properly instanci-ated), and therefore, by transitivity and compatibility of the preorder: s (j ,1) j saw 1 john saw 1 john saw louise which proves that s ( j , 1) john saw louise, which is equivalent to saying that s ( j , 1) louise-1 sa-w-ijohn-1 is a public result.",
        "Some other generation examples are given in Fig. 3.",
        "The first example is straightforward and works similarly to the one we have just seen: from the logical form i(s (j,1) ,p) one can derive the phonological string john saw louise in paris.",
        "Long-distance movement and quantifiers The second and third examples are parallel to each other and show the derivation of the same string every' man saw some woman from two different logical forms.",
        "The penultimate and last steps of each example are the most interesting.",
        "In the penultimate step of the second example, is instanciated to saw-1 x-1.",
        "This has the effect of \"moving\" as a whole the expression some woman y-1 to the position just before y, and therefore to allow for the cancellation of y-1 and y.",
        "The net effect is thus to \"replace\" the identifier y by the string some woman; in the last step a is instanciated to the neutral element 1, which has the effect of replacing x by every man.",
        "In the penultimate step of the third example, a is instanciated to the neutral element, which has the effect of replacing x by every man; then /3 is instanciated to saw-1 man-levery' which has the effect of replacing y by some woman.",
        "Remark In all cases in which an expression similar to a al ... am a-1 appears (with the ai arbitrary vocabulary elements), it is easily seen that, by giving a an appropriate value in F(17), the al ... am can move arbitrarily to the left or to the right, but only together in solidarity; they can also freely permute cyclically, that is, by giving an appropriate value to a, the expression a al ... am a-1 can take on the value ak ak+1 • • • am al ... ak _1 (other permutations are in general not possible).",
        "The values given to the a, 0, etc., in the examples of this paper can be understood intuitively in terms of these two properties.",
        "We see that, by this mechanism of concerted movement, quantified noun phrases can move to whatever place is assigned to them after the expansion of their \"scope\" predicate, a place which was unpredictable at the time of the expansion of the quantified logical form.",
        "The identifiers act as \"target markers\" for the quantified noun phrase: the only way to \"get rid\" of an identifier x is by moving x-1, and therefore with it the corresponding quantified noun phrase, to a place where it can cancel with x."
      ]
    },
    {
      "heading": "5 Parsing",
      "text": [
        "To the compatible preorder 4 on F(V) there corresponds a \"reverse\" compatible preorder defined as a 7 b iff 4 a, or, equivalently, a-1 -> 6-1.",
        "The normal submonoid M' in F(V) associated with 7 is the inverse monoid of the normal submonoid M associated with -> , that is, M' contains a if M contains a-1.",
        "It is then clear that one can present the relations:",
        "a sm(N, X, P [X] ) P [X] -1a-1X N-1 some-1 ---÷ 1 etc.",
        "in the equivalent way:",
        "Suppose now that we move to the right of the 7 arrow all elements appearing on the left of it, but for the single phonological element of each relator.",
        "We obtain the rules of Fig. 4, which we call the \"parsing-oriented\" rules associated with the G-grammar.",
        "By the same reasoning as in the generation case, it is easy to show that any derivation using these rules and leading to the relation PS-, LF, where PS is a phonological string and LF a logical form, corresponds to a public result LF PS-1 in the G-grammar.",
        "A few parsing examples are given in Fig. 5; they are the converses of the generation examples given earlier.",
        "In the first example, we first rewrite each of the phonological elements into the expression appearing on",
        "m – t the right-hand side of the rules (and where the meta-variables have been renamed in the standard way to avoid name clashes).",
        "The rewriting has taken place in parallel, which is of course permitted (we could have obtained the same result by rewriting the words one by one).",
        "We then perform certain unifications: A is unified with j, C with p; then B is unified to 1.5 Finally E is unified with s ( j , 1 ) , and we obtain the logical form i(s(j,1),p).",
        "In this last step, it might seem feasible to unify E to i (E, p) instead, but that is in fact forbidden for it would mean that the logical form i ( E, p) is not a finite tree, as we do require.",
        "This condition prevents \"self-cancellation\" of a logical form with a logical form that it strictly contains.",
        "Quantifier scoping In the second example, we start by unifying m with N and w with M; then we \"move\" P [x] – 1 next to s (A, B) by taking a = xA-1;6 then again we \"move\" Q [y] – 1 next to s (A, B) by taking g = B sm(w,y,Q [y] ) – 1; x is then unified with A and y with B.",
        "This leads to the expression: ev(m,x, P [x] )P [x] – ls (x,y)Q [y] – 1sm(w,y, Q [y] ) where we now have a choice.",
        "We can either unify s (x,y) with Q[y], or with P[x].",
        "In the 5Another possibility at this point would be to unify 1 with E rather than with B.",
        "This would lead to the construction of the logical form i ( 1 , p) , and, after unification of E with that logical form, would conduct to the output s(j,i (1,P) I.",
        "If one wants to prevent this output, several approaches are possible.",
        "The first one consists in typing the logical form with syntactic categories.",
        "The second one is to have some notion of logical-form well-formedness (or perhaps interpretability) disallowing the logical forms i ( 1 , p) [louise in paris] or It (w) , p) [(the woman) in paris], although it might allow the form t(i(w,p)) [the (woman in paris)].",
        "6We have assumed that the meta-variables corresponding to identifiers in P and Q have been instanciated to arbitrary, but different, values x and y.",
        "See (Dymetman, 1998) for a discussion of this point.",
        "first case, we continue by now unifying P [ x ] with sm (w, y, s (x, y) ) , leading to the output ev(m,x,sm(w,y, s (x,y) ) ).",
        "In the second case, we continue by now unifying Q [y] with ev (m, x, s (x, y ) ) , leading to the output sm(w,y, ev (m,x, s (x,y) ).",
        "The two possible quantifier scopings for the input string are thus obtained, each corresponding to a certain order of performing the unifications."
      ]
    },
    {
      "heading": "Acknowledgments",
      "text": [
        "Thanks to Christian Retore, Eric de la Clergerie, Alain Lecomte and Aarne Ranta for comments and discussion."
      ]
    }
  ]
}
