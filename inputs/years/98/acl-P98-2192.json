{
  "info": {
    "authors": [
      "Giorgio Satta",
      "William Schuler"
    ],
    "book": "COLING-ACL",
    "id": "acl-P98-2192",
    "title": "Restrictions on Tree Adjoining Languages",
    "url": "https://aclweb.org/anthology/P98-2192",
    "year": 1998
  },
  "references": [
    "acl-J94-1004",
    "acl-J94-2002",
    "acl-J95-4002",
    "acl-P93-1017",
    "acl-P94-1022",
    "acl-P95-1023"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "Several methods are known for parsing languages generated by Tree Adjoining Grammars (TAGs) in 0(n6) worst case running time.",
        "In this paper we investigate which restrictions on TAGs and TAG derivations are needed in order to lower this 0(n6) time complexity, without introducing large runtime constants, and without losing any of the generative power needed to capture the syntactic constructions in natural language that can be handled by unrestricted TAGs.",
        "In particular, we describe an algorithm for parsing a strict subclass of TAG in 0(n6), and attempt to show that this subclass retains enough generative power to make it useful in the general case."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "Several methods are known that can parse languages generated by Tree Adjoining Grammars (TAGs) in worst case time 0(n6), where n is the length of the input string (see (Schabes and Joshi, 1991) and references therein).",
        "Although asymptotically faster methods can be constructed, as discussed in (Rajasekaran and Yooseph, 1995), these methods are not of practical interest, due to large hidden constants.",
        "More generally, in (Satta, 1994) it has been argued that methods for TAG parsing running in time asymptotically faster than 0(n6) are unlikely to have small hidden constants.",
        "A careful inspection of the proof provided in (Satta, 1994) reveals that the source of the claimed computational complexity of TAG parsing resides in the fact that auxiliary trees can get adjunctions at (at least) two distinct nodes in their spine (the path connecting the root and the foot nodes).",
        "The question then arises of whether the bound of two is tight.",
        "More generally, in this paper we investigate which restrictions on TAGs are needed in order to lower the 0(n6) time complexity, still retaining the generative power that is needed to capture the syntactic constructions of natural language that unrestricted TAGs can handle.",
        "The contribution of this paper is twofold: • We define a strict subclass of TAG where adjunction of so-called wrapping trees at the spine is restricted to take place at no more than one distinct node.",
        "We show that in this case the parsing problem for TAG can be solved in worst case time 0(n6).",
        "• We provide evidence that the proposed subclass still captures the vast majority of TAG analyses that have been currently proposed for the syntax of English and of several other languages.",
        "Several restrictions on the adjunction operation for TAG have been proposed in the literature (Schabes and Waters, 1993; Schabes and Waters, 1995) (Rogers, 1994).",
        "Differently from here, in all those works the main goal was one of characterizing, through the adjunction operation, the set of trees that can be generated by a context-free grammar (CFG).",
        "For the sake of critical comparison, we discuss some common syntactic constructions found in current natural language TAG analyses, that can be captured by our proposal but fall outside of the restrictions mentioned above."
      ]
    },
    {
      "heading": "2 Overview",
      "text": [
        "We introduce here the subclass of TAG that we investigate in this paper, and briefly compare it with other proposals in the literature.",
        "A TAG is a tuple G (N, E, I, A, S), where N, E are the finite sets of nonterminal and terminal symbols, respectively, I, A are the finite",
        "sets of initial and auxiliary trees, respectively, and S E N is the initial symbol.",
        "Trees in I U A are also called elementary trees.",
        "The reader is referred to (Joshi, 1985) for the definitions of tree adjunction, tree substitution, and language derived by a TAG.",
        "The spine of an auxiliary tree is the (unique) path that connects the root and the foot node.",
        "An auxiliary tree 13 is called a right (left) tree if (i) the leftmost (rightmost, resp.)",
        "leaf in [3 is the foot node; and (ii) the spine of 3 contains only the root and the foot nodes.",
        "An auxiliary tree which is neither left nor right is called a wrapping tree.'",
        "The TAG restriction we propose is stated as followed:",
        "1.",
        "At the spine of each wrapping tree, there is at most one node that can host adjunction of a wrapping tree.",
        "This node is called a wrapping node.",
        "2.",
        "At the spine of each left (right) tree, no wrapping tree can be adjoined and no adjunction constraints on right (left, resp.)",
        "auxiliary trees are found.",
        "The above restriction does not in any way constrain adjunction at nodes that are not in the spine of an auxiliary tree.",
        "Similarly, there is no restriction on the adjunction of left or right trees at the spines of wrapping trees.",
        "Our restriction is fundamentally different from those in (Schabes and Waters, 1993; Schabes and Waters, 1995) and (Rogers, 1994), in that we allow wrapping auxiliary trees to nest inside each other an unbounded number of times, so long as they only adjoin at one place in each others' spines.",
        "Rogers, in contrast, restricts the nesting of wrapping auxiliaries to a number of times bounded by the size of the grammar, and Schabes and Waters forbid wrapping auxiliaries altogether, at any node in the grammar.",
        "We now focus on the recognition problem, and informally discuss the computational advantages that arise in this task when a TAG obeys the above restriction.",
        "These ideas are formally developed in the next section.",
        "Most of 'The above names are also used in (Schabes and Waters, 1995) for slightly different kinds of trees.",
        "the tabular methods for TAG recognition represent subtrees of derived trees, rooted at some node N and having the same span within the input string, by means of items of the form (N,i,p,q, j).",
        "In this notation i, j are positions in the input spanned by N, and p, q are positions spanned by the foot node, in case N belongs to the spine, as we assume in the discussion below.",
        "q",
        "The most time expensive step in TAG recognition is the one that deals with adjunction.",
        "When we adjoin at N a derived auxiliary tree rooted at some node R, we have to combine together two items (R, j, j1) and (N,i,p,q, j).",
        "This is shown in Figure 1.",
        "This step involves six different indices that could range over any position in the input, and thus has a time cost of 0(n6).",
        "Let us now consider adjunction of wrapping trees, and leave aside left and right trees for the moment.",
        "Assume that no adjunction has been performed in the portion of the spine below N. Then none of the trees adjoined below N will simultaneously affect the portions of the tree yield to the left and to the right of the foot node.",
        "In this case we can safely split the tree yield and represent item (N, i, p, q, j) by means of two items of a new kind, (Nieft, 19) and (Nright, q, j).",
        "The adjunction step can now be performed by means of two successive steps.",
        "The first step combines (R,i' j, j') and (Nieft, i,p), producing a new intermediate item I.",
        "The second step combines I and (Nright,q, j), producing the desired result.",
        "In this way the time cost is reduced to 0(n6).",
        "It is not difficult to see that the above reasoning also applies in cases where no adjunction has been performed at the portion of the spine above N. This suggests that, when pro",
        "cessing a TAG that obeys the restriction introduced above, we can always 'split' each wrapping tree into four parts at the wrapping node N, since N is the only site in the spine that can host adjunction (see Figure 2(a)).",
        "Adjunction of a wrapping tree 13 at N can then be simulated by four steps, executed one after the other.",
        "Each step composes the item resulting from the application of the previous step with an item representing one of the four parts of the wrapping tree (see Figure 2(b)).",
        "We now consider adjunction involving left and right trees, and show that a similar splitting along the spine can be performed.",
        "Assume that y is a derived auxiliary tree, obtained by adjoining several left and right trees one at the spine of the other.",
        "Let x and y be the part of the yield of y to the left and right, respectively, of the foot node.",
        "From the definition of left and right trees, we have that the nodes in the spine of 7 have all the same nonterminal label.",
        "Also, from condition 2 in the above restriction we have that the left trees adjoined in 7 do not constrain in any way the right trees adjoined in -y.",
        "Then the following derivation can always be performed.",
        "We adjoin all the left trees, each one at the spine of the other, in such a way that the resulting tree -yleft has yield x.",
        "Similarly, we adjoining all the right trees, one at the spine of the other, in such a way that the yield of the resulting tree 'Yright is y.",
        "Finally, we adjoin -yright at the root of -yieft, obtaining a derived tree having the same yield as 7.",
        "From the above observations it directly follows that we can always recognize the yield of 7 by independently recognizing 7/0 and 'Yright.",
        "Most important, yieft and -yright can be represented by means of items (Rieft, i,p) and (Rright, q, j).",
        "As before, the adjunction of tree 7 at some subtree represented by an item I can be recognized by means of two successive steps, one combining I with (Rieft, p) at its left, resulting in an intermediate item /1, and the second combining I' with (Rright, q, j) at its right, obtaining the desired result."
      ]
    },
    {
      "heading": "3 Recognition",
      "text": [
        "This section presents the main result of the paper.",
        "We provide an algorithm for the recognition of languages generated by the subclass of TAGs introduced in the previous section, and show that the worst case running time is 0(n5), where n is the length of the input string.",
        "To simplify the presentation, we assume the following conditions throughout this section: first, that elementary trees are binary (no more than two children at each node) and no leaf node is labeled by e; and second, that there is always a wrapping node in each wrapping tree, and it differs from the foot and the root node.",
        "This is without any loss of generality."
      ]
    },
    {
      "heading": "3.1 Grammar transformation",
      "text": [
        "Let G = (N, E, I, A) be a TAG obeying the restrictions of Section 2.",
        "We first transform A into a new set of auxiliary trees A' that will be processed by our method.",
        "The root and foot nodes of a tree [3 are denoted Ro and Fo, respectively.",
        "The wrapping node (as defined in Section 2) of 0 is denoted W0.",
        "Each left (right) tree 0 in A is inserted in A' and is called 13L, (0R).",
        "Let 0 be a wrapping tree in A.",
        "We split 0 into four auxiliary trees, as informally described in Section 2.",
        "Let [3D be the subtree of 0 rooted at W,.",
        "We call 13u the tree obtained from 0 by removing every descendant of W0 (and the corresponding arcs).",
        "We remove every node to the right (left) of the spine of 13D and call 0L,D (ORD) the resulting tree.",
        "Similarly, we remove every node to the right (left) of the spine of Ou and call 0L,u (PRO the resulting tree.",
        "We set FAD and FoRD equal to F0, and set FAL, and FoRL, equal to W. Trees Au, 13Ru, OLD, and /3RD are inserted in A' for every wrapping tree 0 in A.",
        "Each tree in A' inherits at its nodes the adjunction constraints specified in G. In addition, we impose the following constraints: • only trees f3L, can be adjoined at the spine of trees OLD, f3i,u;",
        "• only trees OR can be adjoined at the spine of trees ORD, 0Ru; • no adjunction can be performed at nodes FOLu FORu •"
      ]
    },
    {
      "heading": "3.2 The algorithm",
      "text": [
        "The algorithm below is a tabular method that works bottom up on derivation trees.",
        "Following (Shieber et al., 1995), we specify the algorithm using inference rules.",
        "(The specification has been optimized for presentation simplicity, not for computational efficiency.)",
        "Symbols N, P,Q denote nodes of trees in A' (including foot and root), a denotes initial trees and 0 denotes auxiliary trees.",
        "Symbol label(N) is the label of N and children(N) is a string denoting all children of N from left to right (children(N) is undefined if N is a leaf).",
        "We write a E Sbst(N) if a can be substituted at N. We write 0 E Adj(N) if 13 can be adjoined at N, and nil E Adj (N) if adjunction at N is optional.",
        "We use two kind of items:",
        "• Item (Nx, j), X E {B, M, 2}, denotes a subtree rooted at N and spanning the portion of the input from i to j.",
        "Note that two input positions are sufficient, since trees in A' always have their foot node at the position of the leftmost or rightmost leaf.",
        "We have X = B if N has not yet been processed for adjunction, X = M if N has been processed only for adjunction of trees 0L, and X = T if N has already been processed for adjunction.",
        "• Item (13,i,p,q,j) denotes a wrapping tree [3 (in A) with Rs spanning the portion of the input from i to j and with Fs spanning the portion of the input from p to q.",
        "In place of 0 we might use symbols [0, L.D], , RD] and [3, RU] to denote the temporary results of recognizing the adjunction of some wrapping tree at W. Algorithm.",
        "Let G be a TAG with the re",
        "strictions of Section 2, and let A' be the associated set of auxiliary trees defined as in section 3.1.",
        "Let aia2 • • • an, n > 1, be an input string.",
        "The algorithm accepts the input if some item (FILO, n) can be inferred for some a E I.",
        "Step 1 This step recognizes subtrees with root N from subtrees with roots in children(N).",
        "Step 2 This step recognizes the adjunction of wrapping trees at wrapping nodes.",
        "We recognize the tree hosting adjunction by composing its four 'chunks', represented by auxiliary trees AD, /3RD, ORU and 0Lu in A', around the wrapped tree.",
        "Step 3 This step recognizes all remaining cases of adjunction.",
        "Due to restrictions on space, we merely claim the correctness of the above algorithm.",
        "We now establish its worst case time complexity with respect to the input string length n. We need to consider the maximum number d of input positions appearing in the antecedent of an inference rule.",
        "In fact, in the worst case we will have to execute a number of different evaluations of each",
        "inference rule which is proportional to nd, and each evaluation can be carried out in an amount of time independent of n. It is easy to establish that Step 1 can be executed in time 0(n3) and that Step 3 can be executed in time 0(n4).",
        "Ad-junction at wrapping nodes performed at Step 2 is the most expensive operation, requiring an amount of time 0(n5).",
        "This is also the time complexity of our algorithm."
      ]
    },
    {
      "heading": "4 Linguistic Relevance",
      "text": [
        "In this section we will attempt to show that the restricted formalism presented in Section 2 retains enough generative power to make it useful in the general case."
      ]
    },
    {
      "heading": "4.1 Athematic and Complement Trees",
      "text": [
        "We begin by introducing the distinction between athematic auxiliary trees and complement auxiliary trees (Kroch, 1989), which are meant to exhaustively characterize the auxiliary trees used in any natural language TAG grammar.2 An athematic auxiliary tree does not subcategorize for or assign a thematic role to its foot node, so the head of the foot node becomes the head of the phrase at the root.",
        "The structure of an athematic auxiliary tree may thus be described as:",
        "where Xn is any projection of category X, y maxis the maximal projection of Y, and the order of the constituents is variable.3 A complement auxiliary tree, on the other hand, introduces a lexical head that subcategorizes for the tree's foot node and assigns it a thematic role.",
        "The structure of a complement auxiliary tree may be .described as:",
        "where Xmas is the maximal projection of some category X, and Y° is the lexical projection 2 The same linguistic distinction is used in the conception of 'modifier' and 'predicative' trees (Schabes and Shieber, 1994), but Schabes and Shieber give the trees special properties in the calculation of derivation structures, which we do not.",
        "of some category Y, whose maximal projection dominates X m\".",
        "From this we make the following observations:",
        "1.",
        "Because it does not assign a theta role to its foot node, an athematic auxiliary tree may adjoin at any projection of a category, which we take to designate any adjunction site in a host elementary tree.",
        "2.",
        "Because it does assign a theta role to its foot node, a complement auxiliary tree may only adjoin at a certain 'complement' adjunction site in a host elementary tree, which must at least be a maximal projection of a lexical category.",
        "3.",
        "The foot node of an athematic auxiliary tree is dominated only by the root, with no intervening nodes, so it falls outside of the maximal projection of the head.",
        "4.",
        "The foot node of a complement auxiliary",
        "tree is dominated by the maximal projection of the head, which may also dominate other arguments on either side of the foot.",
        "To this we now add the assumption that each auxiliary tree can have only one complement adjunction site projecting from Y°, where Y° is the lexical category that projects Ym\".",
        "This is justified in order to prevent projections of Y° from receiving more than one theta role from complement adjuncts, which would violate the underlying theta criterion in Government and Binding Theory (Chomsky, 1981).We also assume that an auxiliary tree can not have complement adjunction sites on its spine projecting from lexical heads other than Y°, in order to preserve the minimality of elementary trees (Kroch, 1989; Frank, 1992).",
        "Thus there can be no more than one complement adjunction site on the spine of any complement auxiliary tree, and no complement adjunction site on the spine of any athematic auxiliary tree, since the foot node of an athematic tree lies outside of the maximal projection of the head.4 41t is important to note that, in order to satisfy the theta criterion and minimality, we need only constrain the number of complement adjunctions – not the number of complement adjunction sites – on the spine of an auxiliary tree.",
        "Although this would remain within the power of our formalism, we prefer to use constraints expressed in terms of adjunction sites, as we did in Section 2, be",
        "Based on observations 3 and 4, we can further specify that only complement trees may wrap, because the foot node of an athematic tree lies outside of the maximal projection of the head, below which all of its subcategories must attach.5 In this manner, we can insure that only one wrapping tree (the complement auxiliary) can adjoin into the spine of a wrapping (complement) auxiliary, and only athematic auxiliaries (which must be left/right trees) can adjoin elsewhere, fulfilling our TAG restriction in Section 2."
      ]
    },
    {
      "heading": "4.2 Possible Extensions",
      "text": [
        "We may want to weaken our definition to include wrapping athematic auxiliaries, in order to account for modifiers with raised heads or complements as in Figure 3: \"They so revered him that they built a statue in his honor.\" This can be done within the above algorithm as long as the athematic trees do not wrap productively (that is as long as they cannot be adjoined one at the spine of the other) by splitting the athematic auxiliary tree down the spine and treating the two fragments as tree-local multi-components, which can be simulated with non-recursive features (Hockey and Srinivas, 1993).",
        "Since the added features are non-recursive, this extension would not alter the 0(n5) result reported in Section 3."
      ]
    },
    {
      "heading": "4.3 Comparison of Coverage",
      "text": [
        "In contrast to the formalisms of Schabes and Waters (Schabes and Waters, 1993; Schabes and Waters, 1995), our restriction allows wrapping complement auxiliaries as in Figure 4 (Schabes and Waters, 1995).",
        "Although it is difficult to find examples in English which are excluded by",
        "Rogers' regular form restriction (Rogers, 1994), we can cite verb-raised complement auxiliary trees in Dutch as in Figure 5 (Kroch and San-torini, 1991).",
        "Trees with this structure may adjoin into each others' internal spine nodes an unbounded number of times, in violation of Rogers' definition of regular form adjunction, but within our criteria of wrapping adjunction at only one node on the spine."
      ]
    },
    {
      "heading": "5 Concluding remarks",
      "text": [
        "Our proposal is intended to contribute to the assessment of the computational complexity of syntactic processing.",
        "We have introduced a strict subclass of TAGs having the generative power that is needed to account for the syntactic constructions of natural language that unrestricted TAGs can handle.",
        "We have specified a method that recognizes the generated languages in worst case time 0(n5), where n is the length of the input string.",
        "In order to account for the dependency on the input grammar G, let us define I GI = EN (1 ± Adj(N) I), where N ranges over the set of all nodes of the elementary trees.",
        "It is not difficult to see that the running time of our method is proportional to I G Our method works as a recognizer.",
        "As for many other tabular methods for TAG recognition, we can devise simple procedures in order to obtain a derived tree associated with an accepted string.",
        "To this end, we must be able to 'interleave' adjunctions of left and right trees, that are always kept separate by our recognizer.",
        "The average case time complexity of our method should surpass its worst case time performance, as is the case for many other tabular algorithms for TAG recognition.",
        "In a more applicative perspective, then, the question arises of whether there is any gain in using an algorithm that is unable to recognize more than one wrapping adjunction at each spine, as opposed to using an unrestricted TAG algorithm.",
        "As we have tried to argue in Section 4, it seems that standard syntactic constructions do not exploit multiple wrapping adjunctions at a single spine.",
        "Nevertheless, the local ambiguity of natural language, as well as cases of ill-formed input, could always produce cases in which such expensive analyses are attempted by an unrestricted algorithm.",
        "In this perspective, then, we conjecture that having the single-wrapping-adjunction restriction embedded into the recognizer would improve processing efficiency in the average case.",
        "Of course, more experimental work would be needed in order to evaluate such a conjecture, which we leave for future work."
      ]
    },
    {
      "heading": "Acknowledgments",
      "text": [
        "Part of this research was done while the first author was visiting the Institute for Research in Cognitive Science, University of Pennsylvania.",
        "The first author was supported by NSF grant SBR8920230.",
        "The second author was supported by U.S. Army Research Office Contract No.",
        "DAAH04-94G-0426.",
        "The authors would like to thank Christy Doran, Aravind Joshi, Anthony Kroch, Mark-Jan Nederhof, Marta Palmer, James Rogers and Anoop Sarkar for their help in this research."
      ]
    }
  ]
}
