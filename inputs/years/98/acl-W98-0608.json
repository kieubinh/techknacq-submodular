{
  "info": {
    "authors": [
      "Kees van Deemter",
      "Richard Power"
    ],
    "book": "Workshop on the Computational Treatment of Nominals",
    "id": "acl-W98-0608",
    "title": "Coreference in Knowledge Editing",
    "url": "https://aclweb.org/anthology/W98-0608",
    "year": 1998
  },
  "references": [
    "acl-P98-2173"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "This paper briefly outlines the WYSIWYM (What You See is What You Meant) approach to knowledge editing and focuses on the role of coreferring Noun Phrases in the feedback texts that are generated by a WYSIWYM system and which play a key role in this approach.",
        "The paper pays special attention to the operations that a user of a WYSIWYM system can perform on feedback texts that contain coreferring Noun Phrases and to how they can be supported."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": []
    },
    {
      "heading": "1.1 Editing knowledge by WYSIWYM",
      "text": [
        "WYSIWYM is a method of editing knowledge bases in which the user interacts with a feedback text generated by a natural language generation system (e.g. Power and Scott 1998).",
        "The idea of WYSIWYM editing is to provide an interface to a knowledge base that can be used easily by an author who is a domain expert but not necessarily an expert in knowledge representation.",
        "The feedback text serves two purposes: it shows the knowledge that has already been specified; and it shows the options for adding new knowledge.",
        "These options are marked by anchors.",
        "By clicking on an anchor, the user obtains a pop-up menu from which a semantic option can be selected.",
        "The acronym WYSIWYM stands for 'What You See Is What You Meant': a natural language text ('what you see') presents a knowledge base that the author has built by purely semantic decisions ('what you meant').",
        "This method was first implemented in DRAFTER-H (Power et al., 1998), a re-engineered version of DRAFTER (Paris et al., 1995) which is designed for use by the technical authors who produce software documentation.",
        "By interacting with the feedback text, the author defines a procedure for performing a task, e.g. the task of saving a document in a word processor.",
        "When a new knowledge base is created, DRAFTER-II assumes that its root will be some kind of procedure.",
        "A procedure instance is created, and assigned an identifier (for internal use only), e.g. prod.",
        "The definition of the concept procedure specifies that every procedure has two attributes: a goal, and a method.",
        "The goal must be some kind of action, and the method must be a list of actions.",
        "This information is conveyed to the author through a feedback text Achieve this goal by applying this method.",
        "with several special features.",
        "• Undefined attributes are shown through anchors marked by the use of boldface or italics.",
        "• A boldface anchor indicates that the attribute is obligatory: its value must be specified.",
        "An italicized anchor indicates that the attribute is optional.",
        "• All anchors are mouse-sensitive.",
        "By clicking on an anchor, the author obtains a pop-up menu listing the permissible values of the attribute; by selecting one of these options, the author updates the knowledge base.",
        "Although the anchors may be tackled in any order, we will assume that the author proceeds from left to right.",
        "Clicking on this goal yields a pop-up menu that lists all the types of actions that the system knows about: choose click save schedule",
        "(to save space, some options are omitted), from which the author selects 'save'.",
        "Although apparently selecting a word, the author is really selecting an option for editing the knowledge base.",
        "The program responds by creating a new instance, of type save, and adding it to the knowledge base as the value of the goal attribute on prod.",
        ": procedure (proc1) .",
        "goal (proc 1 , save 1) .",
        "save (savel) .",
        "From the updated knowledge base, the generator produces a new feedback text Save this data by applying this method.",
        "including an anchor representing the undefined actee attribute on the save1 instance.",
        "Note that this text has been completely regenerated.",
        "It was not produced from the previous text merely by replacing the anchor this goal by a longer string.",
        "By continuing to make choices at anchors, the author might expand the knowledge base in the following sequence:",
        "• Save the document by applying this method.",
        "• Save the document by performing this action (further actions).",
        "• Save the document by clicking on this object (further actions).",
        "• Save the document by clicking on the button with this label (further actions).",
        "• Save the document by clicking on the Save button (further actions).",
        "At this point the knowledge base is potentially complete (no boldface anchors remain), so an output text can be generated and incorporated into the software manual.",
        "To save the document, click on the Save button.",
        "To delete information, the author opens a pop-up menu on any span of the feedback text that presents a defined attribute.",
        "For instance, the span 'the document' presents the actee attribute on the instance savel.",
        "Clicking on this span in the feedback text, the author obtains the menu Cut Copy If 'Cut' is selected, the instance that is currently the value of the actee attribute is removed to a buffer, leaving the attribute undefined.",
        "The resulting feedback text introduces an anchor in place of 'the document'.",
        "Save this data by clicking on the Save button (further actions).",
        "When the buffer is full, the pop-up menus that open on anchors contain a 'Paste' option if the instance in the buffer is a suitable value for the relevant attribute."
      ]
    },
    {
      "heading": "1.2 Limitations of DRAFTER-II",
      "text": [
        "In the DRAFTER-H implementation of WYISYWM, the attribute value that is added at an anchor is always a new instance of the specified concept, never an existing instance.",
        "Suppose the author has developed the feedback text Save the document by entering the name of this object (further actions).",
        "while aiming at the output text To save the document, enter its name and click on the Save button.",
        "The current (incomplete) state of the knowledge base is procedure(proc1).",
        "goal(procl, save1).",
        "save(savel).",
        "actee(savel, docl).",
        "document(doc1).",
        "method(proc1, listl).",
        "list(list1).",
        "first(listl, enterl).",
        "enter(enter1).",
        "actee(enterl, namel).",
        "name (namel) .",
        "The author now expands the anchor this object, which marks the owner attribute on namel.",
        "This can be done in two ways: opening a pop-up menu on the anchor and choosing 'document', or choosing 'Copy' on the earlier phrase 'the document' and pasting the copied material on to the anchor.",
        "In either case, the",
        "current implementation creates a new instance doc2 of the concept document instead of using the existing instance doc 1.",
        "In other words, it adds the two assertions owner (namel, doc2) .",
        "document (doc2) .",
        "instead of the single assertion owner (name 1 , docl) .",
        "Our aim in this paper is to outline a way of overcoming this limitation, so that the author will be able to specify whether two similar descriptions are coreferential."
      ]
    },
    {
      "heading": "2 WYSIWYM ± indices",
      "text": [
        "How can a feedback text indicate coreference?",
        "One possibility is to let feedback texts make use of anaphoric Noun Phrases, such as 'it' or 'this document'.",
        "In this paper we will assume that although output texts, which are meant to be read by a user who is not a domain expert, are expressions of some natural language, feedback texts may sometimes include artificial elements if this is necessary to avoid ambiguity.",
        "We will explore how the feedback language may be extended by the use of referential indices: If two NPs have the same index, they must have the same referent, whereas if they have different indices, they may or may not have the same referent.",
        "Brackets can be added to disambiguate the scope of indices in complex nominals.",
        "For example, the new feedback language can contain such expressions as (the name of (the document)3)1 and (the date of (the document)3)2, where the indices imply that the documents in the two expressions are the same.",
        "In the remainder of this section, we will explore in what different ways an author may want to control the indices in the feedback text when she inserts a new instance into the knowledge base, or when she cuts or copies an instance from the knowledge base."
      ]
    },
    {
      "heading": "2.1 Which options for editing 2.1.1 Inserting",
      "text": [
        "Imagine the author wants to expand an anchor of the form 'this object', specifying that it is a document.",
        "Imagine, furthermore, that two other documents have already appeared in the feedback text, namely (document)i and (document)2.",
        "Then the newly introduced object may corefer with (document)i or with (document)2 or with neither.",
        "In order to avoid asking potentially superfluous questions, the system can first present the user with a menu containing the two options Existing object?",
        "New object?",
        "Only in case of the first choice will the system follow up with the menu (document)1?",
        "(document)2?",
        "In case of the second choice, the system will replace the anchor by some expression of the form (document), where i is a new index."
      ]
    },
    {
      "heading": "2.1.2 Cutting",
      "text": [
        "In the current version of DRAFTER, cutting is a conceptually simple operation that does not allow variations: an attribute value is replaced by its anchor.",
        "When coreference enters the picture, this is no longer the case.",
        "In particular, there are two questions that we have to address when an indexed NP is cut (as we will say by an obvious extension of usage of the word 'cut').",
        "Firstly, Does the author intend to cut this NP alone, or does she intend to cut all NPs with the same index as this NP?",
        "Secondly, if the author intends to cut all expressions with the same index, then Does the author intend the system to respect the indices?",
        "In other words, does she assume that the anchors that will result when the NP is deselected must all be filled by NPs that have the same index?",
        "Depending on how these questions are answered, three different variants of the Cut operation arise.",
        "Let ai be the NP on which the author has clicked.",
        "Then Cut-one only affects this occurrence of a. Cut-all affects all occurrences of ai, also severing all coreference links between their anchors.",
        "Cut-air affects all occurrences of ai, respecting all coreference links between their anchors.",
        "Consider the example in Section 1.2, adapted to the situation where doc 1 is the value of two",
        "owner (name 1 , doc 1) .",
        "To spell out the effect of the new operations, it will be convenient to use variables.",
        "If Cut-one is applied to the occurrence of docl in the owner attribute then the only effect on the content of the knowledge base is that the owner of name1 is undefined, which may be represented by a variable, say x.",
        "If, instead, Cut-all is applied to the same instance of docl, then both the owner of namel and the act ee of savel are undefined, which may be represented by using two different variables, say x and y.",
        "If, finally, Cut-alF is applied then, once more, both are undefined, but their values must be equal.",
        "This may be represented by using the same variable, say x, in both cases: act ee ( save 1 , x ) , owner (name 1 , x)."
      ]
    },
    {
      "heading": "2.1.3 Copying",
      "text": [
        "Like cutting, copying allows variations now that the knowledge base can use one and the same instance (e.g., doc 1) as the value of different attributes (e.g. act ee (savel , doc 1 ) and owner (name].",
        ", docl) ) ).",
        "There are at least two options.",
        "One option amounts to a faithful copy of an instance.",
        "This option can be implemented simply by letting a buffer point to the instance that is copied.",
        "The other option (called Replicate) duplicates the original feedback text, while renumbering all the indices in such a way that all the indices in the replica are new, respecting equalities between indices in the original.",
        "The second option arises when an author wants to reuse a part of the feedback text to refer to a new instance.",
        "Both editing operations are relatively straightforward to understand and implement."
      ]
    },
    {
      "heading": "2.2 Example",
      "text": [
        "Imagine an author wanting to create the procedure given in Section 2.1.2, starting out with the incomplete representation presented in Section 1.2, where it is not yet specified what namel is the name of.",
        "The content of the knowledge base can be reflected by the feedback text Save documenti by entering the name of this object (further actions), where i is an arbitrary number.",
        "Suppose the author opens a pop-up menu on the anchor 'this object' and chooses the option 'Existing object'.",
        "Note that, owing to some obvious type constraints, the only instance in the existing knowledge base that can take the place of 'this object' is the object clod.",
        "Consequently, there is no need for the system to ask further questions.",
        "A slightly more roundabout way in which the same potentially complete knowledge base can come about is as follows.",
        "Confronted with the just-presented menu, she decides to choose 'New object'.",
        "The system then adds the statements",
        "to the knowledge base, where doc-j is a constant that has not occurred before.",
        "The following feedback text may be generated: Save documenti by entering the name of documenti (further actions).",
        "Seeing her mistake, the author can then click on either `documenti' or 'document,' and select Cut.",
        "This will cause the NP in question to be replaced by the anchor 'this object', which brings the author back to a situation where she can decide that the two documents should corefer after all."
      ]
    },
    {
      "heading": "3 Some problems",
      "text": []
    },
    {
      "heading": "3.1 Limitations of the use of indices",
      "text": [
        "Indices can be used to indicate, for two text spans, whether or not they are assumed, by the author, to refer to the same thing.",
        "This implies a number of problems familiar from the problem of tagging text corpora (e.g. Hirschman et al.",
        "1997).",
        "Thus, it is unclear how indices should be used in relation to NPs occurring in intensional contexts.",
        "For example, it seems that the bracketed NPs in the following feedback text should",
        "receive different indices, even though their extension is equal: Make sure that (the date of the program) equals (the current date).",
        "Furthermore, it can be tempting to view an NP as anaphoric, even if it is impossible to name any one text span as its antecedent.",
        "For example, this happens when the role of an antecedent is played by a combination of several NPs (e.g., the NP 'a file' and the NP 'a pro-gram' can together form the antecedent of the plural pronoun 'they') or when the antecedent is implied, rather than directly mentioned, by the text (e.g., in the case of bridging anaphora).",
        "In these cases, it is difficult to see how indices can be used.",
        "Note, however, that the problematic phenomena mentioned here may not pose a serious problem in the context of the present work, since we are dealing with the construction of feedback texts (as opposed, for example, to the output texts generated by the system) which tend to make a simplified use of language.",
        "(cf.",
        "Section 2)."
      ]
    },
    {
      "heading": "3.2 Embedded NPs",
      "text": [
        "Suppose that the author has reached the following feedback text Save (the document)i by entering (the name of (the document)i)2 and entering (the name of (the document)i)2 (further actions).",
        "with the intention of changing the second occurrence of 'document' into 'directory'.",
        "To avoid removing both occurrences of 'the document' she chooses the Cut-one option rather than Cut-all.",
        "Save (the document)i by entering (the name of (the document)].",
        ")2 and entering (the name of this object)2 (further actions).",
        "Now she clicks on the anchor this object and chooses 'directory'.",
        "What effect should this operation have on the noun phrase in which the anchor is embedded?",
        "There are two possibilities.",
        "Either the index of the embedding NP should remain the same: or it should change, implying that the two names are distinct: (the name of (the directory)3)4 In this example, it seems clear that a name can belong only to one object, so that the latter result should be preferred.",
        "However, in some cases the index on the embedding phrase might plausibly remain the same after the embedded phrase has been changed.",
        "For instance, if we copy 'the menu containing the Save option', then cut 'the Save option' from the second occurrence of the phrase, replacing it by 'the Print option', there is no reason why the Save and Print options should not belong to the same menu.",
        "Thus to react appropriately to the Cut-one operation, the system may have to apply domain knowledge or seek guidance from the author."
      ]
    },
    {
      "heading": "4 Conclusion",
      "text": [
        "An experimental version of the ideas in this paper has been implemented in the DRAFTER-III system.",
        "DRAFTER-III offers the user the possibility of having coreference indicated either by indices, or by (colour-based) highlighting, or both.",
        "In future research, we plan to extend the coverage of the system (e.g., by allowing different kinds of anaphoric expressions) and to improve the transparency of the interface for the knowledge editor (i.e., for the author)."
      ]
    },
    {
      "heading": "5 References",
      "text": []
    }
  ]
}
