{
  "info": {
    "authors": [
      "Kenneth R. Beesley"
    ],
    "book": "Workshop on Computational Approaches to Semitic Languages",
    "id": "acl-W98-1007",
    "title": "Arabic Morphology Using Only Finite-State Operations",
    "url": "https://aclweb.org/anthology/W98-1007",
    "year": 1998
  },
  "references": [
    "acl-C88-1064",
    "acl-C92-1025",
    "acl-C94-1066",
    "acl-C96-2112",
    "acl-E87-1002",
    "acl-J94-3001",
    "acl-P95-1003",
    "acl-P96-1015",
    "acl-P98-1018"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "Finite-state morphology has been successful in the description and computational implementation of a wide variety of natural languages.",
        "However, the particular challenges of Arabic, and the limitations of some implementations of finite-state morphology, have led many researchers to believe that finite-state power was not sufficient to handle Arabic and other Semitic morphology.",
        "This paper illustrates how the morphotactics and the variation rules of Arabic have been described using only finite-state operations and how this approach has been implemented in a significant morphological analyzer/generator."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "In Arabic, as in other natural languages, the two challenges of morphological analysis are the description of 1) the morphotactics and 2) the variation rules.",
        "Morphotactics is the study of how morphemes combine together to make well-formed words.",
        "Variations are the discrepancies between the underlying or morphophonemic strings and their surface realization, which are either phonological or orthographical strings depending on the purpose of the grammar.",
        "The key insight and claim of the finite-state approach to morphology (Karttunen, 1991; Karttunen et al., 1992; Karttunen, 1994) is that both morphotactics and variation grammars can be written as regular expressions, which are compiled and implemented on computers as finite-state automata.",
        "Such grammars are interesting theoretically because they are highly constrained; and in practical computational linguistics for natural languages, finite-state automata are fast, usually compact in size, bidirectional, combinable using all valid finite-state operations, and consultable using language-independent lookup code.",
        "Finite-state approaches to morphology, including the readily available implementation known as Two-Level Morphology (Koskenniemi, 1983; Antworth, 1990), have been shown to work in significant projects for French, English, Spanish, Portuguese, Italian, Finnish, Turkish and a wide variety of other natural languages.",
        "But despite the high attractiveness of finite-state computing, many investigators have concluded that finite-state techniques are not adequate for describing Semitic root-and-pattern morphology.",
        "This paper will present the case that fully implemented finite-state morphology can be and has been used successfully for Arabic."
      ]
    },
    {
      "heading": "2 Regular Expressions",
      "text": [
        "When writing a finite-state morphological grammar, linguists state morphotactic and variation rules in the metalanguage of regular expressions or in higher-level languages that are convenient shorthand notations for complex regular expressions."
      ]
    },
    {
      "heading": "2.1 Regular Expressions, Regular Relations, and Finite-State Transducers",
      "text": [
        "A regular expression that contains an alphabet of one-level symbols defines a regular language and compiles into a finite-state machine (FSM) that accepts this regular language.",
        "A regular expression that contains an alphabet of paired symbols defines a regular relation (a relation between two regular languages) and compiles into a finite-state transducer (FST) that maps from every string of one language into strings of the other.",
        "If the necessary finite-state algorithms and compilers are available, components of the grammar, including various sublexicons",
        "and rules, can be compiled into separate transducers and then combined together using any operations that are mathematically valid.",
        "The Xerox implementation of finite-state morphology includes a complete range of fundamental algorithms (concatenation, union, intersection, complementation, etc.)",
        "plus higher-level shorthand languages such as lexc (Karttunen, 1993), twolc (Karttunen and Beesley, 1992) and Replace Rules (Karttunen, 1995; Karttunen and Kempe, 1995; Karttunen, 1996)."
      ]
    },
    {
      "heading": "2.2 Finite-State Operations",
      "text": [
        "When defining morphotactics or variations via regular expressions, the linguist has access to all the operations that are mathematically valid on regular languages and relations.",
        "The following is a brief outline of regular expressions in the Xerox notation: For each symbol s, the regular expression s denotes a regular language consisting of the single string \"s\".",
        "If A and B are regular languages, then the regular expressions in Figure 1 also denote regular languages.",
        "The crossproduct of A and B, denoted A .x.",
        "B, relates each string in A. the upper language, to every string of B, the lower language, and vice versa.",
        "A .x.",
        "B thus denotes a regular relation.",
        "Where u and 1 are symbols, u:1 is a notation equivalent to u .x.",
        "1.",
        "For formal reasons, relations are not quite as manipulable as simple languages; in particular, relations are closed under concatenation, union, and iteration, but not under intersection, subtraction or complementation.",
        "Relations are closed under composition, a somewhat more difficult operation to conceptualize.",
        "Let A, B and C denote regular languages; let X denote a regular relation between an upper-side language A and a lower-side language B; and let Y denote a regular relation between the upper-side language B and a lower-side language C. Then the composition of Y under X, denoted X .o.",
        "Y, denotes a regular relation Z that maps directly between languages A and C; the intermediate language B disappears in the process of composition.",
        "In defining natural-language morphotactics, union and concatenation are the basic operations required.",
        "Variation rules and long-distance-dependency filters are applied using composition.",
        "And we shall illustrate below how Arabic root-and-pattern interdigitation can be performed via intersection and composition."
      ]
    },
    {
      "heading": "3 Regular-Expression Grammars",
      "text": []
    },
    {
      "heading": "3.1 Concatenative Morphotactics",
      "text": [
        "Individual morphemes of natural language typically consist of one or more symbols, simply concatenated together.",
        "Thus the English morphemes s, ed anding represent the concatenations [s], [e d] and [i n g] respectively.",
        "Where 0 represents c (the zero-length string), the set of regular verb suffixes of English can be represented as the union [[s] I [e d] I [i n g] I 0].",
        "The set of verb stems taking these endings includes wreck, walk, and talk, which can also be formalized using concatenation and union: [[w r e c k] I [w a 1 k] I [t a 1 k]].",
        "The union of endings can then be concatenated on the end of the union of verb stems to form a larger expression that denotes a language that looks like a subset of English verbs: [[w r e c k] I [w a 1 k] I [t a 1 k]] Rs] I [e d] I [i n g] I 01.",
        "If the linguist defines the symbols +Verb, +3PS (for \"third personal singular\").",
        "+Past, +P rPart (for \"present participle\") and +Bare, the following expression denotes the relation that maps lower-side (surface) string like \"talks\" to the upper-side string \"talk+Verb+3PS\", and vice-versa.",
        "The preceding plus signs of these \"tag\" symbols are included simply to improve the human readability of the resulting strings; because the plus sign is normally a special Kleene Plus symbol in regular expressions, it is literalized in the examples below with a preceding percent sign.",
        "[[w:w r:r e:e c:c k:k] I [w:w a:a 1:1 k:k] [t:t a:a 1:1 k:k]] %+Verb:0 [[%-1-3PS:s] [%+Past:e 0:d] I [%-l-PrPart:i 0:n 0:g] I %-l-Bare:0] By convention in Xerox regular expressions denoting relations, the relation s:s can be written simply as s, as in the following: [[w r e c k] I [w a 1 k] I [t a 1 k]] %+Verb:0 [[%+3PS:s] [%+Past:e 0:d] I [%+PrPart:i 0:n 0:g] I %+Bare:0] The English-verb fragment shown here was carefully chosen to be simple.",
        "However, there are three classes of phenomena for which union and concatenation, by themselves, are generally inadequate or at least very inconvenient for describing all and only the strings that appear in a natural language:",
        "1.",
        "Discontiguous dependencies between morphemes in a word, 2.",
        "Non-concatenative morphotactic processes such as reduplication and Semitic interdig-it ation.",
        "and 3.",
        "Variations, typically assimilations, deletions and epentheses, that map between the abstract morphophonemic strings and their correct surface realizations.",
        "We continue with illustrations of how such phenomena can be handled in a finite-state grammar."
      ]
    },
    {
      "heading": "3.2 Discontiguous Dependencies",
      "text": [
        "To illustrate discontiguous dependencies, let us ignore for a second the internal structure of Arabic stems and postulate a set of noun stems including kantib (\"scribe\"), kitaab (\"book\"), and daaris (\"student\"), formalized as [[kaati b]I[kitaab]I[daaris]].",
        "The set of possible case endings includes the definite set u (nominative), a (accusative) and i (genitive) as well as the indefinite set un (nominative), an (accusative) and in (genitive).'",
        "The most straightforward way to proceed to describe the morphotactics of a fragment of Arabic nouns is to concatenate the possible case endings onto the noun stems.",
        "Informative multicharacter",
        "symbols, +Noun, +Def (for \"definite\"), +Indef (for \"indefinite\") and +Nom, +Acc and +Gen are defined for the upper-side language.",
        "The resulting relation includes pairs of strings like Upper: kaatib+Noun+Indef+Acc Lower: kaatiban Arabic nouns can also have a prefixed definite article, which we will represent as 1, and prefixed prepositions like bi.",
        "Both are optional, and if bi and 1 cooccur, then bi must come first.",
        "The most straightforward way to allow these prefixes is to concatenate them on the front of the regular expression as in Figure 2.",
        "Prep+ and Art+ are interpreted as multicharacter symbols, and the parentheses indicate optionality, as shown in Figure 1.",
        "However, Arabic words with a prefixed definite article / are in fact precluded from taking indefinite case suffixes.",
        "And words with a prefixed bi are compatible only with genitive case suffixes.",
        "The expression, as written in Figure 2, overgenerates, producing ill-formed string pairs like the following:"
      ]
    },
    {
      "heading": "Upper: Art+kaatib+Noun+Indef+Acc Lower: lkaatiban Upper: Prep+Art+kaatib+Noun+Def+Nom Lower: bilkaatibu",
      "text": [
        "It is possible to rewrite the regular expression in various ways to eliminate the overgeneration, but this is tedious and dangerous, requiring the making and subsequent parallel maintenance of multiple copies of the noun stems.",
        "In practice, it is much more convenient to let the core lexicon overgenerate and subsequently filter out the bad strings, either at compile time or at runtime.",
        "The most straightforward method is to remove the ill-formed strings via composition of finite-state filters.",
        "Starting with the overgenerating grammar of Figure 2, one set of illegal strings to be eliminated contains both the Art+ and the +Indef symbols on the upper side.",
        "We can characterize these illegal strings in a regular expression: ?",
        "* Art%+ ?",
        "* %+Indef ?",
        "* Other illegal strings contain Prep+ and then either +Nom or +Acc on the upper side.",
        "?",
        "* Prep%+ ?",
        "* [%+Nom I %+Acc] ?",
        "* The union of these two expressions characterizes the ill-formed upper-side strings to be eliminated.",
        "and the complement (notated \") of that union denotes the good strings.",
        "-[[?",
        "* Art%+ ?",
        "* %+Indef ?",
        "*] [?",
        "*"
      ]
    },
    {
      "heading": "Prep%+ ?* [%+Nom %+Acc] ?*]]",
      "text": [
        "When this \"filter\" expression is composed on top of the overgenerating lexicon transducer, only the legal strings are matched, and the illegal strings are in fact eliminated from the result, which is again a finite-state transducer.",
        "There are several variations of this method that produce the same effect (Beesley, 1998d), with different penalties in the size of the resulting transducer or in the performance; but in the end the constraint of discontiguous dependencies is easily accomplished using finite-state techniques."
      ]
    },
    {
      "heading": "3.3 Non-Concatenative Morphotactics",
      "text": [
        "While the morphotactic structure of many natural languages can be satisfactorily described using just concatenation, perhaps with subsequent filtering to constrain discontiguous dependencies, there are other languages with morphotactic phenomena that are notoriously non-concatenative, in particular reduplication, in-fixation and Semitic stem interdigitation (also known as intercalation).",
        "We will concentrate on Arabic here, arguing that roots, patterns and vocalizations can be formalized as regular expressions denoting regular languages, and that stems are formed by the intersection of these regular languages.",
        "For illustration, let us assume, following the influential McCarthy (1981) analysis fairly closely, that Arabic stems consist of a root like ktb, a consonant-vowel template such as CVCVC, and a vocalization like ui.",
        "Where McCarthy proposed an extension of autoseg-mental theory, placing each of these morphemes on a separate tier, and proposing \"association rules\" to combine and linearize them into the stern kutib, we propose to formalize the same data in purely finite-state terms.",
        "Let each root like ktb be formalized as [k t b]/?, i.e. as the language consisting of all strings containing k, t and b, in that order, ignoring the presence of any other symbols.",
        "(The notation [k t b]/?",
        "is equivalent to [?",
        "* k ?",
        "* t ?",
        "* b ?*].)",
        "Let C denote the union of all radical consonants, and let V denote [a I i I 4 the union of all vowels.",
        "CV templates are defined as concatenations of Cs and Vs.",
        "Using the Xerox xfst interface, these definitions can be computed as",
        "Vocalizations are also defined as regular expressions denoting regular languages, e.g.",
        "Perfect Active as [a*]/\\V, the set of all strings containing zero or more as, ignoring all other symbols except vowels.",
        "Other vocalizations are defined similarly:",
        "Given the definitions above, xfst will evaluate the expressions on the left below, indicating the intersection of a root, a pattern and a vocalization, and return a language consisting of the single string on the right, an interdigitated but still morphophonemic stem (Beesley, 1998a).",
        "gemination (or lengthening) of the previous consonant, and its realization is controlled by variation rules.",
        "Consonant spreading, as in Form IX and Form XII, and biliteral roots also use the morphophonemic X symbol (Beesley, 1998c).",
        "Form I vocalizations are in fact idiosyncratic for each root, and those for the Imperfect Active are more troublesome, but the same kind of formalism applies.2 If patterns are allowed to contain non-radical consonants, as in the analyses of Harris (1941) and Hudson (1986), then the definitions must be complicated slightly to prevent radicals from intersecting with the non-radical consonants (Beesley, 1998b).",
        "For a different formalization of this and other models proposed by McCarthy, but using techniques that go beyond finite-state power, see Kiraz (1996)."
      ]
    },
    {
      "heading": "3.4 Defining Variation Rules",
      "text": [
        "When underlying morphemes are concatenated and intersected together, the resulting strings 2 The Form I perfect active stem vowel for ktb happens to be /a/, so the general PerfectActive vocalization [a*JAV works in this case; other roots will require [a i]/ \\V or [a LIM \\ V. For the Imperfect Passive, the vocalization is [u \\ V for all forms.",
        "For the Imperfect Active, the least attractive case for vowel abstraction, the Form I voweling is [a*]/W, [a i]AV or [a u]/ \\V, depending on the root; the Form II through IV vow-ding is [u a* fl/ \\V; the Form V and VI voweling is [a*]/ \\ V; and the remaining forms VII to XV use [a* i]/W.",
        "If such generalization of vocalization appears tenuous, the alternative is simply to keep the vowels in the patterns, resulting in a two-way intersection of roots and patterns (Harris, 1941; Kataja and Koskenniemi, 1988).",
        "are often still very abstract or morphophonemic; there may be many phonological or orthographical variations between these morphophonemic strings and their ultimate surface pronunciation or spelling.",
        "For example, English nouns usually pluralize by taking an s suffix, as in book I books, but words like fly pluralize as flies rather than *flys.",
        "The variation between underlying y and the surface ie can be defined in terms of two-level rules or Replace Rules, which partially mimic traditional rewrite rules in their superficial syntax (Chomsky and Halle, 1968).",
        "Johnson (1972) demonstrated that rewrite-rules, as used by linguists, had only finite-state power and could be implemented as finite-state transducers; this important result, unfortunately overlooked at the time and later rediscovered by Kaplan and Kay (1981) (see also Kaplan and Kay (1994)) is a key mathematical foundation for finite-state morphology and phonology.",
        "The variation rules required for Arabic were relatively difficult to write, but they are not different in kind or power from the rules required for other languages.",
        "The most difficult challenges involve the so-called weak roots, those containing a w (3), y (a) or hamza (glottal stop) as one of the radicals.",
        "Via concatenation and intersection, the lexicon produces morphophonemic strings like katab+a, the Form I perfect active of ktb, with a masculine singular +a suffix; similarly for daras+a, based on drs.",
        "These particular strings are very surfacy already, being realized in their fully-voweled form as kataba, rendered as and darasa, rendered as _53).",
        "When trivial \"relaxation\" rules are composed on the bottom of the lexicon, allowing optional deletion of the short vowels, the system is also able to analyze the surface forms ktb (,..-S) and drs (0....p) and all the other partially voweled variations.",
        "With weak roots, however, such as the finally weak bny, the dictionary generates parallel morphophonemic forms like banay+a, but the surface form is properly spelled with a '-like 'alif maqsuura, j, rather than with a normal y with two dots (J.: is not a possible spelling for underlying ba-nay+a).",
        "This or",
        "thographical change reflects the fact that the word is pronounced /banal/ rather than /ba-naja/.",
        "The perfect passive buniy+a, however, is still spelled as bny (j.",
        "), reflecting a pronunciation of /bunija/, although in Egyptian orthographical practice the dots are usually dropped here as well, yielding Ls:.!",
        "again.",
        "With the feminine ending, banay-Fat, the underlying y disappears completely, both phonologically and orthographically, yielding surface bnt With a medially-weak root like qwl, the morphophonemic Form I perfect active qawul+a gets realized as qAI (LP), reflecting the pronunciation /qa:la/.",
        "When the suffix begins with a consonant, as in qawul-Fta, the surface spelling is qlt, reflecting the pronunciation /qulta/.",
        "An initially weak example like tal-wlid+u, based on root wld, yields Ai:, with the deletion of the initial radical w, while tu-Fwladd-u, with an initial tu+ prefix, yields .$4,7 with the w intact.",
        "Similarly for root w'd, but with hamza complications: ya-Fw'id-Fu yields while yu-Fw'ad+u yields 4.",
        "The rule writer must also handle a number of assimilations, as in the Form VIII of root 6kr, underlying 6takar+a, which is pronounced fliddakara/ and written accordingly, including diacritics for clarity, as A. Similary, for roots with an initial pharyngealized saad (up) or ciaad (4?)",
        "radical, such as drb, the underlying Form VIII is dtarab+a, emerging with the infixed Form VIII t assimilating to its pharyngealized version t in None of these phenomena is phonologically surprising; local assimilations and contextual instabilities in semiconsonants like /w/ and /y/ are garden-variety variations, elegantly handled with finite-state variation rules."
      ]
    },
    {
      "heading": "4 Practical Applications",
      "text": []
    },
    {
      "heading": "4.1 History of Computing Semitic Stems via Intersection",
      "text": [
        "Classic Two-Level (Koskenniemi, 1983; Karttunen, 1983; Antworth, 1990) and finite-state lexicons (Karttunen, 1993) build underlying strings via concatenation only, but this limitation is not characteristic of the overall theory but only of the computational implementations.",
        "Kataja and Koskenniemi (1988) were apparently the first to understand that concatenating languages were just a special case; they showed that by generalizing lexicography to allow regular expressions, Semitic (specifically Akkadian) roots and patterns could denote regular languages, and that stems could be computed as the intersection of these regular languages.3 This principle was borrowed in the ALP-NET prototype analyzer for Arabic morphology (Beesley, 1989; Beesley, 1991); but it used an implementation of Two-Level Morphology enhanced with a \"detouring\" mechanism that simulated the intersection of roots and patterns at runtime.",
        "This prototype grew into a large commercial system in 1989 and 1990 (Beesley et al., 1989; Beesley, 1990).",
        "In 1989, Lauri Karttunen (personal communication) also proposed and demonstrated in an Interlisp script the intersection of roots, patterns and vocalizations as an alternative to the finite-state solution of (Kay, 1987), which used a four-tape finite-state transducer transducer."
      ]
    },
    {
      "heading": "4.2 Current Xerox System",
      "text": [
        "The current Xerox morphological analyzer for Arabic is based on dictionaries licensed from ALPNET, but the rules and organization of the system have been extensively rewritten."
      ]
    },
    {
      "heading": "4.2.1 System Components",
      "text": [
        "The Arabic morphological analyzer starts out as a dictionary database containing entries for prefixes, suffixes, roots and patterns of Arabic.",
        "The database also includes morphotactic codings.",
        "Perl scripts extract the pertinent information from this database, reformatting it as lexc files, which are then compiled into a finite-state transducer that we label the \"core\" lexicon transducer.",
        "On top of the core FST, filters are composed to remove the strings that are ill-formed because of discontiguous dependencies.",
        "Finite-state rules that intersect roots and patterns are compiled into transducers and composed on the bottom of the core, leaving",
        "to optionally delete short vowels and other diacritics, allowing the system to analyze unvoweled, partially voweled, and fully-voweled orthographical variants of the 72,000,000 abstract words.",
        "New entries are added easily to the original lexical database.",
        "A full-scale version of the current system is available for testing on the Internet at http://www.xrce.xerox.com/research/m1tt/ arabic.",
        "A Java interface renders Arabic words in traditional Arabic script, both for input and output."
      ]
    },
    {
      "heading": "Variation Rules",
      "text": [
        "linearized lexical strings for the variation rules (also compiled into FSTs) to apply to, as shown in Figure 3.",
        "The result of the composition is a single \"common\" FST, with slightly enhanced fully-voweled strings in the lower language.",
        "For generation purposes, where the user probably wants to see only formally correct fully-voweled strings, the bottom level is trivially cleaned up by yet another layer of composed rules.",
        "For recognition purposes, the rules applied to the bottom side include [alilulol\"](->)0; which optionally maps the fatha (a), kasra (I), damma (u), sukuun (o) and shadda (\") to the empty string.",
        "The resulting \"analysis\" transducer recognizes fully-voweled, partially voweled, and the usual unvoweled spellings.",
        "Where diacritics are present in the input, the output is correspondingly less ambiguous."
      ]
    },
    {
      "heading": "4.2.2 System Status",
      "text": [
        "The current dictionaries contain 4930 roots, each one hand-coded to indicate the subset of patterns with which it legally combines (Buck-walter, 1990).",
        "Various combinations of prefixes and suffixes, concatenated to the intersected stems, and filtered by composition, yield over 72,000,000 abstract, fully-voweled words.",
        "Sixty-six finite-state variation rules map these abstract strings into fully-voweled orthographical strings, and additional rules are then applied"
      ]
    }
  ]
}
