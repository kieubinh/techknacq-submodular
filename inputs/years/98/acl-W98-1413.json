{
  "info": {
    "authors": [
      "Daniel Ansari",
      "Graeme Hirst"
    ],
    "book": "Workshop on Natural Language Generation EWNLG",
    "id": "acl-W98-1413",
    "title": "Generating Warning Instructions by Planning Accidents and Injuries",
    "url": "https://aclweb.org/anthology/W98-1413",
    "year": 1998
  },
  "references": [
    "acl-A92-1009",
    "acl-P89-1025",
    "acl-P92-1016",
    "acl-W93-0203",
    "acl-W94-0307"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "We present a system for the generation of natural language instructions, as are found in instruction manuals for household appliances, that is able to automatically generate safety warnings to the user at appropriate points.",
        "Situations in which accidents and injuries to the user can occur are considered at every step in the planning of the normal operation of the device, and these \"injury sub-plans\" are then used to instruct the user to avoid these situations."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "We present a system for the generation of natural language instructions, as are found in instruction manuals for household appliances, that is able to automatically generate safety warnings to the user at appropriate points.",
        "Situations in which accidents and injuries to the user can occur are considered at every step in the planning of the normal operation of the device, and these \"injury sub-plans\" are then used to instruct the user to avoid these situations.",
        "Thus, unlike other instruction generation systems, our system tells the user what not to do as well as what to do.",
        "We will show how knowledge about a device that is assumed to already exist as part of the engineering effort, together with adequate, domain-independent knowledge about the environment, can be used for this.",
        "We also put forth the notion that actions are performed on the materials that the device operates upon, that the states of these materials may change as a result of these actions, and that the goal of the system should be defined in terms of the final states of the materials.",
        "We take the stand that a complete natural language instruction generation system for a device",
        "• should have, at the top level, knowledge of the device (as suggested by Delin et al.",
        "(1993)).",
        "This is one facet of instruction generation that many NLG systems have largely ignored by instead incorporating the knowledge of the task at their top level, i.e., the basic content of the instructions is assumed to already exist and does not need to be planned for.",
        "In our approach, all the knowledge necessary for the planning stage of a system is contained (possibly in a more abstract form) in the knowledge of the artifact together with the world knowledge.",
        "The kinds of knowledge that should be sufficient for this planning are device knowledge (topological, kinematic, electrical, thermodynamic, and electronic) and world knowledge.",
        "The IDAS project of Reiter et al.",
        "(1992; 1995) served as a key motivation for this work.",
        "One of the primary goals of the IDAS project was to automatically generate technical documentation 'Address correspondence to the second author.",
        "from a domain knowledge base containing design information (such as that produced by an advanced computer-aided design tool) using NLG techniques.",
        "IDAS turned out to be successful in demonstrating the usefulness, from a cost and benefits perspective, of applying NLG technology to partially automate the generation of documentation.",
        "If work in qualitative process theory, using functiona-specifications such as those in e.g., (Iwasaki et al., 1993), can yield the device and world knowledge that are required for text planning, then the need for cost effectiveness would be met."
      ]
    },
    {
      "heading": "2 A situation calculus approach to the generation of instructions",
      "text": []
    },
    {
      "heading": "2.1 Overview",
      "text": [
        "In this section we shall present some of the planning knowledge for a toaster domain, in the form of axioms in the situation calculus2 (see (Reiter, 1991)).",
        "This planning knowledge formally characterizes the behaviour of the artifact, and it is used to produce a basic plan of actions that both the device and user take to accomplish a given goal.",
        "The axioms together with the goal are the input to our system.",
        "We will explain how the instructions are generated from the basic plan.",
        "This plan is then used to derive further plans for states to be avoided, and warning instructions about these situations.",
        "We shall use the term device – environment system to refer to the device, the user, and any objects or materials used by the device.",
        "We can conceptually divide the actions that are performed in the device – environment system into user actions and non-user actions, the latter of which are actions that are carried out either by the device on its components and the materials it uses, or by some other agent.",
        "Because the majority of non-user actions are actions performed by the device, we shall only consider device actions henceforth.",
        "Natural language instructions are directed to the user of a device, and usually they mainly describe the actions that are executed by the user.",
        "A device action may be carried out by a component of the device on another component; for example, the heating element of a toaster may carry out a heating action (i.e., a continuous, physical process) on the bread slot, which in turn may heat the inserted bread slice.",
        "Instead of using a qualitative or quantitative simulation system, such as the Device Modelling Environment (Iwasaki and Low, 1991), we have used device actions to discretely model the continuous processes, for simplicity.",
        "Table 1 shows the components of our toaster and the materials used for its operation.",
        "Table 2 shows the user actions, device actions, and fiuents.",
        "21n the situation calculus, the initial state is denoted by the constant So, and the result of performing an action a in situation s is represented by the term do(a,․).",
        "Certain properties of the world may change depending upon the situation.",
        "These are calledfluents, and they are denoted by predicate symbols which take a situation term as the last argument.",
        "Positive (negative) effect axioms describe the conditions under which performing a in situation s causes a fluent to become true (false) in do(a,․).",
        "Action precondition axioms describe the conditions under which a can be performed in S. We use these axiomatic forms in order to avoid the frame problem.",
        "Following Pinto (1994), we shall abbreviate terms of the form do(a„,(do(.",
        ",do(ai, s).",
        ".))",
        "as do((al , ad, s)."
      ]
    },
    {
      "heading": "2.2 Some axioms for the toaster system",
      "text": [
        "The following are some of the more important axioms for our toaster example (see Ansari (1995) for the complete set).",
        "Some of them are essentially domain-independent, whereas the others relate specifically to the appliance.",
        "Where free variables appear in formulas, they are assumed to be universally quantified from the outside.",
        "• an agent can touch an object if it is exposed; • the agent can get burned by touching something with a temperature of at least 70°C; and • the device can cause the bread slot to pop up its contents if the temperature of the bread slot reaches 200°C.",
        "• inserting x into y in state s results in y containing x in state do(a, s); • if it is possible for the agent to get burned (by the get _burned action), then the agent might be burned in the new state; and • if the device causes x to pop up in state s, then x becomes exposed in the next state.",
        "2.2.3 Negative effect axioms",
        "This axiom states that an action of the user pressing the ON lever causes anything in the bread slot to become unexposed; this happens because the object in the bread slot gets \"pushed down\"."
      ]
    },
    {
      "heading": "3 Generating instructions with warnings",
      "text": []
    },
    {
      "heading": "3.1 Deriving instruction plans from the axioms",
      "text": [
        "We wish to derive a sequence of actions (by the user and the device) that, when performed, cause a slice of bread to become toasted.",
        "Ideally, this sequence would begin with the act of the user inserting a slice of bread into the toaster and end with the act of the user removing the toasted bread from the toaster.",
        "The goal will be described in terms of the final state of the material (bread, in this case).",
        "Thus, the plan will describe a sequence of actions which cause the transformation of the material from its initial to its desired state.",
        "We could, as a reasonable approximation, model the state changes of the bread in terms of the temperature of the bread.",
        "Using temperature(x,t, s) as a fluent describing that object x has a temperature of t''C in states, we could define toast as a slice of bread that has reached a temperature of 200°C:",
        "Note that using this definition, toasted(bread_slice) holds for all states after do(a,․).",
        "Figure 1 shows the fluents that hold in the initial state.",
        "We can define the goal G to be the following:",
        "A plan derived by our system to cause G to become true is this: doWnsert(bread _slice, bread _slot), press(on-lever), raise _temp(bread _slice), raise _temp(bread _slice), raise _temp(bread _slice), raise_temp(bread_slice), pop _up, remove(bread _slice, bread_slot)], S0) (12) The raise iemp action is carried out four times, since each time it raises the temperature of something by 50°C.",
        "Note that we do not model the perception actions of the user watching for the bread slice to pop up.",
        "In our simple domain, we have avoided the need for these by assuming that the user knows when a salient observable change occurs in the system.",
        "In this case, the salient change is the popping up of the bread slice."
      ]
    },
    {
      "heading": "3.2 Deriving plans for warning instructions",
      "text": [
        "Now that we have seen how plans for basic instructions can be obtained, we can describe how warning instructions can be derived.",
        "In order to generate warning instructions, the system must be able to derive plans, using the available actions and fluents, in which the user can become harmed.",
        "There are many ways in which this can happen: by burning, electric shock, laceration, crushing, etc.",
        "We shall concentrate on examining the conditions under which burns to the user can occur.",
        "We can derive a plan in which the user gets burned by setting the goal G to be this:"
      ]
    }
  ]
}
