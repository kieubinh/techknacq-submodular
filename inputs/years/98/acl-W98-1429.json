{
  "info": {
    "authors": [
      "Evgeniy Gabrilovich",
      "Nissim Francez",
      "Shuly Wintner"
    ],
    "book": "Workshop on Natural Language Generation EWNLG",
    "id": "acl-W98-1429",
    "title": "Natural Language Generation With Abstract Machine",
    "url": "https://aclweb.org/anthology/W98-1429",
    "year": 1998
  },
  "references": [],
  "sections": [
    {
      "heading": "SYSTEM DEMONSTRATION NATURAL LANGUAGE GENERATION WITH ABSTRACT MACHINE",
      "text": []
    },
    {
      "heading": "Abstract'",
      "text": [
        "We present a system for Natural Language Generation based on an Abstract Machine approach.",
        "Our abstract machine operates on grammars encoded in a unification-based Typed Feature Structure formalism, and is capable of both generation and parsing.",
        "For efficient generation, grammars are first inverted to a suitable form, and then compiled into abstract machine instructions.",
        "A dual compiler translates the same input grammar into an abstract machine program for parsing.",
        "Both generation and parsing programs are executed under the same (chart-based) evaluation strategy.",
        "This results in an efficient, bidirectional (parsing/generation) system for Natural Language Processing.",
        "Moreover, the system possesses ample debugging features, and thus can serve as a user-friendly environment for bidirectional grammar design and development."
      ]
    },
    {
      "heading": "1 Overview",
      "text": [
        "An input for the generation' task is a logical form which represents a meaning, and a grammar to govern the generation process.",
        "The output consists of one or more phrases in the language of the grammar whose meaning is (up to logical equivalence) the given logical form.",
        "The system to be demonstrated applies an Abstract Machine (AM) approach for Natural Language Generation, within the framework of Typed Feature Structures (Carpenter, 1992b).",
        "Such a machine is an abstraction over an ordinary computer, lying somewhere between regular high-level languages and common hardware architectures.",
        "Programming an Abstract Machine has proved fruitful in previous research, reaching a peak as a highly efficient technique to build Prolog compilers (Ait-Kaci, 1991).",
        "AMALIA2 has two compilers of grammars into Abstract Machine instructions; the outputs of compilation are AM programs which perform either chart generation or chart parsing, both according to the given grammar.",
        "Both tasks use an auxiliary table (chart) to store intermediate processing results.",
        "AMALIA has a uniform core engine for bottom-up chart processing, which interprets the given (abstract machine) program, and realizes the generation or parsing task.",
        "In the case of generation it is the given semantic meaning whose components are consumed in the process.",
        "The only differences between the two processing directions are in the nature of chart items and interpretation of the final results.",
        "Thereby, AMALIA makes dual use of its chart and forms a complete bidirectional natural language system, which is considered an advantage in the literature (Strzalkowski, 1994).",
        "The system is capable of very efficient processing, since grammars are precompiled directly into abstract machine instructions, which are subsequently executed over and over.",
        "Logical forms specified as meanings by input grammars are given in a so-called predicate-argument structure3.",
        "Thus, meanings are built from basic units (feature structures), each having a predicate and (optionally) a number of arguments.",
        "Our approach also allows A-abstractions over predicate-argument constructs, as well as systematic encoding of second and higher-order functions.",
        "Grammars are usually designed in a form oriented towards the analysis of a string and not towards generation from a (usually nested) semantic form.",
        "In other words, rules reflect the phrase structure and not the predicate-argument structure.",
        "It is therefore useful to transform the grammar in order to enable systematic reflection of any given logical form in the productions.",
        "For this purpose, we apply to the input grammar an inversion procedure, based upon4 (Samuelsson, 1995), to render the rules with the nested predicate-argument structure, corresponding to that of input logical forms.",
        "The resultant \"inverted\" grammar is thus more suitable for performing the generation task.",
        "Once the grammar is inverted, the generation process can be directed by the input semantic form; elements of the input are consumed during generation just like words are consumed during parsing.",
        "Grammars must satisfy certain requirements in order for them to be invertible.",
        "However, the requirements are not overly restrictive and allow encoding of a variety of natural language gram mars.",
        "Grammar inversion is performed prior to compilation for generation.",
        "The given grammar is enhanced in a way that will ultimately enable to reconstruct the words spanned by the semantic forms.",
        "To achieve this aim, each rule constituent is extended by an additional special-purpose feature.",
        "The value of this feature for the rule's head is set to the Concatenation of its values in the body constituents, to reflect the original phrase structure of the rule.",
        "Figure 1 delineates an overview of AM-based generation.",
        "After the grammar is inverted, it is compiled into the abstract machine code.",
        "At run time, the given logical form is decomposed into meaning components, which initialize the AM chart, and then the generation program is invoked.",
        "If generation terminates, it yields a (possibly empty) set of feature structures; a grammar-independent post-processing routine analyzes these structures and retrieves the generated phrases per se.",
        "This outline only contains a brief description of software features and capabilities.",
        "For a theoretical background on using an abstract machine for Natural Language Parsing refer to (Wintner and Francez, 1995; Wintner, 1997).",
        "(Gabribivich, 1998) gives more details on Natural Language Generation with Abstract Machine.",
        "(Wintner, Gabrilovich, and Francez, 1997a) describes Ã„MALIA",
        "as a unified platform for parsing and generation, elaborating more on the way the two directions are integrated into a single system."
      ]
    },
    {
      "heading": "2 AMALIA functionality",
      "text": [
        "AMALIA operates on input grammars encoded in a subset of the ALE specification language (Carpenter, 1992a).",
        "In particular, AMALIA supports the same type hierarchies as ALE does, with exactly the same specification syntax.",
        "This means that the user can specify any bounded-complete partial order as the type hierarchy.",
        "In contrast to ALE, AMALIA allows appropriateness loops in the type hierarchy.",
        "On the other hand, AMALIA does not support type constraints and relational extensions.",
        ".AMALIA uses a subset of ALE'S syntax for describing totally well-typed, possibly cyclic, non-disjunctive feature structures.",
        "Set values, as in ALE, are not supported, but list values are.",
        "AMALIA does not respect the distinction between intensional and extensional types (Carpenter, 1992b, Chapter 8).",
        "Also, feature structures cannot incorporate inequality constraints.",
        "AMALIA supports macros in a similar way to ALE.",
        "The syntax is the same, and macros can have parameters or call other macros (though not recursively, of course).",
        "ALE'S special macros for lists are supported by AMALIA.",
        "Lexical rules are not supported in this version of AMALIA.",
        "AMALIA'S syntax for phrase structure rules is similar to ALE'S, with the exception of the cats> specification (permitting a list of categories in the body of a rule) which is not supported.",
        "AMALIA uses ALE'S syntax in describing lexical entries, and allows disjunctive lexical entries, separated by semicolons.",
        "AMALIA is implemented in ANSI-C, augmented by lex and yacc to implement the input acquisition module, and Tel/Tk to build the graphical user interface.",
        "The application is compatible with a variety of platforms, such as SUN and SILICON GRAPHICS workstations running UNIX operating system, as well as IBM PC running WIND0ws'95 and LIN UX.",
        "For a detailed description and a complete user's guide of AMALIA refer to (Wintner, Gabrilovich, and Francez, 1997b).",
        "There are two versions of AMALIA: an interactive, user-friendly program with a graphical user interface, and a non-interactive but more efficient version for batch processing.",
        "The former program provides extensive debugging capabilities, and is ideally suited for developing reversible grammars.",
        "Figure 2 presents a sample snapshot of the program screen.",
        "In the case of generation, the \"Input string\" field specifies the name of the query file, which contains (an ALE description of) a feature structure representing the input semantic form.",
        "In this example, the query file encodes the logical form Vx(man(x) dream(x)); the feature structure for this query is shown in the figure over the main program screen.",
        "The \"Messages\" window displays the phrases generated (if any).",
        "The feature structures that encode these phrases are also displayed graphically, in separate windows (not shown in the figure).",
        "In the case of parsing, the \"Input string\" field contains the word string to be parsed, and the program eventually displays feature structures assigned to this string by the parser (if any)."
      ]
    }
  ]
}
