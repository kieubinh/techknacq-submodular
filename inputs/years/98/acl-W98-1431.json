{
  "info": {
    "authors": [
      "Frederic Meunier",
      "Laurence Danlos"
    ],
    "book": "Workshop on Natural Language Generation EWNLG",
    "id": "acl-W98-1431",
    "title": "FLAUBERT: An User Friendly System for Multilingual Text Generation",
    "url": "https://aclweb.org/anthology/W98-1431",
    "year": 1998
  },
  "references": [
    "acl-C96-1034",
    "acl-J94-1004",
    "acl-W98-0308"
  ],
  "sections": [
    {
      "heading": "SYSTEM DEMONSTRATION FLAUBERT: AN USER FRIENDLY SYSTEM FOR MULTILINGUAL TEXT GENERATION",
      "text": [
        "FREDERIC MEUNIER LAURENCE DANLOS meunier@linguist.jussieuk danlos@linguist.jussieu.fr TALANA UFR Linguistique Case 7003-2, Place Jussieu 75251 Paris France"
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "FLAUBERT is an engine for text generation.",
        "Its first applications has been for instructional texts, both in French and in English, in software and aeronautics domains.",
        "It is an implementation of G-TAG, a - formalism for generation inspired from TAG ([Danlos & Meunier 96], [Meunier 97]).",
        "This formalism is a lexicalized text generation system ([Danlos 98a], [Danlos 98b]).",
        "All linguistic data are outside of the engine code program.",
        "They are maintained directly by linguists under a simple text editor.",
        "The syntactic TAG grammar we use for French is that written by ([Abeille 91]).",
        "Moreover, the French families of elementary trees are automatically generated thanks to the hierarchical representation of LTAGS ([Candito 96]).",
        "The TAG grammar we use for English is home made.",
        "This engine runs on Sun Solaris with 32 Mo RAM (generator and interface), and is written in Ada 95 (generator) and C (interface).",
        "It is compiled by the GNU compilers, and uses GNU scripts (bash, perl, sed, awk)."
      ]
    },
    {
      "heading": "2 Description",
      "text": [
        "As in DRAFTER ([Paris et al.",
        "95]), FLAUBERT takes as input a conceptual representation provided by the user who fills a questionnaire through an interface that proposes cascading menus based on a domain model (see below).",
        "The emphasis is put on linguistic issues such as lexical choices (including choices of connectives), parallelism issues, stylistic issues (e.g. length and content of clauses and sentences), etc.",
        "FLAUBERT uses three databases: A domain model describing an ontology of concepts in a typed feature formalism.",
        "In a standard way, the concepts include objects, actions, states and relations between them;",
        "• A set of lexical data bases associated with concepts; the lexical database for a given concept describes its semantico-lexical realizations (lexical heads + argument structures) accompanied with tests of applicability for right semantics and well formdness; • A TAG grammar whose syntactic informations allow a derived tree to be computed from a derivation tree (see the data flow below)."
      ]
    },
    {
      "heading": "3 Data flow",
      "text": [
        "The data flow of FLAUBERT is given in Figure 1.",
        "The system is sequential:",
        "• compiling the input data; • building a lexicalized tree structure called a \"g-derivation tree\"; • building a derived tree;",
        "• post-processing.",
        "The first step deals with concepts of the domain and their instances provided by the user.",
        "It leads to a conceptual representation.",
        "Afterwards, the system search in the lexical data bases to make lexical choices and builds a g-derivation tree.",
        "During this step, it uses also other linguistic resources (lexical entry as well as syntactic functions) to optimize lexical choices (parallelism, aggregation, etc.).",
        "Next the system builds a derived tree (syntactic representation), using standard algorithms ([Schabes & Shieber 94]) and an existing TAG grammar designed for syntactic analysis.",
        "Finally, the text is post-processed (flexion, word re-ordering, typographic considerations, etc.",
        ")."
      ]
    },
    {
      "heading": "3.1 User interface",
      "text": [
        "Since the user may encounter difficulties to give input to FLAUBERT, we have developed a friendly user interface which proposes him/her to instanciate concepts with cascading menus as it is shown in Figure 2.",
        "This interface is under X, and can be displayed on most X servers.",
        "It invokes the generator in a Xterrn.",
        "which is automatically opened."
      ]
    },
    {
      "heading": "3.2 Conceptual representation",
      "text": [
        "Below an example of conceptual representation for an instructional text (in software application domain):"
      ]
    },
    {
      "heading": "3.3 Semantic representation",
      "text": [
        "From EO, the system computes for French the g-derivation tree shown in Figure 3.",
        "In this tree, each node written in bold (possibly accompanied with a [T Feature], e.g. [T Reduc]) points to a TAG lexicalized elementary tree, except newS, a special tree which adds a new sentence to a text."
      ]
    },
    {
      "heading": "3.4 Syntactic representation",
      "text": [
        "From the g-derivation tree in Figure 3 and with a French TAG grammar, the derived tree schematically resumed in Figure 4 is composed."
      ]
    },
    {
      "heading": "3.5 French and English Texts",
      "text": [
        "French: Pour crier un identificateur d'utilisateur, ouvrez la fenetre \"User ID\" avant de cliquer sur le bouton \"Add...\".",
        "La fenetre \"User name\" s'ouvre.",
        "English: In order to create an user ID, open the \"User ID\" window.",
        "Afterwards, click on the \"Add...\" button.",
        "The \"User name\" window is opened."
      ]
    }
  ]
}
