{
  "info": {
    "authors": [
      "V. Michele Abrusci",
      "Jacqueline Vauzeilles",
      "Christophe Fouquere"
    ],
    "book": "Computational Linguistics",
    "id": "acl-J99-2003",
    "title": "Tree Adjoining Grammars in a Fragment of the Lambek Calculus",
    "url": "https://aclweb.org/anthology/J99-2003",
    "year": 1999
  },
  "references": [
    "acl-J92-4004",
    "acl-J93-4002",
    "acl-P85-1011"
  ],
  "sections": [
    {
      "text": [
        "This paper presents a logical formalization of Tree Adjoining Grammar (TAG).",
        "TAG deals with lexical ized trees and two operations are available: substitution and adjunction.",
        "Adjunction is generally presented as an insertion of one tree inside another, surrounding the subtree at the adjunction node.",
        "This seems to contradict standard logical ability.",
        "We prove that some logical formalisms, namely a fragment of the Lambek calculus, can handle adjunction.",
        "We represent objects and operations of the TAG formalism in four steps: first trees (initial or derived) and the way they are constituted, then the operations (substitution and adjunction), and finally the elementary trees, i.e., the grammar.",
        "Trees (initial or derived) are obtained as the closure of the calculus under two rules that mimic the grammatical ones.",
        "We then prove the equivalence between the language generated by a TAG grammar and the closure under substitution and adjunction of its logical representation.",
        "Besides this nice property, we relate parse trees to logical proofs, and to their geometric representation: proofnets.",
        "We briefly present them and give examples of parse trees as proofnets.",
        "This process can be interpreted as an assembling of blocks (proofnets corresponding to elementary trees of the grammar)."
      ]
    },
    {
      "heading": "1. Introduction",
      "text": [
        "This paper presents a logical formalization of Tree Adjoining Grammar (TAG) (Joshi, Levy and Takahashi 1975).",
        "TAG deals with lexicalized trees and two operations are available: substitution and adjunction.",
        "A set of (elementary) trees is associated to each lexical item.",
        "TAG is a tree-rewriting system: the derivation process consists in applying operations to trees in order to obtain a (derived) tree whose sequence of leaves is a sentence.",
        "Adjunction increases the expressive power of the formalism in such a way that noncontext-free languages can be represented although the parse process is done in polynomial time.",
        "Adjunction is generally presented as an insertion of one tree inside another, surrounding the subtree at the adjunction node.",
        "This seems to contradict standard logic, but we show (in Section 4) that some logical formalisms, namely a fragment of the Lambek calculus (LC, first introduced by Lambek [1958]), can handle adjunction.",
        "We represent objects and operations of the TAG formalism in four steps: first trees (initial or derived) and the way they are constituted, then the operations (substitution and adjunction), and finally the elementary trees, i.e., the grammar.",
        "Labels occurring",
        "in the grammar constitute the set of propositional variables we need.",
        "The sequent calculus is a restriction of the standard sequent calculus for LC: there are identity axioms (A I A) and rules for introducing connectives (0 at left-hand side, 0 at right-hand side).",
        "In LC, / is usually used for and • for 0.",
        "We use this notation throughout the paper to relate our formalization to noncommutative linear logic.",
        "0- is the left implication, 0 is a noncommutative \"and\" connective.",
        "We prove that this restricted calculus is closed under two rules that mimic the grammatical operations.",
        "Trees (initial or derived) are then obtained as the closure of the calculus under these two rules.",
        "In fact, trees are represented as (provable) sequents in an almost classical way.",
        "The right-hand side is the variable labeling the mother node of the tree.",
        "The left-hand side is a sequence of formulas of the following kinds: A for some leaf A of the tree, A o B1 ®... B, where A is the label of some internal node and B, are the labels of its daughters, A o A whenever A is a node where an adjunction can take place.",
        "This latter kind of formula can be grammatically interpreted as if such an A was split up into two nodes with the same label, linked by some \"soft\" relation.",
        "The set of elementary trees of a TAG grammar gi is then represented as a subset M of the sequents in the closure of the calculus under the two previous rules.",
        "We then prove the equivalence between the language generated in TAG by such a grammar gi and the closure under substitution and adjunction of the logical representation M. Note that our interpretation of adjunction is very close to the use of quasi trees described in Vijay-Shanker, (1992).",
        "Besides this equivalence property, we relate parse trees to logical proofs, and to their geometric representation, proofnets.",
        "We briefly present proofnets, and the correspondence between proofs and proofnets, and give examples of parse trees viewed as proofnets.",
        "This enables a new point of view on the parse process.",
        "This process can be interpreted as an assembling of blocks (proofnets corresponding to elementary trees of the grammar), and also as a circulation of information through links relating nodes of the proofnets.",
        "The remainder of the paper is organized in four parts.",
        "Section 2 describes the TAG formalism.",
        "We recall the terminology and show how substitution and adjunction operate on trees.",
        "Section 3 gives a survey of Lambek calculus viewed as a fragment of a noncommutative linear logic.",
        "We propose in Section 4 a logical formulation of TAG in a fragment of LC, and prove the correspondence between the two.",
        "Section 5 is devoted to the representation of proofs as proofnets; in this final section, we also study implications of this point of view.",
        "The proofs of propositions and theorems given in Section 4 are delayed to the appendix for the sake of clarity."
      ]
    },
    {
      "heading": "2. Tree Adjoining Grammars",
      "text": [
        "The Tree Adjoining Grammar formalism is a tree-generating formalism introduced in Joshi, Levy, and Takahashi (1975), linguistically motivated (see, for example, Abeille et al.",
        "[1990] and Kroch and Joshi [1985]), and with formal properties studied in Vijay-Shanker and Joshi (1985) and Vijay-Shanker and Weir (1994a, 1994b).",
        "A TAG is defined by two finite sets of trees composed by means of the substitution and adjunction operations.'"
      ]
    },
    {
      "heading": "Definition",
      "text": [
        "A TAG G is a 5-tuple (VN, VT, S. I, A) where",
        "• VN is a finite set of nonterminal symbols, • VT is a finite set of terminal symbols, • S is a distinguished nonterminal symbol, the start symbol, • I is a set of initial trees, • A is a set of auxiliary trees.",
        "An elementary tree is either an initial tree or an auxiliary tree.",
        "Initial as well as auxiliary trees are trees with at least one leaf labeled by a terminal node (the grammar is a so-called lexicalized one).",
        "An auxiliary tree must furthermore have a leaf (the foot node, marked with a star *) with the same label as the root node.",
        "Each nonterminal node is marked as adjoinable or nonadjoinable (in this case, the node is marked NA).",
        "Each internal node must obviously be labeled by a nonterminal node.2 A derived tree is either an initial tree or a tree obtained from derived trees by means of the two available operations.",
        "We add two constraints on TAG grammars: a node X cannot have a unique daughter labeled X, i.e., cannot be part of a tree.",
        "This condition is in no way an important X constraint, as a grammar may always be transformed to conform to the constraint by substituting a unique node X for the partial tree.",
        "However, our logical representation makes use of a trick based on such trees: we replace nodes marked adjoinable by such partial trees (there is no mark at all in our logical representation).",
        "We also suppose that the type of each tree is unambiguous: an initial tree has no leaf with the same label as the root node, an auxiliary tree has only one leaf with the same label as the root node.",
        "To conform with the literature, we will use a to refer to an initial tree, p to refer to an auxiliary tree, and y to refer to some derived tree.",
        "Examples of initial and auxiliary trees are given in Figure 1.",
        "Two TAGs are defined: G1 =--- ({S}, {a, b, c, d, e}, S. fall, Oil) (c is the empty word) and G2 =----- ({S, VP, NP, N}, {the, man, walks}, S. {a2, a3, 0E4}, 0).",
        "The substitution operation is defined as usual.",
        "A nonterminal leaf of a tree may be expanded with a tree whose root node has the same label.",
        "We follow a conventional notation: leaves that accept substitution are marked with a down arrow i.",
        "This is not to be interpreted as a restriction on substitution, but only as a visual indication of what remains to be substituted to get a complete sentence.",
        "The adjunction operation is a little bit more complicated.",
        "It supposes a derived tree with a nonterminal node, say X, possibly internal and not marked NA, and an auxiliary tree with root node X.",
        "The operation consists in:",
        "• excising the subtree with root labeled X in the derived tree, • inserting the auxiliary tree at node labeled X in the derived tree,",
        "• finally, inserting the excised subtree at the foot node (hence labeled X and marked with a star *) in the auxiliary tree.",
        "Examples of these operations are given in Figure 2.",
        "To clearly show the adjunction operation, the links of the adjoined tree ,3i are represented by dashed lines in the derived trees 1,3 and -y4.",
        "Obviously, there is only one kind of link.",
        "We write Yi G 72 when 72 is the result of an adjunction or a substitution of an elementary tree of a TAG G on the derived tree 111; is the reflexive, transitive closure of The set {-y/3a E G and a -y} is represented by T(G).",
        "The language L(G) generated by a TAG G is the set of strings, i.e., sequences of leaves of trees in T(G) when the leaves of these trees are only labeled with terminal nodes, and whose root is the start symbol.",
        "Hence, L(G1) = {anbncndn /n > 0} and L(G2) = {the man walks}."
      ]
    },
    {
      "heading": "3. Lambek Calculus and Noncommutative Linear Logic",
      "text": [
        "Lambek calculus will be sufficient to formalize TAG (see the next section).",
        "In Figures 4, 5, and 6, we give three examples of proofs to show how the sequen.t calculus can be used.",
        "The first one (Figure 4) is a straightforward use of a Lambek-style parsing, given the two implications and a set of proper axioms corresponding to the words.",
        "The two other proofs do not use proper axioms at all: rules labeled lex are provable sequents; as these sequents are obviously provable we omit their proof tree.",
        "The second proof (Figure 5) is in the same spirit as the first.",
        "However, for this second proof, descriptions of lexical items are included in the sequents.",
        "At the same time, it can easily be compared to the third proof: in the second proof, the structural information is located at the head of each structure as one formula; in the third proof, one formula represents a syntactic tree of level 1.",
        "The third proof (Figure 6) interprets the Lambek grammar in a derivation style, we only need one implication a – and the connective times 0.",
        "The proofs use cuts: they can be withdrawn using the cut elimination theorem, but we think the cuts help in understanding the process.",
        "The following sections include other examples and emphasize the usefulness of noncommutative linear logic in the linguistic domain.",
        "A natural way to extend Lambek calculus consists in embedding it in a classical system, in the sense that the connectives \"and\" and \"or\" are dual.",
        "Indeed, LC is an \"intuitionistic\" system as there can be only one conclusion in the sequents, this is not",
        "the case with noncommutative linear logic.",
        "Allowing multiple conclusions may give valuable benefits from a linguistic point of view, but we will only consider in this paper the geometrical representation available for such a system, i.e., proofnets.",
        "In the appendix, we give a brief description of linear logic, and the relations between classical, linear, and noncommutative linear logics.",
        "We hope this will help readers to understand the overall framework."
      ]
    },
    {
      "heading": "4. The Calculus A (A Fragment of LC)",
      "text": [
        "The formalization of TAG in LC relies mainly on a logical presentation of the two operations substitution and adjunction, together with a correspondence between proofs and trees.",
        "As already shown in the previous section, the substitution operation is nothing but the application of the cut rule restricted to atomic formulas, which we call the atomic cut rule.",
        "Interpreting the adjunction operation is really the main difficulty.",
        "The adjunction results from two atomic cut rules between the sequent corresponding to the adjunction tree and two suitable sequents corresponding to two subparts of the",
        "(cuts wrt the proper axioms)",
        "Lexicon and proof of John gives Mary a book: (Lambek-style) with proper axioms.",
        "Figure 5"
      ]
    },
    {
      "heading": "Proof of John gives Mary a book: (Lambek-style) two implications.",
      "text": [
        "tree where adjunction is done.",
        "Consider, for example, the following TAG grammar:"
      ]
    },
    {
      "heading": "Proof of John gives Mary a book: one implication and times.",
      "text": [
        "This set of trees may be viewed as a subset of the closure 7-(g2) under substitution (possibly with the declaration of adjunction nodes) of the following set of trees of level 1:",
        "Note that the result of the adjunction of the second tree of on itself is exactly the result of substitutions on trees of g2.",
        "However it is obvious that trees resulting from substitution operations on g2 do not always correspond to results of adjunction operations on We logically represent the set of trees 7--(g2) as (the set of provable theorems of) a calculus 4(c2): the formulas are built with the alphabet fe,a,b,c,d,S1 and the set of connectives {0, 0-}, the sequent calculus consists of the axioms s s and the rules (in both axioms and rules, s is a propositional letter):",
        "The introduction of a left implication (o-) corresponds to the building of a partial tree.",
        "Such introductions are then restricted either to the formalization of the trees of the grammar (the first three rules correspond exactly to the trees of g2), or to the formalization of adjunction nodes (the formula s 0 s \"marks\" s as being an adjunction node, i.e., the adjunction rule may be applied only on this kind of node as it will be clear below).",
        "The grammar can then be logically represented as a subset M(g) of the set of provable sequents of the calculus A(g2):",
        "In AB-grammars (Bar-Hillel 1953), only one implication is used without any \"and\" connective.",
        "The grammar would be represented in AB-grammars as two provable sequents (note that \"daughters of a node\" are explicitly ordered):",
        "We will prove later that, besides the cut rule, there exists another derived rule for the calculus A(g2) (and in fact for each calculus of this kind) mimicking the adjunction operation.",
        "Reducing the calculus, then, to a closure of the substitution and adjunction",
        "Summary of the logical interpretation of the TAG formalism.",
        "rules on M(g), we get exactly the logical representations of the set of trees under the TAG grammar G. The adjunction rule must be logically justified: there must be only one way to combine the pieces (i.e., provable sequents corresponding to trees of level 1), given the substitution node, such that the order of the elements is as requested.",
        "To prove this, we show that for a suitable fragment of LC there is a unique way to decompose a sequent F, a o – A, A I B in two sequents r, a, A2 I B and A1 H A, where A = Ai, L. In this section, we clarify the calculus A used to interpret TAG: it includes a cut rule and an adjunction rule that mimic the grammatical operations.",
        "As pointed out previously, these two rules are correct with respect to logic.",
        "We give the basic properties satisfied by this calculus A.",
        "In order to represent TAG in LC, we first construct the set G of subtrees of depth 1 of trees appearing in a TAG grammar G'.",
        "The TAG grammar g' is then a subset of the closure T(G) of the set g under substitution (indicated by subst) and the declaration of nodes where adjunction is not available (indicated by NA).",
        "The interpretation of elements of G as provable sequents of A is straightforward.",
        "This leads to a calculus A(G) where the operations are restricted with respect to g. The TAG grammar G' is then in correspondence with a subset m(gi) of A(G) and we prove the equivalence between the language cug') generated by G' and the set of sequents CL(M(G')) obtained by closure on M(G') by the cut and adjunction rules (we use M instead of M(G') whenever there is no ambiguity).",
        "Proofs of propositions are delayed to the appendix.",
        "The various components of our approach are summarized in Figure 7.",
        "Consider the following fragment A of LC:"
      ]
    },
    {
      "heading": "Definition The Calculus A",
      "text": [
        "• Alphabet of A: propositional letters a, b, .",
        ".",
        "., connectives 0, o – .",
        "• Formulas: usual definition.",
        "A is a simple 0-formula iff A is a",
        "propositional letter or A is a formula b1 0 ... ® bn where b1, ... ,b, are propositional letters.",
        "B is a o--formula iff B = a o – A where a is a propositional letter and A is a simple 0-formula.",
        "• Sequents: F h A, where r is a finite sequence of formulas and A is a formula.",
        "• Sequent calculus: – Axiom: a a – Rules: r I A AHB 1 A c, F2 B F, - A 013 (0) C 0 A, I', r2 H B (°-)",
        "In the following, we only consider sequents such that formulas in the left side are either propositional letters, or 0 – formulas.",
        "So, in the rule introducing 0-, C stands for a propositional letter.",
        "As we have only one propositional letter before 0-, we model trees: C is the (unique) mother and the 0-formula A is the sequence of its daughters.",
        "Proposition Main properties of calculus A (proofs in the appendix)",
        "1.",
        "If I' I A 0 B is provable in A, then • A and B are simple 0-formulas; • there is a unique pair (r1, r2) s.t.",
        "r = ri, r2 and both the sequents F1 H A and F2 B are provable in A.",
        "2.",
        "If P, a o A, A H B is provable in A, then • A and B are simple 0-formulas; • there is a unique pair (Ai.",
        "A2) s.t.",
        "A = Ai, A2 and both the sequents A and r, a, A2 B are provable in A.",
        "Such a pair (A1, A2) will be called \"the splitting pair in r, a o A, A H B for A.\"",
        "Note that this pair can be computed easily: the first element Ai of the splitting pair must satisfy a counting condition on each propositional letter occurring in it (see the appendix).",
        "3.",
        "The calculus A is closed under the atomic cut rule (which we also call the substitution rule) Note that A1 and A2 are uniquely defined from the premises, so the previous deduction is really a logical rule."
      ]
    },
    {
      "heading": "Definition The Calculus A(g)",
      "text": [
        "Let g be a family of labeled trees, of depth 1, not of the form f. Let T(g) be h a Ai, a, A2 I A At, r, A2 A (cut) i.e., if the sequents F H a and Ai, a, A2 h A are provable in A, then the sequent A1,1', A2 h A is also provable in A.",
        "4.",
        "The calculus A is closed under the adjoining rule Pi, a, F2 a A, a o a, A H b (adj) ri, Ai, r2, A2 b where (A1, A2) is the splitting pair of A in A, a 0 a, A H b.",
        "the closure of g under the rules:",
        "• substitution with or without the declaration of a new possibly internal point on which the adjoining operation may be performed, • adjoining operation.",
        "A(g) is the calculus obtained from A as follows: • propositional letters are exactly all the labels of the trees in g, • the rule (0–) is restricted as follows:",
        "where A, B are simple 0-formulas of the language of A(g), a is a propositional letter of the language of A(g) and one of the following cases occurs:",
        "The following propositions state the correspondence between sequents and trees.",
        "The first two provide a precise translation between the two notions.",
        "Basically, a sequent F 1 – a (in the previous language) is the logical equivalent of a tree with root a, and there is exactly one formula in r for each leaf, for each subtree (of depth 1), for each adjunction node, and nothing else.",
        "Seq() (respectively, Tree()) associates a sequent (respectively, a tree) to each tree (respectively, each sequent), and we prove the two are converse.",
        "The last three propositions are properties concerning the logical counterpart of a TAG grammar.",
        "The last one is in fact the most important: the closure under (logical) adjunction and substitution of the set of sequents corresponding to a set of elementary trees is exactly the set of sequents corresponding to the closure under (grammatical) adjunction and substitution of this set of elementary trees.",
        "In other words, the logical calculus (the restricted logical calculus we defined above) and the grammatical calculus (the TAG calculus) coincide."
      ]
    },
    {
      "heading": "Proposition Main properties of calculus A(g)",
      "text": [
        "(proofs in the appendix) Properties 1-4 of A are also properties of A(g).",
        "Moreover the following properties hold for A(C):",
        "• To T E 7-(g), we associate a sequent Seq(T) of A(g) s.t.",
        " – if a is the root of T, and the terminal points of T (ordered from left to right) are al, ... ,am, then Seq(T) is r H a",
        "where the sequence of all the propositional variables occurring in is ai, ,a,, and there is a formula c 0 c in F iff c is a possibly internal point of T on which the adjoining operation may be performed;",
        "- Seq(T) is provable in A(g).",
        "• To every provable sequent F H A in A(g), we associate Tree(F H A) s.t.",
        "- if A is a propositional letter, then Tree(F I A) E T(g) where the",
        "root is A, the terminal points (from left to right) are exactly all the propositional letters occurring in F and in the same order in which they occur in F, and the possibly internal points on which the adjoining operation may be performed are exactly all the propositional letters c s.t.",
        "c o – c occurs in F;",
        "- if A is bi ... b„, and so F = Fi, Fn with the sequents F, b, provable in A(g) for every 1 <i < n, then Tree(F I A) is a sequence T1, ... ,Tn of trees E s.t.",
        "T, Tree(Fi H b,).",
        "• If F H a is provable in A(g), then Seq(Tree(F H a)) = F H a.",
        "If T is a tree of g, then Tree(Seq(T))= T. • Let M be a set of provable sequents in A(g).",
        "Define CL(M) as follows: - MCCL(M) – (closure under atomic cut rule) if FhaE CL(M) and Ai, a, Az H B ECL(M), then Ai, F, A2 B ECL(M) – (closure under adjoining operation) if F1, a, r2 I a ECL(M) and A, a 0 a, A I b ECL(M), then A, F1, A1, Fz, A2 H b ECL(M), where (A1, A2) is the splitting pair of A in A, a, A H b - nothing else belongs to CL(M).",
        "• If F I A ECL(M), then r I A is provable in A(g)• • If C (g , let CL(g') be the closure of g' under: – substitution, – adjoining operation.",
        "Starting from this last proposition, it is possible to prove that the language accepted by a TAG grammar gi is exactly the language accepted by M(g').",
        "We can define the language accepted by such a calculus as follows: Let us take only those sequents in CL(M(g')) whose right part is the propositional variable S (the start symbol of the grammar), and such that propositional variables of the left part of the sequent correspond to terminal symbols of the grammar, i.e., words of the language.",
        "The language accepted by M(g') is then the set of sequences of words in the same order as they appear in the previous sequents."
      ]
    },
    {
      "heading": "5. TAG Analysis Using Noncommutative Proofnets",
      "text": [
        "A proof in sequent calculus contains many useless properties in its contexts.",
        "Girard (1987) has defined, in a purely geometric way, a class of graphs of formulas, called",
        "proofnets: for each proof of a sequent F in the one-sided sequent calculus for multiplicative linear logic, there is a corresponding proofnet whose conclusions are exactly the formulas in F, and for each proofnet, there is at least one corresponding proof of the sequent H r in the one-sided sequent calculus for multiplicative linear logic (where F is a sequence of all the conclusions of the proofnet).",
        "Similarly, Abrusci (1991) defined in a purely geometric way a class of graphs, called noncommutative proofnets, relative to multiplicative noncommutative linear logic.",
        "Roorda (1992) also described proofnets for Lambek calculus.",
        "Other criteria exist by now for characterizing proofnets for commutative or noncommutative, intuitionistic or nonintuitionistic linear logic.",
        "We present here Abrusci's criteria."
      ]
    },
    {
      "heading": "5.1 Noncommutative Proofnets",
      "text": [
        "Proofnets are defined on one-sided sequent calculi.",
        "Presentations of the one-sided sequent calculus, and of proofnets are given in the appendix.",
        "Let us recall that 22 is the \"or\" connective associated to 0 (the \"and\" connective), such that A –o B = A-'-'B.",
        "To every proof it of a sequent H F in the one-sided sequent calculus for multiplicative noncommutative linear logic, we can associate (by induction on the construction of the proof 7r) a noncommutative proofnet with conclusions F, i.e., an oriented planar graph 7' of occurrencies of formulas such that:",
        "• The conclusions of 7' are exactly the formulas in F. • is a noncommutative proof structure, i.e., it is constructed by means of the following links3: 7.7 – Axiom-link (two conclusions, no premise) Al A A - Cut-link (two premises, no conclusion) L_J",
        "- 0-link (two premises, one conclusion) A B",
        "- 2?-link (two premises, one conclusion) A 28 B and every occurrence of formula is a premise of at most one link and is a conclusion of exactly one link.",
        "• The translation r' of it is a proofnet, i.e., it admits no shorttrip.",
        "A shorttrip is a trip that does not contain each node twice.",
        "A trip is a sequence of nodes, going from one node to another according to the graph and to a switch for each 0-link and each 2g -link, in a bideterministic way: the traversal of nodes is done according to Figure 8.",
        "• Every assignment for 7' is total: two integer variables are associated to each label (one for each \"side\" of the variable).",
        "Constraints are imposed on variables with respect to how trips are done throughout the net.",
        "The assignment is total if the set of constraints has a solution.",
        "• 7r1 induces the linear order F of the conclusions, i.e., iff the precedence relation is a chain and each conclusion occurs exactly once in the chain.",
        "Precise definitions, examples, explanations and the proof of the following theorem may be found in Abrusci (1995)."
      ]
    },
    {
      "heading": "Theorem",
      "text": [
        "7r/ is a noncommutative proofnet with conclusions F iff there exists a proof 7r of the sequent F F in the sequent calculus for multiplicative noncommutative linear logic such that is associated to 7r.",
        "Note that every noncommutative proofnet is a planar graph."
      ]
    },
    {
      "heading": "5.2 Parse Examples",
      "text": [
        "In this section, we give two simple examples of parses.",
        "The aim of this section is to show the strong connection between the structure of proofs of sequents and a standard TAG derived structure.",
        "Moreover, it emphasizes the interest of a proofnet approach as the syntax (and parsing process) is concretely designed as a logical manipulation of logical structures.",
        "In the next section, we develop this approach and show how lexical rules can be integrated into it.",
        "Finally, we briefly mention that this can also give a logical formalization of D-trees (Vijay-Shanker 1992).",
        "The first example requires only substitution, i.e., the cut rule in the logical point of view.",
        "We first give the sequents (provable in A) associated to the lexical items.",
        "Their meanings are straightforward, e.g., \"John and Mary are noun phrases (NP)\" or \"saw requires a complement NP to obtain a verb phrase (VP) and a subject NP to obtain a sentence (S).\"",
        "Note that VP is an adjunction node so the sequent associated to the item saw includes the formula VP o – VP.",
        "The next example uses this specification.",
        "A(G) proofs of John saw Mary.",
        "The proof associated to the analysis of John saw Mary requires two cuts.",
        "The two sequent proofs given in Figure 9 are the only two possibilities for this sentence in the fragment „4(c).",
        "This pinpoints the fact that the order in which the cuts are done is not significant with respect to the derived structure.",
        "Proofnets allow the expression of this equivalence.",
        "Hence the two proofs have the same associated proofnet, given in Figure 10.",
        "For the sake of clarity, the cut rules are bold lines, and subnets associated to lexical items are circled.",
        "Obviously, if we delete the two cut lines, we are left with three proofnets referring to (provable) sequents.",
        "The proofnet in Figure 10 still contains some superfluous information, namely, nodes that cannot be targeted by the only available operations in A(G) – the cut rule and the adjunction rule on a propositional variable.",
        "In fact, we only need to keep nodes (i) that refer to conclusions of the proofnet that are propositional variables or negation of propositional variables (a cut can be done on such a literal), and (ii) that belong to subgraphs of the following form (corresponding to the existence of a formula A 0 A in the left part of a sequent, i.e., its negation A 0 A± in the one-sided associated sequent):",
        "We can then simplify the graph and replace the internal logical machinery by black boxes (shown in the figures as solid black circles).",
        "The conclusions of each basic proofnet are labeled: outputs (i.e., conclusions that are propositional variables) are drawn as closed half circles, inputs (i.e., conclusions that are the negation of propositional variables) are drawn as open half circles.",
        "Plain lines link black boxes to black boxes or conclusions, and subgraphs corresponding to adjunction points are drawn as dashed lines.",
        "The previous proofnet is then redrawn as in Figure 11.",
        "We obviously find the derived tree (neglecting some minor differences).",
        "The logical proofnet can then be seen as an \"explanation\" of the structure of the tree, that is to say the operations available on the tree are the result of some focus of what can be done on the proofnet.",
        "On the one hand, the use of black boxes is necessary to clarify the structure of the analysis; on the other hand, this hides proof details that can be useful for some linguistic operations (as is the case for adjunction with respect to the classical structure of a derived tree).",
        "We show in the next subsection another application of such a (logical) refinement.",
        "The last example discussed in this section is the analysis of the sentence John saw Mary today.",
        "The sequent associated to the adverb today is the following one: today VP 0 VP 0 today, VP, today I VP",
        "The logical analysis includes the two operations substitution and adjunction, i.e., two cut rules and an adjunction rule.",
        "In Figure 12 the adjunction rule is shown as a double-thick dashed line: this (logically) mimics the adjunction as it is shown in the derived tree given in Figure 13.",
        "Note that the adverb has to be placed after the complement (rightmost in the proofnet) in order to keep the graph planar.",
        "The proofnet in Figure 14 is the proofnet corresponding to a cut-free proof.",
        "Cut-free proofnet for John saw Mary today."
      ]
    },
    {
      "heading": "5.3 On Some Extensions",
      "text": [
        "As usual in lexicalized formalisms, TAG states rules to generate the lexicon from a basic set of descriptions.",
        "Among these, we find rules for passivization, interrogative forms or wh-sentences.",
        "We focus here on one example (namely who) to show to what extent the previous paradigm can be used also to logically interpret these lexical rules.",
        "We expect this will help in understanding the underlying mechanisms.",
        "The formulation we propose is the simplest one.",
        "This is also closely related to the approach used in categorial grammars (the raising rule is simply the introduction of an implication; see also Joshi and Kulick [1995] for such a relation and the way who can be defined).",
        "Figures 15, 16, and 17 present proofnets and simplified proofnets for the two noun adjuncts who John meets and who meets John.",
        "The analysis of complete sentences including these adjuncts is then similar to the process developed in the previous section.",
        "The corresponding (provable) sequents are given below.",
        "The basic lexical descriptions are the following (we have deleted the adjunction declarations for sake of clarity; the (logical) adjunction rule has to be slightly extended in order to take care of these new structures): John NP o John, John I NP meets So NP 0 VP, NP, VP 0 V 0 NP, V o meets, meets, NP I S who N o N 0 who 0 (S 0 NP), N, who, S 0 NP I N Let m(g1) denote the set of the three previous sequents.",
        "From these basic descriptions, the following entries are computed, i.e., the part of the lexicon relevant to these words",
        "But they are not provable with the cut and adjunction rules from M(C1).",
        "In other words, we should consider the construction of the language in two steps.",
        "The first step is the construction of the lexicon (a TAG grammar) from a basic set of descriptions using complex rules.",
        "The second step is the closure of the TAG grammar with the cut and adjunction rules.",
        "This point of view needs to be further developed but could be a first approach to a complete integration of lexicon and grammar.",
        "meets V1 V NP VP\" VP NP Si",
        "Simplified proofs for who John meets and who meets John."
      ]
    },
    {
      "heading": "6. Conclusion",
      "text": [
        "The use of logic as a framework to describe natural language is not a new idea.",
        "Works on Lambek calculus and logic programming are famous examples.",
        "However, linguistic formalisms have fundamentally evolved in the past two decades.",
        "Though theoretical research has been done on unification and attribute-value structures, operations on syntactic trees have been investigated mainly by comparing different solutions (Vijay-Shanker and Weir 1994a, 1994b).",
        "In this paper, we consider another way to look at these operations.",
        "We focus on the adjunction operation available in Tree Adjoining Grammars, as it seems to be the simplest way to augment the expressive power of a formalism.",
        "We prove that noncommutative intuitionistic linear logic is a good framework and we define a fragment equivalent to TAG.",
        "We show, furthermore, to what extent geometric representations of proofs (proofnets) may be useful in understanding how black boxes (i.e., relations between nodes in a syntactic tree) help simplify a parse but also hide interesting mechanisms.",
        "There is still a lot to do in this direction.",
        "For one thing, generalized categorial grammars also have to be logically investigated, the objective being to relate GCG operations to logical operations (completed if necessary).",
        "The preceding discussions also show the relationship between our point of view and the idea of quasi trees developed by Vijay-Shanker (1992).",
        "He proposes to consider partial descriptions of trees, i.e., adjunction nodes represented by means of loose relations whose meaning is a domination relation.",
        "In this case, the adjunction operation is identified by a pair of substitution operations.",
        "The strong relation with what precedes is clear.",
        "However, in order to take into account exactly this presentation, the axiom of identity A I A, where A is a propositional variable, must be added to the calculus A(g) given in Section 4.",
        "In this way, adjunction nodes can be deleted from sequents.",
        "In this new calculus, the following rule is satisfied: A I A r,A 0 A, A I B (adjunction) F, A I B",
        "Hence, we obtain the following equivalence:"
      ]
    },
    {
      "heading": "Proposition",
      "text": [
        "A parse tree is correct iff the two nodes in a domination relation have the same label iff there is a proof whose conclusions that are propositional variables are the words of the sentence in the same order, and without any formula of the form A o – A."
      ]
    },
    {
      "heading": "Appendix A.1 A Brief Description of Noncommutative Linear Logic",
      "text": [
        "Linear logic was introduced by Girard (1987) as a \"resource conscious logic.\"",
        "In other words, though classical logic deals with static descriptions, linear logic considers propositions as finite resources.",
        "Hence, while \"A\" and \"A and A\" are equivalent in classical logic, this is (generally) not the case in linear logic.",
        "The easiest technical way to investigate this difference is to consider the Gentzen sequent calculus for these logics.",
        "A sequent is of the form F I A where I' and A stand for sequences of formulas well-formed with respect to the language of the logic.",
        "It expresses the fact that the (multiplicative) disjunction of formulas in A is a consequence of the (multiplicative) conjunction of formulas in F. Remember that a sequent calculus is a set of rules specifying the provable sequents, given a set of axioms.",
        "A proof of a sequent is then the successive application of sequent rules beginning with axioms, i.e., a tree with the proved sequent as the root of the tree (at the bottom) and whose leaves are axioms (on top).",
        "Besides axioms and rules introducing connectives at the right or left part of a sequent, we find structural rules that govern the structure of a sequent.",
        "In classical logic, the set of structural rules consists in weakening, contraction, and exchange (see Figure 18 where A, B are formulas, F, F', A, A' are sequences of formulas).",
        "Weakening and contraction allow the arbitrary copying of formulas: having a formula A as a hypothesis or conclusion is equivalent to having it twice (or more).",
        "This point of view contradicts the notion of resource, hence these two structural rules are omitted in linear logic.",
        "However special connectives, namely the exponentials of-course \"!\"",
        "and why-not \"?\"",
        "have these properties.",
        "The exchange rule is responsible for commutativity of the comma (in the right side and in the left side): the order of hypotheses or conclusions does not matter.",
        "This rule is no longer valid in the noncommutative version of linear logic.",
        "However, and this is already true in linear logic, the logical interpretation of \"and\" and \"or\" is not as simple as it is in classical logic.",
        "We need to distinguish two \"and\" (0 meaning 'times' and & meaning 'with') and two \"or\" (22 meaning 'par' and ED meaning 'plus'), hence inducing four constants: 1, T, 1,0 (respective neutral elements for the previous connectives).",
        "In fact, connectives are related in such a way that they form two groups: the multiplicative group (0,22, 1,1) and the additive group ( & , ED, T, 0).",
        "Hereafter, we use only the multiplicative group.",
        "There are obviously fundamental reasons for this proliferation but these explanations are outside the scope of this paper.",
        "Negation and implication are however of special interest.",
        "In (commutative) linear logic, there is only one negation • ± and one (linear) implication – o.",
        "In the noncommutative case, negation and implication have to be split: there is pre -L. and post negation •1- and pre o – and post implication – 0.",
        "These two implications have to be related with two operations in Lambek calculus: – 0 with \\ and 0 – with /.",
        "The implications may",
        "be defined in the following way: B o A :-.-_ B 22 LA and A o B.. Ai28B.",
        "In Figure 19, we give the one-sided sequent calculus for the multiplicative fragment of noncommutative linear logic (N-LL), and in Figure 3 in Section 3, the two-sided sequent calculus for the multiplicative fragment of intuitionistic noncommutative linear logic (N-ILL): sequent calculus for N-LL and sequent calculus for N-ILL satisfy the cut elimination theorem, i.e., for each proof there exists a cut-free proof with the same conclusion; however, we make use of cut rules in Section 4.",
        "Note that if r h A is provable in the multiplicative intuitionistic noncommutative linear logic, then H (r.)±, A* is provable in the multiplicative noncommutative linear logic, where:",
        "• for each formula A of intuitionistic noncommutative linear logic, A* is a formula of noncommutative linear logic defined as follows – p* = p, for every propositional letter p – (B 0 C)* = B* 0 C*, (B 0 C)* = (B*)±28C*, (B o C)* = B*28 -L(C*) • for each finite sequence A1, ..., An of formulas of intuitionistic noncommutative linear logic, (A1, ..., An)* = (Ai)\", • • • , (An)* • for each finite sequence A1, ..., An of formulas of noncommutative linear logic, (A1, .",
        ".",
        ".",
        ", A, )± = (An) -L, .",
        ".",
        ".",
        ", (A1)±"
      ]
    },
    {
      "heading": "A.2 The Calculus A (a Fragment of N-ILL) (proofs)",
      "text": [
        "In this section, we give the proofs for the various propositions presented in the paper.",
        "We repeat the definitions and propositions for clarity."
      ]
    },
    {
      "heading": "Definition The Calculus A",
      "text": [
        "• Alphabet of A: propositional letters a,b, ..., connectives 0, o.",
        "• Formulas: usual definition.",
        "A is a simple 0-formula iff A is a propositional letter or A is a formula b1 0... 0 bn where b1, ..., bn are propositional letters.",
        "B is a o--formula iff C = a o A where a is a propositional letter and A is a simple 0-formula.",
        "• Sequents: F H A, where F is a finite sequence of formulas and A is a formula.",
        "• propositional letters: a, b, c, .",
        ".",
        ".",
        "• for each propositional letter p and each integer n> 0 n times It Limes p and 1 - • • ip • connectives: 0, 2g Formulas: usual definition Sequents: F r where r is a finite sequence of formulas"
      ]
    },
    {
      "heading": "Metalinguistic definition of Al and LA s.t. 1-(A-1-)= = A, for every formula A:",
      "text": [
        "n times n+1 times n times n-1 times",
        "Language and sequent calculus for multiplicative noncomrnutative linear logic.",
        "• Sequent calculus: – Axiom: al a",
        "In the following, we only consider sequents such that formulas in the left side are either propositional letters, or a--formulas.",
        "So, in the rule introducing c-, C stands for a propositional letter.",
        "This consists in considering trees: C is the (unique) mother and the 0-formula A is the sequence of its daughters.",
        "1.",
        "If I A 0 B is provable in A, then • A and B are simple 0-formulas; • there is a unique pair (F1, r2) s.t.",
        "r = r1, r2 and both the sequents r, H A and F2 B are provable in A."
      ]
    },
    {
      "heading": "Proof",
      "text": [
        "By induction on the proof 7r of F I A 0 B in A.",
        "Note that r cannot be an axiom.",
        "• If the last rule in 7r is (0), then iris FE-CODth r = T, (10 and A0B=C0D (disregarding the brackets).",
        "If A = C and B = D, the result is obvious.",
        "If A 0 C' = C and C' 0 D = B, then by induction hypothesis there exist unique 'I'i and ‘112 such that",
        "Ti I A and W2 H C' are provable for T = Ti, k112; and then, by (0) 412.",
        "B is provable, so that r, T, and F2 = 4f2, 4> are unique and satisfy the property.",
        "If A = C 0 D' and D' 0 B = D, then by induction hypothesis, there exist unique 4>i and 4,2 such that 4i D' and 4,2 H B are provable for 4> = i,432; and then, by (0) 4f, (1)1 H A is provable, so that r, = 4f, 4>i and r2 = 42 are unique and satisfy the property.",
        "• If the last rule in 7r is (o – ), then iS PI-A0B with",
        "C,(1),W2 B (') so that r, = A, and F2 = ',a 0 C, 43, 4/2 are unique and satisfy the property.",
        "2.",
        "If r, a 0 – A, A H B is provable in A, then • A and B are simple 0-formulas; • there is a unique pair (A1, A2) s.t.",
        "A = A1, A2 and both the",
        "sequents zi I A and r, a, A2 H B are provable in A.",
        "Such a pair (A1, A2) will be called \"the splitting pair for A in r, a o – A, H B.\""
      ]
    },
    {
      "heading": "Proof",
      "text": [
        "By induction on the proof 7r of r, a 0 – A, A H B in A.",
        "This pair can be computed easily: the first element Ai of the splitting pair must satisfy a counting condition on each propositional variable occurring in it as defined below.",
        "This property will enable us to consider an adjunction rule based on such splitting pairs."
      ]
    },
    {
      "heading": "Definition",
      "text": [
        "Let A be a simple 0-formula or a o--formula (calculus A) and a a propositional variable, the number of positive occurrences p(a, A) (and negative occurrences n(a, A)) of a in A is defined by:",
        "• if A a then p(a, A) = 1, n(a, A) = 0 • if A b and b is a propositional variable distinct from a, then p(a, A) = 0, n(a, A) = 0 • if A B C, then p(a, A) = p (a, B) p (a , C), n(a, A) = n(a, B) + n (a, C) • if A B o Ai 0 ... 0 An, then p(a, A) = p(a, B) and",
        "It is easy to prove (for S provable in the calculus A) by induction on a proof of S that (i) for each propositional variable a occurring in S, p(a, S) = n(a, S), and also that (ii) if S is the sequent , C I A then Cn is a propositional variable (we denote this variable by e(S)).",
        "Moreover, for k < n, if we denote the sequent , Ck I A by Sk, then (iii) p(a, Sk) > n(a, Sk).",
        "We can then deduce that (iv), for k < n, there exists at least one propositional variable s.t.",
        "p(a, Sk) > n(a, Sk).",
        "Note that p(e(S), Sn_i) > n(e(S),Sn-i).",
        "Proposition Let S: r, B 0 C, D1, .",
        ".",
        ", Dn h A be a provable sequent in A, then the splitting pair for D1, .",
        ".",
        ", D, in S is uniquely determined by the sequent 5': D1,.",
        ", Di C, j < n, such that for each propositional variable a occurring in 5', the following condition is satisfied:"
      ]
    },
    {
      "heading": "Proof",
      "text": [
        "Note that S' is provable.",
        "Hence the property (i) is true for such a sequent.",
        "The uniqueness results from property (iv) stated previously.",
        "3.",
        "The calculus A is closed under the atomic cut rule",
        "i.e., if the sequents r I a and Ai, a, 6,2 I A are provable in A, then the sequent Ai, r, A2 I A is also provable in A.",
        "By induction on the proof Ir of F I a, by using the properties 1 and 2.",
        "If 7r is an axiom, the result is trivial.",
        "If 7 is not an axiom, the last rule in 7r is (0 – ), and so 7 has the form 4f B .",
        "(1.2 I a E a (° – ) By induction hypothesis, since 431, b, 4)2 H a is provable (with a shorter proof than 7r) and Ai, a, A2 I – A is provable, then Ai, (Di, b,11'2, A2 H A is provable, and then we get"
      ]
    },
    {
      "heading": "4. The calculus A is closed under the adjoining rule",
      "text": [
        "a, I', H a A, a o – a, A I b (adj) A, r1, A1, 1'2, A2 b where (A1, A2) is the splitting pair of A in A, a o – a, A I b."
      ]
    },
    {
      "heading": "Proof",
      "text": [
        "Indeed, suppose the sequents F1, a, 1'2 H a and A, a o – a, A H b are provable in A.",
        "Since A, a o – a, A H b is provable, by the property 2, there is a unique pair (A1, A2) s.t.",
        "A = A1, A2 and both the sequents A1 H a and A, a, A2 H b are provable in A.",
        "Now since r1, a, r2 H a and A, a, A2 H b are provable in A, by the property 3 the sequent A, 1'1, a, 1-2, A2 H b is also provable in A; and now, since A1 I a and A, 1'1, a, 1'2, A2 H b are provable in A, the sequent A, r1, A1, 1'2, A2 b is also provable in A."
      ]
    },
    {
      "heading": "Definition The calculus A(g)",
      "text": [
        "Let g be a family of labeled trees, of depth 1, not of the form T. Let 2-(g) be the X closure of g under the rules:",
        "• substitution with or without the declaration of a new possibly internal point on which the adjoining operation may be performed, • adjoining operation.",
        "A(g) is the calculus obtained from A as follows: • propositional letters are exactly all the labels of the trees in g, • the rule (o--) is restricted as follows: r I A Pi, a, r2 F B",
        "(c – , g) a o – A, r2 B",
        "where A, B are simple 0-formulas of A(g), a is a propositional letter of A(g), and one of the following cases occurs:",
        "where in r the sequence of all the occurring propositional variables is al, ... , am and in r there is a formula c o c iff c is a possibly internal point of T on which the adjoining operation may be performed; – Seq(T) is provable in AM."
      ]
    },
    {
      "heading": "Proof",
      "text": [
        "By induction on the class of all the trees of 7-(g).",
        "Let T C g, i.e. T is / E g",
        "(ii).",
        "Let T be a tree obtained from a tree T1 c 7-(g) with root a and a tree T2 E 7-(g) with a terminal point a, by substitution with the declaration that a is a point in T on which the adjoining operation may be performed.",
        "Suppose b is the root of T2, and so b is the root of T. By induction hypothesis, to T1 is associated a sequent Seq(Ti) __ F F a satisfying (i) and (ii), and to T2 is associated a sequent Seq(T2) satisfying (i) and (ii) so that Seq(T2) --- Ai, a, A2 I b where all the terminal points of T2 before a occur in Ai in the same order as in T2 and all the terminal points of T2 after a occur in A2 in the same order as in T2.",
        "Define Seq(T) . Ai, a o a, F, A2 I b.",
        "It is easy to prove that Seq(T) satisfies (i).",
        "Seq(T) is obtained from Seq(Ti) and Seq(T2) by using (0-, g), so that it is provable in A(g) since Seq(Ti) and Seq(T2) are provable in A(g) by induction hypothesis.",
        "Let T be a tree obtained from a tree T1 E 7-(g) with root a and a tree T2 E T(g) with a terminal point a, by substitution without the declaration that a is in T a point on which the adjoining operation may be performed.",
        "Suppose b is the root of T2, and so b is the root of T. By induction hypothesis, to Ti.",
        "is associated a sequent Seq(Ti) ,- 1 - ' F a satisfying (i) and (ii), and to T2 is associated a sequent Seq(T2) satisfying (i) and (ii)",
        "so that Seq(T2) Ai, a, A2 H b where all the terminal points of T2 before a occur in Ai in the same order as in T2 and all the terminal points of T2 after a occur in A2 in the same order as in T2.",
        "Define Seq(T) Ai, r, H b.",
        "It is easy to prove that Seq(T) satisfies (i).",
        "Seq(T) is obtained from Seq(Ti) and Seq(T2) by using the atomic cut rule, so that by property 3 it is provable in A(g) since Seq(Ti) and Seq(T2) are provable in A(g) by induction hypothesis.",
        "Let T be a tree obtained by adjoining operation from a tree T1 E 7-(g) with root a and a terminal point a, and a tree T2 E T() with a possibly internal point a on which the adjoining operation may be performed.",
        "Suppose b is the root of T2, and so b is the root of T. By induction hypothesis, to T1 is associated a sequent Seq(Ti) satisfying (i) and (ii), so that Seq(Ti) r1, a, r2 F a where all the terminal points of Ti before a occur in r1 in the same order as in T1 and all the terminal points of after a occur in r2 in the same order as in T1; and to T2 is associated a sequent Seq(T2) satisfying (i) and (ii) so that Seq(T2) A, a o a, A F b.",
        "Since Seq(T2) is provable in A(g) by induction hypothesis, then by property 2, there is a unique pair (A1, A2) s.t.",
        "A = Ai, A2 and the sequents A1 a and A, a, A2 H b are both provable in A(C).",
        "Define Seq(T) A, r1, A1, rz, A2 H b.",
        "It is easy to prove that Seq(T) satisfies (i).",
        "Seq(T) is obtained from Seq(Ti) and Seq(T2) by using adjoining rule, so that by property 3 it is provable in A(g) since Seq(Ti) and Seq(T2) are provable in A(g) by induction hypothesis.",
        "• To every provable sequent F H A in A(g), we associate Tree(r I A) s.t.",
        "- if A is a propositional letter, then Tree(r h A) E 7--(g) where the",
        "root is A, the terminal points (from left to right) are exactly all the propositional letters occurring in r and in the same order in which they occur in F, and the possibly internal points on which the adjoining operation may be performed are exactly all the propositional letters c s.t.",
        "c c occur in r; - if A is bi ...",
        "I), and so = ri rn with the sequents r, b, provable in A(g) for every 1 < i < n, then Tree(r I A) is a sequence T1, ..., Tn of trees E r(g), s.t.",
        "T = Tree(r, H bd."
      ]
    },
    {
      "heading": "Proof",
      "text": [
        "By induction on the proof 7r of r H A.",
        "If A = B0C and the last rule of 7r is (0) with principal formula B0C and premises F1 H B and r2 F C, then Tree(r B C) = Tree(ri B),Tree(F2 H C).",
        "If the last rule of 7r is (0-, g) with principal formula a 0 a and premises r H a and Ai, a, A2 H b, then Tree(Ai, a 0 a, A2 H b) is the tree obtained by substitution from Tree(r H a) and Tree(Ai, a, A2 H b) with the declaration that the possibly internal point a is a point on which the adjoining operation may be performed.",
        "If the last rule of 7r is (0-, g) with principal formula a 0 a and premises F H a and Ai, a, A2 b1 0 ... 0 bn, and a occurs in ri s.t.",
        "F1 H bi, then Tree(Ai, a 0 a, A2 b1 0 ... bn) is obtained from Tree(Ai, a, A2 H bn) = Tree(r b1),.",
        ", Tree(r r, bn) by replacing Tree(ri bi) by the tree obtained by substitution from Tree(r H a) and Tree(r, H b,) with the declaration that the possibly internal point a is a point on which the adjoining operation may be performed.",
        "If the last rule of is (a – , g) with principal formula a a A and premises I-' H A and Ai, a, A2 b, then Tree(Ai, a 0 A, A2 b) is the tree obtained as follows: first add",
        "If the last rule of 7r is (o-, g) with principal formula a 0 A and premises F H A and Ai, a, Az I b10...0bn, and a occurs in r, s.t.",
        "F H b,, then Tree(Ai, a 0 A, A2 H blo .",
        ".",
        ".0 bn) is obtained from Tree(Ai, a, A2 b1 ... 0 b,,) = Tree(ri b1), ,Tree(rt, H bn) by replacing Tree(r, H b,) by the tree obtained as above from Tree(r A) and Tree(r, b,).",
        "• If F H a is provable in A(G), then Seq(Tree(r I a)) = r I a.",
        "If T is a tree of g, then Tree(Seq(T)) = T. • Let M be a set of provable sequents in A(G).",
        "Define CL(M) as follows: - MCCL(M) - (closure under atomic cut rule) if F HaE CL(M) and",
        "Ai, a, Az B ECL(M), then Ai, r, A2 B ECL(M) - (closure under adjoining operation) if P1, a, r2 I a ECL(M) and A, a 0 a, A I b ECL(M), then A, r1, Al, F2, A2 b ECL(M), where (A1, A2) is the splitting pair of A in A, a, A H b;",
        "- nothing else belongs to CL(M).",
        "• If I' I A ECL(M), then r H A is provable in A(G)•"
      ]
    },
    {
      "heading": "Proof",
      "text": [
        "By induction on CL(M).",
        "If r H A EM, then by hypothesis F I A is provable.",
        "If F h A is obtained from two other sequents, by atomic cut rule, then I' A is provable by property 3 since (by induction hypothesis) the two sequents are provable.",
        "If r I A is obtained from two other sequents, by adjoining operation, then F H A is provable by property 4 since (by induction hypothesis) the two sequents are provable.",
        "• If G' C G, let T(G') be the closure of g' under: – substitution; – adjoining operation.",
        "Clearly, CL(G') C r(g).",
        "Let M = {Seq(T)/T E GI, then CL(M) = {Seq(T)/T E T(G/)}."
      ]
    },
    {
      "heading": "Proof",
      "text": [
        "The proof follows previous results."
      ]
    }
  ]
}
