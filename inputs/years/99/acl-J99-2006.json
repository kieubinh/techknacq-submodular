{
  "info": {
    "authors": [
      "Jurgen Wedekind"
    ],
    "book": "Computational Linguistics",
    "id": "acl-J99-2006",
    "title": "Semantic-Driven Generation With LFG- And PATR-Style Grammars",
    "url": "https://aclweb.org/anthology/J99-2006",
    "year": 1999
  },
  "references": [
    "acl-E95-1007",
    "acl-J96-4005",
    "acl-W91-0104"
  ],
  "sections": [
    {
      "text": [
        "To find an appropriate utterance for a semantic representation is a problem normally treated in the domain of (tactical) natural language generation.",
        "For unification-based approaches, like LFG, PATR, or HPSG (Kaplan and Bresnan 1982; Shieber et al.",
        "1983; Pollard and Sag 1994), this problem turns out to be a formal problem of the underlying grammar formalism, when the mapping between strings and semantic representations is defined by the grammar.",
        "Semantic representations are then encoded in a separate part of the feature structures (henceforth f-structures) that are assigned to the sentences by the grammar.",
        "This is normally achieved by a distinct attribute SEM (or an additional a-projection that is formally reconstructable by such an attribute) whose value is intended to represent the semantics of the sentence the f-structure is assigned to.",
        "The f-structure given in (1), which might be assigned to the sentence John arrives by a unification grammar for English, is a simple example."
      ]
    },
    {
      "heading": "PRED 'ARRIVE((SUBJ))' TENSE PRES SUBJ [PRED 'JOHN'] I [REL arrive ARG1 john",
      "text": [
        "Since the f-structures assigned to the sentences are always subsumed by the semantic representations they contain, a semantic-driven generator has to compute for a given semantic representation 4)1 a sentence with an f-structure 1) that is subsumed by the input (in the following, notated by 4)' (I)).",
        "To state the underlying decidability problem more formally, we need the fact that a unification grammar G defines a binary relation AG between terminal strings w and f-structures 4), as given in (2)",
        "(2) AG (W, ) iff G assigns 4) tow.",
        "The problem of determining for a given semantic representation 4)' whether there is a sentence with an f-structure 4) that is subsumed by the input turns out then to be an instance of the problem of whether we can decide (3)",
        "(3) 2z041)(' L 4> A AG(W,I3D))",
        "for any given input 4)'.",
        "The undecidability of the generation problem in (3) was shown for definite clause grammars by Dymetman (1991), who reduced the problem to Hilbert's Tenth Prob",
        "tern.",
        "Van Noord (1993) provided a proof for PATR-style grammars using a reduction to Post's Correspondence Problem.",
        "Moreover, a reduction to Hilbert's Tenth Problem was also used by Roach (1983) to show the undecidability of the emptiness problem of lexical-functional languages, a result that was later shown by Nishino (1991) using a reduction to Post's Correspondence Problem.",
        "In this brief note, we want to investigate the close relationship between the emptiness problem of lexical-functional and PATR languages and the generation problem in (3).",
        "We give a much simpler undecidability proof of the emptiness problem using a reduction to the emptiness problem of the intersection of arbitrary context-free languages, a reduction that Wedekind and Kaplan (1996) used to show the undecidability of ambiguity-preserving generation.",
        "The close connection of the problems – already indicated by the fact that their undecidability proofs were achieved by the same reductions – results, then, from the fact that the undecidability of the emptiness problem trivially implies the undecidability of semantic-driven generation.",
        "This result also applies to other unification-based formalisms such as HPSG, since they are powerful enough to simulate context-free derivations.",
        "We begin our construction by defining for each context-free language L a unification grammar that generates L and that associates with each derivable terminal string an f-structure consisting of the string's difference list encoding (plus concatenation information)!",
        "For the association of the annotated information with the constituents described by a context-free rule of the form A w, we use – similar to PATR – a set of distinct metavariables {xo, , x1w1}; xo refers to the mother and x, (i = 1, .",
        ".",
        ".",
        ", Iwl) to the ith daughter."
      ]
    },
    {
      "heading": "Definition",
      "text": [
        "Let G be a context-free grammar in Chomsky normal form whose nonterminal vocabulary, terminal vocabulary start-symbol, and rules are given by (VN, VT, S. R).",
        "I.e., each rule has the form A –÷ E, A ---+ a or A -- BC with A, B, C E VN, a E VT and E de noting the empty string.",
        "A string grammar String(G) for G is a unification grammar (VN, VT, S. R,) whose rule set is determined as follows.",
        "In the first step we construct for each context-free rule r = A – + w a set of annotations Sr:",
        "The set of rules is then given by Rs = {(r, Sr) I r E R}.2 Figure 1 illustrates the f-structure encoding of a terminal string generated by a simple string grammar.",
        "By induction on the depth of the derivation trees, it can easily be shown that G and String(G) have the same language and that the f-structure assigned to a terminal string w encodes w, as stated more precisely in the following Lemma: 1 We separated this construction out of the main proof, since it might be useful for analyzing other problems.",
        "2 We used PATR-style notation, since it facilitates the construction of string grammars.",
        "For LFG grammars where we do not have the possibility to refer from one daughter to her sister (necessary for (xi OUT) (x2 IN)) we need a slightly more complex construction.",
        "If w BC then B has to be annotated by (1 B1) and (T IN) (1 IN) and C by (1 c2) 1, (1 OUT) (1 OUT), and Bi OUT) (1 IN).",
        "w = a we need (1 IN FIRST) a and (T IN REST) (i OUT) and for w = E the equation (1 IN) (1 OUT).",
        "With this construction we get the same undecidability results for classical LFG grammars.",
        "The only difference is that the constructed grammars are tree grammars rather than string grammars."
      ]
    },
    {
      "heading": "Lemma",
      "text": [
        "Let String(G) be a string grammar.",
        "Then L(G) = L(String(G)) and if there is a derivation of a terminal string w with root S„0 and f-structure (13 then the substructure of which comprises the elements accessible from ao in is a minimal solution of {(X0 IN RESTI-1 FIRST) Zi.7, I 1 < i < Iwi} U {(X0 OUT) Pze, (Xo IN RESTIw1)}.3 If we combine two arbitrary string grammars in such a way that the string encodings of the derived terminal strings get unified, we can show the undecidability of the emptiness problem by a simple reduction to the emptiness problem of the intersection of arbitrary context-free languages."
      ]
    },
    {
      "heading": "Theorem",
      "text": [
        "It is undecidable for an arbitrary unification grammar G whether L(G) = 0."
      ]
    },
    {
      "heading": "Proof",
      "text": [
        "Let G1 = (v1v, 171, S1.",
        "R1) and G2 = (177, V, S2, R2) be context-free grammars for two arbitrary context-free languages.",
        "Without loss of generality we can assume that n vi2„ = 0 and that each rule in Ri (i = 1,2) is in Chomsky normal form.",
        "On the basis of String(G1) and String(G2) we construct a unification grammar G (VN,VT, S, R) with",
        "such that # is a new atomic value not in VT.",
        "If we assume for G constant-consistency (i.e., axioms of the form H a b for all atomic values a, b E VT U {#} with a b) then the problem whether L(G) = 0 reduces to the undecidable problem whether L(G1) n L(G2) = 0.",
        "In order to get a derivation of a well-formed terminal string w1w2 from S with w1 derived from S1 and w2 from S2, w1 must be identical with w2, since both string encodings get unified by the S-rule and (X0 OUT FIRST) # ensures that one string is not a proper prefix of the other.'",
        "Thus, L(G) -= {ww w E L(G1) n L(G2)} and L(G) = 0 iff L(G1) n L(G2) = 0.",
        "• 3 The whole f-structure encodes the complete difference list derivation of wx – x, which is induced by the derivation tree by relabeling each (nonterminal) node dominating substring v of uvz --= w by vzx – zx, since the annotations of each rule of the form A – > BC encode the difference list of the mother as the concatenation of the lists of its daughters (X – X2 = X XI ± X2).",
        "By taking the smallest f-structure I as an input the undecidability of our generation problem reduces trivially to the undecidability of the emptiness problem, since L(G) {w 343(AG(w,4)))} = fiv I C A AG(w,43))}.",
        "That is, if the emptiness problem of L(G) is undecidable for a unification grammar G then G's generation problem in (3) must be undecidable too.",
        "(The other direction does not hold, of course.)"
      ]
    },
    {
      "heading": "Corollary",
      "text": [
        "For an arbitrary unification grammar G and an arbitrary f-structure 43' it is undecidable whether there is an f-structure and a terminal string w such that 43' E 413 and AG (W, 11).",
        "Although it might be argued that we show the undecidability on the basis of a rather special case, namely the smallest f-structure, the undecidability of the emptiness problem is nevertheless sufficient, since we always get a (superficially) less trivial direct proof of the corollary by using any proof of the theorem and adding some (new) nontrivial input information to the S-rule.",
        "If we add, for example, the equation (xo sEm) 1 to the S-rule of our proof",
        "then the problem whether we can find for [sEm 1] (= 43') an f-structure (D and a terminal string w such that [sEm 1] C (i) and AG (w, (13) reduces to the undecidable problem whether L(G) -= 0 as wel1.5 Our construction shows that an LFG or PAIR grammar G can simulate the valid computations of an arbitrary Turing machine M, since they are known to be specifiable by the intersection of two context-free languages.",
        "Since L(M) = 0 is undecidable, the emptiness problem of L(G) must be undecidable too.",
        "By adding a bit of semantic representation 43' to the S-rule these properties are trivially carried over from L(G) to the set of possible realizations assigned to 43' by G, given by the language { w I]43(43' E 43 A AG(w,43))}.",
        "Our proof construction works, of course, even if the grammatical formalisms satisfy the off-line parsability restriction.6 Thus, the decidability of the membership problem – similar to context-sensitive grammars – does not imply the decidability of the emptiness (and the semantic-driven generation) problem.7 From a cognitive point of view it seems quite unrealistic that our language generation capabilities require mathematical models of Turing machine power.",
        "Hence, natural language grammars (of the LFG and PATR formalisms) must satisfy conditions that do not allow us to show the undecidability of the problem.",
        "We assumed the semantic representations to be structurally unrelated to the f-structures they subsume.",
        "It seems more plausible that there is a proportion k that bounds the size of an",
        "f-structure 4> assigned to a string by the size of its subsuming semantic representation 4>': 14>l < I.",
        "This would force the f-structures of the surface realizations of a semantic representation given by I C A 3W(AG(W, 43))) to be included in a finite and computable set of structurally related f-structures {(D I (1)' E 'I' A 14>1 < kl43/ If.",
        "Since the generation problem is decidable (Wedekind 1995), i.e., { w G(7,0 , 43)} = 0 is decidable for any given f-structure IP, and only a finite number of structurally related f-structures 4) has to be tested for {w AG (W , 43)1 = 0, semantic-driven generation must be decidable.",
        "But we must, of course, admit that it is far from being evident yet, how this structural relation is realized in natural language grammars."
      ]
    },
    {
      "heading": "Acknowledgments",
      "text": [
        "Ron Kaplan had the idea that the proof construction which we used in Wedekind and Kaplan (1996) might be useful for other purposes.",
        "Thanks to him for valuable suggestions."
      ]
    }
  ]
}
