{
  "info": {
    "authors": [
      "Mark-Jan Nederhof"
    ],
    "book": "Computational Linguistics",
    "id": "acl-J99-3002",
    "title": "The Computational Complexity of the Correct-Prefix Property for TAGs",
    "url": "https://aclweb.org/anthology/J99-3002",
    "year": 1999
  },
  "references": [
    "acl-J93-4002",
    "acl-J94-1004",
    "acl-J94-2002",
    "acl-J95-4002",
    "acl-P85-1011",
    "acl-P88-1032",
    "acl-P90-1035",
    "acl-P94-1017",
    "acl-P94-1029",
    "acl-P95-1023",
    "acl-P98-2156"
  ],
  "sections": [
    {
      "text": [
        "German Research Center for Artificial Intelligence A new upper bound is presented for the computational complexity of the parsing problem for TAGs, under the constraint that input is read from left to right in such a way that errors in the input are observed as soon as possible, which is called the \"correct-prefix property.\"",
        "The former upper bound, 0(n9), is now improved to 0(n6), which is the same as that of practical parsing algorithms for TAGs without the additional constraint of the correct-prefix property."
      ]
    },
    {
      "heading": "1. Introduction",
      "text": [
        "Traditionally, parsers and recognizers for regular and context-free languages process input from left to right.",
        "If a syntax error occurs in the input they often detect that error immediately after its position is reached.",
        "The position of the syntax error can be defined as the rightmost symbol of the shortest prefix of the input that cannot be extended to be a correct sentence in the language L. In formal notation, this prefix for a given erroneous input w L is defined as the string va, where w = vax, for some x, such that vy E L, for some y, but vaz L, for any z.",
        "(The symbols v, w, ... denote strings, and a denotes an input symbol.)",
        "The occurrence of a in w indicates the error position.",
        "If the error is detected as soon as it is reached, then all prefixes of the input that have been processed at preceding stages are correct prefixes, or more precisely, they are prefixes of some correct strings in the language.",
        "Hence, we speak of the correct-prefix property.' An important application can be found in the area of grammar checking: upon finding an ungrammatical sentence in a document, a grammar checker may report to the user the presumed position of the error, obtained from a parsing algorithm with the correct-prefix property.",
        "For context-free and regular languages, the correct-prefix property can be satisfied without additional costs of space or time.",
        "Surprisingly, it has been claimed by Schabes and Waters (1995) that this property is problematic for the mildly context-sensitive languages represented by tree-adjoining grammars (TAGs): the best practical parsing algorithms for TAGs have time complexity 0 (n6 ) (Vijay-Shankar and Joshi [1985]; see Satta [1994] and Rajasekaran and Yooseph [19951 for lower theoretical upper bounds), whereas the only published algorithm with the correct-prefix property – that by Schabes and Joshi (1988) – has complexity 0 (n9 ) .",
        "In this paper we present an algorithm that satisfies the correct-prefix property and operates in 0(n6) time.",
        "This algorithm merely recognizes input, but it can be extended",
        "to be a parsing algorithm with the ideas from Schabes (1994), which also suggest how it can be extended to handle substitution in addition to adjunction.",
        "The complexity results carry over to linear indexed grammars, combinatory categorial grammars, and head grammars, since these formalisms are equivalent to TAGs (Vijay-Shanker and Weir 1993, 1994).",
        "We present the actual algorithm in Section 3, after the necessary notation has been discussed in Section 2.",
        "The correctness proofs are discussed in Section 4, and the time complexity in Section 5.",
        "The ideas in this paper give rise to a number of questions for further research, as discussed in Section 6."
      ]
    },
    {
      "heading": "2. Definitions",
      "text": [
        "Our definition of TAGs simplifies the explanation of the algorithm, but differs slightly from standard treatment such as that of Joshi (1987).",
        "A tree-adjoining grammar is a 4-tuple (E, NT, I, A), where E is the set of terminals, I is the set of initial trees, and A is the set of auxiliary trees.",
        "We refer to the trees in / U A as elementary trees.",
        "The set NT, the set of nonterminals, does not play any role in this paper.",
        "We refer to the root of an elementary tree t as R. Each auxiliary tree has exactly one distinguished leaf, which is called the foot.",
        "We refer to the foot of an auxiliary tree t as F. We use variables N and M to range over nodes in elementary trees.",
        "We assume that the sets of nodes belonging to distinct elementary trees are pairwise disjoint.",
        "For each leaf N in an elementary tree, except when it is a foot, we define label(N) to be the label of the node, which is either a terminal from E or the empty string c. For all other nodes, label is undefined.",
        "For each node N that is not a leaf or that is a foot, Adj(N) is the set of auxiliary trees that can be adjoined at N, plus possibly the special element nil.",
        "For all other nodes, Adj is undefined.",
        "If a set Adj(N) contains nil, then this indicates that adjunction at N is not obligatory.",
        "For each nonleaf node N we define children(N) as the (nonempty) list of daughter nodes.",
        "For all other nodes, children is undefined.",
        "An example of a TAG is given in Figure 1.",
        "The language described by a TAG is given by the set of strings that are the yields of derived trees.",
        "A derived tree is obtained from an initial tree by performing the following operation on each node N, except when it is a leaf: The tree is excised at N, and between the two halves a fresh instance of an auxiliary tree, which is taken from the set Adj(N), is inserted, or the element nil is taken from Adj(N), in which case no new nodes are added to the tree.",
        "Insertion of the new auxiliary tree, which from now on will be called adjunction, is done in such a way that the bottom half of the excised tree is connected to the foot of the auxiliary tree.",
        "The new nodes that are added to the tree as a result are recursively subjected to the same operation.",
        "This process ends in a complete derived tree once all nodes have been treated.",
        "An example of the derivation of a string is given in Figure 2.",
        "We start with initial tree al and treat Rai, for which we find Adj(Rai) = {b2, nil} .",
        "We opt to select nil, so that no new nodes are added.",
        "However in the figure we do split Rai in order to mark it as having been treated.",
        "Next we treat 4, and we opt to adjoin bl, taken from Adj(Nali) = {131, b3}.",
        "After another \"nil-adjunction\" at Rbi, we adjoin b2 at 4.",
        "Note that this is an obligatory adjunction, since Adj(N1 ) does not contain nil.",
        "Some more nil-adjunctions lead to a derived tree with yield acdb, which is therefore in the language described by the TAG."
      ]
    },
    {
      "heading": "Derivation of the string acdb.",
      "text": [
        "In order to avoid cluttering the picture with details, we have omitted the names of nodes at which (nil-)adjunction has been applied.",
        "We will reintroduce these names later.",
        "A further point worth mentioning is that here we treat the nodes in preorder: we traverse the tree top-down and left-to-right, and perform adjunction at each node the first time it is encountered.2 Any other strategy would lead to the same set of derived trees, but we chose preorder treatment since this matches the algorithm we present below.",
        "2 The tree that is being traversed grows in size during the traversal, contrary to traditional usage of the notion of \"traversal.\""
      ]
    },
    {
      "heading": "3. The Algorithm",
      "text": [
        "The input to the recognition algorithm is given by the string a1a2 ... an, where n is the length of the input.",
        "Integers i such that 0 < i < n will be used to indicate \"positions\" in the input string.",
        "Where we refer to the input between positions i and j we mean the string a1...a1.",
        "The algorithm operates by means of least fixed-point iteration: a table is gradually filled with elements derived from other elements, until no more new ones can be found.",
        "A number of \"steps\" indicate how table elements are to be derived from others.3 For the description of the steps we use a pseudoformal notation.",
        "Each step consists of a list of antecedents and a consequent.",
        "The antecedents are the conditions under which an incarnation of the step is executed.",
        "The consequent is a new table element that the step then adds to the parse table, unless of course it is already present.",
        "An antecedent may be a table element, in which case the condition that it represents is membership in the table.",
        "The main table elements, or items, are 6-tuples [h, N – > a • 0, i, j, fi, f2].",
        "Here, N is a node from some elementary tree t, and at3 is the list of the daughter nodes of N. The daughters in a together generate the input between positions i and j.",
        "The whole elementary tree generates input from position h onwards.",
        "Internal to the elementary tree, there may be adjunctions; in fact, the traversal of the tree (implying (nil-)adjunctions at all nodes) has been completed up to the end of a.",
        "Furthermore, tree t may itself be an auxiliary tree, in which case it is adjoined in another tree.",
        "Then, the foot may be dominated by one of the daughters in a, and the foot generates the part of the input between positions fi and f2.",
        "When the tree is not an auxiliary tree, or when the foot is not dominated by one of the daughters in a, then fi and f2 both have the dummy value \" – \".",
        "Whether t is an initial or an auxiliary tree, it is part of a derived tree of which everything to the left of the end of a generates the input between positions 0 and j.",
        "The traversal has been completed up to the end of a.",
        "See Figure 3 for an illustration of the meaning of items.",
        "We assume Rt and Ft are the root and foot of the elementary tree t to which N belongs; Ft may not exist, as explained above.",
        "R is the root of some initial tree.",
        "The solid lines indicate what has been established; the dashed lines indicate what is merely predicted.",
        "If Ft exists, the subtree below Ft indicates the lower half of the derived tree in which t was adjoined.",
        "The shaded areas labeled by I, II, and III have not yet been traversed.",
        "In particular it has not yet been established that these parts of the derived tree together generate the input between positions j and n. For technical reasons, we assume an additional node for each elementary tree t, which we denote by T. This node has only one daughter, viz, the actual root node R. We also assume an additional node for each auxiliary tree t, which we denote by I.",
        "This is the unique daughter of the actual foot node Ft; we set children(Ft) = 1.",
        "In summary, an item indicates how a part of an elementary tree contributes to the recognition of some derived tree.",
        "Figure 4 illustrates the items needed for recognition of the derived tree from the running example.",
        "We have simplified the notation of items by replacing the names of leaves (other than foot nodes) by their labels.",
        "3 A \"step\" is more accurately called an \"inference rule\" in the literature on deductive parsing (Shieber, Schabes, and Pereira 1995).",
        "For the sake of convenience we will apply the shorter term.",
        "1: [0, T • Rai, 0, 0, -] = 2: [0, Rai 4 • a N,h, 0, 0, -] = 3: [0, Rai a • Nall, 0, 1, -] [1, T • Rbi, 1, -] = 5: [1, Rbi -) • N1 Fb1, 1,1, 6: [1, T -÷ • Rb2, 1, 1, 7 = 7: [1, Rb2 --> • Fb2 d, 1,1, -, 1 = 8: [1, Fb2 -> • 1, 1,1, -] 9: [1, Aril), -> • c, 1, 1, -, -] 20 10: [1, Nb1,1 c •, 1, 2, -, -] 11: [1, Fb2 co, 1,2,1,21 12: [1, Rb2 -) Fb2 • d, 1, 2, 1, 2] = 16_09 13: [1, Rb2 Fb2 d 1, 3, 1, 2] = 14: [1, T Rb2 1,3,1,2] 17118 15a: [AY,i c 1, 3, -, -] =- 15: [1, Rbi ---> • Fbi, 1,3, -]= 16: [1, Fbi 4 • .1, 3,3, -, 1 17: [0, N,,la -> • b, 3, 3, -, -] 18: [0,N1 b •, 3, 4, -, 1 =- 19: [1, Fin -?",
        "1 to, 3,4,3, 4] 20: [1, Rbl Fbi •, 1,4,3,4] = 21: [1, T 1, 4,3, 4] 22a: [N1 b 1, 4, -, -] 22: [0, Rai 4 a Nall •, 0, 4, -, 1 = 4 23: [0, T Rai 41, 0, 4, -, -] =-",
        "The items needed for recognition of a derived tree.",
        "There is one special kind of item, with only five fields instead of six.",
        "This is used as an intermediate result in the adjunctor steps to be discussed in Section 3.5.",
        "The first scanner step."
      ]
    },
    {
      "heading": "3.1 Initializer",
      "text": [
        "The initializer step predicts initial trees t starting at position 0; see Figure 5.",
        "For the running example, item 1 in Figure 4 results from this step."
      ]
    },
    {
      "heading": "3.2 Scanner",
      "text": [
        "The scanner steps try to shift the dot rightward in case the next node in line is labeled with a terminal or €, which means the node is a leaf but not a foot.",
        "Figure 6 sketches the situation with respect to the input positions mentioned in the step.",
        "The depicted structure is part of at least one derived tree consistent with the input between positions 0 and j + 1, as explained earlier.",
        "[h, N – > a • MO, f2], (Scan 1) label(M) = ai±i [h, N – > aM • /3, i, j + 1, f2] [h, N a • MO, i, j, fi, f2], (Scan 2) label(M) = c [h, N – > aM• i13, i, j, fi, f21 For the running example in Figure 4, Scan 1 derives, among others, item 3 from item 2, and item 13 from item 12.",
        "The three predictor steps."
      ]
    },
    {
      "heading": "3.3 Predictor",
      "text": [
        "The first predictor step predicts a fresh occurrence of an auxiliary tree t, indicated in Figure 7.",
        "The second predicts a list of daughters y lower down in the tree, abstaining from adjunction at the current node M. The third predicts the lower half of a tree in which the present tree t was adjoined.",
        "For the running example, Pred 1 derives item 4 from item 3 and item 6 from item 5.",
        "Pred 2 derives, among others, item 5 from item 4.",
        "Pred 3 derives item 9 from items 8 and 5, and item 17 from items 16 and 3."
      ]
    },
    {
      "heading": "3.4 Completer",
      "text": [
        "The first completer step completes recognition of the lower half of a tree in which an auxiliary tree t was adjoined, and asserts recognition of the foot of t; see Figure 8.",
        "The second and third completer steps complete recognition of a list of daughter nodes and initiate recognition of the list of nodes 3 to the right of the mother node of -y.",
        "Two of the completer steps.",
        "[h, M – y., j, (Comp 2) [h, N •M3, i, j, – ], (Comp 3) M dominates foot of tree [h, N aM• k, f2] [h, j, k, – ], {h, N a • MO, i, j, f2} [h, N aM • 0, i, k, f2] See Figure 4 for use of these three steps in the running example."
      ]
    },
    {
      "heading": "3.5 Adjunctor",
      "text": [
        "The adjunctor steps perform the actual recognition of an adjunction of an auxiliary tree t in another tree at some node M. The first adjunctor step deals with the case in which the other tree is again adjoined in a third tree (the two darkly shaded areas in Figure 9) and M dominates the foot node.",
        "The second adjunctor step deals with the case in which the other tree is either an initial tree, or has its foot elsewhere, i.e., not dominated by M. The two respective cases of adjunction are realized by step Adj 0 plus step Adj 1, and by step Adj 0 plus step Adj 2.",
        "The auxiliary step Adj 0 introduces items of a somewhat different form than those considered up to now, viz. [M y j, k, The interpretation is suggested in Figure 10: at M a tree has been adjoined.",
        "The adjoined tree and the lower half of the tree that M occurs in together generate the input from j to k. The depicted structure is part of at least one derived tree consistent with the input between positions 0 and k. In the case in which M dominates a foot node, as suggested in the figure, fl and have a value other than \" – \".",
        "[h, N – > a • MO, i, j, – ] [h, N – aM• 0, i, k, [M j, k, – 1, [h, N – > a • MO, i, j, f;, [h, N aM• 0, it k, For the running example, Adj 0 derives the intermediate item 15a from items 14 and 10 and from this and item 5, Adj 2 derives item 15.",
        "Similarly, Adj 0 and Adj 2 together derive item 22.",
        "There are no applications of Adj 1 in this example.",
        "An alternative formulation of the adjunctor steps, without Adj 0, could be the following:",
        "An item [M -y., j, That this formulation is equivalent to the original combination of the three steps Adj 0, Adj 1, and Adj 2 can be argued in two stages.",
        "First, the h in [1/, M f2, f, .f.]",
        "or [h, *, fi, f2, – I occurring as second antecedent of Adj 1' or Adj 2', respectively, can be replaced by a fresh variable h' without affecting the correctness of the algorithm.",
        "In particular, the occurrence of h in the second antecedent of Adj 1' is redundant because of the inclusion of the fifth antecedent [h, Ft, --+ 1., A', f, f, g. Note that, conversely, this fifth antecedent is redundant with respect to the second antecedent, since existence of an item [h, M 'T f2, f, ffl, such that M dominates the foot of a tree t', implies the existence of an item [h, Ft, – > For further explanation, see Section 4.",
        "Second, the first three antecedents of Adj 1' and Adj 2' can be split off to obtain Adj 0, Adj 1, and Adj 2, justified by principles that are the basis for optimization of database queries (Ullman 1982).",
        "The rationale for the original formulation of the adjunction steps as opposed to the alternative formulation by Adj 1' and Adj 2' lies in the consideration of time complexity, as will be discussed in Section 5."
      ]
    },
    {
      "heading": "4. Properties",
      "text": [
        "The first claim we make about the algorithm pertains to its correctness as a recognizer: Claim After completion of the algorithm, the item [0, T Re 0, n, – ], for some t E is in the table if and only if the input is in the language described by the grammar.",
        "Note that the input is in the language if and only if the input is the yield of a derived tree.",
        "The idea behind the proof of the \"if\" part is that for any derived tree constructed from the grammar we can indicate a top-down and left-to-right tree traversal that is matched by corresponding items that are computed by steps of the algorithm.",
        "The tree traversal and the corresponding items are exemplified by the numbers 1, , 23 in Figure 4.",
        "For the \"only if\" part, we can show for each step separately that the invariant suggested in Figure 3 is preserved.",
        "To simplify the proof one can look only at the last five fields of items [h, N – > a • 0, i, j, fi, f2], h being irrelevant for the above claim.",
        "We do, however, need h for the proof of the following claim:"
      ]
    },
    {
      "heading": "Claim",
      "text": [
        "The algorithm satisfies the correct-prefix property, provided the grammar is reduced.",
        "A TAG is reduced if it does not contain any elementary trees that cannot be part of any derived tree.",
        "(One reason why an auxiliary tree might not be a part of any derived tree is that at some node it may have obligatory adjunction of itself, leading to \"infinite adjunction.\")",
        "Again, the proof relies on the invariant sketched in Figure 3.",
        "The invariant can be proven correct by verifying that if the items in the antecedents of some step satisfy the invariant, then so does the item in the consequent.",
        "A slight technical problem is caused by the obligatory adjunctions.",
        "The shaded areas in Figure 3, for example, represent not merely subtrees of elementary trees, but subtrees of a derived tree, which means that at each node either adjunction or nil-adjunction has been performed.",
        "This issue arises when we prove that Pred 1 preserves the invariant.",
        "Figure 11(a) represents the interpretation of the first antecedent of this step, [h, N – › a •MO, i, j, f; without loss of generality we only consider the case that fi = f2 = – .",
        "We may assume that below M some subtree exists, and that at M itself either adjunction with auxiliary tree t' or nil-adjunction has been applied; the figure shows the former case.",
        "In order to justify the item from the consequent, [j, T – > • Rt, j, j, – ], we construct the tree in Figure 11(b), which is the same as that in Figure 11(a), except that t' is replaced by auxiliary tree t, which has been traversed so that at all nodes either adjunction or nil-adjunction has been applied, including the nodes introduced recursively through adjunctions.",
        "Such a finite traversal must exist since the grammar is reduced.",
        "For the other steps we do not need the assumption that the grammar is reduced in order to prove that the invariant is preserved.",
        "For example, for Adj 1 we may reason as follows: The item [M j, k, f, .E1, the first antecedent, informs us of the existence of the structure in the shaded area of Figure 12(a).",
        "Similarly, the items [h, Ft, – 4 g and [h, N – › a • MO, i, j, – 1 provide the shaded areas of Figures 12(b) and 12(c).",
        "Note that in the case of the first or third item, we do not use all the information that the item provides.",
        "In particular, the information that the structures are part of a derived tree consistent with the input between positions 0 and k (in the case of (a)) or j (in the case of (c)) is not needed.",
        "Adj 1 preserves the invariant.",
        "The combined information from these three items ensures the existence of the derived tree depicted in Figure 12(d), which justifies the consequent of Adj 1, viz. [h, N aM • 0, i, k, The other steps can be proven to preserve the invariant in similar ways.",
        "Now the second claim follows: if the input up to position j has been read resulting in an item of the form [h, N – > ca • 0, i, j, fi, f21, then there is a string y such that al ... aly is in the language.",
        "This y is the concatenation of the yields of the subtrees labeled I, II, and III in Figure 3.",
        "The full proofs of the two claims above are straightforward but tedious.",
        "Furthermore, our new algorithm is related to many existing recognition algorithms for TAGs (Vijay-Shankar and Joshi 1985; Schabes and Joshi 1988; Lang 1988; Vijay-Shanker and Weir 1993; Schabes and Shieber 1994; Schabes 1994), some of which were published",
        "The steps presented in pseudoformal notation in Section 3 can easily be composed into an actual algorithm (Shieber, Schabes, and Pereira 1995).",
        "This can be done in such a way that the order of the time complexity is determined by the maximal number of different combinations of antecedents per step.",
        "If we restrict ourselves to the order of the time complexity expressed in the length of the input, this means that the complexity is given by 0(nP), where p is the largest number of input positions in any step.",
        "However, a better realization of the algorithm exists that allows us to exclude the variables for input positions that occur only once in a step, which we will call irrelevant input positions.",
        "This realization relies on the fact that an intermediate step may be applied that reduces an item I with q input positions to another item I' with q' < q input positions, omitting those that are irrelevant.",
        "That reduced item I' then takes the place of I in the antecedent of the actual step.",
        "This has a strong relationship to optimization of database queries (Ullman 1982).",
        "For example, there are nine variables in Comp 1, of which i,fi,f2,f;,./ are all irrelevant, since they occur only once in that step.",
        "An alternative formulation of this step is therefore given by the combination of the following three steps:",
        "The question marks indicate omitted input positions.",
        "Items containing question marks are distinguished from items without them, and from items with question marks in different fields.",
        "In Comp 1' there are now only four input positions left.",
        "The contribution of this step to the overall time complexity is therefore 0(n4) rather than 0(n9).",
        "The contribution of Omit 5-6 and Omit 3-5-6 to the time complexity is 0(n5).",
        "For the entire algorithm, the maximum number of relevant input positions per step is six.",
        "Thereby, the complexity of left-to-right recognition for TAGs under the constraint of the correct-prefix property is 0(n6).",
        "There are five steps that contain six relevant input positions, viz. Comp 2, Comp 3, Adj 0, Adj 1, and Adj 2.",
        "In terms of the size of the grammar G, the complexity is 0(1G12), since at most two elementary trees are simultaneously considered in a single step.",
        "Note that in some steps we address several parts of a single elementary tree, such as the two parts represented by the items [h, Fp g and [h, N a • MO, i, j, – ] in Adj 1.",
        "However, the second of these items uniquely identifies the second field of the first item, and therefore this pair of items amounts to only one factor of 1G1 in the time complexity.",
        "The complexity of 0(n6) that we have achieved depends on two ideas: first, the use of Adj 0, Adj 1, and Adj 2 instead of Adj 1' and Adj 2', and second, the exclusion of irrelevant variables above.",
        "Both are needed.",
        "The exclusion of irrelevant variables alone, in combination with Adj 1' and Adj 2', leads to a complexity of 0(n8).",
        "Without excluding irrelevant variables, we obtain a complexity of 0(n9) due to Comp 1, which uses nine input positions.",
        "The question arises where the exact difference lies between our algorithm and that of Schabes and Joshi (1988), and whether their algorithm could be improved to obtain the same time complexity as ours, using techniques similar to those discussed above.",
        "This question is difficult to answer precisely because of the significant difference between the types of items that are used in the respective algorithms.",
        "However, some general considerations suggest that the algorithm from Schabes and Joshi (1988) is inherently more expensive.",
        "First, the items from the new algorithm have five input positions, which implies that storage of the parse table requires a space complexity of 0(n8).",
        "The items from the older algorithm have effectively six input positions, which leads to a space complexity of 0(n6).",
        "Second, the \"Right Completor\" from Schabes and Joshi (1988), which roughly corresponds with our adjunctor steps, has nine relevant input positions.",
        "This step can be straightforwardly broken up into smaller steps that each have fewer relevant input positions, but it seems difficult to reduce the maximal number of positions to six.",
        "A final remark on Schabes and Joshi (1988) concerns the time complexity in terms of the size of the grammar that they report, viz. 0(1G12).",
        "This would be the same upper bound as in the case of the new algorithm.",
        "However, the correct complexity seems to be 0(1G13), since each item contains references to two nodes of the same elementary tree, and the combination in \"Right Completor\" of two items entails the simultaneous use of three distinct nodes from the grammar."
      ]
    },
    {
      "heading": "6. Further Research",
      "text": [
        "The algorithm in the present paper operates in a top-down manner, being very similar to Earley's algorithm (Earley 1970), which is emphasized by the use of the \"dotted\" items.",
        "As shown by Nederhof and Satta (1994), a family of parsing algorithms (top-down, left-corner, PLR, ELR, and LR parsing [Nederhof 1994]) can be carried over to head-driven parsing.",
        "An obvious question is whether such parsing techniques can also be used to produce variants of left-to-right parsing for TAGs.",
        "Thus, one may conjecture, for example, the existence of an LR-like parsing algorithm for arbitrary TAGs that operates in 0(n6) and that has the correct-prefix property.",
        "Note that LR-like parsing algorithms were proposed by Schabes and Vijay-Shanker (1990) and Nederhof (1998).",
        "However, for these algorithms the correct-prefix property is not satisfied.",
        "Development of advanced parsing algorithms for TAGs with the correct-prefix property is not at all straightforward.",
        "In the case of context-free grammars, the additional benefit of LR parsing, in comparison to, for example, top-down parsing, lies in",
        "Nederhof Correct-Prefix Property for TAGs the ability to process multiple grammar rules simultaneously.",
        "If this is to be carried over to TAGs, then multiple elementary trees must be handled simultaneously.",
        "This is difficult to combine with the mechanism we used to satisfy the correct-prefix property, which relies on filtering out hypotheses with respect to \"left context.\"",
        "Filtering out such hypotheses requires detailed investigation of that left context, which, however, precludes treating multiple elementary trees simultaneously.",
        "An exception may be the case when a TAG contains many, almost identical, elementary trees.",
        "It is not clear whether this case occurs often in practice.",
        "Therefore, further research is needed not only to precisely define advanced parsing algorithms for TAGs with the correct-prefix property, but also to determine whether there are any benefits for practical grammars."
      ]
    },
    {
      "heading": "Acknowledgments",
      "text": [
        "Most of the presented research was carried out within the framework of the Priority Programme Language and Speech Technology (TST) while the author was employed at the University of Groningen.",
        "The TST-Programme is sponsored by NWO (Dutch Organization for Scientific Research).",
        "An error in a previous version of this paper was found and corrected with the help of Giorgio Satta."
      ]
    }
  ]
}
