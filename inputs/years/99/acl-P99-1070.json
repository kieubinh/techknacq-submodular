{
  "info": {
    "authors": [
      "Steven Abney",
      "David McAllester",
      "Fernando Pereira"
    ],
    "book": "Annual Meeting of the Association for Computational Linguistics",
    "id": "acl-P99-1070",
    "title": "Relating Probabilistic Grammars and Automata",
    "url": "https://aclweb.org/anthology/P99-1070",
    "year": 1999
  },
  "references": [
    "acl-H92-1026",
    "acl-J93-1002",
    "acl-P98-1035",
    "acl-W97-0301"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "Both probabilistic context-free grammars (PCFGs) and shift-reduce probabilistic push-down automata (PPDAs) have been used for language modeling and maximum likelihood parsing.",
        "We investigate the precise relationship between these two formalisms, showing that, while they define the same classes of probabilistic languages, they appear to impose different inductive biases."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "Current work in stochastic language models and maximum likelihood parsers falls into two main approaches.",
        "The first approach (Collins, 1998; Charniak, 1997) uses directly the definition of stochastic grammar, defining the probability of a parse tree as the probability that a certain top-down stochastic generative process produces that tree.",
        "The second approach (Briscoe and Carroll, 1993; Black et al., 1992; Magerman, 1994; Ratnaparkhi, 1997; Chelba and Jelinek, 1998) defines the probability of a parse tree as the probability that a certain shift-reduce stochastic parsing automaton outputs that tree.",
        "These two approaches correspond to the classical notions of context-free grammars and nondeterministic pushdown automata respectively.",
        "It is well known that these two classical formalisms define the same language class.",
        "In this paper, we show that probabilistic context-free grammars (PCFGs) and probabilistic pushdown automata (PPDAs) define the same class of distributions on strings, thus extending the classical result to the stochastic case.",
        "We also touch on the perhaps more interesting question of whether PCFGs and shift-reduce parsing models have the same inductive bias with respect to the automatic learning of model parameters from data.",
        "Though we cannot provide a definitive answer, the constructions we use to answer the equivalence question involve blow-ups in the number of parameters in both directions, suggesting that the two models impose different inductive biases.",
        "We are concerned here with probabilistic shift-reduce parsing models that define probability distributions over word sequences, and in particular the model of Chelba and Jelinek (1998).",
        "Most other probabilistic shift-reduce parsing models (Briscoe and Carroll, 1993; Black et al., 1992; Magerman, 1994; Ratnaparkhi, 1997) give only the conditional probability of a parse tree given a word sequence.",
        "Collins (1998) has argued that those models fail to capture the appropriate dependency relations of natural language.",
        "Furthermore, they are not directly comparable to PCFGs, which define probability distributions over word sequences.",
        "To make the discussion somewhat more concrete, we now present a simplified version of the Chelba-Jelinek model.",
        "Consider the following sentence: The small woman gave the fat man her sandwich.",
        "The model under discussion is based on shift-reduce PPDAs.",
        "In such a model, shift transitions generate the next word w and its associated syntactic category X and push the pair (X, w) on the stack.",
        "Each shift transition is followed by zero or more reduce transitions that combine topmost stack entries.",
        "For example the stack elements (Det, the), (Adj, small), (N, woman) can be combined to form the single entry (NP, woman) representing the phrase \"the small woman\".",
        "In general each stack entry consists of a syntactic category and a head word.",
        "After generating the prefix \"The small woman gave the fat man\" the stack might contain the sequence (NP, woman)(V, gave)(NP, man).",
        "The Chelba-Jelinek model then executes a shift tran",
        "(S, admired) 4 (NP, Mary) (VP, admired) (VP, admired) --+ (V, admired)(NP, oak) (NP, oak) 4 (Det, the)(N, oak) (N, oak) --+ (Adj, towering)(N, oak) (N, oak) 4 (Adj, strong)(N, oak) (N, oak) 4 (Adj, old)(N, oak) (NP, Mary) --* Mary (N, oak) --.",
        "oak",
        "sition by generating the next word.",
        "This is done in a manner similar to that of a trigram model except that, rather than generate the next word based on the two preceding words, it generates the next word based on the two topmost stack entries.",
        "In this example the Chelba-Jelinek model generates the word \"her\" from (V, gave)(NP, man) while a classical trigram model would generate \"her\" from \"fat man\".",
        "We now contrast Chelba-Jelinek style models with lexicalized PCFG models.",
        "A PCFG is a context-free grammar in which each production is associated with a weight in the interval [0, 1] and such that the weights of the productions from any given nonterminal sum to 1.",
        "For instance, the sentence Mary admired the towering strong old oak can be derived using a lexicalized PCFG based on the productions in Figure 1.",
        "Production probabilities in the PCFG would reflect the likelihood that a phrase headed by a certain word can be expanded in a certain way.",
        "Since it can be difficult to estimate fully these likelihoods, we might restrict ourselves to models based on bilexical relationships (Eisner, 1997), those between pairs of words.",
        "The simplest bilexical relationship is a bigram statistic, the fraction of times that \"oak\" follows \"old\".",
        "Bilexical relationships for a PCFG include that between the headword of a phrase and the headword of a non-head immediate constituent, for instance.",
        "In particular, the generation of the above sentence using a PCFG based on Figure 1 would exploit a bilexical statistic between \"towering\" and \"oak\" contained in the weight of the fifth production.",
        "This bilexical relationship between \"towering\" and \"oak\" would not be exploited in either a trigram model or in a Chelba-Jelinek style model.",
        "In a Chelba-Jelinek style model one must generate \"towering\" before generating \"oak\" and then \"oak\" must be generated from (Adj, strong), (Adj , old).",
        "In this example the Chelba-Jelinek model behaves more like a classical trigram model than like a PCFG model.",
        "This contrast between PPDAs and PCFGs is formalized in theorem 1, which exhibits a PCFG for which no stochastic parameterization of the corresponding shift-reduce parser yields the same probability distribution over strings.",
        "That is, the standard shift-reduce translation from CFGs to PDAs cannot be generalized to the stochastic case.",
        "We give two ways of getting around the above difficulty.",
        "The first is to construct a top-down PPDA that mimics directly the process of generating a PCFG derivation from the start symbol by repeatedly replacing the leftmost non-terminal in a sentential form by the right-hand side of one of its rules.",
        "Theorem 2 states that any PCFG can be translated into a top-down PPDA.",
        "Conversely, theorem 3 states that any PPDA can be translated to a PCFG, not just those that are top-down PPDAs for some PCFG.",
        "Hence PCFGs and general PPDAs define the same class of stochastic languages.",
        "Unfortunately, top-down PPDAs do not allow the simple left-to-right processing that motivates shift-reduce PPDAs.",
        "A second way around the difficulty formalized in theorem 1 is to encode additional information about the derivation context with richer stack and state alphabets.",
        "Theorem 7 shows that it is thus possible to translate an arbitrary PCFG to a shift-reduce PPDA .",
        "The construction requires a fair amount of machinery including proofs that any PCFG can be put in Chomsky normal form, that weights can be renormalized to ensure that the result of grammar transformations can be made into PCFGs, that any PCFG can be put in Greibach normal form, and, finally, that a Greibach normal form PCFG can be converted to a shift-reduce PPDA.",
        "The construction also involves a blow-up in the size of the shift-reduce parsing automaton.",
        "This suggests that some languages that are concisely describable by a PCFG are not concisely describable by a shift-reduce PPDA, hence that the class of PCFGs and the class of shift-reduce PPDAs impose different inductive biases on the",
        "CF languages.",
        "In the conversion from shift-reduce PPDAs to PCFGs, there is also a blow-up, if a less dramatic one, leaving open the possibility that the biases are incomparable, and that neither formalism is inherently more concise.",
        "Our main conclusion is then that, while the generative and shift-reduce parsing approaches are weakly equivalent, they impose different inductive biases."
      ]
    },
    {
      "heading": "2 Probabilistic and Weighted Grammars",
      "text": [
        "For the remainder of the paper, we fix a terminal alphabet E and a nonterminal alphabet N, to which we may add auxiliary symbols as needed.",
        "A weighted context-free grammar (WCFG) consists of a distinguished start symbol S E N plus a finite set of weighted productions of the form X 4 a, (alternately, u : X 4 a), where X E N,aE (NU)* and the weight u is a non-negative real number.",
        "A probabilistic context-free grammar (PCFG) is a WCFG such that for all X, Eu:x_+au = 1.",
        "Since weights are non-negative, this also implies that u < 1 for any individual production.",
        "A PCFG defines a stochastic process with sentential forms as states, and leftmost rewriting steps as transitions.",
        "In the more general case of WCFGs, we can no longer speak of stochastic processes; but weighted parse trees and sets of weighted parse trees are still well-defined notions.",
        "We define a parse tree to be a tree whose nodes are labeled with productions.",
        "Suppose node e is labeled X 4 a[Yi, ,17], where we write a[Yi, , Yn] for a string whose nonterminal symbols are Y1, , Y.",
        "We say that e's nonterminal label is X and its weight is u.",
        "The subtree rooted at e is said to be rooted in X. e is well-labeled just in case it has n children, whose nonterminal labels are , Y,,, respectively.",
        "Note that a terminal node is well-labeled only if a is empty or consists exclusively of terminal symbols.",
        "We say a WCFG G admits a tree d just in case all nodes of d are well-labeled, and all labels are productions of G. Note that no requirement is placed on the nonterminal of the root node of d; in particular, it need not be S. We define the weight of a tree d, denoted WG(d), or W(d) if G is clear from context, to be the product of weights of its nodes.",
        "The depth r(d) of d is the length of the longest path from root to leaf in d. The root production r(d) is the label of the root node.",
        "The root symbol p(d) is the left-hand side of 7r(d).",
        "The yield c(d) of the tree d is defined in the standard way as the string of terminal symbols \"parsed\" by the tree.",
        "It is convenient to treat the functions 7r, p, a, and 7 as random variables over trees.",
        "We write, for example, {p = X} as an abbreviation for fdlp(d) = Xl; and WG(p = X) represents the sum of weights of such trees.",
        "If the sum diverges, we set WG(p = X) = oo.",
        "We call 1IX liG W G(p = X) the norm of X, and 11Gil = IISG the norm of the grammar.",
        "A WCFG G is called convergent if < oo.",
        "If G is a PCFG then IIGII WG(p = 5) < 1, that is, all PCFGs are convergent.",
        "A PCFG G is called consistent if IIGII = 1.",
        "A sufficient condition for the consistency of a PCFG is given in (Booth and Thompson, 1973).",
        "If 4) and kIf are two sets of parse trees such that 0 < WG(T) < oo we define PG (CT) to be WG(nklf) W G (41) For any terminal string y and grammar G such that 0 < WG(p = 5) < oo we define PG(y) to be PG(a = YIP = S)."
      ]
    },
    {
      "heading": "3 Stochastic Push-Down Automata",
      "text": [
        "We use a somewhat nonstandard definition of pushdown automaton for convenience, but all our results hold for a variety of essentially equivalent definitions.",
        "In addition to the terminal alphabet E, we will use sets of stack symbols and states as needed.",
        "A weighted push-down automaton (WPDA) consists of a distinguished start state qo, a distinguished start stack symbol Xo and a finite set of transitions of the following form where p and q are states, a E EU{ e}, X and Z1, Zi, are stack symbols, and w is a nonnegative real weight: x , p a4v • z. , A WPDA is a probabilistic push-down automaton (PPDA) if all weights are in the interval [0, 1] and for each pair of a stack symbol X and a state q the sum of the weights of all transitions of the form X , p Z1 equals 1.",
        "A machine configuration is a pair (0, q) of a finite sequence 13 of stack symbols (a stack) and a machine state q.",
        "A machine configuration is called halting if the stack is empty.",
        "If M is a PPDA containing the transition X ,p c!4v Z1 then any configuration of the form (/X, p) has",
        "probability w of being transformed into the configuration (0Z1 Zn, q) where this transformation has the effect of \"outputting\" a if a 0 €.",
        "A complete execution of M is a sequence of transitions between configurations starting in the initial configuration (X0, q0) and ending in a configuration with an empty stack.",
        "The probability of a complete execution is the product of the probabilities of the individual transitions between configurations in that execution.",
        "For any PPDA M and y E E* we define Pm(y) to be the sum of the probabilities of all complete executions outputting y.",
        "A PPDA M is called consistent if EyEE.",
        "Pm(y) = 1.",
        "We first show that the well known shift-reduce conversion of CFGs into PDAs can not be made to handle the stochastic case.",
        "Given a (non-probabilistic) CFG G in Chomsky normal form we define a (non-probabilistic) shift-reduce FDA SR(G) as follows.",
        "The stack symbols of SR(G) are taken to be nonterminals of G plus the special symbols T and I.",
        "The states of SR(G) are in one-to-one correspondence with the stack symbols and we will abuse notation by using the same symbols for both states and stack symbols.",
        "The initial stack symbol is I and the initial state is (the state corresponding to) _L.",
        "For each production of the form X – > a in G the PDA SR(G) contains all shift transitions of the following form Y, Z YZ, X The PDA SR(G) also contains the following termination transitions where S is the start symbol of G."
      ]
    },
    {
      "heading": "1, S T",
      "text": [
        "Note that if G consists entirely of productions of the form S 4 a these transitions suffice.",
        "More generally, for each production of the form X 4 Y Z in G the PDA SR(G) contains the following reduce transitions.",
        "All reachable configurations are in one of the following four forms where the first is the initial configuration, the second is a template for all intermediate configurations with a E N*, and the last two are terminal configurations.",
        "(I, I), (11a, X), (1,T), (E, T) Furthermore, a configuration of the form (11a, X) can be reached after outputting y if and only if aX 4 y.",
        "In particular, the machine can reach configuration (11, S) outputting y if and only if S 4 y.",
        "So the machine SR(G) generates the same language as G. We now show that the shift-reduce translation of CFGs into PDAs does not generalize to the stochastic case.",
        "For any PCFG G we define the underlying CFG to be the result of erasing all weights from the productions of G. Theorem 1 There exists a consistent PCFG G in Chomsky normal form with underlying CFG G' such that no consistent weighting M of the PDA SR(G') has the property that Pm(y) = PG(y) for all y E E*.",
        "To prove the theorem take G to be the following grammar.",
        "Note that G generates acca and bccb each with probability 1.",
        "Let M be a consistent PPDA whose transitions consist of some weighting of the transitions of SR(G').",
        "We will assume that Pm(y) PG(y) for all y E E* and derive a contradiction.",
        "Call the nonterminals A, B, and C preterminals.",
        "Note that the only reduce transitions in SR(G') combining two preterminals are C, A 4, X2 and C, B Y2.",
        "Hence the only machine configuration reachable after outputting the sequence acc is (IIAC, C).",
        "If Pm(acca) and Pm(accb) 0 then the machine in configuration (11AC, C) must deterministically move to configuration (11ACC, A).",
        "But this implies that configuration (11BC , C) also deterministically moves to configuration (11BCC, A) so we have Pm(bccb) 0 which violates the assumptions about M..",
        "Although the standard shift-reduce translation of CFGs into PDAs fails to generalize to the stochastic case, the standard top-down conversion easily generalizes.",
        "A top-down PPDA is one in which only € transitions can cause the stack to grow and transitions which output a word must pop the stack.",
        "Theorem 2 Any string distribution definable by a consistent PCFG is also definable by a top-down PPDA.",
        "Theorem 4 For any consistent PCFG G with PG(E) < 1 there exists a consistent PCFG C(G) in Chomsky normal form such that, for all y E Here we consider only PCFGs in Chomsky normal form – the generalization to arbitrary PCFGs is straightforward.",
        "Any PCFG in Chomsky normal form can be translated to a top-down PPDA by translating each weighted production of the form X 4' Y Z to the set of expansion moves of the form W, X 641 WZ, Y and each production of the form X 4' a to the set of pop moves of the form Z, X a-4°.",
        ", Z.",
        "We also have the following converse of the above theorem.",
        "Theorem 3 Any string distribution definable by a consistent PPDA is definable by a PCFG.",
        "The proof, omitted here, uses a weighted version of the standard translation of a PDA into a CFG followed by a renormalization step using lemma 5.",
        "We note that it does in general involve an increase in the number of parameters in the derived PCFG.",
        "In this paper we are primarily interested in shift-reduce PPDAs which we now define formally.",
        "In a shift-reduce PPDA there is a one-to-one correspondence between states and stack symbols and every transition has one of the following two forms.",
        "Y, Z c4u YZ, X a Transitions of the first type are called shift transitions and transitions of the second type are called reduce transitions.",
        "Shift transitions output a terminal symbol and push a single symbol on the stack.",
        "Reduce transitions are &transitions that combine two stack symbols.",
        "The above theorems leave open the question of whether shift-reduce PPDAs can express arbitrary context-free distributions.",
        "Our main theorem is that they can.",
        "To prove this some additional machinery is needed."
      ]
    },
    {
      "heading": "4 Chomsky Normal Form",
      "text": [
        "A PCFG is in Chomsky normal form (CNF) if all productions are either of the form X a, aEorX4Y1Y2,Yi,Y2EN.",
        "Our next theorem states, in essence, that any PCFG can be converted to Chomsky normal form.",
        "To prove the theorem, note first that, without loss of generality, we can assume that all productions in G are of one of the forms X -u-+ Y Z , X 4 Y, X 4 a, or X e. More specifically, any production not in one of these forms must have the form X 4 ai3 where a and P are nonempty strings.",
        "Such a production can be replaced by X 4 AB, A 4 a, and B where A and B are fresh nonterminal symbols.",
        "By repeatedly applying this binarization transformation we get a grammar in the desired form defining the same distribution on strings.",
        "We now assume that all productions of G are in one of the above four forms.",
        "This implies that a node in a G-derivation has at most two children.",
        "A node with two children will be called a branching node.",
        "Branching nodes must be labeled with a production of the form X 4 YZ.",
        "Because G can contain productions of the form X 4 e there may be arbitrarily large G-derivations with empty yield.",
        "Even G-derivations with nonempty yield may contain arbitrarily large subtrees with empty yield.",
        "A branching node in the G-derivation will be called ephemeral if either of its children has empty yield.",
        "Any G-derivation d with Icr(d)I > 2 must contain a unique shallowest non-ephemeral branching node, labeled by some production X 4 YZ.",
        "In this case, define P(d) = YZ.",
        "Otherwise (Icr(d)1 < 2), let i3(d) =- 0-(d).",
        "We say that a nonterminal X is nontrivial in the grammar G if P0(a0elp.X)> 0.",
        "We now define the grammar G' to consist of all productions of the following form where X, Y, and Z are nontrivial nonterminals of G and a is a terminal symbol appearing in G.",
        "We leave it to the reader to verify that G' has the property stated in theorem 4.",
        "• The above proof of theorem 4 is non-constructive in that it does not provide any",
        "difficult to compute probabilities of the form PG( 4)I p = X, T < t + 1) from probabilities of the form PG(43 I p = X, T < and PG( 4)I p= X) is the limit as t goes to infinity of PG(4.",
        "I p = X, 7 < t).",
        "We omit the details here."
      ]
    },
    {
      "heading": "5 Renormalization",
      "text": [
        "A nonterminal X is called reachable in a grammar G if either X is S or there is some (recursively) reachable nonterminal Y such that G contains a production of the form Y 4 a where a contains X.",
        "A nonterminal X is nonempty in G if G contains X 4 a where u > 0 and a contains only terminal symbols, or G contains X 4 a[Yi, , Yk] where u > 0 and each Yi is (recursively) nonempty.",
        "A WCFG G is proper if every nonterminal is both reachable and nonempty.",
        "It is possible to efficiently compute the set of reachable and nonempty nonterminals in any grammar.",
        "Furthermore, the subset of productions involving only nonterminals that are both reachable and nonempty defines the same weight distribution on strings.",
        "So without loss of generality we need only consider proper WCFGs.",
        "A reweighting of G is any WCFG derived from G by changing the weights of the productions of G. Lemma 5 For any convergent proper WCFG G, there exists a reweighting G' of G such that G' is a consistent PCFG such that for all terminal strings y we have PGI(y) = PG(y).",
        "Proof: Since G is convergent, and every nonterminal X is reachable, we must have IIXIIG < oo.",
        "We now renormalize all the productions from X as follows.",
        "For each production X 4 a[Yi, Yn] we replace u by",
        "To show that G' is a PCFG we must show that the sum of the weights of all productions",
        "For any parse tree d admitted by G let d' be the corresponding tree admitted by G', that is, the result of reweighting the productions in d. One can show by induction on the depth of parse trees that if"
      ]
    },
    {
      "heading": "6 Greibach Normal Form",
      "text": [
        "A PCFG is in Greibach normal form (GNF) if every production X 4 a satisfies a E EN*.",
        "The following holds: Theorem 6 For any consistent PCFG G in CNF there exists a consistent PCFG G' in GNF such that Po(y) = PG(y) for y E E*.",
        "Proof: A left corner G-derivation from X to Y is a G-derivation from X where the leftmost leaf, rather than being labeled with a production, is simply labeled with the nonterminal Y.",
        "For example, if G contains the productions X '4 YZ and Z a then we can construct a left corner G-derivation from X to Y by building a tree with a root labeled by X YZ, a left child labeled with Y and a right child labeled with Zti4 a.",
        "The weight of a left corner G-derivation is the product of the productions on the nodes.",
        "A tree consisting of a single node labeled with X is a left corner G-derivation from X to X.",
        "For each pair of nonterminals X, Y in G we introduce a new nonterminal symbol X/Y.",
        "The H-derivations from X/Y will be in one to one correspondence with the left-corner G-derivations from X to Y.",
        "For each production in G of the form X 4 a we include the following in H where S is the start symbol of G: S 4 a S/X .",
        "We also include in H all productions of the following form where X is any nonterminal in G:"
      ]
    },
    {
      "heading": "XIX 1).",
      "text": [
        "If G consists only of productions of the form S 4 a these productions suffice.",
        "More generally, for each nonterminal X/Y of H and each pair of productions U 114 YZ, W 14 a we include in H the following:",
        "Because of the productions x/x 4 f, WH(p = XI X) > 1, and H is not quite in GNF.",
        "These two issues will be addressed momentarily.",
        "Standard arguments can be used to show that the H-derivations from X/Y are in one-to-one correspondence with the left corner derivations from from X to Y.",
        "Furthermore, this one-to-one correspondence preserves weight – if d is the H-derivation rooted at X/Y corresponding to the left corner G-derivation from X to Y then WH(d) is the product of the weights of the productions in the G-derivation.",
        "The weight-preserving one-to-one correspondence between left-corner G-derivations from X to Y and H-derivations from X/Y yields the following.",
        "Theorem 5 implies that we can reweight the proper subset of H (the reachable and nonempty productions of H) so as to construct a consistent PCFG J with Pj(ce) = P(a).",
        "To prove theorem 6 it now suffices to show that the productions of the form X/X 4 c can be eliminated from the PCFG J.",
        "Indeed, we can eliminate the E productions from J in a manner similar to that used in the proof of theorem 4.",
        "A node in an J-derivation is ephemeral if it is labeled X 4 E for some X.",
        "We now define a function 7 on J-derivations d as follows.",
        "If the root of d is labeled with X 4 aYZ then we have four sub-cases.",
        "If neither child of the root is ephemeral then 7(d) is the string aYZ.",
        "If only the left child is ephemeral then -y(d) is aZ.",
        "If only the right child is ephemeral then -y(d) is aY and if both children are ephemeral then 7(d) is a. Analogously, if the root is labeled with X 4 aY, then 7(d) is aY if the child is not ephemeral and a otherwise.",
        "If the root is labeled with X 4 E then 7(d) is c. A nonterminal X in K will be called trivial if Pj(7 = I p = 1.",
        "We now define the final grammar G' to consist of all productions of the following form where X, Y, and Z are nontrivial nonterminals appearing in J and a is a terminal symbol appearing in J.",
        "As in section 4, for every nontrivial nonterminal X in K and terminal string a we have PK (cr = alP=X)=PJ(0.=a1P=X,(706).In particular, since Pj(c) = PG(E) = 0, we have the following:",
        "The PCFG K is the desired PCFG in Greibach normal form.",
        "• The construction in this proof is essentially the standard left-corner transformation (Rosenkrantz and II, 1970), as extended by Sa-lomaa and Soittola (1978, theorem 2.3) to algebraic formal power series."
      ]
    },
    {
      "heading": "7 The Main Theorem",
      "text": [
        "We can now prove our main theorem.",
        "Let G be an arbitrary consistent PCFG.",
        "By theorems 4 and 6, we can assume that G consists of productions of the form S 4 E and",
        "S 1-=*w S' plus productions in Greibach normal form not mentioning S. We can then replace the rule S 14u S' with all rules of the form s 4 a where G contains S' a.",
        "We now assume without loss of generality that G consists of a single production of the form S e plus productions in Greibach normal form not mentioning S on the right hand side.",
        "The stack symbols of M are of the form W, where a E N* is a proper suffix of the right hand side of some production in G. For example, if G contains the production X 4 aYZ then the symbols of M include Wyz, Wy, and W. The initial state is Ws and the initial stack symbol is I.",
        "We have assumed that G contains a unique production of the form S 4 E. We include the following transition in M corresponding to this production.",
        "-I-, Ws €4v, T Then, for each rule of the form X 4 a0 in G and each symbol of the form Wx„ we include the following in M:",
        "We also include all \"post-processing\" rules of the following form: Wxa147€",
        "Note that all reduction transitions are deterministic with the single exception of the first rule listed above.",
        "The nondeterministic shift transitions of M are in one-to-one correspondence with the productions of G. This yields the property that Pm (y) = PG(Y)• •"
      ]
    },
    {
      "heading": "8 Conclusions",
      "text": [
        "The relationship between PCFGs and PPDAs is subtler than a direct application of the classical constructions relating general CFGs and PDAs.",
        "Although PCFGs can be concisely translated into top-down PPDAs, we conjecture that there is no concise translation of PCFGs into shift-reduce PPDAs.",
        "Conversely, there appears to be no concise translation of shift-reduce PPDAs to PCFGs.",
        "Our main result is that PCFGs and shift-reduce PPDAs are intertranslatable, hence weakly equivalent.",
        "However, the non-conciseness of our translations is consistent with the view that stochastic top-down generation models are significantly different from shift-reduce stochastic parsing models, affecting the ability to learn a model from examples."
      ]
    }
  ]
}
